{"title":"124、vue2利用require.context批量引入实现自动注册","uid":"38426d0770dc54cb711a330fd63320df","slug":"124-vue","date":"2023-03-12T12:00:00.000Z","updated":"2023-08-15T12:45:03.000Z","comments":true,"path":"api/articles/124-vue.json","keywords":null,"cover":null,"content":"<p>使用 require.context 进行批量导入，不仅可以减少代码， 后期添加新的文件不用在挨个引入。<br>如果你恰好使用了 webpack (或在内部使用了 webpack 的 Vue CLI 3+)，那么就可以使用 require.context 只全局注册这些非常通用的基础组件。<code>注意：</code>全局注册的行为必须在根 Vue 实例 (通过 new Vue) 创建之前发生。</p>\n<span id=\"more\"></span>\n\n<p>使用 require.context 进行批量导入，不仅可以减少代码， 后期添加新的文件不用在挨个引入，引入后回调一个方法 ， 该方法需传递一个文件的路径参数，得到相应的文件模块，其中有 keys 和 resovle 函数 keys 它返回一个数组，数组中所有子集都可以被 require。<br>context 所返回的 webpackContext 函数处理 resolve 它返回 request 被解析后得到的模块 id，其中 webpack 还有闭包 map 函数 , 该函数接受一个函数参数， 函数中默认参数包含了所有匹配的子模块的路径。</p>\n<p>vue2 官方文档中，在应用入口文件 (比如 src&#x2F;main.js) 中全局导入基础组件的示例代码：</p>\n<div class=\"language-js\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">js</span><pre class=\"shiki material-theme-palenight\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #89DDFF; font-style: italic\">import</span><span style=\"color: #BABED8\"> Vue </span><span style=\"color: #89DDFF; font-style: italic\">from</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #C3E88D\">vue</span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #89DDFF\">;</span></span>\n<span class=\"line\"><span style=\"color: #89DDFF; font-style: italic\">import</span><span style=\"color: #BABED8\"> upperFirst </span><span style=\"color: #89DDFF; font-style: italic\">from</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #C3E88D\">lodash/upperFirst</span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #89DDFF\">;</span></span>\n<span class=\"line\"><span style=\"color: #89DDFF; font-style: italic\">import</span><span style=\"color: #BABED8\"> camelCase </span><span style=\"color: #89DDFF; font-style: italic\">from</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #C3E88D\">lodash/camelCase</span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #89DDFF\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #C792EA\">const</span><span style=\"color: #BABED8\"> requireComponent </span><span style=\"color: #89DDFF\">=</span><span style=\"color: #BABED8\"> require</span><span style=\"color: #89DDFF\">.</span><span style=\"color: #82AAFF\">context</span><span style=\"color: #BABED8\">(</span></span>\n<span class=\"line\"><span style=\"color: #89DDFF\">  </span><span style=\"color: #676E95; font-style: italic\">// 其组件目录的相对路径</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">  </span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #C3E88D\">./components</span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #89DDFF\">,</span></span>\n<span class=\"line\"><span style=\"color: #89DDFF\">  </span><span style=\"color: #676E95; font-style: italic\">// 是否查询其子目录</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">  </span><span style=\"color: #FF9CAC\">false</span><span style=\"color: #89DDFF\">,</span></span>\n<span class=\"line\"><span style=\"color: #89DDFF\">  </span><span style=\"color: #676E95; font-style: italic\">// 匹配基础组件文件名的正则表达式</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">  </span><span style=\"color: #89DDFF\">/</span><span style=\"color: #C3E88D\">Base</span><span style=\"color: #89DDFF\">[</span><span style=\"color: #C3E88D\">A-Z</span><span style=\"color: #89DDFF\">]</span><span style=\"color: #C3E88D\">\\w</span><span style=\"color: #89DDFF\">+</span><span style=\"color: #BABED8\">\\.</span><span style=\"color: #89DDFF\">(</span><span style=\"color: #C3E88D\">vue</span><span style=\"color: #89DDFF\">|</span><span style=\"color: #C3E88D\">js</span><span style=\"color: #89DDFF\">)</span><span style=\"color: #89DDFF; font-style: italic\">$</span><span style=\"color: #89DDFF\">/</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">)</span><span style=\"color: #89DDFF\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #BABED8\">requireComponent</span><span style=\"color: #89DDFF\">.</span><span style=\"color: #82AAFF\">keys</span><span style=\"color: #BABED8\">()</span><span style=\"color: #89DDFF\">.</span><span style=\"color: #82AAFF\">forEach</span><span style=\"color: #BABED8\">(</span><span style=\"color: #89DDFF\">(</span><span style=\"color: #BABED8; font-style: italic\">fileName</span><span style=\"color: #89DDFF\">)</span><span style=\"color: #BABED8\"> </span><span style=\"color: #C792EA\">=&gt;</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">&#123;</span></span>\n<span class=\"line\"><span style=\"color: #89DDFF\">  </span><span style=\"color: #676E95; font-style: italic\">// 获取组件配置</span></span>\n<span class=\"line\"><span style=\"color: #F07178\">  </span><span style=\"color: #C792EA\">const</span><span style=\"color: #F07178\"> </span><span style=\"color: #BABED8\">componentConfig</span><span style=\"color: #F07178\"> </span><span style=\"color: #89DDFF\">=</span><span style=\"color: #F07178\"> </span><span style=\"color: #82AAFF\">requireComponent</span><span style=\"color: #F07178\">(</span><span style=\"color: #BABED8\">fileName</span><span style=\"color: #F07178\">)</span><span style=\"color: #89DDFF\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #89DDFF\">  </span><span style=\"color: #676E95; font-style: italic\">// 获取组件的 PascalCase 命名</span></span>\n<span class=\"line\"><span style=\"color: #F07178\">  </span><span style=\"color: #C792EA\">const</span><span style=\"color: #F07178\"> </span><span style=\"color: #BABED8\">componentName</span><span style=\"color: #F07178\"> </span><span style=\"color: #89DDFF\">=</span><span style=\"color: #F07178\"> </span><span style=\"color: #82AAFF\">upperFirst</span><span style=\"color: #F07178\">(</span></span>\n<span class=\"line\"><span style=\"color: #F07178\">    </span><span style=\"color: #82AAFF\">camelCase</span><span style=\"color: #F07178\">(</span></span>\n<span class=\"line\"><span style=\"color: #89DDFF\">      </span><span style=\"color: #676E95; font-style: italic\">// 获取和目录深度无关的文件名</span></span>\n<span class=\"line\"><span style=\"color: #F07178\">      </span><span style=\"color: #BABED8\">fileName</span></span>\n<span class=\"line\"><span style=\"color: #F07178\">        </span><span style=\"color: #89DDFF\">.</span><span style=\"color: #82AAFF\">split</span><span style=\"color: #F07178\">(</span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #C3E88D\">/</span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #F07178\">)</span></span>\n<span class=\"line\"><span style=\"color: #F07178\">        </span><span style=\"color: #89DDFF\">.</span><span style=\"color: #82AAFF\">pop</span><span style=\"color: #F07178\">()</span></span>\n<span class=\"line\"><span style=\"color: #F07178\">        </span><span style=\"color: #89DDFF\">.</span><span style=\"color: #82AAFF\">replace</span><span style=\"color: #F07178\">(</span><span style=\"color: #89DDFF\">/</span><span style=\"color: #BABED8\">\\.</span><span style=\"color: #C3E88D\">\\w</span><span style=\"color: #89DDFF\">+</span><span style=\"color: #89DDFF; font-style: italic\">$</span><span style=\"color: #89DDFF\">/</span><span style=\"color: #89DDFF\">,</span><span style=\"color: #F07178\"> </span><span style=\"color: #89DDFF\">&quot;&quot;</span><span style=\"color: #F07178\">)</span></span>\n<span class=\"line\"><span style=\"color: #F07178\">    )</span></span>\n<span class=\"line\"><span style=\"color: #F07178\">  )</span><span style=\"color: #89DDFF\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #89DDFF\">  </span><span style=\"color: #676E95; font-style: italic\">// 全局注册组件</span></span>\n<span class=\"line\"><span style=\"color: #F07178\">  </span><span style=\"color: #BABED8\">Vue</span><span style=\"color: #89DDFF\">.</span><span style=\"color: #82AAFF\">component</span><span style=\"color: #F07178\">(</span></span>\n<span class=\"line\"><span style=\"color: #F07178\">    </span><span style=\"color: #BABED8\">componentName</span><span style=\"color: #89DDFF\">,</span></span>\n<span class=\"line\"><span style=\"color: #89DDFF\">    </span><span style=\"color: #676E95; font-style: italic\">// 如果这个组件选项是通过 `export default` 导出的，</span></span>\n<span class=\"line\"><span style=\"color: #89DDFF\">    </span><span style=\"color: #676E95; font-style: italic\">// 那么就会优先使用 `.default`，</span></span>\n<span class=\"line\"><span style=\"color: #89DDFF\">    </span><span style=\"color: #676E95; font-style: italic\">// 否则回退到使用模块的根。</span></span>\n<span class=\"line\"><span style=\"color: #F07178\">    </span><span style=\"color: #BABED8\">componentConfig</span><span style=\"color: #89DDFF\">.</span><span style=\"color: #BABED8\">default</span><span style=\"color: #F07178\"> </span><span style=\"color: #89DDFF\">||</span><span style=\"color: #F07178\"> </span><span style=\"color: #BABED8\">componentConfig</span></span>\n<span class=\"line\"><span style=\"color: #F07178\">  )</span><span style=\"color: #89DDFF\">;</span></span>\n<span class=\"line\"><span style=\"color: #89DDFF\">&#125;</span><span style=\"color: #BABED8\">)</span><span style=\"color: #89DDFF\">;</span></span></code></pre></div><p><code>vuex 自动引入 modules 文件夹下的所有 js 文件（无需一个个引入）</code></p>\n<p>示例：src&#x2F;store&#x2F;index.js</p>\n<div class=\"language-js\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">js</span><pre class=\"shiki material-theme-palenight\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #89DDFF; font-style: italic\">import</span><span style=\"color: #BABED8\"> Vue </span><span style=\"color: #89DDFF; font-style: italic\">from</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #C3E88D\">vue</span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #89DDFF\">;</span></span>\n<span class=\"line\"><span style=\"color: #89DDFF; font-style: italic\">import</span><span style=\"color: #BABED8\"> Vuex </span><span style=\"color: #89DDFF; font-style: italic\">from</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #C3E88D\">vuex</span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #89DDFF\">;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">Vue</span><span style=\"color: #89DDFF\">.</span><span style=\"color: #82AAFF\">use</span><span style=\"color: #BABED8\">(Vuex)</span><span style=\"color: #89DDFF\">;</span></span>\n<span class=\"line\"><span style=\"color: #89DDFF; font-style: italic\">import</span><span style=\"color: #BABED8\"> getters </span><span style=\"color: #89DDFF; font-style: italic\">from</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #C3E88D\">./getters</span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #89DDFF\">;</span></span>\n<span class=\"line\"><span style=\"color: #676E95; font-style: italic\">// require.context函数接受三个参数 1.读取的文件路径  2.是否遍历文件的子目录  3.匹配文件的正则</span></span>\n<span class=\"line\"><span style=\"color: #676E95; font-style: italic\">// 表示获取同级目录modules文件夹下的 所有 js文件（这样就不用一个个引入了）</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #C792EA\">const</span><span style=\"color: #BABED8\"> modulesFiles </span><span style=\"color: #89DDFF\">=</span><span style=\"color: #BABED8\"> require</span><span style=\"color: #89DDFF\">.</span><span style=\"color: #82AAFF\">context</span><span style=\"color: #BABED8\">(</span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #C3E88D\">./modules</span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #89DDFF\">,</span><span style=\"color: #BABED8\"> </span><span style=\"color: #FF9CAC\">true</span><span style=\"color: #89DDFF\">,</span><span style=\"color: #C3E88D\"> </span><span style=\"color: #89DDFF\">/</span><span style=\"color: #BABED8\">\\.</span><span style=\"color: #C3E88D\">js</span><span style=\"color: #89DDFF; font-style: italic\">$</span><span style=\"color: #89DDFF\">/</span><span style=\"color: #BABED8\">)</span><span style=\"color: #89DDFF\">;</span></span>\n<span class=\"line\"><span style=\"color: #C792EA\">const</span><span style=\"color: #BABED8\"> modules </span><span style=\"color: #89DDFF\">=</span><span style=\"color: #BABED8\"> modulesFiles</span><span style=\"color: #89DDFF\">.</span><span style=\"color: #82AAFF\">keys</span><span style=\"color: #BABED8\">()</span><span style=\"color: #89DDFF\">.</span><span style=\"color: #82AAFF\">reduce</span><span style=\"color: #BABED8\">(</span><span style=\"color: #89DDFF\">(</span><span style=\"color: #BABED8; font-style: italic\">modules</span><span style=\"color: #89DDFF\">,</span><span style=\"color: #BABED8\"> </span><span style=\"color: #BABED8; font-style: italic\">modulePath</span><span style=\"color: #89DDFF\">)</span><span style=\"color: #BABED8\"> </span><span style=\"color: #C792EA\">=&gt;</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">&#123;</span></span>\n<span class=\"line\"><span style=\"color: #F07178\">  </span><span style=\"color: #C792EA\">const</span><span style=\"color: #F07178\"> </span><span style=\"color: #BABED8\">moduleName</span><span style=\"color: #F07178\"> </span><span style=\"color: #89DDFF\">=</span><span style=\"color: #F07178\"> </span><span style=\"color: #BABED8\">modulePath</span><span style=\"color: #89DDFF\">.</span><span style=\"color: #82AAFF\">replace</span><span style=\"color: #F07178\">(</span><span style=\"color: #89DDFF\">/</span><span style=\"color: #89DDFF; font-style: italic\">^</span><span style=\"color: #BABED8\">\\.\\/</span><span style=\"color: #89DDFF\">(</span><span style=\"color: #C3E88D\">.</span><span style=\"color: #89DDFF\">*)</span><span style=\"color: #BABED8\">\\.</span><span style=\"color: #C3E88D\">\\w</span><span style=\"color: #89DDFF\">+</span><span style=\"color: #89DDFF; font-style: italic\">$</span><span style=\"color: #89DDFF\">/</span><span style=\"color: #89DDFF\">,</span><span style=\"color: #F07178\"> </span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #C3E88D\">$1</span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #F07178\">)</span><span style=\"color: #89DDFF\">;</span></span>\n<span class=\"line\"><span style=\"color: #F07178\">  </span><span style=\"color: #C792EA\">const</span><span style=\"color: #F07178\"> </span><span style=\"color: #BABED8\">value</span><span style=\"color: #F07178\"> </span><span style=\"color: #89DDFF\">=</span><span style=\"color: #F07178\"> </span><span style=\"color: #82AAFF\">modulesFiles</span><span style=\"color: #F07178\">(</span><span style=\"color: #BABED8\">modulePath</span><span style=\"color: #F07178\">)</span><span style=\"color: #89DDFF\">;</span></span>\n<span class=\"line\"><span style=\"color: #F07178\">  </span><span style=\"color: #BABED8\">modules</span><span style=\"color: #F07178\">[</span><span style=\"color: #BABED8\">moduleName</span><span style=\"color: #F07178\">] </span><span style=\"color: #89DDFF\">=</span><span style=\"color: #F07178\"> </span><span style=\"color: #BABED8\">value</span><span style=\"color: #89DDFF\">.</span><span style=\"color: #BABED8\">default</span><span style=\"color: #89DDFF\">;</span></span>\n<span class=\"line\"><span style=\"color: #F07178\">  </span><span style=\"color: #89DDFF; font-style: italic\">return</span><span style=\"color: #F07178\"> </span><span style=\"color: #BABED8\">modules</span><span style=\"color: #89DDFF\">;</span></span>\n<span class=\"line\"><span style=\"color: #89DDFF\">&#125;,</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">&#123;&#125;</span><span style=\"color: #BABED8\">)</span><span style=\"color: #89DDFF\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #676E95; font-style: italic\">// console.log(&#39;modules&#39;, modules)</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #C792EA\">const</span><span style=\"color: #BABED8\"> store </span><span style=\"color: #89DDFF\">=</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">new</span><span style=\"color: #BABED8\"> Vuex</span><span style=\"color: #89DDFF\">.</span><span style=\"color: #82AAFF\">Store</span><span style=\"color: #BABED8\">(</span><span style=\"color: #89DDFF\">&#123;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">  modules</span><span style=\"color: #89DDFF\">,</span><span style=\"color: #BABED8\"> </span><span style=\"color: #676E95; font-style: italic\">// 对象，key是文件名，value是相应内容</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">  getters</span><span style=\"color: #89DDFF\">,</span></span>\n<span class=\"line\"><span style=\"color: #89DDFF\">&#125;</span><span style=\"color: #BABED8\">)</span><span style=\"color: #89DDFF\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #89DDFF; font-style: italic\">export</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF; font-style: italic\">default</span><span style=\"color: #BABED8\"> store</span><span style=\"color: #89DDFF\">;</span></span></code></pre></div>","feature":true,"text":"使用 require.context 进行批量导入，不仅可以减少代码， 后期添加新的文件不用在挨个引入。如果你恰好使用了 webpack (或在内部使用了 we...","permalink":"/post/124-vue","photos":[],"count_time":{"symbolsCount":"2.2k","symbolsTime":"2 mins."},"categories":[],"tags":[{"name":"vue2","slug":"vue2","count":3,"path":"api/tags/vue2.json"}],"toc":"","author":{"name":"Jude","slug":"blog-author","avatar":"","link":"/","description":"","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"mapped":true,"hidden":false,"prev_post":{"title":"125、el-table触底加载、定时器和请求动画帧、虚拟列表、vxe-table、vue-virtual-scroller","uid":"75275657f6e5a42d4fcfa3105206bba2","slug":"125-vue","date":"2023-03-16T12:00:00.000Z","updated":"2023-08-16T07:02:51.000Z","comments":true,"path":"api/articles/125-vue.json","keywords":null,"cover":null,"text":"el-table 的在数据量比较大的情况下，会卡顿，因为数据量太大，渲染速度跟不上。可以通过触底加载、定时器和请求动画帧、虚拟列表、vxe-table、vue-...","permalink":"/post/125-vue","photos":[],"count_time":{"symbolsCount":"12k","symbolsTime":"11 mins."},"categories":[],"tags":[{"name":"vue2","slug":"vue2","count":3,"path":"api/tags/vue2.json"}],"author":{"name":"Jude","slug":"blog-author","avatar":"","link":"/","description":"","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"feature":true},"next_post":{"title":"123、《Vuejs设计与实现》- 霍春阳：vue.js设计的核心要素(二)","uid":"00b982fc53c937e212d2a3973c72433c","slug":"123-vue","date":"2023-02-20T12:00:00.000Z","updated":"2023-08-15T12:19:30.000Z","comments":true,"path":"api/articles/123-vue.json","keywords":null,"cover":null,"text":"框架提供了哪些构建产物？产物的模块格式？没有按照预期使用框架的警告信息，如何快速定位问题？开发版本的构建和生成版本的构建有何区别？热更新 HMR 框架层面的支持...","permalink":"/post/123-vue","photos":[],"count_time":{"symbolsCount":"3k","symbolsTime":"3 mins."},"categories":[],"tags":[{"name":"vue3","slug":"vue3","count":24,"path":"api/tags/vue3.json"}],"author":{"name":"Jude","slug":"blog-author","avatar":"","link":"/","description":"","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}}}