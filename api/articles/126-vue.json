{"title":"126、《Vuejs设计与实现》- 霍春阳：vue.js 3设计思路(三)","uid":"0c16b31803bde874a26f731a30be8316","slug":"126-vue","date":"2023-03-17T12:00:00.000Z","updated":"2023-09-09T08:09:03.335Z","comments":true,"path":"api/articles/126-vue.json","keywords":null,"cover":null,"content":"<p>Vue.js 3 是一个声明式的 UI 框架，意思是说用户在使用 Vue.js 3 开发页面时是声明式地描述 UI 的。如何设计一个声明式框架呢？</p>\n<span id=\"more\"></span>\n\n<h2 id=\"一、声明式描述-UI\"><a href=\"#一、声明式描述-UI\" class=\"headerlink\" title=\"一、声明式描述 UI\"></a>一、声明式描述 UI</h2><p>vue.js 3 是一个声明式的 UI 框架，如何设计 UI 框架，需要明确前端页面涉及的内容：</p>\n<p>1、DOM 元素：例如标签；<br>2、属性：例如 class、id、style、src 等；<br>3、事件：例如 click、mouseover、keydown 等；<br>4、元素层级结构：DOM 树的层级结构，既有子节点，又有父节点。</p>\n<p>如何声明式的描述上面前端页面涉及的内容呢？vue.js 3 解决方案：<br>1、使用 HTML 标签一致的方式来描述 dom 元素，例如：<code>&lt;div&gt;&lt;/div&gt;</code>;<br>2、使用 HTML 标签一致的方式来描述属性，例如：<code>&lt;div class=&#39;app&#39;&gt;&lt;/div&gt;;v-bind 来描述动态绑定的属性，例如：&lt;div :id=&quot;wrapper&quot;&gt;&lt;/div&gt;</code>;<br>3、使用 v-on 来描述事件，例如：<code>&lt;div @click=&quot;handleClick&quot;&gt;&lt;/div&gt;</code>;<br>4、使用 HTML 标签一致的方式来描述元素层级结构，例如：<code>&lt;div&gt;&lt;span&gt;&lt;/span&gt;&lt;/div&gt;</code>;</p>\n<p>js 对象描述 UI 页面：</p>\n<div class=\"language-js\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">js</span><pre class=\"shiki material-theme-palenight\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #C792EA\">const</span><span style=\"color: #BABED8\"> title </span><span style=\"color: #89DDFF\">=</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">&#123;</span></span>\n<span class=\"line\"><span style=\"color: #89DDFF\">  </span><span style=\"color: #676E95; font-style: italic\">// 标签名称</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">  </span><span style=\"color: #F07178\">tag</span><span style=\"color: #89DDFF\">:</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">&#39;</span><span style=\"color: #C3E88D\">h1</span><span style=\"color: #89DDFF\">&#39;</span><span style=\"color: #89DDFF\">,</span></span>\n<span class=\"line\"><span style=\"color: #89DDFF\">  </span><span style=\"color: #676E95; font-style: italic\">// 标签属性</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">  </span><span style=\"color: #F07178\">props</span><span style=\"color: #89DDFF\">:</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">&#123;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">    </span><span style=\"color: #F07178\">onClick</span><span style=\"color: #89DDFF\">:</span><span style=\"color: #BABED8\"> handler</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">  </span><span style=\"color: #89DDFF\">&#125;,</span></span>\n<span class=\"line\"><span style=\"color: #89DDFF\">  </span><span style=\"color: #676E95; font-style: italic\">// 子节点</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">  </span><span style=\"color: #F07178\">children</span><span style=\"color: #89DDFF\">:</span><span style=\"color: #BABED8\"> [</span><span style=\"color: #89DDFF\">&#123;</span><span style=\"color: #BABED8\"> </span><span style=\"color: #F07178\">tag</span><span style=\"color: #89DDFF\">:</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">&#39;</span><span style=\"color: #C3E88D\">span</span><span style=\"color: #89DDFF\">&#39;</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">&#125;</span><span style=\"color: #BABED8\">]</span></span>\n<span class=\"line\"><span style=\"color: #89DDFF\">&#125;</span></span></code></pre></div><p>对应的 vue.js 模板就是：</p>\n<div class=\"language-html\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">html</span><pre class=\"shiki material-theme-palenight\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #89DDFF\">&lt;</span><span style=\"color: #F07178\">h1</span><span style=\"color: #89DDFF\"> </span><span style=\"color: #C792EA\">@click</span><span style=\"color: #89DDFF\">=</span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #C3E88D\">handler</span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #89DDFF\">&gt;&lt;</span><span style=\"color: #F07178\">span</span><span style=\"color: #89DDFF\">&gt;&lt;/</span><span style=\"color: #F07178\">span</span><span style=\"color: #89DDFF\">&gt;&lt;/</span><span style=\"color: #F07178\">h1</span><span style=\"color: #89DDFF\">&gt;</span></span></code></pre></div><p>js 对象来描述 UI 更具灵活性</p>\n<div class=\"language-js\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">js</span><pre class=\"shiki material-theme-palenight\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #676E95; font-style: italic\">//模板表示： js对象描述h1~h6标签，标签对应的名字会随着level值改变而变化</span></span>\n<span class=\"line\"><span style=\"color: #C792EA\">let</span><span style=\"color: #BABED8\"> level </span><span style=\"color: #89DDFF\">=</span><span style=\"color: #BABED8\"> </span><span style=\"color: #F78C6C\">3</span></span>\n<span class=\"line\"><span style=\"color: #C792EA\">const</span><span style=\"color: #BABED8\"> title </span><span style=\"color: #89DDFF\">=</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">&#123;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">  </span><span style=\"color: #F07178\">tag</span><span style=\"color: #89DDFF\">:</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">`</span><span style=\"color: #C3E88D\">h</span><span style=\"color: #89DDFF\">$&#123;</span><span style=\"color: #BABED8\">level</span><span style=\"color: #89DDFF\">&#125;`</span></span>\n<span class=\"line\"><span style=\"color: #89DDFF\">&#125;</span></span></code></pre></div><p>vue.js 使用 JS 对象来描述 UI 的方式，其实就是所谓的虚拟 DOM。其实我们在 vue.js 组件中手写渲染函数就是使用虚拟 DOM 来描述 UI 的。</p>\n<div class=\"language-js\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">js</span><pre class=\"shiki material-theme-palenight\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #89DDFF; font-style: italic\">import</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">&#123;</span><span style=\"color: #F07178\"> </span><span style=\"color: #BABED8\">h</span><span style=\"color: #F07178\"> </span><span style=\"color: #89DDFF\">&#125;</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF; font-style: italic\">from</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">&#39;</span><span style=\"color: #C3E88D\">vue</span><span style=\"color: #89DDFF\">&#39;</span></span>\n<span class=\"line\"><span style=\"color: #89DDFF; font-style: italic\">export</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF; font-style: italic\">default</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">&#123;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">  </span><span style=\"color: #F07178\">render</span><span style=\"color: #89DDFF\">()</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">&#123;</span></span>\n<span class=\"line\"><span style=\"color: #F07178\">    </span><span style=\"color: #89DDFF; font-style: italic\">return</span><span style=\"color: #F07178\"> </span><span style=\"color: #82AAFF\">h</span><span style=\"color: #F07178\">(</span><span style=\"color: #89DDFF\">&#39;</span><span style=\"color: #C3E88D\">div</span><span style=\"color: #89DDFF\">&#39;</span><span style=\"color: #89DDFF\">,</span><span style=\"color: #F07178\"> </span><span style=\"color: #89DDFF\">&#123;</span><span style=\"color: #F07178\"> onClick</span><span style=\"color: #89DDFF\">:</span><span style=\"color: #F07178\"> </span><span style=\"color: #BABED8\">handler</span><span style=\"color: #F07178\"> </span><span style=\"color: #89DDFF\">&#125;</span><span style=\"color: #F07178\">)</span></span>\n<span class=\"line\"><span style=\"color: #F07178\">  </span><span style=\"color: #89DDFF\">&#125;</span></span>\n<span class=\"line\"><span style=\"color: #89DDFF\">&#125;</span></span></code></pre></div><p>上面的 h 函数返回值就是一个对象，其作用是让我们编写虚拟 DOM 变的更加轻松。</p>\n<p>如果把上面的 h 函数调用嗲买改成 js 对象，就需要写更多内容了：</p>\n<div class=\"language-js\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">js</span><pre class=\"shiki material-theme-palenight\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #89DDFF; font-style: italic\">export</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF; font-style: italic\">default</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">&#123;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">  </span><span style=\"color: #F07178\">render</span><span style=\"color: #89DDFF\">()</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">&#123;</span></span>\n<span class=\"line\"><span style=\"color: #F07178\">    </span><span style=\"color: #89DDFF; font-style: italic\">return</span><span style=\"color: #F07178\"> </span><span style=\"color: #89DDFF\">&#123;</span></span>\n<span class=\"line\"><span style=\"color: #F07178\">      tag</span><span style=\"color: #89DDFF\">:</span><span style=\"color: #F07178\"> </span><span style=\"color: #89DDFF\">&#39;</span><span style=\"color: #C3E88D\">h1</span><span style=\"color: #89DDFF\">&#39;</span><span style=\"color: #89DDFF\">,</span></span>\n<span class=\"line\"><span style=\"color: #F07178\">      props</span><span style=\"color: #89DDFF\">:</span><span style=\"color: #F07178\"> </span><span style=\"color: #89DDFF\">&#123;</span></span>\n<span class=\"line\"><span style=\"color: #F07178\">        onClick</span><span style=\"color: #89DDFF\">:</span><span style=\"color: #F07178\"> </span><span style=\"color: #BABED8\">handler</span></span>\n<span class=\"line\"><span style=\"color: #F07178\">      </span><span style=\"color: #89DDFF\">&#125;</span></span>\n<span class=\"line\"><span style=\"color: #F07178\">    </span><span style=\"color: #89DDFF\">&#125;</span></span>\n<span class=\"line\"><span style=\"color: #F07178\">  </span><span style=\"color: #89DDFF\">&#125;</span></span>\n<span class=\"line\"><span style=\"color: #89DDFF\">&#125;</span></span></code></pre></div><p>如果还有子节点，写的内容就更多了，所以 h 函数就是一个辅助创建虚拟 dom 的工具函数，仅此而已。</p>\n<p>什么是组件的渲染函数？</p>\n<p>一个组件要渲染的内容是通过渲染函数来描述的，就是上面的 render 函数，vue.js 会根据组件的 render 函数的返回值拿到虚拟 dom，然后就可以把组件的内容渲染出来了。</p>\n<h2 id=\"二、渲染器\"><a href=\"#二、渲染器\" class=\"headerlink\" title=\"二、渲染器\"></a>二、渲染器</h2><p>我们知道了虚拟 DOM 其实就是用 js 对象来描述真实的 dom 结构，那么 vue.js 是如何把虚拟 DOM 渲染成真实的 DOM 呢？</p>\n<p>渲染器的作用就是把虚拟 DOM 渲染为真实 DOM。</p>\n<p>编写一个渲染器，实现点击 div 标签，alert hello 功能</p>\n<div class=\"language-js\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">js</span><pre class=\"shiki material-theme-palenight\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #676E95; font-style: italic\">// 假设一个虚拟DOM</span></span>\n<span class=\"line\"><span style=\"color: #C792EA\">const</span><span style=\"color: #BABED8\"> vnode </span><span style=\"color: #89DDFF\">=</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">&#123;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">  </span><span style=\"color: #F07178\">tag</span><span style=\"color: #89DDFF\">:</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">&#39;</span><span style=\"color: #C3E88D\">div</span><span style=\"color: #89DDFF\">&#39;</span><span style=\"color: #89DDFF\">,</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">  </span><span style=\"color: #F07178\">props</span><span style=\"color: #89DDFF\">:</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">&#123;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">    </span><span style=\"color: #82AAFF\">onClick</span><span style=\"color: #89DDFF\">:</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">()</span><span style=\"color: #BABED8\"> </span><span style=\"color: #C792EA\">=&gt;</span><span style=\"color: #BABED8\"> </span><span style=\"color: #82AAFF\">alert</span><span style=\"color: #BABED8\">(</span><span style=\"color: #89DDFF\">&#39;</span><span style=\"color: #C3E88D\">hello</span><span style=\"color: #89DDFF\">&#39;</span><span style=\"color: #BABED8\">)</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">  </span><span style=\"color: #89DDFF\">&#125;,</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">  </span><span style=\"color: #F07178\">children</span><span style=\"color: #89DDFF\">:</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">&#39;</span><span style=\"color: #C3E88D\">click me</span><span style=\"color: #89DDFF\">&#39;</span><span style=\"color: #BABED8\"> </span><span style=\"color: #676E95; font-style: italic\">// 用来描述标签的子节点</span></span>\n<span class=\"line\"><span style=\"color: #89DDFF\">&#125;</span></span></code></pre></div><p>渲染器将上面虚拟 DOM 渲染为真实 DOM：</p>\n<div class=\"language-js\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">js</span><pre class=\"shiki material-theme-palenight\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #C792EA\">function</span><span style=\"color: #BABED8\"> </span><span style=\"color: #82AAFF\">renderer</span><span style=\"color: #89DDFF\">(</span><span style=\"color: #BABED8; font-style: italic\">vnode</span><span style=\"color: #89DDFF\">,</span><span style=\"color: #BABED8\"> </span><span style=\"color: #BABED8; font-style: italic\">container</span><span style=\"color: #89DDFF\">)</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">&#123;</span></span>\n<span class=\"line\"><span style=\"color: #89DDFF\">  </span><span style=\"color: #676E95; font-style: italic\">// 使用vnode.tag作为标签名称创建DOM元素</span></span>\n<span class=\"line\"><span style=\"color: #F07178\">  </span><span style=\"color: #C792EA\">const</span><span style=\"color: #F07178\"> </span><span style=\"color: #BABED8\">el</span><span style=\"color: #F07178\"> </span><span style=\"color: #89DDFF\">=</span><span style=\"color: #F07178\"> </span><span style=\"color: #BABED8\">document</span><span style=\"color: #89DDFF\">.</span><span style=\"color: #82AAFF\">createElement</span><span style=\"color: #F07178\">(</span><span style=\"color: #BABED8\">vnode</span><span style=\"color: #89DDFF\">.</span><span style=\"color: #BABED8\">tag</span><span style=\"color: #F07178\">)</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #89DDFF\">  </span><span style=\"color: #676E95; font-style: italic\">// 遍历vnode.props，把props中的属性、事件添加到el中</span></span>\n<span class=\"line\"><span style=\"color: #F07178\">  </span><span style=\"color: #89DDFF; font-style: italic\">for</span><span style=\"color: #F07178\"> (</span><span style=\"color: #C792EA\">const</span><span style=\"color: #F07178\"> </span><span style=\"color: #BABED8\">key</span><span style=\"color: #F07178\"> </span><span style=\"color: #89DDFF\">in</span><span style=\"color: #F07178\"> </span><span style=\"color: #BABED8\">vnode</span><span style=\"color: #89DDFF\">.</span><span style=\"color: #BABED8\">props</span><span style=\"color: #F07178\">) </span><span style=\"color: #89DDFF\">&#123;</span></span>\n<span class=\"line\"><span style=\"color: #89DDFF\">    </span><span style=\"color: #676E95; font-style: italic\">// 如果key以on开头，说明是事件</span></span>\n<span class=\"line\"><span style=\"color: #F07178\">    </span><span style=\"color: #89DDFF; font-style: italic\">if</span><span style=\"color: #F07178\"> (</span><span style=\"color: #89DDFF\">/</span><span style=\"color: #89DDFF; font-style: italic\">^</span><span style=\"color: #C3E88D\">on</span><span style=\"color: #89DDFF\">/</span><span style=\"color: #89DDFF\">.</span><span style=\"color: #82AAFF\">test</span><span style=\"color: #F07178\">(</span><span style=\"color: #BABED8\">key</span><span style=\"color: #F07178\">)) </span><span style=\"color: #89DDFF\">&#123;</span></span>\n<span class=\"line\"><span style=\"color: #F07178\">      </span><span style=\"color: #BABED8\">el</span><span style=\"color: #89DDFF\">.</span><span style=\"color: #82AAFF\">addEventListener</span><span style=\"color: #F07178\">(</span></span>\n<span class=\"line\"><span style=\"color: #F07178\">        </span><span style=\"color: #BABED8\">key</span><span style=\"color: #89DDFF\">.</span><span style=\"color: #82AAFF\">substr</span><span style=\"color: #F07178\">(</span><span style=\"color: #F78C6C\">2</span><span style=\"color: #F07178\">)</span><span style=\"color: #89DDFF\">.</span><span style=\"color: #82AAFF\">toLowerCase</span><span style=\"color: #F07178\">()</span><span style=\"color: #89DDFF\">,</span><span style=\"color: #F07178\"> </span><span style=\"color: #676E95; font-style: italic\">// 事件名称</span></span>\n<span class=\"line\"><span style=\"color: #F07178\">        </span><span style=\"color: #BABED8\">vnode</span><span style=\"color: #89DDFF\">.</span><span style=\"color: #BABED8\">props</span><span style=\"color: #F07178\">[</span><span style=\"color: #BABED8\">key</span><span style=\"color: #F07178\">] </span><span style=\"color: #676E95; font-style: italic\">// 事件处理函数</span></span>\n<span class=\"line\"><span style=\"color: #F07178\">      )</span></span>\n<span class=\"line\"><span style=\"color: #F07178\">    </span><span style=\"color: #89DDFF\">&#125;</span></span>\n<span class=\"line\"><span style=\"color: #F07178\">  </span><span style=\"color: #89DDFF\">&#125;</span></span>\n<span class=\"line\"><span style=\"color: #89DDFF\">  </span><span style=\"color: #676E95; font-style: italic\">// 处理children</span></span>\n<span class=\"line\"><span style=\"color: #89DDFF\">  </span><span style=\"color: #676E95; font-style: italic\">// 如果vnode.children是字符串，说明是文本子节点</span></span>\n<span class=\"line\"><span style=\"color: #F07178\">  </span><span style=\"color: #89DDFF; font-style: italic\">if</span><span style=\"color: #F07178\"> (</span><span style=\"color: #89DDFF\">typeof</span><span style=\"color: #F07178\"> </span><span style=\"color: #BABED8\">vnode</span><span style=\"color: #89DDFF\">.</span><span style=\"color: #BABED8\">children</span><span style=\"color: #F07178\"> </span><span style=\"color: #89DDFF\">===</span><span style=\"color: #F07178\"> </span><span style=\"color: #89DDFF\">&#39;</span><span style=\"color: #C3E88D\">string</span><span style=\"color: #89DDFF\">&#39;</span><span style=\"color: #F07178\">) </span><span style=\"color: #89DDFF\">&#123;</span></span>\n<span class=\"line\"><span style=\"color: #F07178\">    </span><span style=\"color: #BABED8\">el</span><span style=\"color: #89DDFF\">.</span><span style=\"color: #82AAFF\">appendChild</span><span style=\"color: #F07178\">(</span><span style=\"color: #BABED8\">document</span><span style=\"color: #89DDFF\">.</span><span style=\"color: #82AAFF\">createTextNode</span><span style=\"color: #F07178\">(</span><span style=\"color: #BABED8\">vnode</span><span style=\"color: #89DDFF\">.</span><span style=\"color: #BABED8\">children</span><span style=\"color: #F07178\">))</span></span>\n<span class=\"line\"><span style=\"color: #F07178\">  </span><span style=\"color: #89DDFF\">&#125;</span><span style=\"color: #F07178\"> </span><span style=\"color: #89DDFF; font-style: italic\">else</span><span style=\"color: #F07178\"> </span><span style=\"color: #89DDFF; font-style: italic\">if</span><span style=\"color: #F07178\"> (</span><span style=\"color: #BABED8\">Array</span><span style=\"color: #89DDFF\">.</span><span style=\"color: #82AAFF\">isArray</span><span style=\"color: #F07178\">(</span><span style=\"color: #BABED8\">vnode</span><span style=\"color: #89DDFF\">.</span><span style=\"color: #BABED8\">children</span><span style=\"color: #F07178\">)) </span><span style=\"color: #89DDFF\">&#123;</span></span>\n<span class=\"line\"><span style=\"color: #89DDFF\">    </span><span style=\"color: #676E95; font-style: italic\">// 递归调用renderer函数渲染子节点，使用当前元素el作为挂载节点</span></span>\n<span class=\"line\"><span style=\"color: #F07178\">    </span><span style=\"color: #BABED8\">vnode</span><span style=\"color: #89DDFF\">.</span><span style=\"color: #BABED8\">children</span><span style=\"color: #89DDFF\">.</span><span style=\"color: #82AAFF\">forEach</span><span style=\"color: #F07178\">(</span><span style=\"color: #89DDFF\">(</span><span style=\"color: #BABED8; font-style: italic\">child</span><span style=\"color: #89DDFF\">)</span><span style=\"color: #F07178\"> </span><span style=\"color: #C792EA\">=&gt;</span><span style=\"color: #F07178\"> </span><span style=\"color: #82AAFF\">renderer</span><span style=\"color: #F07178\">(</span><span style=\"color: #BABED8\">child</span><span style=\"color: #89DDFF\">,</span><span style=\"color: #F07178\"> </span><span style=\"color: #BABED8\">el</span><span style=\"color: #F07178\">))</span></span>\n<span class=\"line\"><span style=\"color: #F07178\">  </span><span style=\"color: #89DDFF\">&#125;</span></span>\n<span class=\"line\"><span style=\"color: #89DDFF\">  </span><span style=\"color: #676E95; font-style: italic\">// 将元素添加到挂载点下</span></span>\n<span class=\"line\"><span style=\"color: #F07178\">  </span><span style=\"color: #BABED8\">container</span><span style=\"color: #89DDFF\">.</span><span style=\"color: #82AAFF\">appendChild</span><span style=\"color: #F07178\">(</span><span style=\"color: #BABED8\">el</span><span style=\"color: #F07178\">)</span></span>\n<span class=\"line\"><span style=\"color: #89DDFF\">&#125;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #82AAFF\">renderer</span><span style=\"color: #BABED8\">(vnode</span><span style=\"color: #89DDFF\">,</span><span style=\"color: #BABED8\"> document</span><span style=\"color: #89DDFF\">.</span><span style=\"color: #BABED8\">body)</span></span></code></pre></div><p>renderer 函数的 2 个参数说明：</p>\n<ul>\n<li>vnode：虚拟 DOM 对象</li>\n<li>container：真实 DOM 元素，作为挂载点，渲染器会把虚拟 DOM 渲染到该挂载点下。</li>\n</ul>\n<p>renderer 渲染器的实现思路：</p>\n<p>创建元素：把 vnode.tag 作为标签名称来创建 DOM 元素。</p>\n<p>为元素添加属性和事件：遍历 vnode.props 对象，如果 key 以 on 字符开头，说明它是一个事件，把字符 on 截取掉后再调用 toLowerCase 函数将事件名称小写化，最终得到合法的事件名称，例如 onClick 会变成 click，最后调用 addEventListener 绑定事件处理函数。</p>\n<p>处理 children：如果 children 是一个数组，就递归地调用 renderer 继续渲染，注意，此时我们要把刚刚创建的元素作为挂载点（父节点）；如果 children 是字符串，则使用<br>createTextNode 函数创建一个文本节点，并将其添加到新创建的元素内。</p>\n<h2 id=\"三、组件的本质\"><a href=\"#三、组件的本质\" class=\"headerlink\" title=\"三、组件的本质\"></a>三、组件的本质</h2><h3 id=\"1-组件的定义\"><a href=\"#1-组件的定义\" class=\"headerlink\" title=\"1. 组件的定义\"></a>1. 组件的定义</h3><p>组件就是一组 DOM 元素的封装，这组 DOM 元素就是组件要渲染的内容，因此<br>我们可以定义一个函数来代表组件，而函数的返回值就代表组件要渲染的内容：</p>\n","feature":true,"text":"Vue.js 3 是一个声明式的 UI 框架，意思是说用户在使用 Vue.js 3 开发页面时是声明式地描述 UI 的。如何设计一个声明式框架呢？ 一、声明式描...","permalink":"/post/126-vue","photos":[],"count_time":{"symbolsCount":"3.4k","symbolsTime":"3 mins."},"categories":[],"tags":[{"name":"vue3","slug":"vue3","count":24,"path":"api/tags/vue3.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E4%B8%80%E3%80%81%E5%A3%B0%E6%98%8E%E5%BC%8F%E6%8F%8F%E8%BF%B0-UI\"><span class=\"toc-text\">一、声明式描述 UI</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E4%BA%8C%E3%80%81%E6%B8%B2%E6%9F%93%E5%99%A8\"><span class=\"toc-text\">二、渲染器</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E4%B8%89%E3%80%81%E7%BB%84%E4%BB%B6%E7%9A%84%E6%9C%AC%E8%B4%A8\"><span class=\"toc-text\">三、组件的本质</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#1-%E7%BB%84%E4%BB%B6%E7%9A%84%E5%AE%9A%E4%B9%89\"><span class=\"toc-text\">1. 组件的定义</span></a></li></ol></li></ol>","author":{"name":"Jude","slug":"blog-author","avatar":"","link":"/","description":"","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"mapped":true,"hidden":false,"prev_post":{},"next_post":{"title":"125、el-table触底加载、定时器和请求动画帧、虚拟列表、vxe-table、vue-virtual-scroller","uid":"75275657f6e5a42d4fcfa3105206bba2","slug":"125-vue","date":"2023-03-16T12:00:00.000Z","updated":"2023-08-16T07:02:51.000Z","comments":true,"path":"api/articles/125-vue.json","keywords":null,"cover":null,"text":"el-table 的在数据量比较大的情况下，会卡顿，因为数据量太大，渲染速度跟不上。可以通过触底加载、定时器和请求动画帧、虚拟列表、vxe-table、vue-...","permalink":"/post/125-vue","photos":[],"count_time":{"symbolsCount":"12k","symbolsTime":"11 mins."},"categories":[],"tags":[{"name":"vue2","slug":"vue2","count":3,"path":"api/tags/vue2.json"}],"author":{"name":"Jude","slug":"blog-author","avatar":"","link":"/","description":"","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"feature":true}}