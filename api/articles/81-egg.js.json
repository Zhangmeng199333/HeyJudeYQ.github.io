{"title":"81、egg.js(二)","uid":"5f8f097a21466c69e2c88aab3ae33526","slug":"81-egg.js","date":"2022-08-02T12:00:00.000Z","updated":"2022-10-11T06:08:16.000Z","comments":true,"path":"api/articles/81-egg.js.json","keywords":null,"cover":null,"content":"<p>Egg.js：<a href=\"https://issummer.cn/2021/06/20/egg/\">https://issummer.cn/2021/06/20/egg/</a></p>\n<span id=\"more\"></span>\n\n<h2 id=\"一、项目环境\"><a href=\"#一、项目环境\" class=\"headerlink\" title=\"一、项目环境\"></a>一、项目环境</h2><p>egg.js对node版本是有要求的，node&gt; 8.x npm &gt;&#x3D; 6.1.0</p>\n<p>目前电脑环境：node:12.6.0  npm 6.1.0</p>\n<p>egg提供脚手架生成指令</p>\n<div class=\"language-shell\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">shell</span><pre class=\"shiki material-theme-palenight\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #BABED8\">mkdir egg-example &amp;&amp; cd egg-example</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">npm init egg --type=simple</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">npm i</span></span></code></pre></div><p>启动项目会出现报错：Cannot find module ‘fs&#x2F;promise’</p>\n<p>主要是由于node版本较低造成的，使用n 升级node版本到16.13.0 ,重新npm install，启动项目，报错消失。</p>\n<h2 id=\"二、egg项目目录\"><a href=\"#二、egg项目目录\" class=\"headerlink\" title=\"二、egg项目目录\"></a>二、egg项目目录</h2><p><code>Egg</code> 作为一套解决方案，它内部高度集成了封装好的项目目录结构，现代开发俗称“约定式开发”。正常情况下，你从 0 开始搭建一个 <code>Node</code> 服务端代码，需要结合很多工具插件来辅助完成项目的搭建，而 <code>Egg</code> 则提前为你提供好了这些繁琐的初始工作，让你能专心与业务层面的开发。</p>\n<p>当然，“约定式开发”也有不好的地方，很多配置项都是内部约定好的，在你想要用到某一个功能时，你可能需要去查阅 <code>Egg</code> 的官方文档是如何配置的，这就会消耗一点时间，但是相比之下，使用它的利大于弊。</p>\n<h4 id=\"1、app-router-js\"><a href=\"#1、app-router-js\" class=\"headerlink\" title=\"1、app&#x2F;router.js\"></a>1、<strong>app&#x2F;router.js</strong></h4><p>用于配置 URL 路由规则，比如 <code>get</code> 请求，<code>npm run dev</code> 启动项目之后，直接在浏览器中访问启动的<code>端口 + 路径</code>，默认是 <code>http://localhost:7001/</code>，将会拿到 <code>app/controller</code> 文件夹下，<code>home.js</code> 脚本中 <code>index</code> 方法返回的内容。</p>\n<p>这就是路由配置的作用，当然，抛出的形式有多种，如<code>router.get</code>、<code>router.post</code>、<code>router.delete</code>、<code>router.put</code> 等，都是支持的，更加具体的内容 <a href=\"https://link.juejin.cn/?target=https://eggjs.org/zh-cn/basics/router.html\">Router 配置</a>。</p>\n<h4 id=\"2、app-controller-xx\"><a href=\"#2、app-controller-xx\" class=\"headerlink\" title=\"2、app&#x2F;controller&#x2F;xx\"></a><strong>2、app&#x2F;controller&#x2F;xx</strong></h4><p>用于解析用户的输入，处理后返回相应的结果。通过请求路径将用户的请求基于 <code>method</code> 和 <code>URL</code> 分发到对应的 <code>Controller</code> 上，而 <code>Controller</code> 要做的事情就是响应用户的诉求。举个例子，我想拿到 A 用户的个人信息，于是我们要在控制器（Controller）里，通过请求携带的 A 用户的 id 参数，从数据库里获取指定用户的个人信息。</p>\n<p>控制器需要做的就是处理数据和响应请求返回数据。更加详细的描述 <a href=\"https://link.juejin.cn/?target=https://eggjs.org/zh-cn/basics/controller.html\">Controller 文档</a></p>\n<h4 id=\"3、app-service-xx\"><a href=\"#3、app-service-xx\" class=\"headerlink\" title=\"3、app&#x2F;service&#x2F;xx\"></a><strong>3、app&#x2F;service&#x2F;xx</strong></h4><p>简单来说，<code>Service</code> 就是在复杂业务场景下用于做业务逻辑封装的一个抽象层。初始化项目中未声明 <code>service</code> 文件夹，它是可选项，但是官方建议我们操作业务逻辑最好做一层封装。我们换一种理解方式，<code>Service</code> 层就是用于数据库的查询，我们尽量将粒度细化，这样以便多个 <code>Controller</code> 共同调用同一个 <code>Service</code>。更加详细的描述 <a href=\"https://link.juejin.cn/?target=https://eggjs.org/zh-cn/basics/service.html\">Service 文档</a>。</p>\n<h4 id=\"4、app-middleware-xx\"><a href=\"#4、app-middleware-xx\" class=\"headerlink\" title=\"4、app&#x2F;middleware&#x2F;xx\"></a><strong>4、app&#x2F;middleware&#x2F;xx</strong></h4><p>用于编写中间件，中间件的概念就是在路由配置里设置了中间件的路由，每次请求命中后，都要过一层中间件。在后续的开发中，也会利用到这个中间件的原理做用户鉴权。当用户未登录的情况下，是不能调用某些接口的。</p>\n<p>每次都在 <code>Controller</code> 判断，当前请求是否携带有效的用户认证信息。接口一多，到处都是这样的判断，逻辑重复。所以，中间件在某种程度上，也算是优化代码结构的一种方式。更加详细的描述 <a href=\"https://link.juejin.cn/?target=https://eggjs.org/zh-cn/basics/middleware.html\">Middleware 文档</a>。</p>\n<h4 id=\"5、app-public-xx\"><a href=\"#5、app-public-xx\" class=\"headerlink\" title=\"5、app&#x2F;public&#x2F;xx\"></a><strong>5、app&#x2F;public&#x2F;xx</strong></h4><p>用于放置静态资源。会有一个上传静态资源的接口，包括图片、文本文档、excel、word等，都可以通过服务端读取文件之后，将其写入 <code>app/public</code> 文件夹中。在目前没有 <code>OSS</code> 服务的情况下，姑且先用这种方式存储静态资源，会消耗一点服务器的内存。</p>\n<h4 id=\"6、config-config-env-js\"><a href=\"#6、config-config-env-js\" class=\"headerlink\" title=\"6、config&#x2F;config.{env}.js\"></a><strong>6、config&#x2F;config.{env}.js</strong></h4><p>用于编写配置文件。 <code>config/config.default.js</code> 文件，这个是 <code>Egg</code> 框架约定好的，在内部设置一些全局的配置常量，在任何地方都可以通过 <code>app.config</code> 获取到 <code>config.default.js</code> 文件内的配置项。</p>\n<h4 id=\"7、config-plugin-js\"><a href=\"#7、config-plugin-js\" class=\"headerlink\" title=\"7、config&#x2F;plugin.js\"></a><strong>7、config&#x2F;plugin.js</strong></h4><p>用于配置需要加载的插件。比如 <code>egg-mysql</code>、<code>egg-cors</code>、<code>egg-jwt</code> 等官方提供的插件</p>\n<h2 id=\"三、编写-GET-和-POST-接口\"><a href=\"#三、编写-GET-和-POST-接口\" class=\"headerlink\" title=\"三、编写 GET 和 POST 接口\"></a>三、编写 GET 和 POST 接口</h2><h4 id=\"GET-请求参数获取\"><a href=\"#GET-请求参数获取\" class=\"headerlink\" title=\"GET 请求参数获取\"></a><strong><code>GET</code> 请求参数获取</strong></h4><p>浏览器输入URL：<code>http:*//localhost:7001/?id=12</code></p>\n<p>打开 <code>app/controller/home.js</code>，通过如下形式获取到浏览器查询参数</p>\n<div class=\"language-js\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">js</span><pre class=\"shiki material-theme-palenight\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #BABED8\">const Controller = require(&#39;egg&#39;).Controller;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #BABED8\">class HomeController extends Controller &#123;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">  async index() &#123;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">    const &#123; ctx &#125; = this;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">    const &#123; id &#125; = ctx.query;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">    ctx.body = id;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">  &#125;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">&#125;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #BABED8\">module.exports = HomeController;</span></span></code></pre></div><p>还有另一种获取申明参数，比如我希望通过这样一个地址获取用户参数 <code>/user/5</code>，想获取用户 <code>id</code> 为 <code>5</code> 的用户信息。<br>我们可以这样操作，首先添加路由，打开 <code>app/router.js</code> 添加一个路由：</p>\n<div class=\"language-js\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">js</span><pre class=\"shiki material-theme-palenight\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #BABED8\">&#39;use strict&#39;;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #BABED8\">/**</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\"> * @param &#123;Egg.Application&#125; app - egg application</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\"> */</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">module.exports = app =&gt; &#123;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">  const &#123; router, controller &#125; = app;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">  router.get(&#39;/&#39;, controller.home.index);</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">  router.get(&#39;/user/:id&#39;, controller.home.user);</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">&#125;;</span></span></code></pre></div><p>其次在 <code>app/controller/home.js</code> 下添加一个 <code>user</code> 方法如下：</p>\n<div class=\"language-js\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">js</span><pre class=\"shiki material-theme-palenight\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #BABED8\">&#39;use strict&#39;;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #BABED8\">const Controller = require(&#39;egg&#39;).Controller;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #BABED8\">class HomeController extends Controller &#123;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">  async index() &#123;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">    const &#123; ctx &#125; = this;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">    const &#123; id &#125; = ctx.query;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">    ctx.body = id;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">  &#125;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">  // 获取用户信息</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">  async user() &#123;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">    const &#123; ctx &#125; = this;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">    const &#123; id &#125; = ctx.params; // 通过 params 获取申明参数</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">    ctx.body = id;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">  &#125;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">&#125;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">module.exports = HomeController;</span></span></code></pre></div><p>浏览器输入URL：<code>localhost:7001/user/123</code></p>\n<p>网页会打印出：123</p>\n<h4 id=\"post请求参数获取\"><a href=\"#post请求参数获取\" class=\"headerlink\" title=\"post请求参数获取\"></a><strong>post请求参数获取</strong></h4><p><code>POST</code> 接口需要借助 <code>Postman</code> 工具进行请求，因为通过浏览器无法手动发起 <code>POST</code> 请求，只能通过浏览器地址栏发起 <code>GET</code> 请求。</p>\n<div class=\"language-js\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">js</span><pre class=\"shiki material-theme-palenight\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #BABED8\">// app/router.js</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">// ...</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">router.post(&#39;/add&#39;, controller.home.add);</span></span></code></pre></div><div class=\"language-js\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">js</span><pre class=\"shiki material-theme-palenight\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #BABED8\">// app/controller/home.js</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">// post 请求方法</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">async add() &#123;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">  const &#123; ctx &#125; = this;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">  const &#123; title &#125; = ctx.request.body;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">  // Egg 框架内置了 bodyParser 中间件来对 POST 请求 body 解析成 object 挂载到 ctx.request.body 上</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">  ctx.body = &#123;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">    title</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">  &#125;;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">&#125;</span></span></code></pre></div><p>用<code>Postman</code>发送post请求会出现报错，触发网络请求的安防策略</p>\n<p><code>config/config.default.js</code> 做好白名单配置，全部允许请求：</p>\n<div class=\"language-js\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">js</span><pre class=\"shiki material-theme-palenight\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #BABED8\">config.security = &#123;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">  csrf: &#123;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">    enable: false,</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">    ignoreJSON: true</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">  &#125;,</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">  domainWhiteList: [ &#39;*&#39; ], // 配置白名单</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">&#125;;</span></span></code></pre></div><p>配置完成后，再次发送请求，可以看到请求成功，成功拿到服务端参数。</p>\n<h4 id=\"从-Service-内获取数据\"><a href=\"#从-Service-内获取数据\" class=\"headerlink\" title=\"从 Service 内获取数据\"></a><strong>从 Service 内获取数据</strong></h4><p>模拟一下在 <code>Service</code> 中获取数据库的数据，在 <code>app</code> 目录下新建 <code>service</code>，并且创建一个 <code>home.js</code>，</p>\n<div class=\"language-js\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">js</span><pre class=\"shiki material-theme-palenight\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #BABED8\">&#39;use strict&#39;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #BABED8\">const Service = require(&#39;egg&#39;).Service</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #BABED8\">class HomeService extends Service &#123;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">  async user()&#123;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">    // 假设从数据库获取的用户信息</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">    return &#123;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">      name:&#39;yu&#39;,</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">      msg:&#39;i love you egg.js&#39;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">    &#125;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">  &#125;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">&#125;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #BABED8\">module.exports = HomeService</span></span></code></pre></div><p>在 <code>Controller</code> 内拿到上述方法</p>\n<div class=\"language-js\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">js</span><pre class=\"shiki material-theme-palenight\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #BABED8\">//  app/controller/home.js</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">// 获取用户信息</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">async user() &#123;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">  const &#123; ctx &#125; = this;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">  const &#123; name, msg &#125; = await ctx.service.home.user();</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">  ctx.body = &#123;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">    name,</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">    msg</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">  &#125;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">&#125;</span></span></code></pre></div><p><code>Postman</code>打开<a href=\"http://127.0.0.1:7001/user/yu\">http://127.0.0.1:7001/user/yu</a>  可以看到网页显示：{“name”:”yu”,”msg”:”i love you egg.js”}</p>\n<h2 id=\"四、Egg-js-中使用前端模板\"><a href=\"#四、Egg-js-中使用前端模板\" class=\"headerlink\" title=\"四、Egg.js 中使用前端模板\"></a>四、Egg.js 中使用前端模板</h2><p>开发一些简单的网页，想快速部署到云服务器上，就可以使用前端模板的开发形式。</p>\n<h4 id=\"1、首先安装插件-egg-view-ejs：\"><a href=\"#1、首先安装插件-egg-view-ejs：\" class=\"headerlink\" title=\"1、首先安装插件 egg-view-ejs：\"></a>1、首先安装插件 <code>egg-view-ejs</code>：</h4><div class=\"language-shell\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">shell</span><pre class=\"shiki material-theme-palenight\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #BABED8\">npm install egg-view-ejs -save</span></span></code></pre></div><h4 id=\"2、然后在-config-plugin-js-里面声明需要用到的插件：\"><a href=\"#2、然后在-config-plugin-js-里面声明需要用到的插件：\" class=\"headerlink\" title=\"2、然后在 config/plugin.js 里面声明需要用到的插件：\"></a>2、然后在 <code>config/plugin.js</code> 里面声明需要用到的插件：</h4><div class=\"language-js\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">js</span><pre class=\"shiki material-theme-palenight\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #BABED8\">module.exports = &#123;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">  ejs: &#123;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">    enable: true,</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">    package: &#39;egg-view-ejs&#39;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">  &#125;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">&#125;;</span></span></code></pre></div><h4 id=\"3、去-config-config-default-js-里配置-ejs-，这一步我们会将-ejs-的后缀改成-html-的后缀。\"><a href=\"#3、去-config-config-default-js-里配置-ejs-，这一步我们会将-ejs-的后缀改成-html-的后缀。\" class=\"headerlink\" title=\"3、去 config/config.default.js 里配置 ejs ，这一步我们会将 .ejs 的后缀改成 .html 的后缀。\"></a>3、去 <code>config/config.default.js</code> 里配置 <code>ejs</code> ，这一步我们会将 <code>.ejs</code> 的后缀改成 <code>.html</code> 的后缀。</h4><div class=\"language-js\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">js</span><pre class=\"shiki material-theme-palenight\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #BABED8\">config.view = &#123;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">  mapping: &#123;&#39;.html&#39;: &#39;ejs&#39;&#125;  //左边写成.html后缀，会自动渲染.html文件</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">&#125;;</span></span></code></pre></div><p>上述的配置，指的是将 <code>view</code> 文件夹下的 <code>.html</code> 后缀的文件，识别为 <code>.ejs</code>。</p>\n<p>接着，在 <code>app</code> 目录下创建 <code>view</code> 文件夹，并且新建一个 <code>index.html</code> 文件，作为前端模板</p>\n<div class=\"language-html\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">html</span><pre class=\"shiki material-theme-palenight\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #BABED8\">&lt;!DOCTYPE html&gt;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">&lt;html lang=&quot;en&quot;&gt;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">&lt;head&gt;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">    &lt;meta charset=&quot;UTF-8&quot;&gt;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">    &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">    &lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;ie=edge&quot;&gt;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">    &lt;title&gt;&lt;%-title%&gt;&lt;/title&gt;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">&lt;/head&gt;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">&lt;body&gt;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">    &lt;!-- 使用模板数据 --&gt;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">    &lt;h1&gt;&lt;%-title%&gt;&lt;/h1&gt; </span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">&lt;/body&gt;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">&lt;/html&gt;</span></span></code></pre></div><p>在 <code>Controller</code> 内把变量注入到 <code>index.html</code> 文件，模板通过 <code>&lt;%-xx%&gt;</code>关键字获取到传入的变量。</p>\n<h4 id=\"4、修改-controller-home-js-下的-index-方法\"><a href=\"#4、修改-controller-home-js-下的-index-方法\" class=\"headerlink\" title=\"4、修改 controller/home.js 下的 index 方法\"></a>4、修改 <code>controller/home.js</code> 下的 <code>index</code> 方法</h4><div class=\"language-js\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">js</span><pre class=\"shiki material-theme-palenight\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #BABED8\">async index() &#123;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">  const &#123; ctx &#125; = this;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">  // ctx.render 默认会去 view 文件夹寻找 index.html，这是 Egg 约定好的。</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">  await ctx.render(&#39;index.html&#39;, &#123;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">    title: &#39;于齐&#39;, // 将 title 传入 index.html</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">  &#125;);</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">&#125;</span></span></code></pre></div><p>浏览器打开：localhost:7001  就会显示：于齐</p>\n<p>上述开发模式便是前后端不分离的模式，在页面不复杂的情况下，整个项目不采用如 <code>React</code> 、<code>Vue</code> 这些前端框架，也是可以的。在上述代码 <code>ctx.render</code> 之前，我们可以从数据库获取想要的信息，作为参数塞入模板中，模板拿到数据，构建 <code>HTML</code>。如果是提交事件，可以通过原生 <code>ajax</code> 或者是引入一把梭专家 <code>jQuery</code>，提交数据。</p>\n","text":"Egg.js：https://issummer.cn/2021/06/20/egg/ 一、项目环境egg.js对node版本是有要求的，node&gt; 8.x...","permalink":"/post/81-egg.js","photos":[],"count_time":{"symbolsCount":"6.1k","symbolsTime":"6 mins."},"categories":[],"tags":[{"name":"egg","slug":"egg","count":4,"path":"api/tags/egg.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E4%B8%80%E3%80%81%E9%A1%B9%E7%9B%AE%E7%8E%AF%E5%A2%83\"><span class=\"toc-text\">一、项目环境</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E4%BA%8C%E3%80%81egg%E9%A1%B9%E7%9B%AE%E7%9B%AE%E5%BD%95\"><span class=\"toc-text\">二、egg项目目录</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#1%E3%80%81app-router-js\"><span class=\"toc-text\">1、app&#x2F;router.js</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#2%E3%80%81app-controller-xx\"><span class=\"toc-text\">2、app&#x2F;controller&#x2F;xx</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#3%E3%80%81app-service-xx\"><span class=\"toc-text\">3、app&#x2F;service&#x2F;xx</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#4%E3%80%81app-middleware-xx\"><span class=\"toc-text\">4、app&#x2F;middleware&#x2F;xx</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#5%E3%80%81app-public-xx\"><span class=\"toc-text\">5、app&#x2F;public&#x2F;xx</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#6%E3%80%81config-config-env-js\"><span class=\"toc-text\">6、config&#x2F;config.{env}.js</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#7%E3%80%81config-plugin-js\"><span class=\"toc-text\">7、config&#x2F;plugin.js</span></a></li></ol></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E4%B8%89%E3%80%81%E7%BC%96%E5%86%99-GET-%E5%92%8C-POST-%E6%8E%A5%E5%8F%A3\"><span class=\"toc-text\">三、编写 GET 和 POST 接口</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#GET-%E8%AF%B7%E6%B1%82%E5%8F%82%E6%95%B0%E8%8E%B7%E5%8F%96\"><span class=\"toc-text\">GET 请求参数获取</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#post%E8%AF%B7%E6%B1%82%E5%8F%82%E6%95%B0%E8%8E%B7%E5%8F%96\"><span class=\"toc-text\">post请求参数获取</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E4%BB%8E-Service-%E5%86%85%E8%8E%B7%E5%8F%96%E6%95%B0%E6%8D%AE\"><span class=\"toc-text\">从 Service 内获取数据</span></a></li></ol></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%9B%9B%E3%80%81Egg-js-%E4%B8%AD%E4%BD%BF%E7%94%A8%E5%89%8D%E7%AB%AF%E6%A8%A1%E6%9D%BF\"><span class=\"toc-text\">四、Egg.js 中使用前端模板</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#1%E3%80%81%E9%A6%96%E5%85%88%E5%AE%89%E8%A3%85%E6%8F%92%E4%BB%B6-egg-view-ejs%EF%BC%9A\"><span class=\"toc-text\">1、首先安装插件 egg-view-ejs：</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#2%E3%80%81%E7%84%B6%E5%90%8E%E5%9C%A8-config-plugin-js-%E9%87%8C%E9%9D%A2%E5%A3%B0%E6%98%8E%E9%9C%80%E8%A6%81%E7%94%A8%E5%88%B0%E7%9A%84%E6%8F%92%E4%BB%B6%EF%BC%9A\"><span class=\"toc-text\">2、然后在 config&#x2F;plugin.js 里面声明需要用到的插件：</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#3%E3%80%81%E5%8E%BB-config-config-default-js-%E9%87%8C%E9%85%8D%E7%BD%AE-ejs-%EF%BC%8C%E8%BF%99%E4%B8%80%E6%AD%A5%E6%88%91%E4%BB%AC%E4%BC%9A%E5%B0%86-ejs-%E7%9A%84%E5%90%8E%E7%BC%80%E6%94%B9%E6%88%90-html-%E7%9A%84%E5%90%8E%E7%BC%80%E3%80%82\"><span class=\"toc-text\">3、去 config&#x2F;config.default.js 里配置 ejs ，这一步我们会将 .ejs 的后缀改成 .html 的后缀。</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#4%E3%80%81%E4%BF%AE%E6%94%B9-controller-home-js-%E4%B8%8B%E7%9A%84-index-%E6%96%B9%E6%B3%95\"><span class=\"toc-text\">4、修改 controller&#x2F;home.js 下的 index 方法</span></a></li></ol></li></ol></li></ol>","author":{"name":"Jude","slug":"blog-author","avatar":"","link":"/","description":"","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"mapped":true,"hidden":false,"prev_post":{"title":"82、egg-mysql的增删改查","uid":"ca10d3e7f1a13d6503bb04ce7c675542","slug":"82-egg-mysql","date":"2022-08-03T12:00:00.000Z","updated":"2022-10-11T08:12:51.000Z","comments":true,"path":"api/articles/82-egg-mysql.json","keywords":null,"cover":null,"text":"MySQL安装成功后，在egg项目中安装egg-mysql插件，配置完成后，编写查询、新增、删除、编辑接口。 一、安装MySQL版本选择MySQL 8.0.20...","permalink":"/post/82-egg-mysql","photos":[],"count_time":{"symbolsCount":"4.7k","symbolsTime":"4 mins."},"categories":[],"tags":[{"name":"egg","slug":"egg","count":4,"path":"api/tags/egg.json"}],"author":{"name":"Jude","slug":"blog-author","avatar":"","link":"/","description":"","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}},"next_post":{"title":"80、使用 element-plus 版本升级后的问题清单","uid":"6bbe4d12f264ccc0c8550bef06f65a4b","slug":"80-element-plus","date":"2022-08-01T12:00:00.000Z","updated":"2022-09-22T08:45:03.000Z","comments":true,"path":"api/articles/80-element-plus.json","keywords":null,"cover":null,"text":"element-plus 版本升级由@1.1.0-beta.15 升级到@2.0.4 版本时，在开发时遇到的问题整理及解决方法 一、错误： Can&#39;t ...","permalink":"/post/80-element-plus","photos":[],"count_time":{"symbolsCount":"1.3k","symbolsTime":"1 mins."},"categories":[],"tags":[{"name":"vue3","slug":"vue3","count":24,"path":"api/tags/vue3.json"}],"author":{"name":"Jude","slug":"blog-author","avatar":"","link":"/","description":"","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}}}