{"title":"62、权限管理","uid":"93e6995d69db4365548a7462a9d2113a","slug":"62-permmsion","date":"2022-03-11T16:00:00.000Z","updated":"2022-09-05T07:59:06.000Z","comments":true,"path":"api/articles/62-permmsion.json","keywords":null,"cover":null,"content":"<ol>\n<li>权限管理一般需求是页面权限和按钮权限的管理</li>\n<li>具体实现的时候分后端和前端两种方案：<br>前端方案会把所有路由信息在前端配置，通过路由守卫要求用户登录，用户登录后根据角色过滤出路由表。比如我会配置一个 asyncRoutes‘数组，需要认证的页面在其路由的‘meta’中添加一个 roles*字段，等获取用户角色之后取两者的交集，若结果不为空则说明可以访问。此过滤过程结束，剩下的路由就是该用户能访问的页面，最后通过‘router.addRoutes(accessRoutes)°方式动态添加路由即可。<br>后端方案会把所有页面路由信息存在数据库中，用户登录的时候根据其角色查询得到其能访问的所有页面路由信息返回给前端，前端再通过 addRoutes‘动态添加路由信息<br>按钮权限的控制通常会实现一个指令，例如V-permissin’，将按钮要求角色通过值传给vpermission指<br>令，在指令的 moutned钩子中可以判断当前用户角色和按钮是否存在交集，有则保留按钮，无则移除按钮。</li>\n<li>纯前端方案的优点是实现简单，不需要额外权限管理页面，但是维护起来问题比较大，有新的页面和角色需求就要修改前端代码重新打包部署；服务端方案就不存在这个问题，通过专门的角色和权限管理页面，配置页面和按钮权限信息到数据库，应用每次登陆时获取的都是最新的路由信息，可谓一劳永逸！</li>\n</ol>\n","text":" 权限管理一般需求是页面权限和按钮权限的管理 具体实现的时候分后端和前端两种方案：前端方案会把所有路由信息在前端配置，通过路由守卫要求用户登录，用户登录后根据角...","permalink":"/post/62-permmsion","photos":[],"count_time":{"symbolsCount":572,"symbolsTime":"1 mins."},"categories":[],"tags":[{"name":"vue","slug":"vue","count":17,"path":"api/tags/vue.json"}],"toc":"","author":{"name":"Jude","slug":"blog-author","avatar":"","link":"/","description":"","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"mapped":true,"hidden":false,"prev_post":{"title":"64、ant-design-vue-picker","uid":"85b7a16cbec6629594a0f1c58d3348a5","slug":"64-ant-design-vue-picker","date":"2022-04-06T12:00:00.000Z","updated":"2022-09-05T07:59:30.000Z","comments":true,"path":"api/articles/64-ant-design-vue-picker.json","keywords":null,"cover":null,"text":"ant-design-vue 限制时间选择框,展示2天内数据且只能选择7日范围内（截止时间不得超过当日） 1、template html&lt;a-form-i...","permalink":"/post/64-ant-design-vue-picker","photos":[],"count_time":{"symbolsCount":"1.2k","symbolsTime":"1 mins."},"categories":[],"tags":[{"name":"ant-design-vue","slug":"ant-design-vue","count":4,"path":"api/tags/ant-design-vue.json"}],"author":{"name":"Jude","slug":"blog-author","avatar":"","link":"/","description":"","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}},"next_post":{"title":"61、js如何将base64转成16进制","uid":"91787eb7e529f909a3a7c06abd6ab596","slug":"61-base64To16","date":"2022-03-01T12:00:00.000Z","updated":"2022-09-05T07:58:42.000Z","comments":true,"path":"api/articles/61-base64To16.json","keywords":null,"cover":null,"text":"需求：将base64密文解密成16进制。 1、原生js的编码(btoa)和解码(atob) jsvar baseStr = &quot;http://www.b...","permalink":"/post/61-base64To16","photos":[],"count_time":{"symbolsCount":636,"symbolsTime":"1 mins."},"categories":[],"tags":[{"name":"js","slug":"js","count":11,"path":"api/tags/js.json"}],"author":{"name":"Jude","slug":"blog-author","avatar":"","link":"/","description":"","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}}}