{"title":"111、稀土掘金小册-记账本（二）react vite","uid":"09473714551f922240c448f4bd63c8bd","slug":"111-react","date":"2023-01-03T12:00:00.000Z","updated":"2023-08-15T02:56:52.000Z","comments":true,"path":"api/articles/111-react.json","keywords":null,"cover":[],"content":"<span id=\"more\"></span>\n\n<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>我还是那句话，工具永远是服务于需求的。纵观整个前端生态的项目构建工具，有服务于 <code>React</code> 生态的 <code>create-react-app</code>、<code>umi</code>、<code>Next.js</code> 等。服务于 <code>Vue</code> 生态的 <code>Vue CLI</code>、<code>Vite</code>、<code>Nuxt.js</code> 等。它们都是耳熟能详的团队和大佬，为了解决各自需求而研发出来的前端构建工具。而我们要做的其实就是根据项目的需求，进行合理的选择和学习。说白了，在你没有决定权的时候，公司用什么，你就学什么。在你有话语权，能自己抉择的时候，哪个让你开发起来比较舒服，就用哪个。</p>\n<p>这些构建工具中，有一个比较特殊，那就是 <code>Vite</code>，它是尤雨溪在发布 <code>Vue 3.0</code> 时，同步推出的一款前端构建工具。它不光服务于 <code>Vue</code>，同时也对其他的框架如 <code>React</code>、<code>Svelte</code>、<code>Preact</code> 都有一定的支持，我们本着学新不学旧的理念，在项目中引进了 <code>Vite</code> 作为构建工具。</p>\n<p>在开始使用 <code>Vite</code> 之前，我们来认识一下它。</p>\n<h3 id=\"知识点\"><a href=\"#知识点\" class=\"headerlink\" title=\"知识点\"></a>知识点</h3><ul>\n<li><code>Vite</code> 是什么。</li>\n<li><code>Vite</code> 与 <code>Webpack</code> 相比优势在哪里。</li>\n<li><code>Vite</code> 的构建原理。</li>\n</ul>\n<h2 id=\"Vite-是什么\"><a href=\"#Vite-是什么\" class=\"headerlink\" title=\"Vite 是什么\"></a>Vite 是什么</h2><p>我们引用官方的一句话来介绍它，“下一代前端开发与构建工具”。</p>\n<p>它有以下几个特点：</p>\n<p>1、 快速启动，<code>Vite</code> 会在本地启动一个开发服务器，来管理开发环境的资源请求。</p>\n<p>2、相比 <code>Webpack</code> 的开发环境打包构建，它在开发环境下是无需打包的，热更新相比 <code>Webpack</code> 会快很多。</p>\n<p>3、原生 <code>ES Module</code>，要什么就当场给你什么。而 <code>Webpack</code> 则是先将资源构建好之后，再根据你的需要，分配给你想要的资源。</p>\n<p>尤雨溪在发布 <code>Vite</code> 前，发过这么一条微博。</p>\n<p><img src=\"https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/5b6344806ae94c96b9060fb0a3b13381~tplv-k3u1fbpfcp-zoom-in-crop-mark:3024:0:0:0.awebp\" alt=\"img\"></p>\n<p>从话语间可以看出，尤雨溪团队对该打包工具也是报以厚望，所以这里大家可以不必担心后续它们会放弃维护这个项目，当然也不能打包票。</p>\n<h2 id=\"Vite-与-Webpack-相比优势在哪里\"><a href=\"#Vite-与-Webpack-相比优势在哪里\" class=\"headerlink\" title=\"Vite 与 Webpack 相比优势在哪里\"></a>Vite 与 Webpack 相比优势在哪里</h2><p>接下来我们来聊聊，为什么说它是下一代前端开发与构建工具。是不是当代构建工具出了什么问题？</p>\n<p>我们知道当代的前端构建工具有很多，比较受欢迎的有 <code>Webpack</code>、<code>Rollup</code>、<code>Parcel</code>等，绝大多数脚手架工具都是使用 <code>Webpack</code> 作为构建工具，如 <code>Vue-CLI</code>。</p>\n<p>在利用 <code>Webpack</code> 作为构建工具时，开发过程中，每次修改代码，都会导致重新编译，随着项目代码量的增多，热更新的速度也随之变慢，甚至要几秒钟才能看到视图的更新。</p>\n<p>生产环境下，它将各个模块之间通过编码的方式联系在一起，最终生成一个庞大的 <code>bundle</code> 文件。</p>\n<p>导致这些问题出现的原因，有以下几点：</p>\n<p>1、<code>HTTP 1.1</code> 时代，各个浏览器资源请求并发是有上限的（如谷歌浏览器为 6 个，这导致你必须要减少资源请求数）。</p>\n<p>2、浏览器并不支持 <code>CommonJS</code> 模块化系统（它不能直接运行在浏览器环境下，它是 <code>Node</code> 提出的模块化规范，所以需要经过 <code>Webpack</code> 的打包，编译成浏览器可识别的 JS 脚本）</p>\n<p>3、模块与模块之间的依赖顺序和管理问题（文件依赖层级越多，静态资源也就变得越多，如果一个资源有 100 个依赖关系，可能需要加载 100 个网络请求，这对生产环境可能是灾难，所以在生产环境最终会打包成一个 <code>bundle</code> 脚本，会提前进行资源按需加载的配置。）</p>\n<h3 id=\"那么为什么现在又出现了不打包的构建趋势？\"><a href=\"#那么为什么现在又出现了不打包的构建趋势？\" class=\"headerlink\" title=\"那么为什么现在又出现了不打包的构建趋势？\"></a>那么为什么现在又出现了不打包的构建趋势？</h3><p>1、工程越来越庞大，热更新变得缓慢，十分影响开发体验。推动着我们不断地去创新，不断地尝试着去突破瓶颈。</p>\n<p>2、各大浏览器已经开始慢慢的支持原生 <code>ES Module</code> (谷歌、火狐、<code>Safari</code>、<code>Edge</code> 的最新版本，都已支持。这让我们看到了希望)。</p>\n<p>3、<code>HTTP 2.0</code> 采用的多路复用。不用太担心请求并发量的问题。</p>\n<p>4、越来越多的 <code>npm</code> 包开始采用了原生 <code>ESM</code> 的开发形式。虽然还有很多包不支持，但是我相信这将会是趋势。</p>\n<p>我们通过表格的形式，对比一下 <code>bundle</code> 和 <code>bundleless</code> 的区别。</p>\n<p><img src=\"https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/ff916f65816b469989198bdc2ec18fd1~tplv-k3u1fbpfcp-zoom-in-crop-mark:3024:0:0:0.awebp\" alt=\"img\"></p>\n<h2 id=\"Vite-构建原理\"><a href=\"#Vite-构建原理\" class=\"headerlink\" title=\"Vite 构建原理\"></a>Vite 构建原理</h2><p>众所周知，<code>Vite</code> 的生产模式和开发模式是不同的概念。我们先聊聊，<code>Vite</code> 的开发模式。</p>\n<p>首先要明确一点，<code>Vite</code> 在开发模式下，有一个 依赖预构建 的概念。</p>\n<h3 id=\"什么是依赖预构建\"><a href=\"#什么是依赖预构建\" class=\"headerlink\" title=\"什么是依赖预构建\"></a>什么是依赖预构建</h3><p>在 <code>Vite</code> 启动开发服务器之后，它将第三方依赖的多个静态资源整合为一个，比如 <code>lodash</code>、<code>qs</code>、<code>axios</code> 等这类资源包，存入 ·node_modules&#x2F;.vite 文件下。</p>\n<h3 id=\"为什么需要依赖预构建\"><a href=\"#为什么需要依赖预构建\" class=\"headerlink\" title=\"为什么需要依赖预构建\"></a>为什么需要依赖预构建</h3><p>如果直接采用 <code>ES Module</code> 的形式开发代码，会产生一大串依赖，就好像俄罗斯套娃一样，一层一层的嵌套，在浏览器资源有限的情况下，同时请求大量的静态资源，会造成浏览器的卡顿，并且资源响应的时间也会变慢。</p>\n<p>我们先不通过 <code>Vite</code>，而是手动搭建原生 <code>ES Module</code> 开发形式，通过引入 <code>lodash-es</code> 包，实现一个数组去重的小例子，来详细分析为什么需要依赖预构建。</p>\n<p>新建 <code>test1</code> 文件夹，通过 <code>npm init -y</code> 初始化了一个前端工程：</p>\n<p><img src=\"https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/eabc5b637e734347b8e7965496669fee~tplv-k3u1fbpfcp-zoom-in-crop-mark:3024:0:0:0.awebp\" alt=\"img\"></p>\n<p>手动新建 <code>index.html</code>，通过 <code>script</code> 标签，引入 <code>main.js</code>。这里注意，需要将 <code>type</code> 属性设置为 <code>module</code>，这样才能支持 <code>ES Module</code> 模块化开发。</p>\n<p>通过 <code>npm</code> 安装 <code>lodash-es</code>，这里我们之所以不使用 <code>lodash</code>，是因为 <code>lodash</code> 不是通过 <code>ES Module</code> 形式开发的，直接通过相对路径引入会报错，需要通过 <code>Webpack</code> 打包构建。</p>\n<div class=\"language-bash\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">bash</span><pre class=\"shiki material-theme-palenight\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #FFCB6B\">npm</span><span style=\"color: #BABED8\"> </span><span style=\"color: #C3E88D\">i</span><span style=\"color: #BABED8\"> </span><span style=\"color: #C3E88D\">lodash-es</span></span></code></pre></div><p>新建 <code>main.js</code> 添加去重逻辑：</p>\n<div class=\"language-js\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">js</span><pre class=\"shiki material-theme-palenight\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #89DDFF; font-style: italic\">import</span><span style=\"color: #BABED8\"> uniq </span><span style=\"color: #89DDFF; font-style: italic\">from</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #C3E88D\">./node_modules/lodash-es/uniq.js</span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #89DDFF\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #C792EA\">const</span><span style=\"color: #BABED8\"> arr </span><span style=\"color: #89DDFF\">=</span><span style=\"color: #BABED8\"> [</span><span style=\"color: #F78C6C\">1</span><span style=\"color: #89DDFF\">,</span><span style=\"color: #BABED8\"> </span><span style=\"color: #F78C6C\">2</span><span style=\"color: #89DDFF\">,</span><span style=\"color: #BABED8\"> </span><span style=\"color: #F78C6C\">3</span><span style=\"color: #89DDFF\">,</span><span style=\"color: #BABED8\"> </span><span style=\"color: #F78C6C\">3</span><span style=\"color: #89DDFF\">,</span><span style=\"color: #BABED8\"> </span><span style=\"color: #F78C6C\">4</span><span style=\"color: #BABED8\">]</span><span style=\"color: #89DDFF\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #BABED8\">console</span><span style=\"color: #89DDFF\">.</span><span style=\"color: #82AAFF\">log</span><span style=\"color: #BABED8\">(</span><span style=\"color: #82AAFF\">uniq</span><span style=\"color: #BABED8\">(arr))</span><span style=\"color: #89DDFF\">;</span></span></code></pre></div><p>这里我们采用 <code>VSCode</code> 的插件，<code>Live Server</code>，来启动项目。</p>\n<p><img src=\"https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/30054fefbeaf485a96db8d4a4d8f5aad~tplv-k3u1fbpfcp-zoom-in-crop-mark:3024:0:0:0.awebp\" alt=\"img\"></p>\n<p>安装完之后，在项目中双击 <code>index.html</code>，找到右下角的 「Go Live」，如下所示：</p>\n<p><img src=\"https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/64858bc1bd3e4206a4b996c8ba4f5d74~tplv-k3u1fbpfcp-zoom-in-crop-mark:3024:0:0:0.awebp\" alt=\"img\"></p>\n<p>点击后，自动启动一个 <code>Web</code> 服务，浏览器自动打开，如下所示：</p>\n<p><img src=\"https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/3858ec887f744781b6c45fadad638c2c~tplv-k3u1fbpfcp-zoom-in-crop-mark:3024:0:0:0.awebp\" alt=\"img\"></p>\n<p>结果正确，数组中的 3 被去除了，接下来关键的一个点，我们点击 <code>Network</code> 查看，资源引入情况：</p>\n<p><img src=\"https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/9b9e60c097184e20a78cb8198968b199~tplv-k3u1fbpfcp-zoom-in-crop-mark:3024:0:0:0.awebp\" alt=\"img\"></p>\n<p>我们只是获取去重方法，却意外引入了 59 资源，这是为什么呢？</p>\n<p>我们先查看 <code>main.js</code> 内的代码，如下所示：</p>\n<p><img src=\"https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/f001d806817f4ed5a9ad521c9a91a6d5~tplv-k3u1fbpfcp-zoom-in-crop-mark:3024:0:0:0.awebp\" alt=\"img\"></p>\n<p>代码中只有在首行通过 <code>import</code> 引入了 <code>./node_modules/lodash-es/uniq.js</code>，所以 <code>uniq.js</code> 被作为资源引入进来，我们再看 <code>uniq.js</code> 的情况：</p>\n<p><img src=\"https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/7b21e238127c47ec8f69b16775b4bb08~tplv-k3u1fbpfcp-zoom-in-crop-mark:3024:0:0:0.awebp\" alt=\"img\"></p>\n<p><code>uniq.js</code> 中，首行通过 <code>import</code> 引入了 <code>_baseUniq.js</code>，我们继续：</p>\n<p><img src=\"https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/6392953fd6b043ea99355687a5569763~tplv-k3u1fbpfcp-zoom-in-crop-mark:3024:0:0:0.awebp\" alt=\"img\"></p>\n<p><code>_baseUniq.js</code> 中，引入了上图箭头中的一些脚本，不用往下看，我盲猜这种俄罗斯套娃的模式，会一直引用到 <code>uniq.js</code> 相关的所有脚本代码。</p>\n<p>这只是一个 <code>uniq</code> 方法，足足就引入了 59 个资源，这仿佛是在军训浏览器，也就是谷歌能跟它博弈几个回合，引入的包再多几个，我估计也是顶不住的。</p>\n<p>所以这时候 <code>Vite</code> 便引入了「依赖预构建」的概念。</p>\n<h3 id=\"依赖现预构建浅析\"><a href=\"#依赖现预构建浅析\" class=\"headerlink\" title=\"依赖现预构建浅析\"></a>依赖现预构建浅析</h3><p>同样的，再通过 <code>Vite</code> 构建出一个 <code>React</code> 项目，去实现上述逻辑，我们观察 <code>Vite</code> 是怎么作的。</p>\n<p>首先通过 <code>Vite</code> 指令生成项目：</p>\n<div class=\"language-bash\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">bash</span><pre class=\"shiki material-theme-palenight\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #FFCB6B\">npm</span><span style=\"color: #BABED8\"> </span><span style=\"color: #C3E88D\">init</span><span style=\"color: #BABED8\"> </span><span style=\"color: #C3E88D\">@vitejs/app</span><span style=\"color: #BABED8\"> </span><span style=\"color: #C3E88D\">test2</span><span style=\"color: #BABED8\"> </span><span style=\"color: #C3E88D\">--template</span><span style=\"color: #BABED8\"> </span><span style=\"color: #C3E88D\">react</span></span></code></pre></div><p>并安装 <code>lodash-es</code>，修改入口脚本 <code>main.jsx</code>：</p>\n<div class=\"language-js\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">js</span><pre class=\"shiki material-theme-palenight\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #89DDFF; font-style: italic\">import</span><span style=\"color: #BABED8\"> uniq </span><span style=\"color: #89DDFF; font-style: italic\">from</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #C3E88D\">lodash-es/uniq.js</span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #89DDFF\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #C792EA\">const</span><span style=\"color: #BABED8\"> arr </span><span style=\"color: #89DDFF\">=</span><span style=\"color: #BABED8\"> [</span><span style=\"color: #F78C6C\">1</span><span style=\"color: #89DDFF\">,</span><span style=\"color: #BABED8\"> </span><span style=\"color: #F78C6C\">2</span><span style=\"color: #89DDFF\">,</span><span style=\"color: #BABED8\"> </span><span style=\"color: #F78C6C\">3</span><span style=\"color: #89DDFF\">,</span><span style=\"color: #BABED8\"> </span><span style=\"color: #F78C6C\">3</span><span style=\"color: #89DDFF\">,</span><span style=\"color: #BABED8\"> </span><span style=\"color: #F78C6C\">4</span><span style=\"color: #BABED8\">]</span><span style=\"color: #89DDFF\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #BABED8\">console</span><span style=\"color: #89DDFF\">.</span><span style=\"color: #82AAFF\">log</span><span style=\"color: #BABED8\">(</span><span style=\"color: #82AAFF\">uniq</span><span style=\"color: #BABED8\">(arr))</span><span style=\"color: #89DDFF\">;</span></span></code></pre></div><p>我们观察浏览器的 <code>Network</code>，如下所示：</p>\n<p><img src=\"https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/dce2afc266e84fa79ee8c9a0c0266c85~tplv-k3u1fbpfcp-zoom-in-crop-mark:3024:0:0:0.awebp\" alt=\"img\"></p>\n<p>注意上图，执行 <code>npm run dev</code> 后，脚本中引用 <code>lodash-es/uniq</code> 的路径是在 <code>/node_modules/.vite</code> 文件夹下，并且左下角的请求资源数，也没有我们之前原生 <code>ES Module</code> 时的多，少了足足 3&#x2F;4 还多。</p>\n<p>再观察文件目录：</p>\n<p><img src=\"https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/715c51aaea93420dac55e3ccca003222~tplv-k3u1fbpfcp-zoom-in-crop-mark:3024:0:0:0.awebp\" alt=\"img\"></p>\n<p><code>lodash-es/uniq</code> 已经被 <code>Vite</code> 提前预编译到了 <code>.vite</code> 文件夹下，这样代码中直接去这个文件夹拿现成的包，就不必再递归地去加载很多静态资源脚本。</p>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>本章节，通过实例分析，对 <code>Vite</code> 有了初步的了解。那么下一章节，我将带大家通过 <code>Vite</code> 去搭建一个 <code>React</code> 的完整开发环境。</p>\n","text":" 前言我还是那句话，工具永远是服务于需求的。纵观整个前端生态的项目构建工具，有服务于 React 生态的 create-react-app、umi、Next.j...","permalink":"/post/111-react","photos":[],"count_time":{"symbolsCount":"3.5k","symbolsTime":"3 mins."},"categories":[],"tags":[{"name":"react","slug":"react","count":10,"path":"api/tags/react.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%89%8D%E8%A8%80\"><span class=\"toc-text\">前言</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E7%9F%A5%E8%AF%86%E7%82%B9\"><span class=\"toc-text\">知识点</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#Vite-%E6%98%AF%E4%BB%80%E4%B9%88\"><span class=\"toc-text\">Vite 是什么</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#Vite-%E4%B8%8E-Webpack-%E7%9B%B8%E6%AF%94%E4%BC%98%E5%8A%BF%E5%9C%A8%E5%93%AA%E9%87%8C\"><span class=\"toc-text\">Vite 与 Webpack 相比优势在哪里</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E9%82%A3%E4%B9%88%E4%B8%BA%E4%BB%80%E4%B9%88%E7%8E%B0%E5%9C%A8%E5%8F%88%E5%87%BA%E7%8E%B0%E4%BA%86%E4%B8%8D%E6%89%93%E5%8C%85%E7%9A%84%E6%9E%84%E5%BB%BA%E8%B6%8B%E5%8A%BF%EF%BC%9F\"><span class=\"toc-text\">那么为什么现在又出现了不打包的构建趋势？</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#Vite-%E6%9E%84%E5%BB%BA%E5%8E%9F%E7%90%86\"><span class=\"toc-text\">Vite 构建原理</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E4%BB%80%E4%B9%88%E6%98%AF%E4%BE%9D%E8%B5%96%E9%A2%84%E6%9E%84%E5%BB%BA\"><span class=\"toc-text\">什么是依赖预构建</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E4%B8%BA%E4%BB%80%E4%B9%88%E9%9C%80%E8%A6%81%E4%BE%9D%E8%B5%96%E9%A2%84%E6%9E%84%E5%BB%BA\"><span class=\"toc-text\">为什么需要依赖预构建</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E4%BE%9D%E8%B5%96%E7%8E%B0%E9%A2%84%E6%9E%84%E5%BB%BA%E6%B5%85%E6%9E%90\"><span class=\"toc-text\">依赖现预构建浅析</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E6%80%BB%E7%BB%93\"><span class=\"toc-text\">总结</span></a></li></ol>","author":{"name":"Jude","slug":"blog-author","avatar":"","link":"/","description":"","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"mapped":true,"hidden":false,"prev_post":{"title":"112、稀土掘金小册-记账本（三）react vite2.0 ZarmUI搭建开发环境","uid":"64c2762fa9fc2624093936d7950b6579","slug":"112-react","date":"2023-01-04T12:00:00.000Z","updated":"2023-08-15T02:56:33.000Z","comments":true,"path":"api/articles/112-react.json","keywords":null,"cover":[],"text":" 前言React 技术栈的 UI 组件库相比 Vue，会少一些。我们耳熟能详的便是 Antd，但是它针对的是 PC 端的，我们的项目目前是一个 H5 的网页（不...","permalink":"/post/112-react","photos":[],"count_time":{"symbolsCount":"11k","symbolsTime":"10 mins."},"categories":[],"tags":[{"name":"react","slug":"react","count":10,"path":"api/tags/react.json"}],"author":{"name":"Jude","slug":"blog-author","avatar":"","link":"/","description":"","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}},"next_post":{"title":"110、稀土掘金小册-记账本（一） react hooks","uid":"1345bfb96de851cf82279abce3ebd565","slug":"110-react","date":"2022-12-30T12:00:00.000Z","updated":"2023-08-15T02:57:10.000Z","comments":true,"path":"api/articles/110-react.json","keywords":null,"cover":[],"text":"React 早期的写法以 Class 类组件为主，附带一些纯用于展示的函数组件，但是函数组件是不能控制自身的状态的。 直到 16.8 版本出来之后，引入了全新的...","permalink":"/post/110-react","photos":[],"count_time":{"symbolsCount":"13k","symbolsTime":"12 mins."},"categories":[],"tags":[{"name":"react","slug":"react","count":10,"path":"api/tags/react.json"}],"author":{"name":"Jude","slug":"blog-author","avatar":"","link":"/","description":"","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}}}