{"title":"65、响应式原理","uid":"6aa055f21121350012e80c5eb71d3fcf","slug":"65-reactive","date":"2022-04-11T16:00:00.000Z","updated":"2022-09-06T04:45:14.000Z","comments":true,"path":"api/articles/65-reactive.json","keywords":null,"cover":null,"content":"<span id=\"more\"></span>\n\n<p>1、什么是响应式？</p>\n<p>数据变化可以被检测对这种变化做出响应的机制</p>\n<p>2、Vue为什么需要响应式？</p>\n<p>MVVM框架需要解决的核心问题技术就是连接数据层和视图层，<br>通过数据驱动应用，数据变化，试图更新，要做到这点就需要对数据做响应式处理，这样一旦数据发生变化就可以立即做出更新处理。</p>\n<p>3、响应式的好处？</p>\n<p>通过数据响应式加上虚拟DOM和patch算法，开发人员只需要操作数据，关心业务，完全不用接触繁琐的DOM操作，大大提升开发效率，降低开发难度。</p>\n<p>4、如何实现Vue的响应式？优缺点？</p>\n<p>Vue2肿的数据响应式会根据数据类型来做不同处理，如果是对象采用Object.defineProperty()的方式定义数据拦截，当数据被访问或发生变化时，我们感知并做出响应；<br>如果是数组则通过覆盖数组对象原型的7个变更方法，使这些方法可以额外的做更新通知，从而作出响应。<br>这种机制很好的解决了数据响应化问题，但是也存在一些缺点：<br>初始化时的递归遍历会造成性能损失；新增或者删除属性需要使用Vue.set&#x2F;delete这些特殊的API才能生效；对于es6中新产生的Map、Set这些数据结构不支持。</p>\n<div class=\"language-js\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">js</span><pre class=\"shiki material-theme-palenight\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #C792EA\">function</span><span style=\"color: #BABED8\"> </span><span style=\"color: #82AAFF\">defineReactive</span><span style=\"color: #89DDFF\">(</span><span style=\"color: #BABED8; font-style: italic\">obj</span><span style=\"color: #89DDFF\">,</span><span style=\"color: #BABED8; font-style: italic\">key</span><span style=\"color: #89DDFF\">,</span><span style=\"color: #BABED8; font-style: italic\">val</span><span style=\"color: #89DDFF\">)&#123;</span></span>\n<span class=\"line\"><span style=\"color: #F07178\">  </span><span style=\"color: #BABED8\">Object</span><span style=\"color: #89DDFF\">.</span><span style=\"color: #82AAFF\">defineProperty</span><span style=\"color: #F07178\">(</span><span style=\"color: #BABED8\">obj</span><span style=\"color: #89DDFF\">,</span><span style=\"color: #BABED8\">key</span><span style=\"color: #89DDFF\">,&#123;</span></span>\n<span class=\"line\"><span style=\"color: #F07178\">    get</span><span style=\"color: #89DDFF\">(</span><span style=\"color: #BABED8; font-style: italic\">key</span><span style=\"color: #89DDFF\">)&#123;&#125;,</span></span>\n<span class=\"line\"><span style=\"color: #F07178\">    set</span><span style=\"color: #89DDFF\">(</span><span style=\"color: #BABED8; font-style: italic\">key</span><span style=\"color: #89DDFF\">,</span><span style=\"color: #BABED8; font-style: italic\">val</span><span style=\"color: #89DDFF\">)&#123;&#125;</span></span>\n<span class=\"line\"><span style=\"color: #F07178\">  </span><span style=\"color: #89DDFF\">&#125;</span><span style=\"color: #F07178\">)</span></span>\n<span class=\"line\"><span style=\"color: #89DDFF\">&#125;</span></span></code></pre></div><p>5、Vue3如何实现响应式？</p>\n<p>利用es6的Proxy代理响应式的数据。<br>好处：不需要特殊的api，初始化性能和内存小号都得到了大幅改善<br>由于响应化的实现代码抽取为独立的reactivity报，使得我们可以灵活的使用它，第三方的扩展开发更加的灵活</p>\n<p>Proxy属性拦截的原理：利用get、set、deleteProperty这3个trap实现拦截</p>\n<div class=\"language-js\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">js</span><pre class=\"shiki material-theme-palenight\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #C792EA\">function</span><span style=\"color: #BABED8\"> </span><span style=\"color: #82AAFF\">reactive</span><span style=\"color: #89DDFF\">(</span><span style=\"color: #BABED8; font-style: italic\">obj</span><span style=\"color: #89DDFF\">)&#123;</span></span>\n<span class=\"line\"><span style=\"color: #F07178\">  </span><span style=\"color: #89DDFF; font-style: italic\">return</span><span style=\"color: #F07178\"> </span><span style=\"color: #89DDFF\">new</span><span style=\"color: #F07178\"> </span><span style=\"color: #82AAFF\">Proxy</span><span style=\"color: #F07178\">(</span><span style=\"color: #BABED8\">obj</span><span style=\"color: #89DDFF\">,&#123;</span></span>\n<span class=\"line\"><span style=\"color: #F07178\">    get</span><span style=\"color: #89DDFF\">(</span><span style=\"color: #BABED8; font-style: italic\">target</span><span style=\"color: #89DDFF\">,</span><span style=\"color: #BABED8; font-style: italic\">key</span><span style=\"color: #89DDFF\">)&#123;&#125;,</span></span>\n<span class=\"line\"><span style=\"color: #F07178\">    set</span><span style=\"color: #89DDFF\">(</span><span style=\"color: #BABED8; font-style: italic\">target</span><span style=\"color: #89DDFF\">,</span><span style=\"color: #BABED8; font-style: italic\">key</span><span style=\"color: #89DDFF\">,</span><span style=\"color: #BABED8; font-style: italic\">val</span><span style=\"color: #89DDFF\">)&#123;&#125;,</span></span>\n<span class=\"line\"><span style=\"color: #F07178\">    deleteProperty</span><span style=\"color: #89DDFF\">(</span><span style=\"color: #BABED8; font-style: italic\">target</span><span style=\"color: #89DDFF\">,</span><span style=\"color: #BABED8; font-style: italic\">key</span><span style=\"color: #89DDFF\">)&#123;&#125;</span></span>\n<span class=\"line\"><span style=\"color: #F07178\">  </span><span style=\"color: #89DDFF\">&#125;</span><span style=\"color: #F07178\">)</span></span>\n<span class=\"line\"><span style=\"color: #89DDFF\">&#125;</span></span></code></pre></div><p>proxy更快的原因：初始化时懒处理，用户访问才做拦截处理，初始化更快。</p>\n<div class=\"language-ts\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">ts</span><pre class=\"shiki material-theme-palenight\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #676E95; font-style: italic\">// https://github1s.com/vuejs/core/blob/HEAD/packages/reactivity/src/baseHandlers.ts</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">    </span><span style=\"color: #89DDFF; font-style: italic\">if</span><span style=\"color: #BABED8\"> (</span><span style=\"color: #82AAFF\">isObject</span><span style=\"color: #BABED8\">(res)) </span><span style=\"color: #89DDFF\">&#123;</span></span>\n<span class=\"line\"><span style=\"color: #89DDFF\">      </span><span style=\"color: #676E95; font-style: italic\">// Convert returned value into a proxy as well. we do the isObject check</span></span>\n<span class=\"line\"><span style=\"color: #89DDFF\">      </span><span style=\"color: #676E95; font-style: italic\">// here to avoid invalid value warning. Also need to lazy access readonly</span></span>\n<span class=\"line\"><span style=\"color: #89DDFF\">      </span><span style=\"color: #676E95; font-style: italic\">// and reactive here to avoid circular dependency.</span></span>\n<span class=\"line\"><span style=\"color: #F07178\">      </span><span style=\"color: #89DDFF; font-style: italic\">return</span><span style=\"color: #F07178\"> </span><span style=\"color: #BABED8\">isReadonly</span><span style=\"color: #F07178\"> </span><span style=\"color: #89DDFF\">?</span><span style=\"color: #F07178\"> </span><span style=\"color: #82AAFF\">readonly</span><span style=\"color: #F07178\">(</span><span style=\"color: #BABED8\">res</span><span style=\"color: #F07178\">) </span><span style=\"color: #89DDFF\">:</span><span style=\"color: #F07178\"> </span><span style=\"color: #82AAFF\">reactive</span><span style=\"color: #F07178\">(</span><span style=\"color: #BABED8\">res</span><span style=\"color: #F07178\">)</span></span>\n<span class=\"line\"><span style=\"color: #F07178\">    </span><span style=\"color: #89DDFF\">&#125;</span></span></code></pre></div><p>轻量的依赖关系保存：利用WeakMap\\Map\\Set保存响应式数据和副作用之间的依赖关系。</p>\n","text":" 1、什么是响应式？ 数据变化可以被检测对这种变化做出响应的机制 2、Vue为什么需要响应式？ MVVM框架需要解决的核心问题技术就是连接数据层和视图层，通过数...","permalink":"/post/65-reactive","photos":[],"count_time":{"symbolsCount":"1.5k","symbolsTime":"1 mins."},"categories":[],"tags":[{"name":"vue","slug":"vue","count":17,"path":"api/tags/vue.json"}],"toc":"","author":{"name":"Jude","slug":"blog-author","avatar":"","link":"/","description":"","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"mapped":true,"hidden":false,"prev_post":{"title":"66、Mac系统升级后桌面文件夹及文件消失","uid":"7b7501b7603f5fa7dd1b27a67cca3065","slug":"66-mac-finder","date":"2022-04-19T15:30:00.000Z","updated":"2022-09-05T08:00:05.000Z","comments":true,"path":"api/articles/66-mac-finder.json","keywords":null,"cover":null,"text":"解决方式：终端输入如下命令即可 shelldefaults write com.apple.finder CreateDesktop -bool true; k...","permalink":"/post/66-mac-finder","photos":[],"count_time":{"symbolsCount":126,"symbolsTime":"1 mins."},"categories":[],"tags":[{"name":"other","slug":"other","count":2,"path":"api/tags/other.json"}],"author":{"name":"Jude","slug":"blog-author","avatar":"","link":"/","description":"","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}},"next_post":{"title":"63、ant-design-vue v-model.trim不生效","uid":"d7d0c8cca34ebc843fd94a93b8ff0987","slug":"63-ant-design-vue-trim","date":"2022-04-06T12:00:00.000Z","updated":"2022-09-05T07:59:21.000Z","comments":true,"path":"api/articles/63-ant-design-vue-trim.json","keywords":null,"cover":null,"text":"同element-ui一样，el-input和a-input 均不支持v-model修饰符。 解决办法： element-ui示例代码： html&lt;el-...","permalink":"/post/63-ant-design-vue-trim","photos":[],"count_time":{"symbolsCount":872,"symbolsTime":"1 mins."},"categories":[],"tags":[{"name":"ant-design-vue","slug":"ant-design-vue","count":4,"path":"api/tags/ant-design-vue.json"}],"author":{"name":"Jude","slug":"blog-author","avatar":"","link":"/","description":"","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}}}