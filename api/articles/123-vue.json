{"title":"123、《Vuejs设计与实现》- 霍春阳：vue.js设计的核心要素(二)","uid":"00b982fc53c937e212d2a3973c72433c","slug":"123-vue","date":"2023-02-20T12:00:00.000Z","updated":"2023-08-15T12:19:30.000Z","comments":true,"path":"api/articles/123-vue.json","keywords":null,"cover":null,"content":"<p>框架提供了哪些构建产物？产物的模块格式？没有按照预期使用框架的警告信息，如何快速定位问题？开发版本的构建和生成版本的构建有何区别？热更新 HMR 框架层面的支持？自主选择需要的功能，能否选择关闭其他功能从而减少打包体积？</p>\n<span id=\"more\"></span>\n\n<h2 id=\"一、提升开发体验\"><a href=\"#一、提升开发体验\" class=\"headerlink\" title=\"一、提升开发体验\"></a>一、提升开发体验</h2><p>在 vue.js 3 中，我们打印一个 ref 数据时：</p>\n<div class=\"language-js\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">js</span><pre class=\"shiki material-theme-palenight\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #C792EA\">const</span><span style=\"color: #BABED8\"> count </span><span style=\"color: #89DDFF\">=</span><span style=\"color: #BABED8\"> </span><span style=\"color: #82AAFF\">ref</span><span style=\"color: #BABED8\">(</span><span style=\"color: #F78C6C\">0</span><span style=\"color: #BABED8\">)</span><span style=\"color: #89DDFF\">;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">console</span><span style=\"color: #89DDFF\">.</span><span style=\"color: #82AAFF\">log</span><span style=\"color: #BABED8\">(count)</span><span style=\"color: #89DDFF\">;</span></span></code></pre></div><p>控制台打印结果为：</p>\n<div class=\"language-js\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">js</span><pre class=\"shiki material-theme-palenight\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #BABED8\">RefImpl </span><span style=\"color: #89DDFF\">&#123;</span><span style=\"color: #F07178\"> </span><span style=\"color: #FFCB6B\">_rawValue</span><span style=\"color: #89DDFF\">:</span><span style=\"color: #F78C6C\">0</span><span style=\"color: #89DDFF\">,</span><span style=\"color: #FFCB6B\">_shallow</span><span style=\"color: #89DDFF\">:</span><span style=\"color: #F07178\"> </span><span style=\"color: #FF9CAC\">false</span><span style=\"color: #89DDFF\">,</span><span style=\"color: #FFCB6B\">__v_isRef</span><span style=\"color: #89DDFF\">:</span><span style=\"color: #FF9CAC\">true</span><span style=\"color: #89DDFF\">,</span><span style=\"color: #F07178\"> </span><span style=\"color: #FFCB6B\">_value</span><span style=\"color: #89DDFF\">:</span><span style=\"color: #F07178\"> </span><span style=\"color: #F78C6C\">0</span><span style=\"color: #F07178\"> </span><span style=\"color: #89DDFF\">&#125;</span></span></code></pre></div><p>控制台打印的输出结果很不直观（当然我们可以选择打印 count.vlaue，输出的结果为 0），其实 Chrome 浏览器已经提供了 RefImpl 类的打印设置，打开 devtool 的设置，勾选“console” &#x3D;&gt; enable custom formatters 选项，浏览器的打印结果就会变成</p>\n<div class=\"language-js\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">js</span><pre class=\"shiki material-theme-palenight\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #BABED8\">Ref</span><span style=\"color: #89DDFF\">&lt;</span><span style=\"color: #F78C6C\">0</span><span style=\"color: #89DDFF\">&gt;</span></span></code></pre></div><p>当然还包括错误提示。</p>\n<h2 id=\"二、框架代码的体积\"><a href=\"#二、框架代码的体积\" class=\"headerlink\" title=\"二、框架代码的体积\"></a>二、框架代码的体积</h2><p>在实现同样功能的情况<br>下，当然是用的代码越少越好，这样体积就会越小，最后浏览器加载<br>资源的时间也就越少。这时我们不禁会想，提供越完善的警告信息就<br>意味着我们要编写更多的代码，这不是与控制代码体积相悖吗？</p>\n<p>vue.js3 的源码，我们会发现每一个 warn 函数的调用都会配合<strong>DEV</strong>常量的检查：</p>\n<div class=\"language-js\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">js</span><pre class=\"shiki material-theme-palenight\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #89DDFF; font-style: italic\">if</span><span style=\"color: #BABED8\"> (__DEV__ </span><span style=\"color: #89DDFF\">&amp;&amp;</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">!</span><span style=\"color: #BABED8\">res) </span><span style=\"color: #89DDFF\">&#123;</span></span>\n<span class=\"line\"><span style=\"color: #F07178\">  </span><span style=\"color: #82AAFF\">warn</span><span style=\"color: #F07178\">(</span><span style=\"color: #89DDFF\">`</span><span style=\"color: #C3E88D\">Fail to mount app:mount target selector &quot;</span><span style=\"color: #89DDFF\">$&#123;</span><span style=\"color: #BABED8\">container</span><span style=\"color: #89DDFF\">&#125;</span><span style=\"color: #C3E88D\">&quot; returned null</span><span style=\"color: #89DDFF\">`</span><span style=\"color: #F07178\">)</span><span style=\"color: #89DDFF\">;</span></span>\n<span class=\"line\"><span style=\"color: #89DDFF\">&#125;</span></span></code></pre></div><p>打印警告信息的前提是：<strong>DEV</strong>常量为 true，<strong>DEV</strong>常量就是达到目的的关键。vue.js 是使用 rollup.js 对项目进行构建的，这里的 <strong>DEV</strong> 常量实际<br>上是通过 rollup.js 的插件配置来预定义的，其功能类似于 webpack 中的<br>DefinePlugin 插件。vue.js 在输出资源时，会存在开发环境（vue.global.js）和生产环境(vue.global.prod.js)。开发环境时，<strong>DEV</strong> 常量值为 true，生产环境时，<strong>DEV</strong> 常量值为 false。可以看到，<strong>DEV</strong>常量替换为字面量 false 时，判断条件为 false，就不会打印警告信息了。不会执行的代码（dead code），不会被打包到生产环境。<br>这样的目的就是，在开发环境中为用户提供友好的警告信息的 同时，不会增加生产环境代码的体积。</p>\n<h2 id=\"三、Tree-Shaking\"><a href=\"#三、Tree-Shaking\" class=\"headerlink\" title=\"三、Tree-Shaking\"></a>三、Tree-Shaking</h2><p><strong>DEV</strong> 常量只是控制了警告信息的打印，框架的代码量不会随警告信息的增加而增加。这样做还不够，vue.js 3 内建了很多组件，例如 Transition 组件，如果我们在项目中未使用该组件，那么打包时，该组件的代码不需要被打包到生产环境。这时候就需要 Tree-Shaking 了。</p>\n<p>Tree-Shaking 是指在打包时，只保留用到的代码，未用到的代码不会被打包到生产环境。vue.js 3 使用了 rollup.js 进行打包，rollup.js 提供了 Tree-Shaking 功能。</p>\n<p>实现 Tree-Sharking 必须满足的条件：模块必须为 ES Module,因为 Tree-Sharking 依赖 ESM 的静态结构。</p>\n<p>举例分析：</p>\n<div class=\"language-js\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">js</span><pre class=\"shiki material-theme-palenight\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #89DDFF\">-</span><span style=\"color: #BABED8\">demo</span><span style=\"color: #89DDFF\">;</span></span>\n<span class=\"line\"><span style=\"color: #89DDFF\">--</span><span style=\"color: #BABED8\">package</span><span style=\"color: #89DDFF\">.</span><span style=\"color: #BABED8\">json</span><span style=\"color: #89DDFF\">;</span></span>\n<span class=\"line\"><span style=\"color: #89DDFF\">--</span><span style=\"color: #BABED8\">input</span><span style=\"color: #89DDFF\">.</span><span style=\"color: #BABED8\">js</span><span style=\"color: #89DDFF\">;</span></span>\n<span class=\"line\"><span style=\"color: #89DDFF\">--</span><span style=\"color: #BABED8\">utils</span><span style=\"color: #89DDFF\">.</span><span style=\"color: #BABED8\">js</span><span style=\"color: #89DDFF\">;</span></span></code></pre></div><p>首先安装 rollup.js</p>\n<div class=\"language-shell\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">shell</span><pre class=\"shiki material-theme-palenight\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #FFCB6B\">yarn</span><span style=\"color: #BABED8\"> </span><span style=\"color: #C3E88D\">add</span><span style=\"color: #BABED8\"> </span><span style=\"color: #C3E88D\">rollup</span><span style=\"color: #BABED8\"> </span><span style=\"color: #C3E88D\">-D</span></span>\n<span class=\"line\"><span style=\"color: #FFCB6B\">//</span><span style=\"color: #BABED8\"> </span><span style=\"color: #C3E88D\">或者</span></span>\n<span class=\"line\"><span style=\"color: #FFCB6B\">npm</span><span style=\"color: #BABED8\"> </span><span style=\"color: #C3E88D\">i</span><span style=\"color: #BABED8\"> </span><span style=\"color: #C3E88D\">rollup</span><span style=\"color: #BABED8\"> </span><span style=\"color: #C3E88D\">-D</span></span></code></pre></div><p>input.js 和 utils.js</p>\n<div class=\"language-js\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">js</span><pre class=\"shiki material-theme-palenight\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #676E95; font-style: italic\">// input.js</span></span>\n<span class=\"line\"><span style=\"color: #89DDFF; font-style: italic\">import</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">&#123;</span><span style=\"color: #F07178\"> </span><span style=\"color: #BABED8\">foo</span><span style=\"color: #F07178\"> </span><span style=\"color: #89DDFF\">&#125;</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF; font-style: italic\">from</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #C3E88D\">./utils.js</span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #89DDFF\">;</span></span>\n<span class=\"line\"><span style=\"color: #82AAFF\">foo</span><span style=\"color: #BABED8\">()</span><span style=\"color: #89DDFF\">;</span></span>\n<span class=\"line\"><span style=\"color: #676E95; font-style: italic\">// utils.js</span></span>\n<span class=\"line\"><span style=\"color: #89DDFF; font-style: italic\">export</span><span style=\"color: #BABED8\"> </span><span style=\"color: #C792EA\">function</span><span style=\"color: #BABED8\"> </span><span style=\"color: #82AAFF\">foo</span><span style=\"color: #89DDFF\">(</span><span style=\"color: #BABED8; font-style: italic\">obj</span><span style=\"color: #89DDFF\">)</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">&#123;</span></span>\n<span class=\"line\"><span style=\"color: #F07178\">  </span><span style=\"color: #BABED8\">obj</span><span style=\"color: #F07178\"> </span><span style=\"color: #89DDFF\">&amp;&amp;</span><span style=\"color: #F07178\"> </span><span style=\"color: #BABED8\">obj</span><span style=\"color: #89DDFF\">.</span><span style=\"color: #BABED8\">foo</span><span style=\"color: #89DDFF\">;</span></span>\n<span class=\"line\"><span style=\"color: #89DDFF\">&#125;</span></span>\n<span class=\"line\"><span style=\"color: #89DDFF; font-style: italic\">export</span><span style=\"color: #BABED8\"> </span><span style=\"color: #C792EA\">function</span><span style=\"color: #BABED8\"> </span><span style=\"color: #82AAFF\">bar</span><span style=\"color: #89DDFF\">(</span><span style=\"color: #BABED8; font-style: italic\">obj</span><span style=\"color: #89DDFF\">)</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">&#123;</span></span>\n<span class=\"line\"><span style=\"color: #F07178\">  </span><span style=\"color: #BABED8\">obj</span><span style=\"color: #F07178\"> </span><span style=\"color: #89DDFF\">&amp;&amp;</span><span style=\"color: #F07178\"> </span><span style=\"color: #BABED8\">obj</span><span style=\"color: #89DDFF\">.</span><span style=\"color: #BABED8\">bar</span><span style=\"color: #89DDFF\">;</span></span>\n<span class=\"line\"><span style=\"color: #89DDFF\">&#125;</span></span></code></pre></div><p>代码很简单，定义并导出 utils.js 中的 2 个函数，分别是 foo 函数和 bar 函数，然后在 input.js 中导入并调用 foo 函数（我们没有导入 bar 函数）。</p>\n<p>当我们执行构建命令：</p>\n<div class=\"language-shell\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">shell</span><pre class=\"shiki material-theme-palenight\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #FFCB6B\">npx</span><span style=\"color: #BABED8\"> </span><span style=\"color: #C3E88D\">rollup</span><span style=\"color: #BABED8\"> </span><span style=\"color: #C3E88D\">input.js</span><span style=\"color: #BABED8\"> </span><span style=\"color: #C3E88D\">-f</span><span style=\"color: #BABED8\"> </span><span style=\"color: #C3E88D\">esm</span><span style=\"color: #BABED8\"> </span><span style=\"color: #C3E88D\">-o</span><span style=\"color: #BABED8\"> </span><span style=\"color: #C3E88D\">bundle.js</span></span></code></pre></div><p>bundle.js 中并未包含 bar 函数的代码，这就是 Tree-Shaking 的效果。这就是因为 bar 函数被作为 dead code 被删除了。</p>\n<p>但是，我们可以发现 foo 函数也没有什么意义（仅仅是读取对象的值），为什么 rollup.js 不把 foo 函数也删除呢？</p>\n<p>这里涉及 Tree-Sharking 的第二个关键点：副作用</p>\n<p>所谓副作用，是指在调用函数时，除了返回函数的返回值之外，还会对函数外的其他变量产生影响。</p>\n<p>上面的代码明显是读取对象的值，怎么会产生副作用呢？其实是有可能的，试想一下，如果 obj 对象是一个通过 Proxy 创建的代理对象，那么当我们读取对象属性时，就会触发代理对象的 get 夹子（trap），在 get 夹子中是可能产生副作用的，例如我们在 get 夹子中修改了某个全局变量。而到底会不会产生副作用，只有代码真正运行的时候才能知 JavaScript 本身是动态语言，因此想要静态地分析哪些代码是 dead code 很有难度。</p>\n<p>rollup.js 是如何知道代码不会产生副作用，可以放心移除呢？</p>\n<div class=\"language-js\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">js</span><pre class=\"shiki material-theme-palenight\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #89DDFF; font-style: italic\">import</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">&#123;</span><span style=\"color: #F07178\"> </span><span style=\"color: #BABED8\">foo</span><span style=\"color: #F07178\"> </span><span style=\"color: #89DDFF\">&#125;</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF; font-style: italic\">from</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #C3E88D\">./utils.js</span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #89DDFF\">;</span></span>\n<span class=\"line\"><span style=\"color: #676E95; font-style: italic\">/*#__PURE__*/</span><span style=\"color: #BABED8\"> </span><span style=\"color: #82AAFF\">foo</span><span style=\"color: #BABED8\">()</span><span style=\"color: #89DDFF\">;</span></span></code></pre></div><p>这里需要使用的是 <code>/*#__PURE__*/</code>,它的作用就是告诉 rollup.js,这段代码不会产生副作用，可以放心使用 Tree-Sharking。</p>\n<p>这里需要理解的是，通常产生副作用的代码都是模块内函数的顶级调用。</p>\n<div class=\"language-js\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">js</span><pre class=\"shiki material-theme-palenight\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #82AAFF\">foo</span><span style=\"color: #BABED8\">()</span><span style=\"color: #89DDFF\">;</span><span style=\"color: #BABED8\"> </span><span style=\"color: #676E95; font-style: italic\">// 顶级调用</span></span>\n<span class=\"line\"><span style=\"color: #C792EA\">function</span><span style=\"color: #BABED8\"> </span><span style=\"color: #82AAFF\">bar</span><span style=\"color: #89DDFF\">()</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">&#123;</span></span>\n<span class=\"line\"><span style=\"color: #F07178\">  </span><span style=\"color: #82AAFF\">foo</span><span style=\"color: #F07178\">()</span><span style=\"color: #89DDFF\">;</span><span style=\"color: #F07178\"> </span><span style=\"color: #676E95; font-style: italic\">// 函数内部调用</span></span>\n<span class=\"line\"><span style=\"color: #89DDFF\">&#125;</span></span></code></pre></div><blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><blockquote>\n<p>对于顶级调用来说，是可能产生副作用的；但对于函<br>数内调用来说，只要函数 bar 没有被调用，那么 foo 函数的调用自然<br>不会产生副作用。</p></blockquote>\n</blockquote>\n<h2 id=\"四、小结\"><a href=\"#四、小结\" class=\"headerlink\" title=\"四、小结\"></a>四、小结</h2><blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><blockquote>\n<p>预定义 <strong>DEV</strong> 常量，从而实现<br>仅在开发环境中打印警告信息，而生产环境中则不包含这些用于提升<br>开发体验的代码，从而实现线上代码体积的可控性。<br>Tree-Shaking 是一种排除 dead code 的机制，Tree-Shaking 本身基于 ESM，并且 JavaScript 是一门动态语言，通过纯静态<br>分析的手段进行 Tree-Shaking 难度较大，因此大部分工具能够识别<br>&#x2F;<em>#<strong>PURE</strong></em>&#x2F; 注释，在编写框架代码时，我们可以利用<br>&#x2F;<em>#<strong>PURE</strong></em>&#x2F; 来辅助构建工具进行 Tree-Shaking。</p></blockquote>\n</blockquote>\n","text":"框架提供了哪些构建产物？产物的模块格式？没有按照预期使用框架的警告信息，如何快速定位问题？开发版本的构建和生成版本的构建有何区别？热更新 HMR 框架层面的支持...","permalink":"/post/123-vue","photos":[],"count_time":{"symbolsCount":"3k","symbolsTime":"3 mins."},"categories":[],"tags":[{"name":"vue3","slug":"vue3","count":24,"path":"api/tags/vue3.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E4%B8%80%E3%80%81%E6%8F%90%E5%8D%87%E5%BC%80%E5%8F%91%E4%BD%93%E9%AA%8C\"><span class=\"toc-text\">一、提升开发体验</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E4%BA%8C%E3%80%81%E6%A1%86%E6%9E%B6%E4%BB%A3%E7%A0%81%E7%9A%84%E4%BD%93%E7%A7%AF\"><span class=\"toc-text\">二、框架代码的体积</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E4%B8%89%E3%80%81Tree-Shaking\"><span class=\"toc-text\">三、Tree-Shaking</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%9B%9B%E3%80%81%E5%B0%8F%E7%BB%93\"><span class=\"toc-text\">四、小结</span></a></li></ol>","author":{"name":"Jude","slug":"blog-author","avatar":"","link":"/","description":"","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"mapped":true,"hidden":false,"prev_post":{"title":"124、vue2利用require.context批量引入实现自动注册","uid":"38426d0770dc54cb711a330fd63320df","slug":"124-vue","date":"2023-03-12T12:00:00.000Z","updated":"2023-08-15T12:45:03.000Z","comments":true,"path":"api/articles/124-vue.json","keywords":null,"cover":null,"text":"使用 require.context 进行批量导入，不仅可以减少代码， 后期添加新的文件不用在挨个引入。如果你恰好使用了 webpack (或在内部使用了 we...","permalink":"/post/124-vue","photos":[],"count_time":{"symbolsCount":"2.2k","symbolsTime":"2 mins."},"categories":[],"tags":[{"name":"vue2","slug":"vue2","count":3,"path":"api/tags/vue2.json"}],"author":{"name":"Jude","slug":"blog-author","avatar":"","link":"/","description":"","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"feature":true},"next_post":{"title":"122、《Vuejs设计与实现》- 霍春阳：运行时和编译时(一)","uid":"4b07ee3e25002d191b46720119d53a07","slug":"122-vue","date":"2023-02-18T12:00:00.000Z","updated":"2023-08-15T03:42:07.000Z","comments":true,"path":"api/articles/122-vue.json","keywords":null,"cover":null,"text":"《Vue.js 设计与实现》-- 霍春阳 这本书并非是 vue.js 的源码解读，而是向开发人员由简入繁的介绍 vue.js 的各个功能模块。 视图层框架通常分...","permalink":"/post/122-vue","photos":[],"count_time":{"symbolsCount":"5k","symbolsTime":"5 mins."},"categories":[],"tags":[{"name":"vue3","slug":"vue3","count":24,"path":"api/tags/vue3.json"}],"author":{"name":"Jude","slug":"blog-author","avatar":"","link":"/","description":"","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}}}