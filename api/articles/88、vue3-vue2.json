{"title":"88、Vue3和Vue2","uid":"65bd3f1319c5268988323a5b73a44cf4","slug":"88、vue3-vue2","date":"2022-08-11T12:00:00.000Z","updated":"2022-11-01T01:17:11.000Z","comments":true,"path":"api/articles/88、vue3-vue2.json","keywords":null,"cover":null,"content":"<p>vue3 的 2 种响应式实现、Vue2 项目如何升级到 Vue3 等等。。。</p>\n<span id=\"more\"></span>\n\n<p>一、options api 选项式 API</p>\n<p>Options Api 可以理解为就是组件的各个选项，data、methods、computed、watch 等等就像是组件的一个个选项，在对应的选项里做对应的事情。</p>\n<div class=\"language-js\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">js</span><pre class=\"shiki material-theme-palenight\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #BABED8\">export default &#123;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">    data () &#123;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">        return &#123;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">            // 定义响应式数据的选项</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">        &#125;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">    &#125;,</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">    methods: &#123;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">        // 定义相关方法的选项</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">    &#125;,</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">    computed: &#123;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">        // 计算属性的选项</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">    &#125;,</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">    watch: &#123;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">        // 监听数据的选项</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">    &#125;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">    ...</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">&#125;</span></span></code></pre></div><p>在 data 中定义的数据，是无法做到响应式的，那是因为 Object.definePropety 只会对 data 选项中的数据进行递归拦截</p>\n<p>在实际项目的开发过程中，数据定义在 data 中，方法定义在 methods 中，当我们的代码多起来，比如达到四、五百行的时候，如果我们想改动某个功能，就要去 data 中改数据，再去 methods 中改方法，来回地寻找。</p>\n<p>二、composition api 组合式 api</p>\n<p>1、Composition Api</p>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>支持将相同的功能模块代码写在一起，甚至可以将某个功能单独的封装成函数，随意导入引用；也可以将任意的数据定义成响应式，再也不用局限于 data 中，我们只需要将每个实现的功能组合起来就可以了。</p></blockquote>\n<p>示例：</p>\n<div class=\"language-js\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">js</span><pre class=\"shiki material-theme-palenight\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #BABED8\">&lt;template&gt;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">    &lt;div&gt;&#123;&#123;count&#125;&#125;&lt;/div&gt;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">&lt;/template&gt;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">&lt;script setup&gt;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">    import &#123; ref &#125; from &quot;vue&quot;;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">    let count = ref(0);</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">&lt;/script&gt;</span></span></code></pre></div><p>2、watchEffect</p>\n<p>(1)、watchEffect 是立即执行的，不需要添加 immediate 属性。</p>\n<p>(2)、watchEffect 不需要指定对某个具体的数据监听，watchEffect 会根据内容自动去感知，所以我们也可以在一个 watchEffect 中添加多个数据的监听处理</p>\n<p>(3)、watchEffect 不能获取数据改变之前的值。</p>\n<p>同时，watchEffect 会返回一个对象 watchEffectStop，通过执行 watchEffectStop，我们可以控制监听在什么时候结束。</p>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>简单理解 watchEffect 会在第一次运行时创建副作用函数并执行一次，如果存在响应式变量，取值会触发 get 函数，这个时候收集依赖存储起来，当其他地方给响应式变量重新赋值的时候，set 函数中会触发方法派发更新，执行收集到的副作用函数，如果不存在响应式变量，就不会被收集触发</p></blockquote>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>1、watchEffect 立即运行一个函数，然后被动地追踪它的依赖，当这些依赖改变时重新执行该函数。watch 侦测一个或多个响应式数据源并在数据源变化时调用一个回调函数。<br>2、watchEffect(effect)是一种特殊 watch，传入的函数既是依赖收集的数据源，也是回调函数。如果我们不关心响应式数据变化前后的值，只是想拿这些数据做些事情，那么 watchEffect 就是我们需要的。watch 更底层，可以接收多种数据源，包括用于依赖收集的 getter 函数，因此它完全可以实现 watchEffect 的功能，同时由于可以指定 getter 函数，依赖可以控制的更精确，还能获取数据变化前后的值，因此如果需要这些时我们会使用 watch。<br>3、watchEffect 在使用时，传入的函数会立刻执行一次。watch 默认情况下并不会执行回调函数，除非我们手动设置 immediate 选项。<br>4、watchEffect(fn)相当于 watch(fn,fn,{immediate:true})</p></blockquote>\n<p>vue3 不再只能有一个根元素</p>\n<p>为什么在 vue2 时，只能拥有一个根元素？而 Vue3 可以写多个根节点？</p>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>因为 vdom 是一颗单根树形结构，patch 方法在遍历的时候从根节点开始遍历，它要求只有一个根节点。组件也会转换为一个 vdom，自然应该满足这个要求。vue3 中之所以可以写多个根节点，是因为引入了 Fragment 的概念，这是一个抽象的节点，如果发现组件是多根的，就创建一个 Fragment 节点，把多个根节点作为它的 children。将来 patch 的时候，如果发现是一个 Fragment 节点，则直接遍历 children 创建或更新。</p></blockquote>\n<p>3、ref 和 reactive</p>\n<p>ref 和 reactive 的区别是什么呢，我们可以这样简单理解，它们都是用来定义响应式数据的，但是 ref 是用来给简单的数据类型定义响应式数据的，比如 number、string、boolean 等，而 reactive 是针对复杂的数据结构的，比如一个对象。</p>\n<p>它们写法的区别主要在：ref 定义的数据，修改的时候是需改 xxx.value 的，而 reactive 定义的不用，产生这个区别的原因是它们实现响应式的方法不一样。</p>\n<p>4、小结</p>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>Options Api</p></blockquote>\n<p>1、选项式的 api，相关代码必须写在规定的选项中，导致相同功能的代码被分割，代码量上来后查找相关代码很麻烦，后期维护修改难度较大。</p>\n<p>2、数据都挂载在同一个 this 下，对 typescript 的支持不友好，类型推断很麻烦。</p>\n<p>3、代码的复用能力很差。</p>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>Composition Api</p></blockquote>\n<p>1、组合式 api，代码定义很自由，相同功能代码整合到一起，查找修改都很方便。</p>\n<p>2、公共代码的复用很简单，不同功能的代码也可以自由组合。</p>\n<p>3、Vue 相关的 api 都是通过 import 导入的，这在打包的时候很友好。</p>\n<p>另外，vue3 是支持 options api 的写法的</p>\n<p>三、Vue3 响应式的实现</p>\n<p>在 Vue2.x 中，响应式的机制深入人心，我们只需要在 data 中定义我们需要的数据，就会在初始化时被自动转为响应式数据。</p>\n<p>但是在 Vue2 中，响应式的使用还存在一些限制，比如对象属性的增加和删除等并不能被监听到，在 Vue3 中，重新设计了响应式系统来解决这些问题。</p>\n<h4 id=\"1、Vue2-x-的响应式——Object-defineProperty\"><a href=\"#1、Vue2-x-的响应式——Object-defineProperty\" class=\"headerlink\" title=\"1、Vue2.x 的响应式——Object.defineProperty\"></a>1、Vue2.x 的响应式——Object.defineProperty</h4><p>Vue2 响应式失效的现象</p>\n<div class=\"language-js\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">js</span><pre class=\"shiki material-theme-palenight\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #BABED8\">&lt;template&gt;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">    &lt;div&gt;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">        &lt;span&gt;姓名：&lt;/span&gt;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">        &lt;span&gt;&#123;&#123;person.name&#125;&#125;&lt;/span&gt;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #BABED8\">        &lt;span&gt;年龄：&lt;/span&gt;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">        &lt;span&gt;&#123;&#123;person.age&#125;&#125;&lt;/span&gt;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #BABED8\">        &lt;button @click=&quot;changeName&quot;&gt;修改姓名&lt;/button&gt;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">        &lt;button @click=&quot;addAge&quot;&gt;增加年龄&lt;/button&gt;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">    &lt;/div&gt;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">&lt;/template&gt;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">export default &#123;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">    data () &#123;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">        return &#123;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">            person: &#123;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">                name: &#39;小明&#39;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">            &#125;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">        &#125;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">     &#125;,</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">     methods: &#123;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">         addAge() &#123;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">             this.person.age = &#39;18&#39;;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">         &#125;,</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">         changeName() &#123;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">             this.person.name = &#39;小红&#39;;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">         &#125;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">     &#125;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">    ...</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">&#125;</span></span></code></pre></div><p>data 里面只定义了一个响应式对象 person，我们定义了 2 个方法，一个是修改名称、一个是增加年龄，但是使用增加年龄方法时，会给响应式对象添加一个新的属性 age，页面上的年龄部分并不会发生改变。</p>\n<p>Vue2 是通过 Object.defineProperty 循环遍历拦截 data 中的数据来实现响应式的。</p>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p><strong>Object.defineProperty 其实不是真正的代理，而应该是拦截</strong></p></blockquote>\n<p>而且 Object.defineProperty 也不是对对象进行拦截，而是拦截对象的具体的某个属性。</p>\n<div class=\"language-js\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">js</span><pre class=\"shiki material-theme-palenight\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #BABED8\">const person = &#123;&#125;;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #BABED8\">Object.defineProperty(person, &quot;name&quot;, &#123;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">  set(value) &#123;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">    console.log(&quot;name:&quot;, value);</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">  &#125;,</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">  get() &#123;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">    return &quot;小明&quot;;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">  &#125;,</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">&#125;);</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #BABED8\">console.log(person.name);</span></span></code></pre></div><p>Vue2.x 的响应式实现其实就是递归遍历 data 中返回的对象，对每一个属性都使用 Object.defineProperty 进行拦截，而不在 data 中被初始化的数据是没有添加拦截的。</p>\n<p>Vue2 如何添加和删除响应式数据？</p>\n<p>需要额外的 api 来实现，Vue.$set 和Vue.$delete 方法分别实现添加、删除响应式数据</p>\n<p>Vue2 响应式的局限性</p>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>1、无法监听整个对象，只能对每个属性单独监听。</p></blockquote>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>2、无法监听对象的属性的新增，删除（需要补充额外的 api 来解决）。</p></blockquote>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>3、无法监听数组的变化。</p></blockquote>\n<h4 id=\"2、Vue3-的响应式-proxy\"><a href=\"#2、Vue3-的响应式-proxy\" class=\"headerlink\" title=\"2、Vue3 的响应式-proxy\"></a>2、Vue3 的响应式-proxy</h4><blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>proxy 是真正地对整个对象进行代理，因为 proxy 可以劫持整个对象，所以 Object.defineProperty 中新增，删除某个属性无法检测的问题就不存在了，同时 proxy 也可以检测数组的变化</p></blockquote>\n<div class=\"language-js\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">js</span><pre class=\"shiki material-theme-palenight\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #BABED8\">const person = &#123;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">  name: &quot;小明&quot;,</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">  age: 18,</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">&#125;;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">const personProxy = new Proxy(person, &#123;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">  get: function (target, prop) &#123;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">    console.log(`获取了$&#123;prop&#125;:`, target[prop]);</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">    return target[prop];</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">  &#125;,</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">  set: function (target, prop, value) &#123;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">    console.log(`修改了$&#123;prop&#125;:`, value);</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">    target[prop] = value;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">  &#125;,</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">&#125;);</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #BABED8\">console.log(&quot;name:&quot;, personProxy.name); // 获取了name:小明</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">personProxy.age = 20; // 修改了age:20</span></span></code></pre></div><p>参数 target，表示当前代理的对象，prop 是我们具体要操作的属性，set 多了一个参数 value 是我们对新属性的赋值。</p>\n<p>从方法的参数我们其实就能看出来，proxy 是真的对整个对象进行拦截的，我们如果有新增或删除的属性，也不需要单独去添加处理，可以直接被检测代理。</p>\n<p>在添加删除属性时，无需额外的 api。proxy 不支持 IE11。</p>\n<p>vue3 另外一个代理的方法，那就是对象本身的 get、set 方法</p>\n<div class=\"language-js\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">js</span><pre class=\"shiki material-theme-palenight\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #BABED8\">const count = &#123;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">  _value: 0,</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">  set value(num) &#123;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">    console.log(&quot;修改了count:&quot;, num);</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">    this._value = num;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">  &#125;,</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">  get value() &#123;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">    console.log(&quot;获取了count&quot;);</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">    return this._value;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">  &#125;,</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">&#125;;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #BABED8\">console.log(count.value); // 获取了count</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">count.value = 1; // 修改了count: 1</span></span></code></pre></div><p>这其实就是为什么我们使用 ref 定义的数据，赋值和取值的时候需要使用 xxx.value 了</p>\n<p>一个 Vue3 composition api 常用的工具集：VueUse</p>\n<h2 id=\"四、Vue2-升级到-Vue3-的非兼容性变更\"><a href=\"#四、Vue2-升级到-Vue3-的非兼容性变更\" class=\"headerlink\" title=\"四、Vue2 升级到 Vue3 的非兼容性变更\"></a>四、Vue2 升级到 Vue3 的非兼容性变更</h2><p>Vue3 中做了很多重构，有部分内容对于 Vue2 来说是不兼容的，所以说 Vue2 的代码直接升级到 Vue3 是不能直接运行的。</p>\n<h4 id=\"1、createApp-的非兼容性变更\"><a href=\"#1、createApp-的非兼容性变更\" class=\"headerlink\" title=\"1、createApp 的非兼容性变更\"></a>1、createApp 的非兼容性变更</h4><p>Vue2 根实例挂载及全局组件注册方法：</p>\n<div class=\"language-js\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">js</span><pre class=\"shiki material-theme-palenight\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #BABED8\">import Vue from &quot;vue&quot;;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">import App from &quot;./App.vue&quot;;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">// 引入全局组件</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">import GlobalComponent from &quot;./GlobalComponent.vue&quot;;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">// 注册全局组件</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">Vue.component(&quot;GlobalComponent&quot;, GlobalComponent);</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #BABED8\">new Vue(&#123;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">  render: (h) =&gt; h(App),</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">&#125;).$mount(&quot;#app&quot;);</span></span></code></pre></div><p>Vue3 不直接在 Vue 对象上进行操作了，而是通过 createApp 来创建一个 App 应用实例，所有的操作都在 App 上进行</p>\n<div class=\"language-js\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">js</span><pre class=\"shiki material-theme-palenight\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #BABED8\">import &#123; createApp &#125; from &quot;vue&quot;;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">import App from &quot;./App.vue&quot;;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #BABED8\">createApp(App).mount(&quot;#app&quot;);</span></span></code></pre></div><p>现在我们想要在一个 App 上引入 store，就可以使用下面的写法(<strong>全局对象被共享是一件非常危险的事情</strong>)</p>\n<div class=\"language-js\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">js</span><pre class=\"shiki material-theme-palenight\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #BABED8\">// 引入封装好的store</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">import store from &quot;./store&quot;;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #BABED8\">createApp(App).use(store).mount(&quot;#app&quot;);</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">createApp(App2).mount(&quot;#app2&quot;);</span></span></code></pre></div><p>App 实例上的 store 不会影响 App2</p>\n<h4 id=\"2、api-的-import-导入\"><a href=\"#2、api-的-import-导入\" class=\"headerlink\" title=\"2、api 的 import 导入\"></a>2、api 的 import 导入</h4><blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p><strong>我们在使用这些挂载在 Vue 对象下的 Api 时，需要经过 import 导入的方式来使用。</strong></p></blockquote>\n<div class=\"language-js\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">js</span><pre class=\"shiki material-theme-palenight\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #BABED8\">import &#123; nextTick &#125; from &#39;vue&#39;;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #BABED8\">nextTick(() =&gt; &#123;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">    ...</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">&#125;)</span></span></code></pre></div><p>按需加载的使用。</p>\n<p>在 Vue2 的 Api 中，都是挂载在 Vue 下面，那么在打包的时候，会不管你有没有使用到这个 Api，都会一起打包进去，如果都是这样，随着 Vue 的全局 Api 越来越多，冗余的代码也就越多，打包的耗时、体积或者说代价也就越大。</p>\n<p>在 Vue3 中，通过 import 导入 Api 来使用，那我们在打包的时候，则只会将对应的模块打包进去，做到真正的用了多少就打包多少，就算 Vue 中再增加多少代码，也不会影响我们打包的项目。</p>\n<h4 id=\"3、小结\"><a href=\"#3、小结\" class=\"headerlink\" title=\"3、小结\"></a>3、小结</h4><p>升级 Vue3 不仅需要更换 Vue 版本，还有一些非兼容性变更内容需要了解</p>\n<ol>\n<li>全局的操作不再使用 Vue 实例，而是使用通过 createApp 创建的 app 实例。</li>\n<li>全局和内部 API 已经被重构，需要使用 import 导入使用，并且支持 tree-shake。</li>\n</ol>\n<p>如何将 localStorage 中的数据变成响应式的？</p>\n<div class=\"language-js\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">js</span><pre class=\"shiki material-theme-palenight\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #BABED8\">// tool.js</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">import &#123; ref, watchEffect &#125; from &quot;vue&quot;;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #BABED8\">const useLocalStorage = (name, value = &#123;&#125;) =&gt; &#123;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">  const localData = ref(JSON.parse(localStorage.getItem(name)) || value);</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #BABED8\">  watchEffect(() =&gt; &#123;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">    // 监听本地localstorage数据对应的响应式变量更改</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">    localStorage.setItem(name, JSON.stringify(localData.value));</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">  &#125;);</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #BABED8\">  return localData;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">&#125;;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #BABED8\">export &#123; useLocalStorage &#125;;</span></span></code></pre></div><p>假设有一个计数器，需要将数据同步到本地的 localStorage 中，我们只需要在计数器文件中引入 useLocalStorage 方法即可：</p>\n<div class=\"language-js\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">js</span><pre class=\"shiki material-theme-palenight\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #BABED8\">&lt;script setup&gt;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">  import &#123;useLocalStorage&#125; from &#39;./useLocalStorage&#39;;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">  // 定义响应式数据</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">  let count = useLocalStorage(&#39;count&#39;, 0);</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #BABED8\">  const addCount = () =&gt; &#123;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">    count.value ++;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">  &#125;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #BABED8\">&lt;/script&gt;</span></span></code></pre></div><h2 id=\"五、如何将-Vue2-项目升级到-Vue3\"><a href=\"#五、如何将-Vue2-项目升级到-Vue3\" class=\"headerlink\" title=\"五、如何将 Vue2 项目升级到 Vue3?\"></a>五、如何将 Vue2 项目升级到 Vue3?</h2><h4 id=\"1、项目升级方法一\"><a href=\"#1、项目升级方法一\" class=\"headerlink\" title=\"1、项目升级方法一\"></a>1、项目升级方法一</h4><p>将 vue-cli 升级到高版本</p>\n<p>Vue 的依赖版本升级到 vue3,需要安装@vue&#x2F;compat</p>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><blockquote>\n<p>注意@vue&#x2F;compat 的版本号需要与 Vue 的版本号保持一致</p></blockquote>\n</blockquote>\n<p>@vue&#x2F;compat 是 Vue2 和 Vue3 的一个过渡产物，@vue&#x2F;compat 可以运行在 Vue2 的环境下，但会对 Vue3 不兼容或者废弃的部分进行警告，我们引入@vue&#x2F;compat 后，只需要根据警告的内容进行修改就可以了。<br>通过@vue&#x2F;compat 也可以对警告进行分类过滤，单独针对某一些问题进行修改.</p>\n<p>安装完 Vue 和@vue&#x2F;compat 的依赖后，还需要在项目根目录下新增 vue.config.js 文件，包含以下内容:</p>\n<div class=\"language-js\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">js</span><pre class=\"shiki material-theme-palenight\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #BABED8\">// vue.config.js</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">module.exports = &#123;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">  chainWebpack: (config) =&gt; &#123;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">    config.resolve.alias.set(&quot;vue&quot;, &quot;@vue/compat&quot;);</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #BABED8\">    config.module</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">      .rule(&quot;vue&quot;)</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">      .use(&quot;vue-loader&quot;)</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">      .tap((options) =&gt; &#123;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">        return &#123;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">          ...options,</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">          compilerOptions: &#123;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">            compatConfig: &#123;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">              MODE: 2,</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">            &#125;,</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">          &#125;,</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">        &#125;;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">      &#125;);</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">  &#125;,</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">&#125;;</span></span></code></pre></div><p>运行项目，根据警告信息的内容去 Vue 官网的特性参考中查询具体的错误原因，以及修改方案。</p>\n<p>vue-router 和 vuex 都要升级到 v4，Element-ui 也要更新到 Vue3 对应的版本（element-plus）</p>\n<p>vue3 版本 router 部分的写法：</p>\n<div class=\"language-js\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">js</span><pre class=\"shiki material-theme-palenight\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #BABED8\">import &#123; createRouter, createWebHashHistory &#125; from &quot;vue-router&quot;;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #BABED8\">import Home from &quot;../pages/home.vue&quot;;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">import Login from &quot;../pages/login.vue&quot;;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #BABED8\">const routes = [</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">  &#123;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">    path: &quot;/home&quot;,</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">    component: Home,</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">  &#125;,</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">  &#123;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">    path: &quot;/&quot;,</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">    component: Login,</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">  &#125;,</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">];</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #BABED8\">export default createRouter(&#123;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">  history: createWebHashHistory(),</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">  routes,</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">&#125;);</span></span></code></pre></div><div class=\"language-js\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">js</span><pre class=\"shiki material-theme-palenight\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #BABED8\">// main.js</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">import &#123; createApp &#125; from &quot;vue&quot;;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #BABED8\">import App from &quot;./App.vue&quot;;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">import routers from &quot;./router&quot;;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #BABED8\">const app = createApp(App);</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">app.use(routers).mount(&quot;#app&quot;);</span></span></code></pre></div><h4 id=\"2、项目升级方法二：gogocode\"><a href=\"#2、项目升级方法二：gogocode\" class=\"headerlink\" title=\"2、项目升级方法二：gogocode\"></a>2、项目升级方法二：gogocode</h4><p>1、安装最新的 gogocode-cli</p>\n<div class=\"language-js\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">js</span><pre class=\"shiki material-theme-palenight\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #BABED8\">npm install gogocode-cli -g</span></span></code></pre></div><p>2、在需要升级的项目根目录下，运行下面的指令</p>\n<div class=\"language-js\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">js</span><pre class=\"shiki material-theme-palenight\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #BABED8\">gogocode -s ./src -t gogocode-plugin-vue -o ./src-out</span></span></code></pre></div><p>-s 后面指的是需要升级的源码文件夹，-o 后面的参数指的是升级后的代码输出位置</p>\n<p>3、代码转换了还不够，我们项目的依赖都要升级到对应版本<br>GOGOCode 可以帮我们把 package.json 里面的 Vue&#x2F;Vuex&#x2F;Vue-router&#x2F;Vue 编译工具升级到适配 Vue3 的版本，在项目根目录下执行以下指令</p>\n<div class=\"language-js\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">js</span><pre class=\"shiki material-theme-palenight\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #BABED8\">gogocode -s package.json -t gogocode-plugin-vue -o package.json</span></span></code></pre></div><p>虽然使用了 GOGOCode，但也不代表我们的项目就可以直接完成升级，项目中如果用到了其他 Vue2 版本的组件库，还是需要我们自己去升级 Vue3 对应的版本，包括一些 Api 的变化都要我们自己去手动调整，并且使用 GOGOCode 也有一些转化规则是不支持的，具体的可以参考 GOGOCode 的转化规则覆盖。</p>\n<h2 id=\"六、vite\"><a href=\"#六、vite\" class=\"headerlink\" title=\"六、vite\"></a>六、vite</h2><h4 id=\"1、什么是-ES-Module？\"><a href=\"#1、什么是-ES-Module？\" class=\"headerlink\" title=\"1、什么是 ES Module？\"></a>1、什么是 ES Module？</h4><blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>将 JavaScript 程序拆分为可按需导入的单独模块的机制，简单来说就是我们可以对 JavaScript 模块化开发，通过 import 和 export 来导入导出我们的模块内容</p></blockquote>\n<p>Vite 在冷启动的时候，将代码分为依赖和源码两部分，源码部分通常会使用 ESModules 或者 CommonJS 拆分到大量小模块中，而对于依赖部分，Vite 使用 Esbuild 对依赖进行预构建</p>\n<p>Esbuild 的优势：</p>\n<p>1、语言优势，Esbuild 使用 Go 语言开发，相对于 JavaScript，Go 语言是一种编译型语言，在编译阶段就已经将源码转译为机器码。</p>\n<p>2、多线程，Rollup 和 webpack 都没有使用多线程的能力，而 Esbuild 在算法上进行了大量的优化，充分的利用了多 CPU 的优势。</p>\n<h4 id=\"2、搭建-vite-项目\"><a href=\"#2、搭建-vite-项目\" class=\"headerlink\" title=\"2、搭建 vite 项目\"></a>2、搭建 vite 项目</h4><div class=\"language-js\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">js</span><pre class=\"shiki material-theme-palenight\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #BABED8\">// node 16.3.0</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">npm init vite@latest</span></span></code></pre></div><h4 id=\"3、vite-项目的目录\"><a href=\"#3、vite-项目的目录\" class=\"headerlink\" title=\"3、vite 项目的目录\"></a>3、vite 项目的目录</h4><div class=\"language-js\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">js</span><pre class=\"shiki material-theme-palenight\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #BABED8\">    |-- .gitignore</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">    |-- index.html</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">    |-- package-lock.json</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">    |-- package.json</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">    |-- README.md</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">    |-- vite.config.js</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">    |-- .vscode</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">    |   |-- extensions.json</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">    |-- public</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">    |   |-- favicon.ico</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">    |-- src</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">        |-- App.vue</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">        |-- main.js</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">        |-- assets</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">        |   |-- logo.png</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">        |-- components</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">            |-- HelloWorld.vue</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #BABED8\">// src/</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">|-- src</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">    |-- App.vue</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">    |-- main.js</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">    |-- api           -- 请求数据，接口文件</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">    |-- assets        -- 静态资源</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">    |-- commons       -- 公共文件（公共方法，封装函数）</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">    |-- components    -- Vue组件</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">    |-- pages         -- 模块页面</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">    |-- router        -- 路由文件</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">    |-- store         -- 数据管理</span></span></code></pre></div><h4 id=\"4、安装-vue-router-的-4-x-版本\"><a href=\"#4、安装-vue-router-的-4-x-版本\" class=\"headerlink\" title=\"4、安装 vue-router 的 4.x 版本\"></a>4、安装 vue-router 的 4.x 版本</h4><div class=\"language-js\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">js</span><pre class=\"shiki material-theme-palenight\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #BABED8\">npm install vue-router@4</span></span></code></pre></div><p>在 router 文件下新建 router.js 文件来增加路由控制，</p>\n<div class=\"language-js\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">js</span><pre class=\"shiki material-theme-palenight\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #BABED8\">import &#123; createRouter, createWebHashHistory &#125; from &quot;vue-router&quot;;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #BABED8\">import Login from &quot;../pages/login.vue&quot;;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">import Home from &quot;../pages/home.vue&quot;;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #BABED8\">const routes = [</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">  &#123;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">    path: &quot;/login&quot;,</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">    component: Login,</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">  &#125;,</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">  &#123;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">    path: &quot;/home&quot;,</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">    component: Home,</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">  &#125;,</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">];</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #BABED8\">const router = createRouter(&#123;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">  history: createWebHashHistory(),</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">  routes,</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">&#125;);</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #BABED8\">export default router;</span></span></code></pre></div><p>createRouter 用来创建一个可以被 Vue 应用程序使用的路由实例，需要传入两个参数，history 是表示路由的历史记录，我们可以选择使用 createWebHistory、createWebHashHistory 来分别创建 HTML5 历史记录和 hash 历史记录，我们这里选择创建 hash 历史记录</p>\n<h2 id=\"七、输入路由的时候是怎么获取到页面的\"><a href=\"#七、输入路由的时候是怎么获取到页面的\" class=\"headerlink\" title=\"七、输入路由的时候是怎么获取到页面的\"></a>七、输入路由的时候是怎么获取到页面的</h2><blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>当我们在浏览器中输入一个地址后，浏览器会根据路径构建一个请求，接下来就会对输入的域名进行 DNS 解析，得到正确的 IP 地址，然后和得到的 IP 地址建立 TCP 链接，发送 HTTP 请求，服务器接收到请求后，就会返回响应的 HTML 内容。完成了请求和响应后，浏览器拿到了返回的 HTML 字符串，转换成 DOM 树结构，经过对 DOM 的样式计算，最终生成布局，在页面上进行合成渲染</p></blockquote>\n<h2 id=\"八、性能优化\"><a href=\"#八、性能优化\" class=\"headerlink\" title=\"八、性能优化\"></a>八、性能优化</h2><p>1、路由懒加载：有效拆分 APP 尺寸，访问时才异步加载</p>\n<p>(1)当打包构建应用时，JavaScript 包会变得非常大，影响页面加载。利用路由懒加载我们能把不同路由对应的组件分割成不同的代码块，然后当路由被访问的时候才加载对应组件，这样会更加高效，是一种优化手段。</p>\n<p>(2)一般来说，对所有的路由都使用动态导入是个好主意。</p>\n<p>(3)给 component 选项配置一个返回 Promise 组件的函数就可以定义懒加载路由。例如：<br>{ path: ‘&#x2F;users&#x2F;:id’, component: () &#x3D;&gt; import(‘.&#x2F;views&#x2F;UserDetails’) }</p>\n<p>(4)结合注释() &#x3D;&gt; import(&#x2F;_ webpackChunkName: “group-user” _&#x2F; ‘.&#x2F;UserDetails.vue’)可以做 webpack 代码分块<br>vite 中结合 rollupOptions 定义分块</p>\n<p>(5)路由中不能使用异步组件</p>\n<p>2、keep-alive 缓存页面：避免和重复创建组件实例，且能保留缓存组件状态</p>\n<p>3、v-show 复用 DOM：避免重复创建组件</p>\n<p>4、v-once 和 v-memo:不再变化的数据使用 v-once；按条件跳过更新时使用 v-memo</p>\n<p>5、长列表性能优化：如果是大数据长列表，可采用虚拟滚动，只渲染少部分区域的内容</p>\n<p>6、事件的销毁：Vue 组件销毁时，会自动解绑它的全部指令及事件监听器，但是仅限于组件本身的事件</p>\n<p>7、图片懒加载：图片过多的页面，为了加速页面加载速度，所以很多时候我们需要将页面内未出现在可视区域内的图片先不做加载， 等到滚动到可视区域后再去加载。可以使用 vue-lazyload</p>\n<p>8、第三方插件按需引入：例如组件库（element-plus）</p>\n<p>9、服务端渲染：首屏渲染慢，可以考虑 SSR \\ SSG</p>\n","text":"vue3 的 2 种响应式实现、Vue2 项目如何升级到 Vue3 等等。。。 一、options api 选项式 API Options Api 可以理解为就...","permalink":"/post/88、vue3-vue2","photos":[],"count_time":{"symbolsCount":"13k","symbolsTime":"12 mins."},"categories":[],"tags":[{"name":"vue3","slug":"vue3","count":24,"path":"api/tags/vue3.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#1%E3%80%81Vue2-x-%E7%9A%84%E5%93%8D%E5%BA%94%E5%BC%8F%E2%80%94%E2%80%94Object-defineProperty\"><span class=\"toc-text\">1、Vue2.x 的响应式——Object.defineProperty</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#2%E3%80%81Vue3-%E7%9A%84%E5%93%8D%E5%BA%94%E5%BC%8F-proxy\"><span class=\"toc-text\">2、Vue3 的响应式-proxy</span></a></li></ol></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%9B%9B%E3%80%81Vue2-%E5%8D%87%E7%BA%A7%E5%88%B0-Vue3-%E7%9A%84%E9%9D%9E%E5%85%BC%E5%AE%B9%E6%80%A7%E5%8F%98%E6%9B%B4\"><span class=\"toc-text\">四、Vue2 升级到 Vue3 的非兼容性变更</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#1%E3%80%81createApp-%E7%9A%84%E9%9D%9E%E5%85%BC%E5%AE%B9%E6%80%A7%E5%8F%98%E6%9B%B4\"><span class=\"toc-text\">1、createApp 的非兼容性变更</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#2%E3%80%81api-%E7%9A%84-import-%E5%AF%BC%E5%85%A5\"><span class=\"toc-text\">2、api 的 import 导入</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#3%E3%80%81%E5%B0%8F%E7%BB%93\"><span class=\"toc-text\">3、小结</span></a></li></ol></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E4%BA%94%E3%80%81%E5%A6%82%E4%BD%95%E5%B0%86-Vue2-%E9%A1%B9%E7%9B%AE%E5%8D%87%E7%BA%A7%E5%88%B0-Vue3\"><span class=\"toc-text\">五、如何将 Vue2 项目升级到 Vue3?</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#1%E3%80%81%E9%A1%B9%E7%9B%AE%E5%8D%87%E7%BA%A7%E6%96%B9%E6%B3%95%E4%B8%80\"><span class=\"toc-text\">1、项目升级方法一</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#2%E3%80%81%E9%A1%B9%E7%9B%AE%E5%8D%87%E7%BA%A7%E6%96%B9%E6%B3%95%E4%BA%8C%EF%BC%9Agogocode\"><span class=\"toc-text\">2、项目升级方法二：gogocode</span></a></li></ol></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%85%AD%E3%80%81vite\"><span class=\"toc-text\">六、vite</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#1%E3%80%81%E4%BB%80%E4%B9%88%E6%98%AF-ES-Module%EF%BC%9F\"><span class=\"toc-text\">1、什么是 ES Module？</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#2%E3%80%81%E6%90%AD%E5%BB%BA-vite-%E9%A1%B9%E7%9B%AE\"><span class=\"toc-text\">2、搭建 vite 项目</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#3%E3%80%81vite-%E9%A1%B9%E7%9B%AE%E7%9A%84%E7%9B%AE%E5%BD%95\"><span class=\"toc-text\">3、vite 项目的目录</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#4%E3%80%81%E5%AE%89%E8%A3%85-vue-router-%E7%9A%84-4-x-%E7%89%88%E6%9C%AC\"><span class=\"toc-text\">4、安装 vue-router 的 4.x 版本</span></a></li></ol></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E4%B8%83%E3%80%81%E8%BE%93%E5%85%A5%E8%B7%AF%E7%94%B1%E7%9A%84%E6%97%B6%E5%80%99%E6%98%AF%E6%80%8E%E4%B9%88%E8%8E%B7%E5%8F%96%E5%88%B0%E9%A1%B5%E9%9D%A2%E7%9A%84\"><span class=\"toc-text\">七、输入路由的时候是怎么获取到页面的</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%85%AB%E3%80%81%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96\"><span class=\"toc-text\">八、性能优化</span></a>","author":{"name":"Jude","slug":"blog-author","avatar":"","link":"/","description":"","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"mapped":true,"hidden":false,"prev_post":{"title":"89、vue-loader 是什么？","uid":"0101df2ffc8279cbfc009c6ce954aa72","slug":"89、vue-loader","date":"2022-08-14T12:00:00.000Z","updated":"2022-11-10T00:41:53.000Z","comments":true,"path":"api/articles/89、vue-loader.json","keywords":null,"cover":null,"text":"vue-loader 是用于处理单文件的 webpack loader。在 Vue 组件中，分为 template\\script\\style,结合其他 load...","permalink":"/post/89、vue-loader","photos":[],"count_time":{"symbolsCount":696,"symbolsTime":"1 mins."},"categories":[],"tags":[{"name":"vue-loader","slug":"vue-loader","count":1,"path":"api/tags/vue-loader.json"}],"author":{"name":"Jude","slug":"blog-author","avatar":"","link":"/","description":"","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}},"next_post":{"title":"87、element的表单校验自动定位到未校验成功位置","uid":"4d836d52e736c79a6a6c9f9b03098430","slug":"87.element-validator","date":"2022-08-09T12:00:00.000Z","updated":"2022-10-14T01:36:02.000Z","comments":true,"path":"api/articles/87.element-validator.json","keywords":null,"cover":null,"text":"遇到的项目问题是在每个折叠面板里边都有不同的表单，用 element 上的校验时，若有没填写的表单或不符合表单格式的要求，则自动展开该折叠面板，且页面定位到没校...","permalink":"/post/87.element-validator","photos":[],"count_time":{"symbolsCount":"1.5k","symbolsTime":"1 mins."},"categories":[],"tags":[{"name":"vue","slug":"vue","count":17,"path":"api/tags/vue.json"}],"author":{"name":"Jude","slug":"blog-author","avatar":"","link":"/","description":"","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}}}