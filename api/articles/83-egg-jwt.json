{"title":"83、egg-jwt用户鉴权、注册、登录及中间件","uid":"8b5c323045fddf5db82f04ce0344c7e7","slug":"83-egg-jwt","date":"2022-08-03T14:00:00.000Z","updated":"2022-10-11T08:57:11.000Z","comments":true,"path":"api/articles/83-egg-jwt.json","keywords":null,"cover":null,"content":"<span id=\"more\"></span>\n\n<h2 id=\"一、egg-jwt实现用户鉴权\"><a href=\"#一、egg-jwt实现用户鉴权\" class=\"headerlink\" title=\"一、egg-jwt实现用户鉴权\"></a>一、egg-jwt实现用户鉴权</h2><blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>用户鉴权，一种用于在通信网络中对试图访问来自服务提供商的服务的用户进行鉴权的方法。用于用户登陆到DSMP或使用数据业务时，业务网关或Portal发送此消息到DSMP，对该用户使用数据业务的合法性和有效性（状态是否为激活）进行检查。</p></blockquote>\n<p>简单理解，鉴权就是用户在浏览网页或 <code>App</code> 时，通过约定好的方式，让网页和用户建立起一种相互信赖的机制，继而返回给用户需要的信息。</p>\n<p>鉴权的机制：</p>\n<ul>\n<li>HTTP Basic Authentication</li>\n<li>session-cookie</li>\n<li>Token 令牌</li>\n<li>OAuth(开放授权)</li>\n</ul>\n<p><code>token</code> 可以运用在如网页、客户端、小程序、浏览器插件等等领域。如果选用 <code>cookie</code> 的形式鉴权，在客户端和小程序就无法使用这套接口，因为它们没有域的概念，而 <code>cookie</code> 是需要存在某个域下。</p>\n<h2 id=\"二、注册接口\"><a href=\"#二、注册接口\" class=\"headerlink\" title=\"二、注册接口\"></a>二、注册接口</h2><p>在 <code>controller</code> 目录下新建 <code>user.js</code> 用于编写用户相关的代码</p>\n<div class=\"language-js\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">js</span><pre class=\"shiki material-theme-palenight\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #BABED8\">// controller/user.js</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">&#39;use strict&#39;;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #BABED8\">const Controller = require(&#39;egg&#39;).Controller;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #BABED8\">class UserController extends Controller &#123;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">  async register() &#123;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">    const &#123; ctx &#125; = this;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">    const &#123; username, password &#125; = ctx.request.body; // 获取注册需要的参数</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">  &#125;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">&#125;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #BABED8\">module.exports = UserController;</span></span></code></pre></div><p>此时我们拿到了 <code>username</code> 和 <code>password</code>，我们需要判断两个参数是否为空。如果是空，则返回错误信息：</p>\n<div class=\"language-js\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">js</span><pre class=\"shiki material-theme-palenight\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #BABED8\">// 判空操作</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">if (!username || !password) &#123;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">  ctx.body = &#123;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">    code: 500,</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">    msg: &#39;账号密码不能为空&#39;,</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">    data: null</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">  &#125;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">  return</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">&#125;</span></span></code></pre></div><p>此时我们还需要一个判断，根据用户传入的 <code>username</code> 去数据库的 <code>user</code> 表查询，是否已经被注册。</p>\n<p>在 <code>service</code> 目录下新建 <code>user.js</code>，并且添加 <code>getUserByName</code> 方法用于根据 <code>username</code> 查找用户信息</p>\n<div class=\"language-js\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">js</span><pre class=\"shiki material-theme-palenight\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #BABED8\">//  service/user.js</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">&#39;use strict&#39;;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #BABED8\">const Service = require(&#39;egg&#39;).Service;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #BABED8\">class UserService extends Service &#123;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">  // 通过用户名获取用户信息</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">  async getUserByName(username) &#123;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">    const &#123; app &#125; = this;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">      try &#123;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">        const result = await app.mysql.get(&#39;user&#39;, &#123; username &#125;);</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">        return result;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">      &#125; catch (error) &#123;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">        console.log(error);</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">        return null;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">      &#125;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">  &#125;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">&#125;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">module.exports = UserService;</span></span></code></pre></div><blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>使用 async 和 await 时，如果想捕获错误，需要使用 try…catch 来捕获，如果代码运行过程中发生错误，都将会被 catch 捕获。</p></blockquote>\n<p> <code>controller/user.js</code> 继续添加逻辑，在 「判空操作」逻辑下，判断是否已经被注册的逻辑：</p>\n<div class=\"language-js\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">js</span><pre class=\"shiki material-theme-palenight\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #BABED8\">// controller/user.js</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">async register() &#123;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">  ...</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">  // 验证数据库内是否已经有该账户名</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">  const userInfo = await ctx.service.user.getUserByName(username) // 获取用户信息</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #BABED8\">  // 判断是否已经存在</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">  if (userInfo &amp;&amp; userInfo.id) &#123;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">    ctx.body = &#123;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">      code: 500,</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">      msg: &#39;账户名已被注册，请重新输入&#39;,</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">      data: null</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">    &#125;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">    return</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">  &#125;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">&#125;</span></span></code></pre></div><p>经过上述两层判断之后，接下便可将账号和密码写入数据库</p>\n<div class=\"language-js\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">js</span><pre class=\"shiki material-theme-palenight\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #BABED8\">// controller/user.js</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">// 默认头像，放在 user.js 的最外，部避免重复声明。</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">const defaultAvatar = &#39;http://s.yezgea02.com/1615973940679/WeChat77d6d2ac093e247c361f0b8a7aeb6c2a.png&#39;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">// 调用 service 方法，将数据存入数据库。</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">const result = await ctx.service.user.register(&#123;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">  username,</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">  password,</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">  signature: &#39;世界和平。&#39;,</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">  avatar: defaultAvatar</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">&#125;);</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #BABED8\">if (result) &#123;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">  ctx.body = &#123;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">    code: 200,</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">    msg: &#39;注册成功&#39;,</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">    data: null</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">  &#125;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">&#125; else &#123;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">  ctx.body = &#123;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">    code: 500,</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">    msg: &#39;注册失败&#39;,</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">    data: null</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">  &#125;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">&#125;</span></span></code></pre></div><p><code>service/user.js</code> 添加 <code>register</code> 写入数据库的方法</p>\n<div class=\"language-js\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">js</span><pre class=\"shiki material-theme-palenight\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #BABED8\">// service/user.js</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">...</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">// 注册</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">async register(params) &#123;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">  const &#123; app &#125; = this;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">  try &#123;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">    const result = await app.mysql.insert(&#39;user&#39;, params);</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">    return result;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">  &#125; catch (error) &#123;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">    console.log(error);</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">    return null;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">  &#125;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">&#125;</span></span></code></pre></div><p>在 <code>router.js</code> 将接口抛出</p>\n<div class=\"language-js\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">js</span><pre class=\"shiki material-theme-palenight\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #BABED8\">// router.js</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">&#39;use strict&#39;;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #BABED8\">/**</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\"> * @param &#123;Egg.Application&#125; app - egg application</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\"> */</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">module.exports = app =&gt; &#123;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">  const &#123; router, controller &#125; = app;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">  router.post(&#39;/api/user/register&#39;, controller.user.register);</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">&#125;;</span></span></code></pre></div><p>通过postman工具测试接口。</p>\n<h2 id=\"三、登录接口\"><a href=\"#三、登录接口\" class=\"headerlink\" title=\"三、登录接口\"></a>三、登录接口</h2><blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>通过注册的「用户名」和「密码」，调用登录接口，接口会返回给我们一个 <code>token</code> 令牌</p></blockquote>\n<p>每次发起请求，无论是获取数据，还是提交数据，我们都需要将 <code>token</code> 带上，以此来标识，此次获取(GET)或提交(POST)是哪一个用户的行为。</p>\n<p> <code>egg-jwt</code> 有加密的功能，也有解密的功能。通过解密 <code>token</code> 拿到当初加密 <code>token</code> 时的信息，信息的内容大致就是当初注册时候的用户信息。</p>\n<p>安装egg-jwt插件</p>\n<div class=\"language-shell\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">shell</span><pre class=\"shiki material-theme-palenight\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #BABED8\">npm i egg-jwt -S</span></span></code></pre></div><p>Egg-jwt的<a href=\"https://link.juejin.cn/?target=https://github.com/okoala/egg-jwt%23readme\">仓库地址</a></p>\n<p>在 <code>config/plugin.js</code> 下添加插件：</p>\n<div class=\"language-js\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">js</span><pre class=\"shiki material-theme-palenight\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #BABED8\">jwt: &#123;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">  enable: true,</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">  package: &#39;egg-jwt&#39;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">&#125;</span></span></code></pre></div><p><code>config/config.default.js</code> 下添加自定义加密字符串</p>\n<div class=\"language-js\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">js</span><pre class=\"shiki material-theme-palenight\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #BABED8\">config.jwt = &#123;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">  secret: &#39;YQ&#39;,</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">&#125;;</span></span></code></pre></div><blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>secret<code>加密字符串，将在后续用于结合用户信息生成一串</code>token</p></blockquote>\n<p>在 <code>/controller/user.js</code> 下新建 <code>login</code> 方法</p>\n<div class=\"language-js\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">js</span><pre class=\"shiki material-theme-palenight\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #BABED8\">async login() &#123;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">    // app 为全局属性，相当于所有的插件方法都植入到了 app 对象。</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">    const &#123; ctx, app &#125; = this;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">    const &#123; username, password &#125; = ctx.request.body</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">    // 根据用户名，在数据库查找相对应的id操作</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">    const userInfo = await ctx.service.user.getUserByName(username)</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">    // 没找到说明没有该用户</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">    if (!userInfo || !userInfo.id) &#123;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">      ctx.body = &#123;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">        code: 500,</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">        msg: &#39;账号不存在&#39;,</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">        data: null</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">      &#125;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">      return</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">    &#125;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">    // 找到用户，并且判断输入密码与数据库中用户密码。</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">    if (userInfo &amp;&amp; password != userInfo.password) &#123;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">      ctx.body = &#123;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">        code: 500,</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">        msg: &#39;账号密码错误&#39;,</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">        data: null</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">      &#125;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">      return</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">    &#125;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">       // 生成 token 加盐</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">      // app.jwt.sign 方法接受两个参数，第一个为对象，对象内是需要加密的内容；第二个是加密字符串，上文已经提到过。</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">    const token = app.jwt.sign(&#123;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">      id: userInfo.id,</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">      username: userInfo.username,</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">      exp: Math.floor(Date.now() / 1000) + (24 * 60 * 60) // token 有效期为 24 小时</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">    &#125;, app.config.jwt.secret);</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #BABED8\">    ctx.body = &#123;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">      code: 200,</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">      message: &#39;登录成功&#39;,</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">      data: &#123;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">        token</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">      &#125;,</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">    &#125;;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">&#125;</span></span>\n<span class=\"line\"></span></code></pre></div><p>把获取到的 <code>userInfo</code> 中的 <code>id</code> 和 <code>username</code> 两个属性，通过 <code>app.jwt.sign</code> 方法，结合 <code>app.config.jwt.secret</code> 加密字符串（之前声明的 <code>YQ</code>），生成一个 <code>token</code>。这个 <code>token</code> 会是一串很长的加密字符串</p>\n<p>在 <code>/controller/user.js</code> 中，新增一个验证方法 <code>test</code></p>\n<div class=\"language-js\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">js</span><pre class=\"shiki material-theme-palenight\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #BABED8\">// 验证方法</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">async test() &#123;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">  const &#123; ctx, app &#125; = this;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">  // 通过 token 解析，拿到 user_id</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">  const token = ctx.request.header.authorization; // 请求头获取 authorization 属性，值为 token</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">  // 通过 app.jwt.verify + 加密字符串 解析出 token 的值 </span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">  const decode = await app.jwt.verify(token, app.config.jwt.secret);</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">  // 响应接口</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">  ctx.body = &#123;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">    code: 200,</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">    message: &#39;获取成功&#39;,</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">    data: &#123;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">      ...decode</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">    &#125;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">  &#125;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">&#125;</span></span></code></pre></div><p>在路由 <code>router.js</code> 脚本中，将登录接口抛出</p>\n<div class=\"language-js\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">js</span><pre class=\"shiki material-theme-palenight\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #BABED8\">&#39;use strict&#39;;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #BABED8\">/**</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\"> * @param &#123;Egg.Application&#125; app - egg application</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\"> */</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">module.exports = app =&gt; &#123;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">  const &#123; router, controller &#125; = app;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">  router.post(&#39;/api/user/register&#39;, controller.user.register);</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">  router.post(&#39;/api/user/login&#39;, controller.user.login);</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">&#125;;</span></span></code></pre></div><h2 id=\"四、登录验证中间件\"><a href=\"#四、登录验证中间件\" class=\"headerlink\" title=\"四、登录验证中间件\"></a>四、登录验证中间件</h2><p>中间件我们可以理解成一个过滤器，举个例子，我们有 <code>A</code>、<code>B</code>、<code>C</code>、<code>D</code> 四个接口是需要用户权限的，如果我们要判断是否有用户权限的话，就需要在这四个接口的控制层去判断用户是否登录。</p>\n<p>每个接口都验证存在的弊端</p>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>1、每次编写新的接口，都要在方法内部做判断，这很费事。 2、一旦鉴权有所调整，我们需要修改每个用到判断登录的代码。</p></blockquote>\n<p>在请求接口的时候，过一层中间件，判断该请求是否是登录状态下发起的。此时我们打开项目，在 <code>app</code> 目录下新新建一个文件夹 <code>middleware</code>，并且在该目录下新增 <code>jwtErr.js</code></p>\n<div class=\"language-js\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">js</span><pre class=\"shiki material-theme-palenight\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #BABED8\">&#39;use strict&#39;;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #BABED8\">module.exports = (secret) =&gt; &#123;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">  return async function jwtErr(ctx, next) &#123;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">    const token = ctx.request.header.authorization; // 若是没有 token，返回的是 null 字符串</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">    let decode</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">    if(token != &#39;null&#39; &amp;&amp; token) &#123;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">      try &#123;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">        decode = ctx.app.jwt.verify(token, secret); // 验证token</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">        await next();</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">      &#125; catch (error) &#123;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">        console.log(&#39;error&#39;, error)</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">        ctx.status = 200;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">        ctx.body = &#123;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">          msg: &#39;token已过期，请重新登录&#39;,</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">          code: 401,</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">        &#125;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">        return;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">      &#125;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">    &#125; else &#123;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">      ctx.status = 200;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">      ctx.body = &#123;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">        code: 401,</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">        msg: &#39;token不存在&#39;,</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">      &#125;;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">      return;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">    &#125;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">  &#125;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">&#125;</span></span>\n<span class=\"line\"></span></code></pre></div><p>首先中间件默认抛出一个函数，该函数返回一个异步方法 <code>jwtErr</code>，<code>jewErr</code> 方法有两个参数 <code>ctx</code> 是上下文，可以在 <code>ctx</code> 中拿到全局对象 <code>app</code>。</p>\n<p>首先，通过 <code>ctx.request.header.authorization</code> 获取到请求头中的 <code>authorization</code> 属性，它便是我们请求接口是携带的 <code>token</code> 值，如果没有携带 <code>token</code>，该值为字符串 <code>null</code>。我们通过 <code>if</code> 语句判断如果有 <code>token</code> 的情况下，使用 <code>ctx.app.jwt.verify</code> 方法验证该 <code>token</code> 是否存在并且有效，如果是存在且有效，则通过验证 <code>await next()</code> 继续执行后续的接口逻辑。否则判断是失效还是不存在该 <code>token</code>。</p>\n<p>中间件完成后，我们在路由中<code>router.js</code> 去使用它</p>\n<div class=\"language-js\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">js</span><pre class=\"shiki material-theme-palenight\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #BABED8\">&#39;use strict&#39;;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #BABED8\">/**</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\"> * @param &#123;Egg.Application&#125; app - egg application</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\"> */</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">module.exports = app =&gt; &#123;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">  const &#123; router, controller, middleware &#125; = app;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">  const _jwt = middleware.jwtErr(app.config.jwt.secret); // 传入加密字符串</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">  router.post(&#39;/api/user/register&#39;, controller.user.register);</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">  router.post(&#39;/api/user/login&#39;, controller.user.login);</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">  router.get(&#39;/api/user/test&#39;, _jwt, controller.user.test); // 放入第二个参数，作为中间件过滤项</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">&#125;;</span></span></code></pre></div>","text":" 一、egg-jwt实现用户鉴权 用户鉴权，一种用于在通信网络中对试图访问来自服务提供商的服务的用户进行鉴权的方法。用于用户登陆到DSMP或使用数据业务时，业务...","permalink":"/post/83-egg-jwt","photos":[],"count_time":{"symbolsCount":"7.7k","symbolsTime":"7 mins."},"categories":[],"tags":[{"name":"egg","slug":"egg","count":4,"path":"api/tags/egg.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E4%B8%80%E3%80%81egg-jwt%E5%AE%9E%E7%8E%B0%E7%94%A8%E6%88%B7%E9%89%B4%E6%9D%83\"><span class=\"toc-text\">一、egg-jwt实现用户鉴权</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E4%BA%8C%E3%80%81%E6%B3%A8%E5%86%8C%E6%8E%A5%E5%8F%A3\"><span class=\"toc-text\">二、注册接口</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E4%B8%89%E3%80%81%E7%99%BB%E5%BD%95%E6%8E%A5%E5%8F%A3\"><span class=\"toc-text\">三、登录接口</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%9B%9B%E3%80%81%E7%99%BB%E5%BD%95%E9%AA%8C%E8%AF%81%E4%B8%AD%E9%97%B4%E4%BB%B6\"><span class=\"toc-text\">四、登录验证中间件</span></a></li></ol>","author":{"name":"Jude","slug":"blog-author","avatar":"","link":"/","description":"","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"mapped":true,"hidden":false,"prev_post":{"title":"84、Chrome快速切换搜索引擎","uid":"7625dec645dd96c87c054cb6dd2304f5","slug":"84.search","date":"2022-08-04T14:00:00.000Z","updated":"2022-10-12T01:34:25.000Z","comments":true,"path":"api/articles/84.search.json","keywords":null,"cover":null,"text":"如何在不同的搜索引擎的之间快速切换？其实谷歌浏览器（Chrome）自带了一个关键词功能，只需要稍加修改，就可以方便的实现搜索引擎切换，不需要额外安装任何特殊软件...","permalink":"/post/84.search","photos":[],"count_time":{"symbolsCount":274,"symbolsTime":"1 mins."},"categories":[],"tags":[{"name":"tool","slug":"tool","count":4,"path":"api/tags/tool.json"}],"author":{"name":"Jude","slug":"blog-author","avatar":"","link":"/","description":"","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}},"next_post":{"title":"82、egg-mysql的增删改查","uid":"ca10d3e7f1a13d6503bb04ce7c675542","slug":"82-egg-mysql","date":"2022-08-03T12:00:00.000Z","updated":"2022-10-11T08:12:51.000Z","comments":true,"path":"api/articles/82-egg-mysql.json","keywords":null,"cover":null,"text":"MySQL安装成功后，在egg项目中安装egg-mysql插件，配置完成后，编写查询、新增、删除、编辑接口。 一、安装MySQL版本选择MySQL 8.0.20...","permalink":"/post/82-egg-mysql","photos":[],"count_time":{"symbolsCount":"4.7k","symbolsTime":"4 mins."},"categories":[],"tags":[{"name":"egg","slug":"egg","count":4,"path":"api/tags/egg.json"}],"author":{"name":"Jude","slug":"blog-author","avatar":"","link":"/","description":"","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}}}