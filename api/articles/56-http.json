{"title":"56、HTTP的请求方法、状态码","uid":"6078e843a70df5973b73339f903e8c92","slug":"56-http","date":"2022-02-22T16:00:00.000Z","updated":"2022-09-05T07:56:57.000Z","comments":true,"path":"api/articles/56-http.json","keywords":null,"cover":null,"content":"<p>整理一下HTTP的请求方法、GET&#x2F;POST方法的区别、HTTP状态码、跨域解决方法，最近面试也被问到这些问题。</p>\n<span id=\"more\"></span>\n\n<h2 id=\"一、HTTP的请求方法\"><a href=\"#一、HTTP的请求方法\" class=\"headerlink\" title=\"一、HTTP的请求方法\"></a>一、HTTP的请求方法</h2><blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>GET: 通常是用来获取资源<br>POST： 提交数据<br>PUT： 修改数据<br>DELETE： 删除资源<br>HEAD: 获取资源的元信息</p></blockquote>\n<h2 id=\"二、GET和POST请求的区别？\"><a href=\"#二、GET和POST请求的区别？\" class=\"headerlink\" title=\"二、GET和POST请求的区别？\"></a>二、GET和POST请求的区别？</h2><p>从字面意思来讲，GET就是拿、获得，POST就是给、邮寄。</p>\n<p>1、缓存角度： GET请求会被浏览器主动缓存下来，留下历史记录，而POST默认不会；</p>\n<p>2、编码角度： GET只能进行URL编码，只能接受ASCII字符，而POST没有限制；</p>\n<p>3、参数角度： GET一般将参数放在URL中，存在安全问题，POST放在请求体中，适合传输敏感信息</p>\n<p>4、幂等性角度： GET是幂等，POST则不是。（幂等表示执行相同的操作，结果也是相同的）</p>\n<p>5、TCP角度：GET会将请求报文一次性发出去，而POST会分为2个TCP数据包,先发header部分，如果服务器响应100，再发body部分。（Firefox浏览器的POST请求只会发一个TCP包）。</p>\n<h2 id=\"三、HTTP状态码\"><a href=\"#三、HTTP状态码\" class=\"headerlink\" title=\"三、HTTP状态码\"></a>三、HTTP状态码</h2><blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>1XX: 协议处理的中间状态，还需要后续操作<br>2XX: 成功状态<br>3XX: 重定向状态，资源位置发生变动，需要重新请求<br>4XX: 请求报文有误<br>5XX: 服务端发生错误</p></blockquote>\n<p>通常在开发过程中，常用到的状态码包括：<br>200：这个最常见，成功的状态码，通常在响应体中放有数据<br>204：与200的区别就在于响应头后没有body数据<br>206：表示部分内容，这个状态码在断点续传中可以看到（响应头字段为：Content-Range）</p>\n<p>301: 永久重定向<br>302: 临时重定向<br>304: 协商缓存命中时返回这个304状态码</p>\n<p>403： 服务器禁止访问<br>404： 资源未找到，在服务器上未找到相应的资源</p>\n<p>500： 服务器出错了，一般将报错信息发送给后端，后端同学来检查</p>\n<h2 id=\"四、HTTP、HTTP-2特点\"><a href=\"#四、HTTP、HTTP-2特点\" class=\"headerlink\" title=\"四、HTTP、HTTP&#x2F;2特点\"></a>四、HTTP、HTTP&#x2F;2特点</h2><h3 id=\"1、http特点\"><a href=\"#1、http特点\" class=\"headerlink\" title=\"1、http特点\"></a>1、http特点</h3><p>1、灵活可拓展。语义自由，只规定了基本格式；传输形式多样性，可传输文本、图片、视频等任意数据。</p>\n<p>2、可靠传输。基于TCP&#x2F;IP，继承了TCP特性。</p>\n<p>3、请求-应答。一发一收、有来有回</p>\n<p>4、无状态。每次的http请求都输独立、无关的，默认不需要保留状态信息。</p>\n<h3 id=\"2、http缺点\"><a href=\"#2、http缺点\" class=\"headerlink\" title=\"2、http缺点\"></a>2、http缺点</h3><p>1、无状态。区分场景，无状态是优点也是缺点，例如长链接中，无状态就是缺点；如果就是获取一些数据，不需要保存连接上下文信息，无状态反而减少了网络开销，http成了优点。</p>\n<p>2、明文传输：协议里的头部报文不使用二进制数据，而是文本形式。调试便利的同时，http报文信息暴露给了外界，容易被外界攻击。</p>\n<h3 id=\"3、https-2的改进\"><a href=\"#3、https-2的改进\" class=\"headerlink\" title=\"3、https&#x2F;2的改进\"></a>3、https&#x2F;2的改进</h3><p>1、头部压缩：针对头部字段，采用压缩算法</p>\n<p>2、多路复用：解决http对头阻塞问题</p>\n<p>3、设置优先级：二进制分帧</p>\n<p>4、服务器推送：不再是被动的接受请求、响应请求，能新建stream给客户端发送信息。</p>\n<p>5、安全性：</p>\n<h3 id=\"4、三次握手\"><a href=\"#4、三次握手\" class=\"headerlink\" title=\"4、三次握手\"></a>4、三次握手</h3><blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>三次握手其实就是指建立一个TCP连接时，需要客户端和服务器总共发送3个包。进行三次握手的主要作用就是为了确认双方的接收能力和发送能力是否正常、指定自己的初始化序列号为后面的可靠性传送做准备。实质上其实就是连接服务器指定端口，建立TCP连接，并同步连接双方的序列号和确认号，交换TCP窗口大小信息。</p></blockquote>\n<p>第一次握手：客户端发送网络包，服务端收到了。<br>这样服务端就能得出结论：客户端的发送能力、服务端的接收能力是正常的。</p>\n<p>第二次握手：服务端发包，客户端收到了。<br>这样客户端就能得出结论：服务端的接收、发送能力，客户端的接收、发送能力是正常的。不过此时服务器并不能确认客户端的接收能力是否正常。</p>\n<p>第三次握手：客户端发包，服务端收到了。<br>这样服务端就能得出结论：客户端的接收、发送能力正常，服务器自己的发送、接收能力也正常。</p>\n<h2 id=\"五、跨域及解决方式：\"><a href=\"#五、跨域及解决方式：\" class=\"headerlink\" title=\"五、跨域及解决方式：\"></a>五、跨域及解决方式：</h2><p>前后端分离的开发模式中，通常会遇到跨域问题，当一个ajax请求发出去了，服务器也响应了，但是前端拿不到响应数据，这主要是因为浏览器有一个同源策略。</p>\n<h3 id=\"1、浏览器的同源策略\"><a href=\"#1、浏览器的同源策略\" class=\"headerlink\" title=\"1、浏览器的同源策略\"></a>1、浏览器的同源策略</h3><blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>浏览器遵循同源策略，即协议 + host主机 + port端口都相同时，视为同源，不存在跨域。<br>当浏览器发送Ajax请求时，只要当前的URL和目标URL不同源（协议、host、port有一个不相同，就是不同源），就存在跨域请求。</p></blockquote>\n<h3 id=\"2、CROS：跨域资源共享\"><a href=\"#2、CROS：跨域资源共享\" class=\"headerlink\" title=\"2、CROS：跨域资源共享\"></a>2、CROS：跨域资源共享</h3><p>CORS是一个W3C标准，需要浏览器和服务器的共同支持。一般在服务端响应头返回Access-Control-Allow-Origin:* (也可以指定具体的源名)</p>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>options 预检请求</p></blockquote>\n<div class=\"language-js\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">js</span><pre class=\"shiki material-theme-palenight\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #BABED8\">OPTIONS </span><span style=\"color: #89DDFF\">/</span><span style=\"color: #BABED8\"> HTTP</span><span style=\"color: #89DDFF\">/</span><span style=\"color: #F78C6C\">1.1</span></span>\n<span class=\"line\"><span style=\"color: #FFCB6B\">Origin</span><span style=\"color: #89DDFF\">:</span><span style=\"color: #BABED8\"> 当前地址</span></span>\n<span class=\"line\"><span style=\"color: #FFCB6B\">Host</span><span style=\"color: #89DDFF\">:</span><span style=\"color: #BABED8\"> xxx</span><span style=\"color: #89DDFF\">.</span><span style=\"color: #BABED8\">com</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">Access</span><span style=\"color: #89DDFF\">-</span><span style=\"color: #BABED8\">Control</span><span style=\"color: #89DDFF\">-</span><span style=\"color: #BABED8\">Request</span><span style=\"color: #89DDFF\">-</span><span style=\"color: #FFCB6B\">Method</span><span style=\"color: #89DDFF\">:</span><span style=\"color: #BABED8\"> PUT</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">Access</span><span style=\"color: #89DDFF\">-</span><span style=\"color: #BABED8\">Control</span><span style=\"color: #89DDFF\">-</span><span style=\"color: #BABED8\">Request</span><span style=\"color: #89DDFF\">-</span><span style=\"color: #FFCB6B\">Headers</span><span style=\"color: #89DDFF\">:</span><span style=\"color: #BABED8\"> X</span><span style=\"color: #89DDFF\">-</span><span style=\"color: #BABED8\">Custom</span><span style=\"color: #89DDFF\">-</span><span style=\"color: #BABED8\">Header</span></span></code></pre></div><p>在预检请求的响应返回后，如果请求不满足响应头的条件，则触发XMLHttpRequest的onerror方法，当然后面真正的CORS请求也不会发出去了。</p>\n<h3 id=\"3、Nginx反向代理\"><a href=\"#3、Nginx反向代理\" class=\"headerlink\" title=\"3、Nginx反向代理\"></a>3、Nginx反向代理</h3><blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>Nginx是高性能的反向代理服务器</p></blockquote>\n<p>反向代理其实就是拿到客户端的请求，将请求转发给其他服务器，主要场景是维持服务器集群的负载均衡。即：反向代理帮其他的服务器拿到请求，然后选择一个合适的服务器，将请求转交给它。</p>\n<p>例如：客户端域名：client.com  服务器域名：server.com,Nginx解决跨域的方法如下：</p>\n<div class=\"language-js\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">js</span><pre class=\"shiki material-theme-palenight\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #BABED8\">server </span><span style=\"color: #89DDFF\">&#123;</span></span>\n<span class=\"line\"><span style=\"color: #F07178\">  </span><span style=\"color: #BABED8\">listen</span><span style=\"color: #F07178\">  </span><span style=\"color: #F78C6C\">80</span><span style=\"color: #89DDFF\">;</span></span>\n<span class=\"line\"><span style=\"color: #F07178\">  </span><span style=\"color: #BABED8\">server_name</span><span style=\"color: #F07178\">  </span><span style=\"color: #BABED8\">client</span><span style=\"color: #89DDFF\">.</span><span style=\"color: #BABED8\">com</span><span style=\"color: #89DDFF\">;</span></span>\n<span class=\"line\"><span style=\"color: #F07178\">  </span><span style=\"color: #BABED8\">location</span><span style=\"color: #F07178\"> </span><span style=\"color: #89DDFF\">/</span><span style=\"color: #BABED8\">api</span><span style=\"color: #F07178\"> </span><span style=\"color: #89DDFF\">&#123;</span></span>\n<span class=\"line\"><span style=\"color: #F07178\">    </span><span style=\"color: #BABED8\">proxy_pass</span><span style=\"color: #F07178\"> </span><span style=\"color: #BABED8\">server</span><span style=\"color: #89DDFF\">.</span><span style=\"color: #BABED8\">com</span><span style=\"color: #89DDFF\">;</span></span>\n<span class=\"line\"><span style=\"color: #F07178\">  </span><span style=\"color: #89DDFF\">&#125;</span></span>\n<span class=\"line\"><span style=\"color: #89DDFF\">&#125;</span></span></code></pre></div><p>客户端首先访问client.com&#x2F;api（此时不存在跨域），Nginx服务器作为反向代理，将请求转发给sever.com，响应返回时又将响应给到客户端，完成整个跨域请求。</p>\n<h3 id=\"4、Jsonp\"><a href=\"#4、Jsonp\" class=\"headerlink\" title=\"4、Jsonp\"></a>4、Jsonp</h3><blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>通过给script标签的src填上目标地址发送GET请求（只支持GET请求），实现跨域请求拿到相应数据。</p></blockquote>\n<h3 id=\"5、websocket\"><a href=\"#5、websocket\" class=\"headerlink\" title=\"5、websocket\"></a>5、websocket</h3><blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>websocket实现了客户端与服务端直接的持久连接，本质没有使用了 HTTP 的响应头, 因此也没有跨域的限制</p></blockquote>\n","text":"整理一下HTTP的请求方法、GET&#x2F;POST方法的区别、HTTP状态码、跨域解决方法，最近面试也被问到这些问题。 一、HTTP的请求方法 GET: 通...","permalink":"/post/56-http","photos":[],"count_time":{"symbolsCount":"2.7k","symbolsTime":"2 mins."},"categories":[],"tags":[{"name":"http","slug":"http","count":1,"path":"api/tags/http.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E4%B8%80%E3%80%81HTTP%E7%9A%84%E8%AF%B7%E6%B1%82%E6%96%B9%E6%B3%95\"><span class=\"toc-text\">一、HTTP的请求方法</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E4%BA%8C%E3%80%81GET%E5%92%8CPOST%E8%AF%B7%E6%B1%82%E7%9A%84%E5%8C%BA%E5%88%AB%EF%BC%9F\"><span class=\"toc-text\">二、GET和POST请求的区别？</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E4%B8%89%E3%80%81HTTP%E7%8A%B6%E6%80%81%E7%A0%81\"><span class=\"toc-text\">三、HTTP状态码</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%9B%9B%E3%80%81HTTP%E3%80%81HTTP-2%E7%89%B9%E7%82%B9\"><span class=\"toc-text\">四、HTTP、HTTP&#x2F;2特点</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#1%E3%80%81http%E7%89%B9%E7%82%B9\"><span class=\"toc-text\">1、http特点</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#2%E3%80%81http%E7%BC%BA%E7%82%B9\"><span class=\"toc-text\">2、http缺点</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#3%E3%80%81https-2%E7%9A%84%E6%94%B9%E8%BF%9B\"><span class=\"toc-text\">3、https&#x2F;2的改进</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#4%E3%80%81%E4%B8%89%E6%AC%A1%E6%8F%A1%E6%89%8B\"><span class=\"toc-text\">4、三次握手</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E4%BA%94%E3%80%81%E8%B7%A8%E5%9F%9F%E5%8F%8A%E8%A7%A3%E5%86%B3%E6%96%B9%E5%BC%8F%EF%BC%9A\"><span class=\"toc-text\">五、跨域及解决方式：</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#1%E3%80%81%E6%B5%8F%E8%A7%88%E5%99%A8%E7%9A%84%E5%90%8C%E6%BA%90%E7%AD%96%E7%95%A5\"><span class=\"toc-text\">1、浏览器的同源策略</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#2%E3%80%81CROS%EF%BC%9A%E8%B7%A8%E5%9F%9F%E8%B5%84%E6%BA%90%E5%85%B1%E4%BA%AB\"><span class=\"toc-text\">2、CROS：跨域资源共享</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#3%E3%80%81Nginx%E5%8F%8D%E5%90%91%E4%BB%A3%E7%90%86\"><span class=\"toc-text\">3、Nginx反向代理</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#4%E3%80%81Jsonp\"><span class=\"toc-text\">4、Jsonp</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#5%E3%80%81websocket\"><span class=\"toc-text\">5、websocket</span></a></li></ol></li></ol>","author":{"name":"Jude","slug":"blog-author","avatar":"","link":"/","description":"","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"mapped":true,"hidden":false,"prev_post":{"title":"57、Vue2/Vue3 响应式原理","uid":"aa40af85aceeb30cb2d7f6d5d06d90ef","slug":"57-vue2-defineProperty","date":"2022-02-23T16:00:00.000Z","updated":"2022-09-05T07:57:24.000Z","comments":true,"path":"api/articles/57-vue2-defineProperty.json","keywords":null,"cover":null,"text":"Vue官网：当把一个普通的对象传入Vue实例作为data选项，Vue将遍历此对象所有的属性，并使用Object.defineProperty把这些数星星全部转化...","permalink":"/post/57-vue2-defineProperty","photos":[],"count_time":{"symbolsCount":"5.5k","symbolsTime":"5 mins."},"categories":[],"tags":[{"name":"vue","slug":"vue","count":17,"path":"api/tags/vue.json"}],"author":{"name":"Jude","slug":"blog-author","avatar":"","link":"/","description":"","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}},"next_post":{"title":"55、大文件断点续传","uid":"146999a281f0a10064997f50d99317f5","slug":"55-file-upload","date":"2022-02-20T16:00:00.000Z","updated":"2022-09-05T07:56:33.000Z","comments":true,"path":"api/articles/55-file-upload.json","keywords":null,"cover":null,"text":"关于大文件断点续传的问题,解决方案是Blob.prototype.slice方法，和数组的slice方法类似，使用slice方法可以返回源文件的切片。按照要求将...","permalink":"/post/55-file-upload","photos":[],"count_time":{"symbolsCount":"16k","symbolsTime":"15 mins."},"categories":[],"tags":[{"name":"vue","slug":"vue","count":17,"path":"api/tags/vue.json"}],"author":{"name":"Jude","slug":"blog-author","avatar":"","link":"/","description":"","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}}}