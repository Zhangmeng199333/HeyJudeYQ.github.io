<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>123、《Vuejs设计与实现》- 霍春阳：vue.js设计的核心要素(二)</title>
      <link href="/2023/02/20/123-vue/"/>
      <url>/2023/02/20/123-vue/</url>
      
        <content type="html"><![CDATA[<p>框架提供了哪些构建产物？产物的模块格式？没有按照预期使用框架的警告信息，如何快速定位问题？开发版本的构建和生成版本的构建有何区别？热更新 HMR 框架层面的支持？自主选择需要的功能，能否选择关闭其他功能从而减少打包体积？</p><span id="more"></span><h2 id="一、提升开发体验"><a href="#一、提升开发体验" class="headerlink" title="一、提升开发体验"></a>一、提升开发体验</h2><p>在 vue.js 3 中，我们打印一个 ref 数据时：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> count = ref(<span class="hljs-number">0</span>);<br><span class="hljs-built_in">console</span>.log(count);<br></code></pre></td></tr></table></figure><p>控制台打印结果为：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js">RefImpl &#123; <span class="hljs-attr">_rawValue</span>:<span class="hljs-number">0</span>,<span class="hljs-attr">_shallow</span>: <span class="hljs-literal">false</span>,<span class="hljs-attr">__v_isRef</span>:<span class="hljs-literal">true</span>, <span class="hljs-attr">_value</span>: <span class="hljs-number">0</span> &#125;<br></code></pre></td></tr></table></figure><p>控制台打印的输出结果很不直观（当然我们可以选择打印 count.vlaue，输出的结果为 0），其实 Chrome 浏览器已经提供了 RefImpl 类的打印设置，打开 devtool 的设置，勾选“console” =&gt; enable custom formatters 选项，浏览器的打印结果就会变成</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js">Ref&lt;<span class="hljs-number">0</span>&gt;<br></code></pre></td></tr></table></figure><p>当然还包括错误提示。</p><h2 id="二、框架代码的体积"><a href="#二、框架代码的体积" class="headerlink" title="二、框架代码的体积"></a>二、框架代码的体积</h2><p>在实现同样功能的情况<br>下，当然是用的代码越少越好，这样体积就会越小，最后浏览器加载<br>资源的时间也就越少。这时我们不禁会想，提供越完善的警告信息就<br>意味着我们要编写更多的代码，这不是与控制代码体积相悖吗？</p><p>vue.js3 的源码，我们会发现每一个 warn 函数的调用都会配合<strong>DEV</strong>常量的检查：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">if</span> (__DEV__ &amp;&amp; !res) &#123;<br>  warn(<span class="hljs-string">`Fail to mount app:mount target selector &quot;<span class="hljs-subst">$&#123;container&#125;</span>&quot; returned null`</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p>打印警告信息的前提是：<strong>DEV</strong>常量为 true，<strong>DEV</strong>常量就是达到目的的关键。vue.js 是使用 rollup.js 对项目进行构建的，这里的 <strong>DEV</strong> 常量实际<br>上是通过 rollup.js 的插件配置来预定义的，其功能类似于 webpack 中的<br>DefinePlugin 插件。vue.js 在输出资源时，会存在开发环境（vue.global.js）和生产环境(vue.global.prod.js)。开发环境时，<strong>DEV</strong> 常量值为 true，生产环境时，<strong>DEV</strong> 常量值为 false。可以看到，<strong>DEV</strong>常量替换为字面量 false 时，判断条件为 false，就不会打印警告信息了。不会执行的代码（dead code），不会被打包到生产环境。<br>这样的目的就是，在开发环境中为用户提供友好的警告信息的 同时，不会增加生产环境代码的体积。</p><h2 id="三、Tree-Shaking"><a href="#三、Tree-Shaking" class="headerlink" title="三、Tree-Shaking"></a>三、Tree-Shaking</h2><p><strong>DEV</strong> 常量只是控制了警告信息的打印，框架的代码量不会随警告信息的增加而增加。这样做还不够，vue.js 3 内建了很多组件，例如 Transition 组件，如果我们在项目中未使用该组件，那么打包时，该组件的代码不需要被打包到生产环境。这时候就需要 Tree-Shaking 了。</p><p>Tree-Shaking 是指在打包时，只保留用到的代码，未用到的代码不会被打包到生产环境。vue.js 3 使用了 rollup.js 进行打包，rollup.js 提供了 Tree-Shaking 功能。</p><p>实现 Tree-Sharking 必须满足的条件：模块必须为 ES Module,因为 Tree-Sharking 依赖 ESM 的静态结构。</p><p>举例分析：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs js">-demo;<br>--package.json;<br>--input.js;<br>--utils.js;<br></code></pre></td></tr></table></figure><p>首先安装 rollup.js</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell">yarn add rollup -D<br>// 或者<br>npm i rollup -D<br></code></pre></td></tr></table></figure><p>input.js 和 utils.js</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// input.js</span><br><span class="hljs-keyword">import</span> &#123; foo &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;./utils.js&quot;</span>;<br>foo();<br><span class="hljs-comment">// utils.js</span><br><span class="hljs-keyword">export</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">foo</span>(<span class="hljs-params">obj</span>) </span>&#123;<br>  obj &amp;&amp; obj.foo;<br>&#125;<br><span class="hljs-keyword">export</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">bar</span>(<span class="hljs-params">obj</span>) </span>&#123;<br>  obj &amp;&amp; obj.bar;<br>&#125;<br></code></pre></td></tr></table></figure><p>代码很简单，定义并导出 utils.js 中的 2 个函数，分别是 foo 函数和 bar 函数，然后在 input.js 中导入并调用 foo 函数（我们没有导入 bar 函数）。</p><p>当我们执行构建命令：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">npx rollup input.js -f esm -o bundle.js<br></code></pre></td></tr></table></figure><p>bundle.js 中并未包含 bar 函数的代码，这就是 Tree-Shaking 的效果。这就是因为 bar 函数被作为 dead code 被删除了。</p><p>但是，我们可以发现 foo 函数也没有什么意义（仅仅是读取对象的值），为什么 rollup.js 不把 foo 函数也删除呢？</p><p>这里涉及 Tree-Sharking 的第二个关键点：副作用</p><p>所谓副作用，是指在调用函数时，除了返回函数的返回值之外，还会对函数外的其他变量产生影响。</p><p>上面的代码明显是读取对象的值，怎么会产生副作用呢？其实是有可能的，试想一下，如果 obj 对象是一个通过 Proxy 创建的代理对象，那么当我们读取对象属性时，就会触发代理对象的 get 夹子（trap），在 get 夹子中是可能产生副作用的，例如我们在 get 夹子中修改了某个全局变量。而到底会不会产生副作用，只有代码真正运行的时候才能知 JavaScript 本身是动态语言，因此想要静态地分析哪些代码是 dead code 很有难度。</p><p>rollup.js 是如何知道代码不会产生副作用，可以放心移除呢？</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">import</span> &#123; foo &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;./utils.js&quot;</span>;<br><span class="hljs-comment">/*#__PURE__*/</span> foo();<br></code></pre></td></tr></table></figure><p>这里需要使用的是 <code>/*#__PURE__*/</code>,它的作用就是告诉 rollup.js,这段代码不会产生副作用，可以放心使用 Tree-Sharking。</p><p>这里需要理解的是，通常产生副作用的代码都是模块内函数的顶级调用。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs js">foo(); <span class="hljs-comment">// 顶级调用</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">bar</span>(<span class="hljs-params"></span>) </span>&#123;<br>  foo(); <span class="hljs-comment">// 函数内部调用</span><br>&#125;<br></code></pre></td></tr></table></figure><blockquote><blockquote><p>对于顶级调用来说，是可能产生副作用的；但对于函<br>数内调用来说，只要函数 bar 没有被调用，那么 foo 函数的调用自然<br>不会产生副作用。</p></blockquote></blockquote><h2 id="四、小结"><a href="#四、小结" class="headerlink" title="四、小结"></a>四、小结</h2><blockquote><blockquote><p>预定义 <strong>DEV</strong> 常量，从而实现<br>仅在开发环境中打印警告信息，而生产环境中则不包含这些用于提升<br>开发体验的代码，从而实现线上代码体积的可控性。</p></blockquote></blockquote><blockquote><blockquote><p>Tree-Shaking 是一种排除 dead code 的机制，Tree-Shaking 本身基于 ESM，并且 JavaScript 是一门动态语言，通过纯静态<br>分析的手段进行 Tree-Shaking 难度较大，因此大部分工具能够识别<br>/<em>#<strong>PURE</strong></em>/ 注释，在编写框架代码时，我们可以利用<br>/<em>#<strong>PURE</strong></em>/ 来辅助构建工具进行 Tree-Shaking。</p></blockquote></blockquote>]]></content>
      
      
      
        <tags>
            
            <tag> vue3 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>122、《Vuejs设计与实现》- 霍春阳：运行时和编译时(一)</title>
      <link href="/2023/02/18/122-vue/"/>
      <url>/2023/02/18/122-vue/</url>
      
        <content type="html"><![CDATA[<p><code>《Vue.js 设计与实现》-- 霍春阳 </code>这本书并非是 vue.js 的源码解读，而是向开发人员由简入繁的介绍 vue.js 的各个功能模块。</p><span id="more"></span><p>视图层框架通常分为命令式和声明式。早年间流行的 jQuery 就是典型的命令式框架。命令式框架的一大特点就是关注过程。什么是声明式框架呢？与命令式框架更加关注过程不同，声明式框架更加关注结果。Vue.js 帮我们封装了过程，Vue.js 的内部实现一定是命令式的，而暴露给用户的却更加声明式。</p><p><code>《Vue.js 设计与实现》-- 霍春阳 </code>主要讨论一下内容：<br>1、框架设计的核心要素以及框架设计过程中要做出的权衡；<br>2、三种常见的虚拟 DOM 的 diff 算法<br>3、组件化的视线与 vue.js 内建组件的原理<br>4、服务端渲染、客户端渲染、同构渲染之间的差异，以及同构渲染的原理</p><h2 id="一、命令式框架和声明式框架的性能"><a href="#一、命令式框架和声明式框架的性能" class="headerlink" title="一、命令式框架和声明式框架的性能"></a>一、命令式框架和声明式框架的性能</h2><blockquote><p>结论：声明式框架的性能<code>不好于</code>命令式框架。</p></blockquote><p>如果我们把直接修改的性能消耗定义为 A，把找出差异的性能消<br>耗定义为 B，那么有：</p><blockquote><p>命令式代码的更新性能消耗 = A<br>声明式代码的更新性能消耗 = A + B</p></blockquote><p>声明式代码会比命令式代码多出找出差异的性能消耗，因此最理想的情况是，当找出差异的性能消耗为 0 时，声明式代码与命令式代码的性能相同，但是无法做到超越，毕竟框架本身就是 封装了命令式代码才实现了面向用户的声明式。</p><p>为什么 Vue.js 要选择声明式的设计方案呢？原因就在于声明式代码的可维护性更强。</p><p>在采用命令式代码开发的时候，我们需要维护实现目标的整个过程，包括要手动完成 DOM 元素<br>的创建、更新、删除等工作。而声明式代码展示的就是我们要的结 果，看上去更加直观，至于做事儿的过程，并不需要我们关心，Vue.js 都为我们封装好了。</p><h3 id="（一）命令式框架"><a href="#（一）命令式框架" class="headerlink" title="（一）命令式框架"></a>（一）命令式框架</h3><p>特点：关注过程<br>例如：<br>1、获取 ID 为 app 的 div 标签<br>2、它的文本内容为 hello world<br>3、为其绑定点击事件<br>4、点击弹出提示：OK</p><p>翻译为对应的 jQuery 代码和 js 代码</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs js">$(<span class="hljs-string">&quot;#app&quot;</span>)<br>  .text(<span class="hljs-string">&quot;hello world&quot;</span>)<br>  .on(<span class="hljs-string">&quot;click&quot;</span>, <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<br>    alert(<span class="hljs-string">&quot;OK&quot;</span>);<br>  &#125;);<br><span class="hljs-comment">// 原生js</span><br><span class="hljs-keyword">const</span> div = <span class="hljs-built_in">document</span>.querySelector(<span class="hljs-string">&quot;#app&quot;</span>);<br>div.innerText = <span class="hljs-string">&quot;hello world&quot;</span>;<br>div.addEventListener(<span class="hljs-string">&quot;click&quot;</span>, <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<br>  alert(<span class="hljs-string">&quot;OK&quot;</span>);<br>&#125;);<br></code></pre></td></tr></table></figure><h3 id="（二）声明式框架"><a href="#（二）声明式框架" class="headerlink" title="（二）声明式框架"></a>（二）声明式框架</h3><p>特点：关注结果<br>例如：<br>1、获取 ID 为 app 的 div 标签<br>2、为它绑定点击事件<br>3、点击弹出提示：OK<br>vue.js 代码</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js">&lt;div @click=<span class="hljs-string">&quot;()=&gt; alert(&#x27;ok&#x27;)&quot;</span>&gt;hello world&lt;/div&gt;<br></code></pre></td></tr></table></figure><blockquote><blockquote><p>由此可以看出，vue.js 的内部实现一定是命令式的，而暴露给用户的却是声明式的。</p></blockquote></blockquote><p>假设现在我们要将 div 标签的文本内容修改为 hello vue3，那么如何用命令式代码实现呢？</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js">div.textContent = <span class="hljs-string">&quot;hello vue3&quot;</span>;<br></code></pre></td></tr></table></figure><p>vue.js</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js">&lt;div @click=<span class="hljs-string">&quot;() =&gt; alert(&#x27;ok&#x27;)&quot;</span>&gt;hello vue3&lt;/div&gt;<br></code></pre></td></tr></table></figure><p>还有没有其他办法比上面这句代码的性能更好？答案是没有。命令式代码可以做到极致的性能优化，我们明确哪里做了变更，只做必要修改就行了。声明式代码不一定能做到这一点，它描述的是过程。</p><p>声明式代码与命令式代码的性能相同，但是无法做到超越，毕竟框架本身就是封装了命令式代码才实现了面向用户的声明式。为什么 Vue.js 要选择声明式的设计方案呢？原因就在于声明式代码的可维护性更强。</p><h2 id="二、虚拟-DOM-的性能"><a href="#二、虚拟-DOM-的性能" class="headerlink" title="二、虚拟 DOM 的性能"></a>二、虚拟 DOM 的性能</h2><p><code>声明式代码的更新性能消耗 = 找出差异的性能消耗 + 直接修改的性能耗</code><br>因此，如果我们能够最小化找出差异的性能消耗，就可以让声明式代码的性能无限接近命令式代码的性能。而所谓的虚拟 DOM，就是为了最小化找出差异这一步的性能消耗而出现的。</p><p>采用虚拟 dom 的更新技术性能<code>理论上</code>不可能比原生的 JS 操作 dom 更高。主要是在大部分情况下，我们很难写出绝对优化的命令式代码，尤其是在应用程序规模很大的时候，即使写出了极致优化的代码，也一定耗费了巨大的经理，投入产出比并不高。</p><p>虚拟 DOM 解决的问题：写声明式代码，还能保证应用程序的性能下限，甚至逼近命令式代码的性能。</p><h3 id="innerHTML-和虚拟-DOM"><a href="#innerHTML-和虚拟-DOM" class="headerlink" title="innerHTML 和虚拟 DOM"></a>innerHTML 和虚拟 DOM</h3><p>innerHTML 创建、更新页面的过程：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> str = <span class="hljs-string">`&lt;div&gt;&lt;span&gt;i am text&lt;/span&gt;&lt;/div&gt;`</span>;<br><span class="hljs-keyword">const</span> div = <span class="hljs-built_in">document</span>.createElement(<span class="hljs-string">&quot;div&quot;</span>);<br>div.innerHTML = str;<br></code></pre></td></tr></table></figure><p>为了渲染出页面，首先要把字符串解析成 DOM 树，这是一个 DOM 层面的计算，<code>涉及DOM的运算要远比js层面的计算性能差</code>(不在一个数量级)。</p><blockquote><blockquote><p>innerHTML 创建页面的性能：HTML 字符串拼接的计算量 + innerHTML 的 DOM 计算量。</p></blockquote></blockquote><p>虚拟 DOM 创建页面<br>1、创建 js 对象，这个对象可以理解为真实 DOM 的描述<br>2、递归地遍历虚拟 DOM 树并创建真实的 DOM。</p><blockquote><blockquote><p>虚拟 DOM 创建页面的性能：js 对象创建的计算量 + 递归创建真实 DOM 的计算量。</p></blockquote></blockquote><p>二者在创建页面的性能上，二者差距不大，虚拟 DOM 相比 innerHTML 没有优势可言。</p><p>二者在更新页面的过程中会存在显著的差异，innerHTML 更新页面时，会直接重新构建 HTML 字符串，再重新设置 DOM 元素的 innerHTML 属性。可以理解为，哪怕我只修改了一个文字，也要重新设置 innerHTML 属性，而重现设置 innerHTML 就相当于销毁了所有旧的 DOM 元素，再全量创建新的 DOM 元素。</p><p>而对于虚拟 DOM 而言，需要重新创建 js 对象（虚拟 DOM 树），然后比较新旧虚拟 DOM，找到变化元素并更新它。</p><blockquote><blockquote><p>在更新页面时，虚拟 DOM 在 JavaScript 层面的运算要比创建页面时多出一个 Diff 的性能消耗，然而它毕竟也是 JavaScript 层面的运算，所以不会产生数量级的差异。再观察 DOM 层面的运算，可以发现虚拟 DOM 在更新页面时只会更新必要的元素，但 innerHTML 需要全量更新。这时虚拟 DOM 的优势就体现出来了。当更新页面时，影响虚拟 DOM 的性能因素与影响 innerHTML 的性能因素不同。对于虚拟 DOM 来说，无论页面多<br>大，都只会更新变化的内容，而对于 innerHTML 来说，页面越大，就意味着更新时的性能消耗越大。</p></blockquote></blockquote><h2 id="三、运行时和编译时"><a href="#三、运行时和编译时" class="headerlink" title="三、运行时和编译时"></a>三、运行时和编译时</h2><p>设计框架的三种选择：纯运行时、运行时 + 编译时、纯编译时框架。</p><h3 id="一、纯运行时框架"><a href="#一、纯运行时框架" class="headerlink" title="一、纯运行时框架"></a>一、纯运行时框架</h3><p>假如我们设计的框架，提供了一个 render 函数，为该函数提供一个树形结构的数据对象，render 函数会根据该对象递归地将数据渲染成 DOM 元素。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> obj = &#123;<br>  <span class="hljs-attr">tag</span>: <span class="hljs-string">&quot;div&quot;</span>,<br>  <span class="hljs-attr">children</span>: [<br>    &#123;<br>      <span class="hljs-attr">tag</span>: <span class="hljs-string">&quot;span&quot;</span>,<br>      <span class="hljs-attr">children</span>: <span class="hljs-string">&quot;hello world&quot;</span>,<br>    &#125;,<br>  ],<br>&#125;;<br></code></pre></td></tr></table></figure><p>每个对象都有两个属性：tag 代表标签名称，children 既可以<br>是一个数组（代表子节点），也可以直接是一段文本（代表文本子节<br>点）。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">render</span>(<span class="hljs-params">obj, root</span>) </span>&#123;<br>  <span class="hljs-keyword">const</span> el = <span class="hljs-built_in">document</span>.createElement(obj.tag);<br>  <span class="hljs-keyword">if</span> (<span class="hljs-keyword">typeof</span> obj.chidlren === <span class="hljs-string">&quot;string&quot;</span>) &#123;<br>    <span class="hljs-keyword">const</span> text = <span class="hljs-built_in">document</span>.createTextNode(obj.children);<br>    el.appendChild(text);<br>  &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (obj.children) &#123;<br>    <span class="hljs-comment">// 数组，递归调用render函数，使用el作为root参数</span><br>    obj.children.forEach(<span class="hljs-function">(<span class="hljs-params">child</span>) =&gt;</span> &#123;<br>      render(child, el);<br>    &#125;);<br>  &#125;<br>  <span class="hljs-comment">// 将元素添加到root</span><br>  root.appendChild(el);<br>&#125;<br><span class="hljs-comment">// 使用该render函数</span><br>render(obj, <span class="hljs-built_in">document</span>.body);<br></code></pre></td></tr></table></figure><p>手写树形结构的数据对象太麻烦了，能不能引入编译手段，把 HTML 标签编译成树形结构的数据对象，这样不就可以继续使用 render 函数了吗?</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> str = <span class="hljs-string">`&lt;div&gt;&lt;span&gt;hello world&lt;/span&gt;&lt;/div&gt;`</span>;<br><span class="hljs-comment">// 调用compiler编译得到树形数据结构的数据对象</span><br><span class="hljs-keyword">const</span> obj = compile(str);<br>render(obj, <span class="hljs-built_in">document</span>.body);<br></code></pre></td></tr></table></figure><p>这就是一个运行时编译的‘框架’，编译器可以将 HTML 字符串编译成数据对象，那么能不能直接编译成命令式代码，这样我们只需要一个 compiler 函数，不需要 render 函数，这其实就是纯编译时的框架。</p><p>这三种框架设计层面的对比，有哪些优缺点?</p><blockquote><blockquote><p>首先是纯运行时的框架。由于它没有编译的过程，因此我们没办<br>法分析用户提供的内容，但是如果加入编译步骤，可能就大不一样<br>了，我们可以分析用户提供的内容，看看哪些内容未来可能会改变，<br>哪些内容永远不会改变，这样我们就可以在编译的时候提取这些信<br>息，然后将其传递给 Render 函数，Render 函数得到这些信息之<br>后，就可以做进一步的优化了。然而，假如我们设计的框架是纯编译<br>时的，那么它也可以分析用户提供的内容。由于不需要任何运行时，<br>而是直接编译成可执行的 JavaScript 代码，因此性能可能会更好，但是<br>这种做法有损灵活性，即用户提供的内容必须编译后才能用。实际<br>上，在这三个方向上业内都有探索，其中 Svelte 就是纯编译时的框<br>架，但是它的真实性能可能达不到理论高度。Vue.js 3 仍然保持了运行<br>时 + 编译时的架构，在保持灵活性的基础上能够尽可能地去优化。</p></blockquote></blockquote><h2 id="四、小结"><a href="#四、小结" class="headerlink" title="四、小结"></a>四、小结</h2><blockquote><blockquote><p>命令式框架在理论上可以做到极致优化，但是用户要承受巨大的心智负担；而声明式框架能够有效减轻用户的心智负担，但是性能上有一定的牺牲。</p></blockquote></blockquote><blockquote><blockquote><p>虚拟 DOM 的意义就在于使找出差异的性能消耗最小化。用<br>原生 JavaScript 操作 DOM 的方法（如<br>document.createElement）、虚拟 DOM 和 innerHTML 三者操<br>作页面的性能，不可以简单地下定论，这与页面大小、变更部分的大 小都有关系，除此之外，与创建页面还是更新页面也有关系</p></blockquote></blockquote><blockquote><blockquote><p>vue.js 3 是编译时+运行时框架</p></blockquote></blockquote>]]></content>
      
      
      
        <tags>
            
            <tag> vue3 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>121、ProTable</title>
      <link href="/2023/02/08/121-proTable/"/>
      <url>/2023/02/08/121-proTable/</url>
      
        <content type="html"><![CDATA[<p>ProTable 是基于 Vue3.2 + Element-Plus 二次封装 el-table,首先我们在封装 ProTable 组件的时候，在不影响 el-table 原有的属性、事件、方法的前提下，然后在其基础上做二次封装。</p><span id="more"></span><blockquote><p><code>ProTable 组件目前使用属性透传进行重构，支持 el-table &amp;&amp; el-table-column 所有属性、事件、方法的调用。ProTable 组件上的绑定的所有属性和事件都会通过 v-bind=&quot;$attrs&quot; 透传到 el-table 上。ProTable 组件内部暴露了 el-table DOM，可通过 proTable.value.element.方法名 调用其方法。</code></p></blockquote><h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><p>把一个表格页面所有重复的功能 （表格多选、查询、重置、刷新、分页、数据操作二次确认、文件下载、文件上传） 都封装成 Hooks 函数钩子或组件，然后在 ProTable 组件中使用这些函数钩子或组件。在页面中使用的时，只需传给 ProTable 当前表格数据的请求 API、表格配置项 columns 就行了，数据传输都使用 作用域插槽 或 tsx 语法从 ProTable 传递给父组件就能在页面上获取到了。</p><h2 id="一、ProTable-功能"><a href="#一、ProTable-功能" class="headerlink" title="一、ProTable 功能"></a>一、ProTable 功能</h2><p>1、表格内容自适应屏幕宽高，溢出内容表格内部滚动（flex 布局）<br>2、表格搜索、重置、分页查询 Hooks 封装 （页面使用不会存在任何搜索、重置、分页查询逻辑）<br>3、表格数据操作 Hooks 封装 （单条数据删除、批量删除、重置密码、状态切换等操作）<br>4、表格数据多选 Hooks 封装 （支持现跨页勾选数据）<br>5、表格数据导入组件、导出 Hooks 封装<br>6、表格搜索区域使用 Grid 布局重构，支持自定义响应式配置<br>7、表格分页组件封装（Pagination）<br>8、表格数据刷新、列显隐、列排序、搜索区域显隐设置<br>9、表格数据打印功能（可勾选行数据、隐藏列打印）<br>10、表格配置支持多级 prop（示例 ==&gt; prop: user.detail.name）<br>11、单元格内容格式化、tag 标签显示（有字典 enum 会根据字典 enum 自动格式化）<br>12、支持多级表头、表头内容自定义渲染（支持作用域插槽、tsx 语法、h 函数）<br>13、支持单元格内容自定义渲染（支持作用域插槽、tsx 语法、h 函数）<br>14、配合 TreeFilter、SelectFilter 组件使用更佳</p><h2 id="二、ProTable-需求分析"><a href="#二、ProTable-需求分析" class="headerlink" title="二、ProTable 需求分析"></a>二、ProTable 需求分析</h2><p>ProTable 主要分为五个模块：</p><h3 id="1、表格搜索区"><a href="#1、表格搜索区" class="headerlink" title="1、表格搜索区"></a>1、表格搜索区</h3><blockquote><p>搜索区域的字段都是存在于表格当中的，并且每个页面的搜索、重置方法都是一样的逻辑，只是不同的查询参数而已。我们完全可以在传表格配置项 columns 时，直接指定某个 column 的 search 配置，就能把该项变为搜索项，然后使用 el 字段可以指定搜索框的类型，最后把表格的搜索方法都封装成 Hooks 钩子函数。页面上完全就不会存在任何搜索、重置逻辑了。</p></blockquote><p>通过 component :is 动态组件 &amp;&amp; v-bind 属性透传实现，将用户传递的参数全部透传到组件上，所以可以直接根据 element 官方文档在 props 中传递参数了。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;template&gt;<br>  &lt;component<br>    :is=&quot;column.search?.render ?? `el-$&#123;column.search?.el&#125;`&quot;<br>    v-bind=&quot;&#123; ...handleSearchProps, ...placeholder, searchParam, clearable &#125;&quot;<br>    v-model.trim=&quot;searchParam[column.search?.key ?? handleProp(column.prop!)]&quot;<br>    :data=&quot;column.search?.el === &#x27;tree-select&#x27; ? columnEnum : []&quot;<br>    :options=&quot;[&#x27;cascader&#x27;, &#x27;select-v2&#x27;].includes(column.search?.el!) ? columnEnum : []&quot;<br>  &gt;<br>    &lt;template #default=&quot;&#123; data &#125;&quot; v-if=&quot;column.search?.el === &#x27;cascader&#x27;&quot;&gt;<br>      &lt;span&gt;&#123;&#123; data[fieldNames.label] &#125;&#125;&lt;/span&gt;<br>    &lt;/template&gt;<br>    &lt;template v-if=&quot;column.search?.el === &#x27;select&#x27;&quot;&gt;<br>      &lt;component<br>        :is=&quot;`el-option`&quot;<br>        v-for=&quot;(col, index) in columnEnum&quot;<br>        :key=&quot;index&quot;<br>        :label=&quot;col[fieldNames.label]&quot;<br>        :value=&quot;col[fieldNames.value]&quot;<br>      &gt;&lt;/component&gt;<br>    &lt;/template&gt;<br>    &lt;slot v-else&gt;&lt;/slot&gt;<br>  &lt;/component&gt;<br>&lt;/template&gt;<br><br>&lt;script setup lang=&quot;ts&quot; name=&quot;SearchFormItem&quot;&gt;<br>import &#123; computed, inject, ref &#125; from &quot;vue&quot;;<br>import &#123; handleProp &#125; from &quot;@/utils&quot;;<br>import &#123; ColumnProps &#125; from &quot;@/components/ProTable/interface&quot;;<br><br>interface SearchFormItem &#123;<br>  column: ColumnProps;<br>  searchParam: &#123; [key: string]: any &#125;;<br>&#125;<br>const props = defineProps&lt;SearchFormItem&gt;();<br><br>// 判断 fieldNames 设置 label &amp;&amp; value &amp;&amp; children 的 key 值<br>const fieldNames = computed(() =&gt; &#123;<br>  return &#123;<br>    label: props.column.fieldNames?.label ?? &quot;label&quot;,<br>    value: props.column.fieldNames?.value ?? &quot;value&quot;,<br>    children: props.column.fieldNames?.children ?? &quot;children&quot;,<br>  &#125;;<br>&#125;);<br><br>// 接收 enumMap (el 为 select-v2 需单独处理 enumData)<br>const enumMap = inject(&quot;enumMap&quot;, ref(new Map()));<br>const columnEnum = computed(() =&gt; &#123;<br>  let enumData = enumMap.value.get(props.column.prop);<br>  if (!enumData) return [];<br>  if (props.column.search?.el === &quot;select-v2&quot; &amp;&amp; props.column.fieldNames) &#123;<br>    enumData = enumData.map((item: &#123; [key: string]: any &#125;) =&gt; &#123;<br>      return &#123;<br>        ...item,<br>        label: item[fieldNames.value.label],<br>        value: item[fieldNames.value.value],<br>      &#125;;<br>    &#125;);<br>  &#125;<br>  return enumData;<br>&#125;);<br><br>// 处理透传的 searchProps (el 为 tree-select、cascader 的时候需要给下默认 label &amp;&amp; value &amp;&amp; children)<br>const handleSearchProps = computed(() =&gt; &#123;<br>  const label = fieldNames.value.label;<br>  const value = fieldNames.value.value;<br>  const children = fieldNames.value.children;<br>  const searchEl = props.column.search?.el;<br>  let searchProps = props.column.search?.props ?? &#123;&#125;;<br>  if (searchEl === &quot;tree-select&quot;) &#123;<br>    searchProps = &#123;<br>      ...searchProps,<br>      props: &#123; ...searchProps.props, label, children &#125;,<br>      nodeKey: value,<br>    &#125;;<br>  &#125;<br>  if (searchEl === &quot;cascader&quot;) &#123;<br>    searchProps = &#123;<br>      ...searchProps,<br>      props: &#123; ...searchProps.props, label, value, children &#125;,<br>    &#125;;<br>  &#125;<br>  return searchProps;<br>&#125;);<br><br>// 处理默认 placeholder<br>const placeholder = computed(() =&gt; &#123;<br>  const search = props.column.search;<br>  if (<br>    [&quot;datetimerange&quot;, &quot;daterange&quot;, &quot;monthrange&quot;].includes(<br>      search?.props?.type<br>    ) ||<br>    search?.props?.isRange<br>  ) &#123;<br>    return &#123;<br>      rangeSeparator: &quot;至&quot;,<br>      startPlaceholder: &quot;开始时间&quot;,<br>      endPlaceholder: &quot;结束时间&quot;,<br>    &#125;;<br>  &#125;<br>  const placeholder =<br>    search?.props?.placeholder ??<br>    (search?.el?.includes(&quot;input&quot;) ? &quot;请输入&quot; : &quot;请选择&quot;);<br>  return &#123; placeholder &#125;;<br>&#125;);<br><br>// 是否有清除按钮 (当搜索项有默认值时，清除按钮不显示)<br>const clearable = computed(() =&gt; &#123;<br>  const search = props.column.search;<br>  return (<br>    search?.props?.clearable ??<br>    (search?.defaultValue == null || search?.defaultValue == undefined)<br>  );<br>&#125;);<br>&lt;/script&gt;<br></code></pre></td></tr></table></figure><p>表格搜索项可以使用 tsx 组件自定义渲染</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;script setup lang=&quot;tsx&quot;&gt;<br>const columns: ColumnProps[] = [<br>  &#123;<br>    prop: &quot;user.detail.age&quot;,<br>    label: &quot;年龄&quot;,<br>    search: &#123;<br>      // 自定义 search 组件<br>      render: (&#123; searchParam &#125;) =&gt; &#123;<br>        return (<br>          &lt;div class=&quot;flx-center&quot;&gt;<br>            &lt;el-input<br>              vModel_trim=&#123;searchParam.minAge&#125;<br>              placeholder=&quot;最小年龄&quot;<br>              style=&#123;&#123; width: &quot;50%&quot; &#125;&#125;<br>            /&gt;<br>            &lt;span class=&quot;mr10 ml10&quot;&gt;-&lt;/span&gt;<br>            &lt;el-input<br>              vModel_trim=&#123;searchParam.maxAge&#125;<br>              placeholder=&quot;最大年龄&quot;<br>              style=&#123;&#123; width: &quot;50%&quot; &#125;&#125;<br>            /&gt;<br>          &lt;/div&gt;<br>        );<br>      &#125;,<br>    &#125;,<br>  &#125;,<br>];<br>&lt;/script&gt;<br></code></pre></td></tr></table></figure><h3 id="2、表格数据操作按钮"><a href="#2、表格数据操作按钮" class="headerlink" title="2、表格数据操作按钮"></a>2、表格数据操作按钮</h3><blockquote><p>表格数据操作按钮基本上每个页面都会不一样，所以我们直接使用 作用域插槽 来完成每个页面的数据操作按钮区域，作用域插槽 可以将表格多选数据信息从 ProTable 的 Hooks 多选钩子函数中传到页面上使用。<br>scope 数据中包含：selectedList（当前选择的数据）、selectedListIds（当前选择的数据 id）、isSelected（当前是否选中的数据）</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;!-- ProTable 中 tableHeader 插槽 --&gt;<br>&lt;slot<br>  name=&quot;tableHeader&quot;<br>  :selectList=&quot;selectedList&quot;<br>  :selectedListIds=&quot;selectedListIds&quot;<br>  :isSelected=&quot;isSelected&quot;<br>&gt;&lt;/slot&gt;<br><br>&lt;!-- 页面使用 --&gt;<br>&lt;template #tableHeader=&quot;scope&quot;&gt;<br>  &lt;el-button type=&quot;primary&quot; :icon=&quot;CirclePlus&quot; @click=&quot;openDrawer(&#x27;新增&#x27;)&quot;<br>    &gt;新增用户&lt;/el-button<br>  &gt;<br>  &lt;el-button type=&quot;primary&quot; :icon=&quot;Upload&quot; plain @click=&quot;batchAdd&quot;<br>    &gt;批量添加用户&lt;/el-button<br>  &gt;<br>  &lt;el-button type=&quot;primary&quot; :icon=&quot;Download&quot; plain @click=&quot;downloadFile&quot;<br>    &gt;导出用户数据&lt;/el-button<br>  &gt;<br>  &lt;el-button<br>    type=&quot;danger&quot;<br>    :icon=&quot;Delete&quot;<br>    plain<br>    @click=&quot;batchDelete(scope.selectedListIds)&quot;<br>    :disabled=&quot;!scope.isSelected&quot;<br>    &gt;批量删除用户&lt;/el-button<br>  &gt;<br>&lt;/template&gt;<br></code></pre></td></tr></table></figure><h3 id="3、表格功能按钮"><a href="#3、表格功能按钮" class="headerlink" title="3、表格功能按钮"></a>3、表格功能按钮</h3><blockquote><p>表格功能按钮包括：表格数据刷新（一直会携带当前查询和分页条件）、表格数据打印、表格列设置（列显隐、列排序）、表格搜索区域显隐（方便展示更多的数据信息）。 可通过 toolButton 属性控制这块区域的显隐。<br>表格打印基于 PrintJs 实现，因 PrintJs 不支持多级表头打印，所以当页面存在多级表头时，只会打印最后一级表头。表格打印功能可根据显示的列和勾选的数据动态打印，默认打印当前显示的所有数据。</p></blockquote><h3 id="4、表格主体内容展示区域"><a href="#4、表格主体内容展示区域" class="headerlink" title="4、表格主体内容展示区域"></a>4、表格主体内容展示区域</h3><p>这里是最重要的数据展示区域，表头和单元格内容可以自定义渲染，表头支持 headerRender 方法（避免与 el-table-column 上的属性重名导致报错）、作用域插槽（column.prop + ‘Header’）两种方式自定义，单元格内容支持 render 方法和作用域插槽（column 上的 prop 属性）两种方式自定义。</p><p>作用域插槽：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;!-- 使用作用域插槽自定义单元格内容 username --&gt;<br>&lt;template #username=&quot;scope&quot;&gt;<br>  &#123;&#123; scope.row.username &#125;&#125;<br>&lt;/template&gt;<br><br>&lt;!-- 使用作用域插槽自定义表头内容 username --&gt;<br>&lt;template #usernameHeader=&quot;scope&quot;&gt;<br>  &lt;el-button<br>    type=&quot;primary&quot;<br>    @click=&quot;ElMessage.success(&#x27;我是通过作用域插槽渲染的表头&#x27;)&quot;<br>  &gt;<br>    &#123;&#123; scope.column.label &#125;&#125;<br>  &lt;/el-button&gt;<br>&lt;/template&gt;<br></code></pre></td></tr></table></figure><p>tsx 语法：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;script setup lang=&quot;tsx&quot;&gt;<br>const columns: ColumnProps[] = [<br> &#123;<br>    prop: &quot;username&quot;,<br>    label: &quot;用户姓名&quot;,<br>    // 使用 headerRender 自定义表头<br>    headerRender: scope =&gt; &#123;<br>      return (<br>        &lt;el-button<br>          type=&quot;primary&quot;<br>          onClick=&#123;() =&gt; &#123;<br>            ElMessage.success(&quot;我是通过 tsx 语法渲染的表头&quot;);<br>          &#125;&#125;<br>        &gt;<br>          &#123;scope.column.label&#125;<br>        &lt;/el-button&gt;<br>      );<br>    &#125;<br>  &#125;,<br>  &#123;<br>    prop: &quot;status&quot;,<br>    label: &quot;用户状态&quot;,<br>    // 使用 render 自定义表格内容<br>    render: scope =&gt; &#123;<br>      return (<br>          &lt;el-switch<br>            model-value=&#123;scope.row.status&#125;<br>            active-text=&#123;scope.row.status ? &quot;启用&quot; : &quot;禁用&quot;&#125;<br>            active-value=&#123;1&#125;<br>            inactive-value=&#123;0&#125;<br>            onClick=&#123;() =&gt; changeStatus(scope.row)&#125;<br>          /&gt;<br>        )<br>      );<br>    &#125;<br>  &#125;,<br>];<br>&lt;/script&gt;<br></code></pre></td></tr></table></figure><blockquote><p>如果你想使用 el-table 的任何属性、事件，目前通过属性透传都能支持。</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;template&gt;<br>  &lt;el-table ref=&quot;tableRef&quot; v-bind=&quot;$attrs&quot;&gt; &lt;/el-table&gt;<br>&lt;/template&gt;<br><br>&lt;script setup lang=&quot;ts&quot; name=&quot;ProTable&quot;&gt;<br>import &#123; ref &#125; from &quot;vue&quot;;<br>import &#123; ElTable &#125; from &quot;element-plus&quot;;<br><br>const tableRef = ref&lt;InstanceType&lt;typeof ElTable&gt;&gt;();<br><br>defineExpose(&#123; element: tableRef &#125;);<br>&lt;/script&gt;<br></code></pre></td></tr></table></figure><h3 id="5、表格分页"><a href="#5、表格分页" class="headerlink" title="5、表格分页"></a>5、表格分页</h3><p>表格分页的封装可以使 ProTable 页面不存在分页逻辑。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;template&gt;<br>  &lt;!-- 分页组件 --&gt;<br>  &lt;el-pagination<br>    :background=&quot;true&quot;<br>    :current-page=&quot;pageable.pageNum&quot;<br>    :page-size=&quot;pageable.pageSize&quot;<br>    :page-sizes=&quot;[10, 25, 50, 100]&quot;<br>    :total=&quot;pageable.total&quot;<br>    layout=&quot;total, sizes, prev, pager, next, jumper&quot;<br>    @size-change=&quot;handleSizeChange&quot;<br>    @current-change=&quot;handleCurrentChange&quot;<br>  &gt;&lt;/el-pagination&gt;<br>&lt;/template&gt;<br><br>&lt;script setup lang=&quot;ts&quot; name=&quot;Pagination&quot;&gt;<br>interface Pageable &#123;<br>  pageNum: number;<br>  pageSize: number;<br>  total: number;<br>&#125;<br><br>interface PaginationProps &#123;<br>  pageable: Pageable;<br>  handleSizeChange: (size: number) =&gt; void;<br>  handleCurrentChange: (currentPage: number) =&gt; void;<br>&#125;<br><br>defineProps&lt;PaginationProps&gt;();<br>&lt;/script&gt;<br></code></pre></td></tr></table></figure><h2 id="三、Hooks-函数"><a href="#三、Hooks-函数" class="headerlink" title="三、Hooks 函数"></a>三、Hooks 函数</h2><h3 id="1、useTable"><a href="#1、useTable" class="headerlink" title="1、useTable"></a>1、useTable</h3><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br></pre></td><td class="code"><pre><code class="hljs ts"><span class="hljs-keyword">import</span> &#123; Table &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;./interface&quot;</span>;<br><span class="hljs-keyword">import</span> &#123; reactive, computed, toRefs &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;vue&quot;</span>;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@description </span>table 页面操作方法封装</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param <span class="hljs-type">&#123;Function&#125;</span> </span>api 获取表格数据 api 方法 (必传)</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param <span class="hljs-type">&#123;Object&#125;</span> </span>initParam 获取数据初始化参数 (非必传，默认为&#123;&#125;)</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param <span class="hljs-type">&#123;Boolean&#125;</span> </span>isPageable 是否有分页 (非必传，默认为true)</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param <span class="hljs-type">&#123;Function&#125;</span> </span>dataCallBack 对后台返回的数据进行处理的方法 (非必传)</span><br><span class="hljs-comment"> * */</span><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">const</span> useTable = <span class="hljs-function">(<span class="hljs-params"></span></span><br><span class="hljs-params"><span class="hljs-function">  api?: (params: <span class="hljs-built_in">any</span>) =&gt; <span class="hljs-built_in">Promise</span>&lt;<span class="hljs-built_in">any</span>&gt;,</span></span><br><span class="hljs-params"><span class="hljs-function">  initParam: <span class="hljs-built_in">object</span> = &#123;&#125;,</span></span><br><span class="hljs-params"><span class="hljs-function">  isPageable: <span class="hljs-built_in">boolean</span> = <span class="hljs-literal">true</span>,</span></span><br><span class="hljs-params"><span class="hljs-function">  dataCallBack?: (data: <span class="hljs-built_in">any</span>) =&gt; <span class="hljs-built_in">any</span>,</span></span><br><span class="hljs-params"><span class="hljs-function">  requestError?: (error: <span class="hljs-built_in">any</span>) =&gt; <span class="hljs-built_in">void</span></span></span><br><span class="hljs-params"><span class="hljs-function"></span>) =&gt;</span> &#123;<br>  <span class="hljs-keyword">const</span> state = reactive&lt;Table.TableStateProps&gt;(&#123;<br>    <span class="hljs-comment">// 表格数据</span><br>    <span class="hljs-attr">tableData</span>: [],<br>    <span class="hljs-comment">// 分页数据</span><br>    <span class="hljs-attr">pageable</span>: &#123;<br>      <span class="hljs-comment">// 当前页数</span><br>      <span class="hljs-attr">pageNum</span>: <span class="hljs-number">1</span>,<br>      <span class="hljs-comment">// 每页显示条数</span><br>      <span class="hljs-attr">pageSize</span>: <span class="hljs-number">10</span>,<br>      <span class="hljs-comment">// 总条数</span><br>      <span class="hljs-attr">total</span>: <span class="hljs-number">0</span>,<br>    &#125;,<br>    <span class="hljs-comment">// 查询参数(只包括查询)</span><br>    <span class="hljs-attr">searchParam</span>: &#123;&#125;,<br>    <span class="hljs-comment">// 初始化默认的查询参数</span><br>    <span class="hljs-attr">searchInitParam</span>: &#123;&#125;,<br>    <span class="hljs-comment">// 总参数(包含分页和查询参数)</span><br>    <span class="hljs-attr">totalParam</span>: &#123;&#125;,<br>  &#125;);<br><br>  <span class="hljs-comment">/**</span><br><span class="hljs-comment">   * <span class="hljs-doctag">@description </span>分页查询参数(只包括分页和表格字段排序,其他排序方式可自行配置)</span><br><span class="hljs-comment">   * */</span><br>  <span class="hljs-keyword">const</span> pageParam = computed(&#123;<br>    <span class="hljs-attr">get</span>: <span class="hljs-function">() =&gt;</span> &#123;<br>      <span class="hljs-keyword">return</span> &#123;<br>        <span class="hljs-attr">pageNum</span>: state.pageable.pageNum,<br>        <span class="hljs-attr">pageSize</span>: state.pageable.pageSize,<br>      &#125;;<br>    &#125;,<br>    <span class="hljs-attr">set</span>: <span class="hljs-function">(<span class="hljs-params">newVal: <span class="hljs-built_in">any</span></span>) =&gt;</span> &#123;<br>      <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;我是分页更新之后的值&quot;</span>, newVal);<br>    &#125;,<br>  &#125;);<br><br>  <span class="hljs-comment">/**</span><br><span class="hljs-comment">   * <span class="hljs-doctag">@description </span>获取表格数据</span><br><span class="hljs-comment">   * <span class="hljs-doctag">@return <span class="hljs-variable">void</span></span></span><br><span class="hljs-comment">   * */</span><br>  <span class="hljs-keyword">const</span> getTableList = <span class="hljs-keyword">async</span> () =&gt; &#123;<br>    <span class="hljs-keyword">if</span> (!api) <span class="hljs-keyword">return</span>;<br>    <span class="hljs-keyword">try</span> &#123;<br>      <span class="hljs-comment">// 先把初始化参数和分页参数放到总参数里面</span><br>      <span class="hljs-built_in">Object</span>.assign(<br>        state.totalParam,<br>        initParam,<br>        isPageable ? pageParam.value : &#123;&#125;<br>      );<br>      <span class="hljs-keyword">let</span> &#123; data &#125; = <span class="hljs-keyword">await</span> api(&#123;<br>        ...state.searchInitParam,<br>        ...state.totalParam,<br>      &#125;);<br>      dataCallBack &amp;&amp; (data = dataCallBack(data));<br>      state.tableData = isPageable ? data.list : data;<br>      <span class="hljs-comment">// 解构后台返回的分页数据 (如果有分页更新分页信息)</span><br>      <span class="hljs-keyword">const</span> &#123; pageNum, pageSize, total &#125; = data;<br>      isPageable &amp;&amp; updatePageable(&#123; pageNum, pageSize, total &#125;);<br>    &#125; <span class="hljs-keyword">catch</span> (error) &#123;<br>      requestError &amp;&amp; requestError(error);<br>    &#125;<br>  &#125;;<br><br>  <span class="hljs-comment">/**</span><br><span class="hljs-comment">   * <span class="hljs-doctag">@description </span>更新查询参数</span><br><span class="hljs-comment">   * <span class="hljs-doctag">@return <span class="hljs-variable">void</span></span></span><br><span class="hljs-comment">   * */</span><br>  <span class="hljs-keyword">const</span> updatedTotalParam = <span class="hljs-function">() =&gt;</span> &#123;<br>    state.totalParam = &#123;&#125;;<br>    <span class="hljs-comment">// 处理查询参数，可以给查询参数加自定义前缀操作</span><br>    <span class="hljs-keyword">let</span> nowSearchParam: &#123; [key: <span class="hljs-built_in">string</span>]: <span class="hljs-built_in">any</span> &#125; = &#123;&#125;;<br>    <span class="hljs-comment">// 防止手动清空输入框携带参数（这里可以自定义查询参数前缀）</span><br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> key <span class="hljs-keyword">in</span> state.searchParam) &#123;<br>      <span class="hljs-comment">// * 某些情况下参数为 false/0 也应该携带参数</span><br>      <span class="hljs-keyword">if</span> (<br>        state.searchParam[key] ||<br>        state.searchParam[key] === <span class="hljs-literal">false</span> ||<br>        state.searchParam[key] === <span class="hljs-number">0</span><br>      ) &#123;<br>        nowSearchParam[key] = state.searchParam[key];<br>      &#125;<br>    &#125;<br>    <span class="hljs-built_in">Object</span>.assign(<br>      state.totalParam,<br>      nowSearchParam,<br>      isPageable ? pageParam.value : &#123;&#125;<br>    );<br>  &#125;;<br><br>  <span class="hljs-comment">/**</span><br><span class="hljs-comment">   * <span class="hljs-doctag">@description </span>更新分页信息</span><br><span class="hljs-comment">   * <span class="hljs-doctag">@param <span class="hljs-type">&#123;Object&#125;</span> </span>resPageable 后台返回的分页数据</span><br><span class="hljs-comment">   * <span class="hljs-doctag">@return <span class="hljs-variable">void</span></span></span><br><span class="hljs-comment">   * */</span><br>  <span class="hljs-keyword">const</span> updatePageable = <span class="hljs-function">(<span class="hljs-params">resPageable: Table.Pageable</span>) =&gt;</span> &#123;<br>    <span class="hljs-built_in">Object</span>.assign(state.pageable, resPageable);<br>  &#125;;<br><br>  <span class="hljs-comment">/**</span><br><span class="hljs-comment">   * <span class="hljs-doctag">@description </span>表格数据查询</span><br><span class="hljs-comment">   * <span class="hljs-doctag">@return <span class="hljs-variable">void</span></span></span><br><span class="hljs-comment">   * */</span><br>  <span class="hljs-keyword">const</span> search = <span class="hljs-function">() =&gt;</span> &#123;<br>    state.pageable.pageNum = <span class="hljs-number">1</span>;<br>    updatedTotalParam();<br>    getTableList();<br>  &#125;;<br><br>  <span class="hljs-comment">/**</span><br><span class="hljs-comment">   * <span class="hljs-doctag">@description </span>表格数据重置</span><br><span class="hljs-comment">   * <span class="hljs-doctag">@return <span class="hljs-variable">void</span></span></span><br><span class="hljs-comment">   * */</span><br>  <span class="hljs-keyword">const</span> reset = <span class="hljs-function">() =&gt;</span> &#123;<br>    state.pageable.pageNum = <span class="hljs-number">1</span>;<br>    state.searchParam = &#123;&#125;;<br>    <span class="hljs-comment">// 重置搜索表单的时，如果有默认搜索参数，则重置默认的搜索参数</span><br>    <span class="hljs-built_in">Object</span>.keys(state.searchInitParam).forEach(<span class="hljs-function">(<span class="hljs-params">key</span>) =&gt;</span> &#123;<br>      state.searchParam[key] = state.searchInitParam[key];<br>    &#125;);<br>    updatedTotalParam();<br>    getTableList();<br>  &#125;;<br><br>  <span class="hljs-comment">/**</span><br><span class="hljs-comment">   * <span class="hljs-doctag">@description </span>每页条数改变</span><br><span class="hljs-comment">   * <span class="hljs-doctag">@param <span class="hljs-type">&#123;Number&#125;</span> </span>val 当前条数</span><br><span class="hljs-comment">   * <span class="hljs-doctag">@return <span class="hljs-variable">void</span></span></span><br><span class="hljs-comment">   * */</span><br>  <span class="hljs-keyword">const</span> handleSizeChange = <span class="hljs-function">(<span class="hljs-params">val: <span class="hljs-built_in">number</span></span>) =&gt;</span> &#123;<br>    state.pageable.pageNum = <span class="hljs-number">1</span>;<br>    state.pageable.pageSize = val;<br>    getTableList();<br>  &#125;;<br><br>  <span class="hljs-comment">/**</span><br><span class="hljs-comment">   * <span class="hljs-doctag">@description </span>当前页改变</span><br><span class="hljs-comment">   * <span class="hljs-doctag">@param <span class="hljs-type">&#123;Number&#125;</span> </span>val 当前页</span><br><span class="hljs-comment">   * <span class="hljs-doctag">@return <span class="hljs-variable">void</span></span></span><br><span class="hljs-comment">   * */</span><br>  <span class="hljs-keyword">const</span> handleCurrentChange = <span class="hljs-function">(<span class="hljs-params">val: <span class="hljs-built_in">number</span></span>) =&gt;</span> &#123;<br>    state.pageable.pageNum = val;<br>    getTableList();<br>  &#125;;<br><br>  <span class="hljs-keyword">return</span> &#123;<br>    ...toRefs(state),<br>    getTableList,<br>    search,<br>    reset,<br>    handleSizeChange,<br>    handleCurrentChange,<br>    updatedTotalParam,<br>  &#125;;<br>&#125;;<br></code></pre></td></tr></table></figure><h3 id="2、useSelection"><a href="#2、useSelection" class="headerlink" title="2、useSelection"></a>2、useSelection</h3><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs ts"><span class="hljs-keyword">import</span> &#123; ref, computed &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;vue&quot;</span>;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@description </span>表格多选数据操作</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param <span class="hljs-type">&#123;String&#125;</span> </span>rowKey 当表格可以多选时，所指定的 id</span><br><span class="hljs-comment"> * */</span><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">const</span> useSelection = <span class="hljs-function">(<span class="hljs-params">rowKey: <span class="hljs-built_in">string</span> = <span class="hljs-string">&quot;id&quot;</span></span>) =&gt;</span> &#123;<br>  <span class="hljs-keyword">const</span> isSelected = ref&lt;<span class="hljs-built_in">boolean</span>&gt;(<span class="hljs-literal">false</span>);<br>  <span class="hljs-keyword">const</span> selectedList = ref&lt;&#123; [key: <span class="hljs-built_in">string</span>]: <span class="hljs-built_in">any</span> &#125;[]&gt;([]);<br><br>  <span class="hljs-comment">// 当前选中的所有 ids 数组</span><br>  <span class="hljs-keyword">const</span> selectedListIds = computed((): <span class="hljs-built_in">string</span>[] =&gt; &#123;<br>    <span class="hljs-keyword">let</span> ids: <span class="hljs-built_in">string</span>[] = [];<br>    selectedList.value.forEach(<span class="hljs-function">(<span class="hljs-params">item</span>) =&gt;</span> ids.push(item[rowKey]));<br>    <span class="hljs-keyword">return</span> ids;<br>  &#125;);<br><br>  <span class="hljs-comment">/**</span><br><span class="hljs-comment">   * <span class="hljs-doctag">@description </span>多选操作</span><br><span class="hljs-comment">   * <span class="hljs-doctag">@param <span class="hljs-type">&#123;Array&#125;</span> </span>rowArr 当前选择的所有数据</span><br><span class="hljs-comment">   * <span class="hljs-doctag">@return <span class="hljs-variable">void</span></span></span><br><span class="hljs-comment">   */</span><br>  <span class="hljs-keyword">const</span> selectionChange = <span class="hljs-function">(<span class="hljs-params">rowArr: &#123; [key: <span class="hljs-built_in">string</span>]: <span class="hljs-built_in">any</span> &#125;[]</span>) =&gt;</span> &#123;<br>    rowArr.length ? (isSelected.value = <span class="hljs-literal">true</span>) : (isSelected.value = <span class="hljs-literal">false</span>);<br>    selectedList.value = rowArr;<br>  &#125;;<br><br>  <span class="hljs-keyword">return</span> &#123;<br>    isSelected,<br>    selectedList,<br>    selectedListIds,<br>    selectionChange,<br>  &#125;;<br>&#125;;<br></code></pre></td></tr></table></figure><h3 id="3、useDownload"><a href="#3、useDownload" class="headerlink" title="3、useDownload"></a>3、useDownload</h3><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><code class="hljs ts"><span class="hljs-keyword">import</span> &#123; ElNotification &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;element-plus&quot;</span>;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@description </span>接收数据流生成 blob，创建链接，下载文件</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param <span class="hljs-type">&#123;Function&#125;</span> </span>api 导出表格的api方法 (必传)</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param <span class="hljs-type">&#123;String&#125;</span> </span>tempName 导出的文件名 (必传)</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param <span class="hljs-type">&#123;Object&#125;</span> </span>params 导出的参数 (默认&#123;&#125;)</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param <span class="hljs-type">&#123;Boolean&#125;</span> </span>isNotify 是否有导出消息提示 (默认为 true)</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param <span class="hljs-type">&#123;String&#125;</span> </span>fileType 导出的文件格式 (默认为.xlsx)</span><br><span class="hljs-comment"> * */</span><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">const</span> useDownload = <span class="hljs-keyword">async</span> (<br>  api: <span class="hljs-function">(<span class="hljs-params">param: <span class="hljs-built_in">any</span></span>) =&gt;</span> <span class="hljs-built_in">Promise</span>&lt;<span class="hljs-built_in">any</span>&gt;,<br>  tempName: <span class="hljs-built_in">string</span>,<br>  <span class="hljs-attr">params</span>: <span class="hljs-built_in">any</span> = &#123;&#125;,<br>  <span class="hljs-attr">isNotify</span>: <span class="hljs-built_in">boolean</span> = <span class="hljs-literal">true</span>,<br>  <span class="hljs-attr">fileType</span>: <span class="hljs-built_in">string</span> = <span class="hljs-string">&quot;.xlsx&quot;</span><br>) =&gt; &#123;<br>  <span class="hljs-keyword">if</span> (isNotify) &#123;<br>    ElNotification(&#123;<br>      <span class="hljs-attr">title</span>: <span class="hljs-string">&quot;温馨提示&quot;</span>,<br>      <span class="hljs-attr">message</span>: <span class="hljs-string">&quot;如果数据庞大会导致下载缓慢哦，请您耐心等待！&quot;</span>,<br>      <span class="hljs-attr">type</span>: <span class="hljs-string">&quot;info&quot;</span>,<br>      <span class="hljs-attr">duration</span>: <span class="hljs-number">3000</span>,<br>    &#125;);<br>  &#125;<br>  <span class="hljs-keyword">try</span> &#123;<br>    <span class="hljs-keyword">const</span> res = <span class="hljs-keyword">await</span> api(params);<br>    <span class="hljs-keyword">const</span> blob = <span class="hljs-keyword">new</span> Blob([res]);<br>    <span class="hljs-comment">// 兼容 edge 不支持 createObjectURL 方法</span><br>    <span class="hljs-keyword">if</span> (<span class="hljs-string">&quot;msSaveOrOpenBlob&quot;</span> <span class="hljs-keyword">in</span> navigator)<br>      <span class="hljs-keyword">return</span> <span class="hljs-built_in">window</span>.navigator.msSaveOrOpenBlob(blob, tempName + fileType);<br>    <span class="hljs-keyword">const</span> blobUrl = <span class="hljs-built_in">window</span>.URL.createObjectURL(blob);<br>    <span class="hljs-keyword">const</span> exportFile = <span class="hljs-built_in">document</span>.createElement(<span class="hljs-string">&quot;a&quot;</span>);<br>    exportFile.style.display = <span class="hljs-string">&quot;none&quot;</span>;<br>    exportFile.download = <span class="hljs-string">`<span class="hljs-subst">$&#123;tempName&#125;</span><span class="hljs-subst">$&#123;fileType&#125;</span>`</span>;<br>    exportFile.href = blobUrl;<br>    <span class="hljs-built_in">document</span>.body.appendChild(exportFile);<br>    exportFile.click();<br>    <span class="hljs-comment">// 去除下载对 url 的影响</span><br>    <span class="hljs-built_in">document</span>.body.removeChild(exportFile);<br>    <span class="hljs-built_in">window</span>.URL.revokeObjectURL(blobUrl);<br>  &#125; <span class="hljs-keyword">catch</span> (error) &#123;<br>    <span class="hljs-built_in">console</span>.log(error);<br>  &#125;<br>&#125;;<br></code></pre></td></tr></table></figure><h3 id="4、useHandledata"><a href="#4、useHandledata" class="headerlink" title="4、useHandledata"></a>4、useHandledata</h3><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs ts"><span class="hljs-keyword">import</span> &#123; ElMessageBox, ElMessage &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;element-plus&quot;</span>;<br><span class="hljs-keyword">import</span> &#123; HandleData &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;./interface&quot;</span>;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@description </span>操作单条数据信息 (二次确认【删除、禁用、启用、重置密码】)</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param <span class="hljs-type">&#123;Function&#125;</span> </span>api 操作数据接口的api方法 (必传)</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param <span class="hljs-type">&#123;Object&#125;</span> </span>params 携带的操作数据参数 &#123;id,params&#125; (必传)</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param <span class="hljs-type">&#123;String&#125;</span> </span>message 提示信息 (必传)</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param <span class="hljs-type">&#123;String&#125;</span> </span>confirmType icon类型 (不必传,默认为 warning)</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@returns <span class="hljs-type">&#123;Promise&#125;</span></span></span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">const</span> useHandleData = <span class="hljs-function">(<span class="hljs-params"></span></span><br><span class="hljs-params"><span class="hljs-function">  api: (params: <span class="hljs-built_in">any</span>) =&gt; <span class="hljs-built_in">Promise</span>&lt;<span class="hljs-built_in">any</span>&gt;,</span></span><br><span class="hljs-params"><span class="hljs-function">  params: <span class="hljs-built_in">any</span> = &#123;&#125;,</span></span><br><span class="hljs-params"><span class="hljs-function">  message: <span class="hljs-built_in">string</span>,</span></span><br><span class="hljs-params"><span class="hljs-function">  confirmType: HandleData.MessageType = <span class="hljs-string">&quot;warning&quot;</span></span></span><br><span class="hljs-params"><span class="hljs-function"></span>) =&gt;</span> &#123;<br>  <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-built_in">Promise</span>(<span class="hljs-function">(<span class="hljs-params">resolve, reject</span>) =&gt;</span> &#123;<br>    ElMessageBox.confirm(<span class="hljs-string">`是否<span class="hljs-subst">$&#123;message&#125;</span>?`</span>, <span class="hljs-string">&quot;温馨提示&quot;</span>, &#123;<br>      <span class="hljs-attr">confirmButtonText</span>: <span class="hljs-string">&quot;确定&quot;</span>,<br>      <span class="hljs-attr">cancelButtonText</span>: <span class="hljs-string">&quot;取消&quot;</span>,<br>      <span class="hljs-attr">type</span>: confirmType,<br>      <span class="hljs-attr">draggable</span>: <span class="hljs-literal">true</span>,<br>    &#125;).then(<span class="hljs-keyword">async</span> () =&gt; &#123;<br>      <span class="hljs-keyword">const</span> res = <span class="hljs-keyword">await</span> api(params);<br>      <span class="hljs-keyword">if</span> (!res) <span class="hljs-keyword">return</span> reject(<span class="hljs-literal">false</span>);<br>      ElMessage(&#123;<br>        <span class="hljs-attr">type</span>: <span class="hljs-string">&quot;success&quot;</span>,<br>        <span class="hljs-attr">message</span>: <span class="hljs-string">`<span class="hljs-subst">$&#123;message&#125;</span>成功!`</span>,<br>      &#125;);<br>      resolve(<span class="hljs-literal">true</span>);<br>    &#125;);<br>  &#125;);<br>&#125;;<br></code></pre></td></tr></table></figure><h2 id="四、ProTable-组件部分代码"><a href="#四、ProTable-组件部分代码" class="headerlink" title="四、ProTable 组件部分代码"></a>四、ProTable 组件部分代码</h2><h3 id="ProTable-vue"><a href="#ProTable-vue" class="headerlink" title="ProTable.vue"></a>ProTable.vue</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;template&gt;<br>  &lt;!-- 查询表单 card --&gt;<br>  &lt;SearchForm<br>    :search=&quot;search&quot;<br>    :reset=&quot;reset&quot;<br>    :columns=&quot;searchColumns&quot;<br>    :search-param=&quot;searchParam&quot;<br>    :search-col=&quot;searchCol&quot;<br>    v-show=&quot;isShowSearch&quot;<br>  /&gt;<br><br>  &lt;!-- 表格内容 card --&gt;<br>  &lt;div class=&quot;card table-main&quot;&gt;<br>    &lt;!-- 表格头部 操作按钮 --&gt;<br>    &lt;div class=&quot;table-header&quot;&gt;<br>      &lt;div class=&quot;header-button-lf&quot;&gt;<br>        &lt;slot<br>          name=&quot;tableHeader&quot;<br>          :selectedListIds=&quot;selectedListIds&quot;<br>          :selectedList=&quot;selectedList&quot;<br>          :isSelected=&quot;isSelected&quot;<br>        /&gt;<br>      &lt;/div&gt;<br>      &lt;div class=&quot;header-button-ri&quot; v-if=&quot;toolButton&quot;&gt;<br>        &lt;slot name=&quot;toolButton&quot;&gt;<br>          &lt;el-button :icon=&quot;Refresh&quot; circle @click=&quot;getTableList&quot; /&gt;<br>          &lt;el-button<br>            :icon=&quot;Printer&quot;<br>            circle<br>            v-if=&quot;columns.length&quot;<br>            @click=&quot;print&quot;<br>          /&gt;<br>          &lt;el-button<br>            :icon=&quot;Operation&quot;<br>            circle<br>            v-if=&quot;columns.length&quot;<br>            @click=&quot;openColSetting&quot;<br>          /&gt;<br>          &lt;el-button<br>            :icon=&quot;Search&quot;<br>            circle<br>            v-if=&quot;searchColumns.length&quot;<br>            @click=&quot;isShowSearch = !isShowSearch&quot;<br>          /&gt;<br>        &lt;/slot&gt;<br>      &lt;/div&gt;<br>    &lt;/div&gt;<br>    &lt;!-- 表格主体 --&gt;<br>    &lt;el-table<br>      ref=&quot;tableRef&quot;<br>      v-bind=&quot;$attrs&quot;<br>      :data=&quot;data ?? tableData&quot;<br>      :border=&quot;border&quot;<br>      :row-key=&quot;rowKey&quot;<br>      @selection-change=&quot;selectionChange&quot;<br>    &gt;<br>      &lt;!-- 默认插槽 --&gt;<br>      &lt;slot&gt;&lt;/slot&gt;<br>      &lt;template v-for=&quot;item in tableColumns&quot; :key=&quot;item&quot;&gt;<br>        &lt;!-- selection || index || expand --&gt;<br>        &lt;el-table-column<br>          v-bind=&quot;item&quot;<br>          :align=&quot;item.align ?? &#x27;center&#x27;&quot;<br>          :reserve-selection=&quot;item.type == &#x27;selection&#x27;&quot;<br>          v-if=&quot;<br>            item.type &amp;&amp; [&#x27;selection&#x27;, &#x27;index&#x27;, &#x27;expand&#x27;].includes(item.type)<br>          &quot;<br>        &gt;<br>          &lt;template #default=&quot;scope&quot; v-if=&quot;item.type == &#x27;expand&#x27;&quot;&gt;<br>            &lt;component :is=&quot;item.render&quot; v-bind=&quot;scope&quot; v-if=&quot;item.render&quot;&gt;<br>            &lt;/component&gt;<br>            &lt;slot :name=&quot;item.type&quot; v-bind=&quot;scope&quot; v-else&gt;&lt;/slot&gt;<br>          &lt;/template&gt;<br>        &lt;/el-table-column&gt;<br>        &lt;!-- other --&gt;<br>        &lt;TableColumn<br>          v-if=&quot;!item.type &amp;&amp; item.prop &amp;&amp; item.isShow&quot;<br>          :column=&quot;item&quot;<br>        &gt;<br>          &lt;template v-for=&quot;slot in Object.keys($slots)&quot; #[slot]=&quot;scope&quot;&gt;<br>            &lt;slot :name=&quot;slot&quot; v-bind=&quot;scope&quot;&gt;&lt;/slot&gt;<br>          &lt;/template&gt;<br>        &lt;/TableColumn&gt;<br>      &lt;/template&gt;<br>      &lt;!-- 插入表格最后一行之后的插槽 --&gt;<br>      &lt;template #append&gt;<br>        &lt;slot name=&quot;append&quot;&gt; &lt;/slot&gt;<br>      &lt;/template&gt;<br>      &lt;!-- 无数据 --&gt;<br>      &lt;template #empty&gt;<br>        &lt;div class=&quot;table-empty&quot;&gt;<br>          &lt;slot name=&quot;empty&quot;&gt;<br>            &lt;img src=&quot;@/assets/images/notData.png&quot; alt=&quot;notData&quot; /&gt;<br>            &lt;div&gt;暂无数据&lt;/div&gt;<br>          &lt;/slot&gt;<br>        &lt;/div&gt;<br>      &lt;/template&gt;<br>    &lt;/el-table&gt;<br>    &lt;!-- 分页组件 --&gt;<br>    &lt;slot name=&quot;pagination&quot;&gt;<br>      &lt;Pagination<br>        v-if=&quot;pagination&quot;<br>        :pageable=&quot;pageable&quot;<br>        :handle-size-change=&quot;handleSizeChange&quot;<br>        :handle-current-change=&quot;handleCurrentChange&quot;<br>      /&gt;<br>    &lt;/slot&gt;<br>  &lt;/div&gt;<br>  &lt;!-- 列设置 --&gt;<br>  &lt;ColSetting v-if=&quot;toolButton&quot; ref=&quot;colRef&quot; v-model:col-setting=&quot;colSetting&quot; /&gt;<br>&lt;/template&gt;<br><br>&lt;script setup lang=&quot;ts&quot; name=&quot;ProTable&quot;&gt;<br>import &#123; ref, watch, computed, provide, onMounted &#125; from &quot;vue&quot;;<br>import &#123; ElTable &#125; from &quot;element-plus&quot;;<br>import &#123; useTable &#125; from &quot;@/hooks/useTable&quot;;<br>import &#123; useSelection &#125; from &quot;@/hooks/useSelection&quot;;<br>import &#123; BreakPoint &#125; from &quot;@/components/Grid/interface&quot;;<br>import &#123; ColumnProps &#125; from &quot;@/components/ProTable/interface&quot;;<br>import &#123; Refresh, Printer, Operation, Search &#125; from &quot;@element-plus/icons-vue&quot;;<br>import &#123;<br>  filterEnum,<br>  formatValue,<br>  handleProp,<br>  handleRowAccordingToProp,<br>&#125; from &quot;@/utils&quot;;<br>import SearchForm from &quot;@/components/SearchForm/index.vue&quot;;<br>import Pagination from &quot;./components/Pagination.vue&quot;;<br>import ColSetting from &quot;./components/ColSetting.vue&quot;;<br>import TableColumn from &quot;./components/TableColumn.vue&quot;;<br>import printJS from &quot;print-js&quot;;<br><br>export interface ProTableProps &#123;<br>  columns: ColumnProps[]; // 列配置项  ==&gt; 必传<br>  data?: any[]; // 静态 table data 数据，若存在则不会使用 requestApi 返回的 data ==&gt; 非必传<br>  requestApi?: (params: any) =&gt; Promise&lt;any&gt;; // 请求表格数据的 api ==&gt; 非必传<br>  requestAuto?: boolean; // 是否自动执行请求 api ==&gt; 非必传（默认为true）<br>  requestError?: (params: any) =&gt; void; // 表格 api 请求错误监听 ==&gt; 非必传<br>  dataCallback?: (data: any) =&gt; any; // 返回数据的回调函数，可以对数据进行处理 ==&gt; 非必传<br>  title?: string; // 表格标题，目前只在打印的时候用到 ==&gt; 非必传<br>  pagination?: boolean; // 是否需要分页组件 ==&gt; 非必传（默认为true）<br>  initParam?: any; // 初始化请求参数 ==&gt; 非必传（默认为&#123;&#125;）<br>  border?: boolean; // 是否带有纵向边框 ==&gt; 非必传（默认为true）<br>  toolButton?: boolean; // 是否显示表格功能按钮 ==&gt; 非必传（默认为true）<br>  rowKey?: string; // 行数据的 Key，用来优化 Table 的渲染，当表格数据多选时，所指定的 id ==&gt; 非必传（默认为 id）<br>  searchCol?: number | Record&lt;BreakPoint, number&gt;; // 表格搜索项 每列占比配置 ==&gt; 非必传 &#123; xs: 1, sm: 2, md: 2, lg: 3, xl: 4 &#125;<br>&#125;<br><br>// 接受父组件参数，配置默认值<br>const props = withDefaults(defineProps&lt;ProTableProps&gt;(), &#123;<br>  columns: () =&gt; [],<br>  requestAuto: true,<br>  pagination: true,<br>  initParam: &#123;&#125;,<br>  border: true,<br>  toolButton: true,<br>  rowKey: &quot;id&quot;,<br>  searchCol: () =&gt; (&#123; xs: 1, sm: 2, md: 2, lg: 3, xl: 4 &#125;),<br>&#125;);<br><br>// 是否显示搜索模块<br>const isShowSearch = ref(true);<br><br>// 表格 DOM 元素<br>const tableRef = ref&lt;InstanceType&lt;typeof ElTable&gt;&gt;();<br><br>// 表格多选 Hooks<br>const &#123; selectionChange, selectedList, selectedListIds, isSelected &#125; =<br>  useSelection(props.rowKey);<br><br>// 表格操作 Hooks<br>const &#123;<br>  tableData,<br>  pageable,<br>  searchParam,<br>  searchInitParam,<br>  getTableList,<br>  search,<br>  reset,<br>  handleSizeChange,<br>  handleCurrentChange,<br>&#125; = useTable(<br>  props.requestApi,<br>  props.initParam,<br>  props.pagination,<br>  props.dataCallback,<br>  props.requestError<br>);<br><br>// 清空选中数据列表<br>const clearSelection = () =&gt; tableRef.value!.clearSelection();<br><br>// 初始化请求<br>onMounted(() =&gt; props.requestAuto &amp;&amp; getTableList());<br><br>// 监听页面 initParam 改化，重新获取表格数据<br>watch(() =&gt; props.initParam, getTableList, &#123; deep: true &#125;);<br><br>// 接收 columns 并设置为响应式<br>const tableColumns = ref&lt;ColumnProps[]&gt;(props.columns);<br><br>// 定义 enumMap 存储 enum 值（避免异步请求无法格式化单元格内容 || 无法填充搜索下拉选择）<br>const enumMap = ref(new Map&lt;string, &#123; [key: string]: any &#125;[]&gt;());<br>provide(&quot;enumMap&quot;, enumMap);<br>const setEnumMap = async (col: ColumnProps) =&gt; &#123;<br>  if (!col.enum) return;<br>  // 如果当前 enum 为后台数据需要请求数据，则调用该请求接口，并存储到 enumMap<br>  if (typeof col.enum !== &quot;function&quot;)<br>    return enumMap.value.set(col.prop!, col.enum!);<br>  const &#123; data &#125; = await col.enum();<br>  enumMap.value.set(col.prop!, data);<br>&#125;;<br><br>// 扁平化 columns<br>const flatColumnsFunc = (<br>  columns: ColumnProps[],<br>  flatArr: ColumnProps[] = []<br>) =&gt; &#123;<br>  columns.forEach(async (col) =&gt; &#123;<br>    if (col._children?.length) flatArr.push(...flatColumnsFunc(col._children));<br>    flatArr.push(col);<br><br>    // 给每一项 column 添加 isShow &amp;&amp; isFilterEnum 默认属性<br>    col.isShow = col.isShow ?? true;<br>    col.isFilterEnum = col.isFilterEnum ?? true;<br><br>    // 设置 enumMap<br>    setEnumMap(col);<br>  &#125;);<br>  return flatArr.filter((item) =&gt; !item._children?.length);<br>&#125;;<br><br>// flatColumns<br>const flatColumns = ref&lt;ColumnProps[]&gt;();<br>flatColumns.value = flatColumnsFunc(tableColumns.value);<br><br>// 过滤需要搜索的配置项<br>const searchColumns = flatColumns.value.filter(<br>  (item) =&gt; item.search?.el || item.search?.render<br>);<br><br>// 设置搜索表单排序默认值 &amp;&amp; 设置搜索表单项的默认值<br>searchColumns.forEach((column, index) =&gt; &#123;<br>  column.search!.order = column.search!.order ?? index + 2;<br>  if (<br>    column.search?.defaultValue !== undefined &amp;&amp;<br>    column.search?.defaultValue !== null<br>  ) &#123;<br>    searchInitParam.value[column.search.key ?? handleProp(column.prop!)] =<br>      column.search?.defaultValue;<br>    searchParam.value[column.search.key ?? handleProp(column.prop!)] =<br>      column.search?.defaultValue;<br>  &#125;<br>&#125;);<br><br>// 排序搜索表单项<br>searchColumns.sort((a, b) =&gt; a.search!.order! - b.search!.order!);<br><br>// 列设置 ==&gt; 过滤掉不需要设置的列<br>const colRef = ref();<br>const colSetting = tableColumns.value!.filter(<br>  (item) =&gt;<br>    ![&quot;selection&quot;, &quot;index&quot;, &quot;expand&quot;].includes(item.type!) &amp;&amp;<br>    item.prop !== &quot;operation&quot; &amp;&amp;<br>    item.isShow<br>);<br>const openColSetting = () =&gt; colRef.value.openColSetting();<br><br>// 🙅‍♀️ 不需要打印可以把以下方法删除，打印功能目前存在很多 bug<br>// 处理打印数据（把后台返回的值根据 enum 做转换）<br>const printData = computed(() =&gt; &#123;<br>  const handleData = props.data ?? tableData.value;<br>  const printDataList = JSON.parse(<br>    JSON.stringify(selectedList.value.length ? selectedList.value : handleData)<br>  );<br>  // 找出需要转换数据的列（有 enum || 多级 prop &amp;&amp; 需要根据 enum 格式化）<br>  const needTransformCol = flatColumns.value!.filter(<br>    (item) =&gt;<br>      (item.enum || (item.prop &amp;&amp; item.prop.split(&quot;.&quot;).length &gt; 1)) &amp;&amp;<br>      item.isFilterEnum<br>  );<br>  needTransformCol.forEach((colItem) =&gt; &#123;<br>    printDataList.forEach((tableItem: &#123; [key: string]: any &#125;) =&gt; &#123;<br>      tableItem[handleProp(colItem.prop!)] =<br>        colItem.prop!.split(&quot;.&quot;).length &gt; 1 &amp;&amp; !colItem.enum<br>          ? formatValue(handleRowAccordingToProp(tableItem, colItem.prop!))<br>          : filterEnum(<br>              handleRowAccordingToProp(tableItem, colItem.prop!),<br>              enumMap.value.get(colItem.prop!),<br>              colItem.fieldNames<br>            );<br>      for (const key in tableItem) &#123;<br>        if (tableItem[key] === null)<br>          tableItem[key] = formatValue(tableItem[key]);<br>      &#125;<br>    &#125;);<br>  &#125;);<br>  return printDataList;<br>&#125;);<br><br>// 打印表格数据（💥 多级表头数据打印时，只能扁平化成一维数组，printJs 不支持多级表头打印）<br>const print = () =&gt; &#123;<br>  const header = `&lt;div style=&quot;text-align: center&quot;&gt;&lt;h2&gt;$&#123;props.title&#125;&lt;/h2&gt;&lt;/div&gt;`;<br>  const gridHeaderStyle =<br>    &quot;border: 1px solid #ebeef5;height: 45px;color: #232425;text-align: center;background-color: #fafafa;&quot;;<br>  const gridStyle =<br>    &quot;border: 1px solid #ebeef5;height: 40px;color: #494b4e;text-align: center&quot;;<br>  printJS(&#123;<br>    printable: printData.value,<br>    header: props.title &amp;&amp; header,<br>    properties: flatColumns<br>      .value!.filter(<br>        (item) =&gt;<br>          ![&quot;selection&quot;, &quot;index&quot;, &quot;expand&quot;].includes(item.type!) &amp;&amp;<br>          item.isShow &amp;&amp;<br>          item.prop !== &quot;operation&quot;<br>      )<br>      .map((item: ColumnProps) =&gt; (&#123;<br>        field: handleProp(item.prop!),<br>        displayName: item.label,<br>      &#125;)),<br>    type: &quot;json&quot;,<br>    gridHeaderStyle,<br>    gridStyle,<br>  &#125;);<br>&#125;;<br><br>// 暴露给父组件的参数和方法(外部需要什么，都可以从这里暴露出去)<br>defineExpose(&#123;<br>  element: tableRef,<br>  tableData,<br>  pageable,<br>  searchParam,<br>  searchInitParam,<br>  getTableList,<br>  search,<br>  reset,<br>  handleSizeChange,<br>  handleCurrentChange,<br>  clearSelection,<br>  enumMap,<br>  isSelected,<br>  selectedList,<br>  selectedListIds,<br>&#125;);<br>&lt;/script&gt;<br></code></pre></td></tr></table></figure><h3 id="TableColumn-vue"><a href="#TableColumn-vue" class="headerlink" title="TableColumn.vue"></a>TableColumn.vue</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;template&gt;<br>  &lt;RenderTableColumn v-bind=&quot;column&quot; /&gt;<br>&lt;/template&gt;<br><br>&lt;script setup lang=&quot;tsx&quot; name=&quot;TableColumn&quot;&gt;<br>import &#123; inject, ref, useSlots &#125; from &quot;vue&quot;;<br>import &#123;<br>  ColumnProps,<br>  RenderScope,<br>  HeaderRenderScope,<br>&#125; from &quot;@/components/ProTable/interface&quot;;<br>import &#123;<br>  filterEnum,<br>  formatValue,<br>  handleProp,<br>  handleRowAccordingToProp,<br>&#125; from &quot;@/utils&quot;;<br><br>defineProps&lt;&#123; column: ColumnProps &#125;&gt;();<br><br>const slots = useSlots();<br><br>const enumMap = inject(&quot;enumMap&quot;, ref(new Map()));<br><br>// 渲染表格数据<br>const renderCellData = (item: ColumnProps, scope: RenderScope&lt;any&gt;) =&gt; &#123;<br>  return enumMap.value.get(item.prop) &amp;&amp; item.isFilterEnum<br>    ? filterEnum(<br>        handleRowAccordingToProp(scope.row, item.prop!),<br>        enumMap.value.get(item.prop)!,<br>        item.fieldNames<br>      )<br>    : formatValue(handleRowAccordingToProp(scope.row, item.prop!));<br>&#125;;<br><br>// 获取 tag 类型<br>const getTagType = (item: ColumnProps, scope: RenderScope&lt;any&gt;) =&gt; &#123;<br>  return filterEnum(<br>    handleRowAccordingToProp(scope.row, item.prop!),<br>    enumMap.value.get(item.prop),<br>    item.fieldNames,<br>    &quot;tag&quot;<br>  );<br>&#125;;<br><br>const RenderTableColumn = (item: ColumnProps) =&gt; &#123;<br>  return (<br>    &lt;&gt;<br>      &#123;item.isShow &amp;&amp; (<br>        &lt;el-table-column<br>          &#123;...item&#125;<br>          align=&#123;item.align ?? &quot;center&quot;&#125;<br>          showOverflowTooltip=&#123;<br>            item.showOverflowTooltip ?? item.prop !== &quot;operation&quot;<br>          &#125;<br>        &gt;<br>          &#123;&#123;<br>            default: (scope: RenderScope&lt;any&gt;) =&gt; &#123;<br>              if (item._children)<br>                return item._children.map((child) =&gt; RenderTableColumn(child));<br>              if (item.render) return item.render(scope);<br>              if (slots[handleProp(item.prop!)])<br>                return slots[handleProp(item.prop!)]!(scope);<br>              if (item.tag)<br>                return (<br>                  &lt;el-tag type=&#123;getTagType(item, scope)&#125;&gt;<br>                    &#123;renderCellData(item, scope)&#125;<br>                  &lt;/el-tag&gt;<br>                );<br>              return renderCellData(item, scope);<br>            &#125;,<br>            header: (scope: HeaderRenderScope&lt;any&gt;) =&gt; &#123;<br>              if (item.headerRender) return item.headerRender(scope);<br>              if (slots[`$&#123;handleProp(item.prop!)&#125;Header`])<br>                return slots[`$&#123;handleProp(item.prop!)&#125;Header`]!(scope);<br>              return item.label;<br>            &#125;,<br>          &#125;&#125;<br>        &lt;/el-table-column&gt;<br>      )&#125;<br>    &lt;/&gt;<br>  );<br>&#125;;<br>&lt;/script&gt;<br></code></pre></td></tr></table></figure><h3 id="使用-ProTable-组件"><a href="#使用-ProTable-组件" class="headerlink" title="使用 ProTable 组件"></a>使用 ProTable 组件</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br><span class="line">361</span><br><span class="line">362</span><br><span class="line">363</span><br><span class="line">364</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;template&gt;<br>  &lt;div class=&quot;table-box&quot;&gt;<br>    &lt;ProTable<br>      ref=&quot;proTable&quot;<br>      title=&quot;用户列表&quot;<br>      :columns=&quot;columns&quot;<br>      :request-api=&quot;getTableList&quot;<br>      :init-param=&quot;initParam&quot;<br>      :data-callback=&quot;dataCallback&quot;<br>    &gt;<br>      &lt;!-- 表格 header 按钮 --&gt;<br>      &lt;template #tableHeader=&quot;scope&quot;&gt;<br>        &lt;el-button<br>          type=&quot;primary&quot;<br>          :icon=&quot;CirclePlus&quot;<br>          @click=&quot;openDrawer(&#x27;新增&#x27;)&quot;<br>          v-auth=&quot;&#x27;add&#x27;&quot;<br>          &gt;新增用户&lt;/el-button<br>        &gt;<br>        &lt;el-button<br>          type=&quot;primary&quot;<br>          :icon=&quot;Upload&quot;<br>          plain<br>          @click=&quot;batchAdd&quot;<br>          v-auth=&quot;&#x27;batchAdd&#x27;&quot;<br>          &gt;批量添加用户&lt;/el-button<br>        &gt;<br>        &lt;el-button<br>          type=&quot;primary&quot;<br>          :icon=&quot;Download&quot;<br>          plain<br>          @click=&quot;downloadFile&quot;<br>          v-auth=&quot;&#x27;export&#x27;&quot;<br>          &gt;导出用户数据&lt;/el-button<br>        &gt;<br>        &lt;el-button type=&quot;primary&quot; plain @click=&quot;toDetail&quot;<br>          &gt;To 子集详情页面&lt;/el-button<br>        &gt;<br>        &lt;el-button<br>          type=&quot;danger&quot;<br>          :icon=&quot;Delete&quot;<br>          plain<br>          @click=&quot;batchDelete(scope.selectedListIds)&quot;<br>          :disabled=&quot;!scope.isSelected&quot;<br>        &gt;<br>          批量删除用户<br>        &lt;/el-button&gt;<br>      &lt;/template&gt;<br>      &lt;!-- Expand --&gt;<br>      &lt;template #expand=&quot;scope&quot;&gt;<br>        &#123;&#123; scope.row &#125;&#125;<br>      &lt;/template&gt;<br>      &lt;!-- usernameHeader --&gt;<br>      &lt;template #usernameHeader=&quot;scope&quot;&gt;<br>        &lt;el-button<br>          type=&quot;primary&quot;<br>          @click=&quot;ElMessage.success(&#x27;我是通过作用域插槽渲染的表头&#x27;)&quot;<br>        &gt;<br>          &#123;&#123; scope.column.label &#125;&#125;<br>        &lt;/el-button&gt;<br>      &lt;/template&gt;<br>      &lt;!-- createTime --&gt;<br>      &lt;template #createTime=&quot;scope&quot;&gt;<br>        &lt;el-button<br>          type=&quot;primary&quot;<br>          link<br>          @click=&quot;ElMessage.success(&#x27;我是通过作用域插槽渲染的内容&#x27;)&quot;<br>        &gt;<br>          &#123;&#123; scope.row.createTime &#125;&#125;<br>        &lt;/el-button&gt;<br>      &lt;/template&gt;<br>      &lt;!-- 表格操作 --&gt;<br>      &lt;template #operation=&quot;scope&quot;&gt;<br>        &lt;el-button<br>          type=&quot;primary&quot;<br>          link<br>          :icon=&quot;View&quot;<br>          @click=&quot;openDrawer(&#x27;查看&#x27;, scope.row)&quot;<br>          &gt;查看&lt;/el-button<br>        &gt;<br>        &lt;el-button<br>          type=&quot;primary&quot;<br>          link<br>          :icon=&quot;EditPen&quot;<br>          @click=&quot;openDrawer(&#x27;编辑&#x27;, scope.row)&quot;<br>          &gt;编辑&lt;/el-button<br>        &gt;<br>        &lt;el-button<br>          type=&quot;primary&quot;<br>          link<br>          :icon=&quot;Refresh&quot;<br>          @click=&quot;resetPass(scope.row)&quot;<br>          &gt;重置密码&lt;/el-button<br>        &gt;<br>        &lt;el-button<br>          type=&quot;primary&quot;<br>          link<br>          :icon=&quot;Delete&quot;<br>          @click=&quot;deleteAccount(scope.row)&quot;<br>          &gt;删除&lt;/el-button<br>        &gt;<br>      &lt;/template&gt;<br>    &lt;/ProTable&gt;<br>    &lt;UserDrawer ref=&quot;drawerRef&quot; /&gt;<br>    &lt;ImportExcel ref=&quot;dialogRef&quot; /&gt;<br>  &lt;/div&gt;<br>&lt;/template&gt;<br><br>&lt;script setup lang=&quot;tsx&quot; name=&quot;useProTable&quot;&gt;<br>import &#123; ref, reactive &#125; from &quot;vue&quot;;<br>import &#123; useRouter &#125; from &quot;vue-router&quot;;<br>import &#123; User &#125; from &quot;@/api/interface&quot;;<br>import &#123; useHandleData &#125; from &quot;@/hooks/useHandleData&quot;;<br>import &#123; useDownload &#125; from &quot;@/hooks/useDownload&quot;;<br>import &#123; useAuthButtons &#125; from &quot;@/hooks/useAuthButtons&quot;;<br>import &#123; ElMessage, ElMessageBox &#125; from &quot;element-plus&quot;;<br>import ProTable from &quot;@/components/ProTable/index.vue&quot;;<br>import ImportExcel from &quot;@/components/ImportExcel/index.vue&quot;;<br>import UserDrawer from &quot;@/views/proTable/components/UserDrawer.vue&quot;;<br>import &#123;<br>  ProTableInstance,<br>  ColumnProps,<br>  HeaderRenderScope,<br>&#125; from &quot;@/components/ProTable/interface&quot;;<br>import &#123;<br>  CirclePlus,<br>  Delete,<br>  EditPen,<br>  Download,<br>  Upload,<br>  View,<br>  Refresh,<br>&#125; from &quot;@element-plus/icons-vue&quot;;<br>import &#123;<br>  getUserList,<br>  deleteUser,<br>  editUser,<br>  addUser,<br>  changeUserStatus,<br>  resetUserPassWord,<br>  exportUserInfo,<br>  BatchAddUser,<br>  getUserStatus,<br>  getUserGender,<br>&#125; from &quot;@/api/modules/user&quot;;<br><br>const router = useRouter();<br><br>// 跳转详情页<br>const toDetail = () =&gt; &#123;<br>  router.push(<br>    `/proTable/useProTable/detail/$&#123;Math.random().toFixed(<br>      3<br>    )&#125;?params=detail-page`<br>  );<br>&#125;;<br><br>// 获取 ProTable 元素，调用其获取刷新数据方法（还能获取到当前查询参数，方便导出携带参数）<br>const proTable = ref&lt;ProTableInstance&gt;();<br><br>// 如果表格需要初始化请求参数，直接定义传给 ProTable(之后每次请求都会自动带上该参数，此参数更改之后也会一直带上，改变此参数会自动刷新表格数据)<br>const initParam = reactive(&#123; type: 1 &#125;);<br><br>// dataCallback 是对于返回的表格数据做处理，如果你后台返回的数据不是 list &amp;&amp; total &amp;&amp; pageNum &amp;&amp; pageSize 这些字段，那么你可以在这里进行处理成这些字段<br>// 或者直接去 hooks/useTable.ts 文件中把字段改为你后端对应的就行<br>const dataCallback = (data: any) =&gt; &#123;<br>  return &#123;<br>    list: data.list,<br>    total: data.total,<br>    pageNum: data.pageNum,<br>    pageSize: data.pageSize,<br>  &#125;;<br>&#125;;<br><br>// 如果你想在请求之前对当前请求参数做一些操作，可以自定义如下函数：params 为当前所有的请求参数（包括分页），最后返回请求列表接口<br>// 默认不做操作就直接在 ProTable 组件上绑定:requestApi=&quot;getUserList&quot;<br>const getTableList = (params: any) =&gt; &#123;<br>  let newParams = JSON.parse(JSON.stringify(params));<br>  newParams.createTime &amp;&amp; (newParams.startTime = newParams.createTime[0]);<br>  newParams.createTime &amp;&amp; (newParams.endTime = newParams.createTime[1]);<br>  delete newParams.createTime;<br>  return getUserList(newParams);<br>&#125;;<br><br>// 页面按钮权限（按钮权限既可以使用 hooks，也可以直接使用 v-auth 指令，指令适合直接绑定在按钮上，hooks 适合根据按钮权限显示不同的内容）<br>const &#123; BUTTONS &#125; = useAuthButtons();<br><br>// 自定义渲染表头（使用tsx语法）<br>const headerRender = (scope: HeaderRenderScope&lt;User.ResUserList&gt;) =&gt; &#123;<br>  return (<br>    &lt;el-button<br>      type=&quot;primary&quot;<br>      onClick=&#123;() =&gt; ElMessage.success(&quot;我是通过 tsx 语法渲染的表头&quot;)&#125;<br>    &gt;<br>      &#123;scope.column.label&#125;<br>    &lt;/el-button&gt;<br>  );<br>&#125;;<br><br>// 表格配置项<br>const columns: ColumnProps&lt;User.ResUserList&gt;[] = [<br>  &#123; type: &quot;selection&quot;, fixed: &quot;left&quot;, width: 80 &#125;,<br>  &#123; type: &quot;index&quot;, label: &quot;#&quot;, width: 80 &#125;,<br>  &#123; type: &quot;expand&quot;, label: &quot;Expand&quot;, width: 100 &#125;,<br>  &#123;<br>    prop: &quot;username&quot;,<br>    label: &quot;用户姓名&quot;,<br>    search: &#123; el: &quot;input&quot; &#125;,<br>    render: (scope) =&gt; &#123;<br>      return (<br>        &lt;el-button<br>          type=&quot;primary&quot;<br>          link<br>          onClick=&#123;() =&gt; ElMessage.success(&quot;我是通过 tsx 语法渲染的内容&quot;)&#125;<br>        &gt;<br>          &#123;scope.row.username&#125;<br>        &lt;/el-button&gt;<br>      );<br>    &#125;,<br>  &#125;,<br>  &#123;<br>    prop: &quot;gender&quot;,<br>    label: &quot;性别&quot;,<br>    // 字典数据<br>    // enum: genderType,<br>    // 字典请求不带参数<br>    enum: getUserGender,<br>    // 字典请求携带参数<br>    // enum: () =&gt; getUserGender(&#123; id: 1 &#125;),<br>    search: &#123; el: &quot;select&quot;, props: &#123; filterable: true &#125; &#125;,<br>    fieldNames: &#123; label: &quot;genderLabel&quot;, value: &quot;genderValue&quot; &#125;,<br>  &#125;,<br>  &#123;<br>    // 多级 prop<br>    prop: &quot;user.detail.age&quot;,<br>    label: &quot;年龄&quot;,<br>    search: &#123;<br>      // 自定义 search 显示内容<br>      render: (&#123; searchParam &#125;) =&gt; &#123;<br>        return (<br>          &lt;div class=&quot;flx-center&quot;&gt;<br>            &lt;el-input vModel_trim=&#123;searchParam.minAge&#125; placeholder=&quot;最小年龄&quot; /&gt;<br>            &lt;span class=&quot;mr10 ml10&quot;&gt;-&lt;/span&gt;<br>            &lt;el-input vModel_trim=&#123;searchParam.maxAge&#125; placeholder=&quot;最大年龄&quot; /&gt;<br>          &lt;/div&gt;<br>        );<br>      &#125;,<br>    &#125;,<br>  &#125;,<br>  &#123; prop: &quot;idCard&quot;, label: &quot;身份证号&quot;, search: &#123; el: &quot;input&quot; &#125; &#125;,<br>  &#123; prop: &quot;email&quot;, label: &quot;邮箱&quot; &#125;,<br>  &#123; prop: &quot;address&quot;, label: &quot;居住地址&quot; &#125;,<br>  &#123;<br>    prop: &quot;status&quot;,<br>    label: &quot;用户状态&quot;,<br>    enum: getUserStatus,<br>    search: &#123; el: &quot;tree-select&quot;, props: &#123; filterable: true &#125; &#125;,<br>    fieldNames: &#123; label: &quot;userLabel&quot;, value: &quot;userStatus&quot; &#125;,<br>    render: (scope) =&gt; &#123;<br>      return (<br>        &lt;&gt;<br>          &#123;BUTTONS.value.status ? (<br>            &lt;el-switch<br>              model-value=&#123;scope.row.status&#125;<br>              active-text=&#123;scope.row.status ? &quot;启用&quot; : &quot;禁用&quot;&#125;<br>              active-value=&#123;1&#125;<br>              inactive-value=&#123;0&#125;<br>              onClick=&#123;() =&gt; changeStatus(scope.row)&#125;<br>            /&gt;<br>          ) : (<br>            &lt;el-tag type=&#123;scope.row.status ? &quot;success&quot; : &quot;danger&quot;&#125;&gt;<br>              &#123;scope.row.status ? &quot;启用&quot; : &quot;禁用&quot;&#125;<br>            &lt;/el-tag&gt;<br>          )&#125;<br>        &lt;/&gt;<br>      );<br>    &#125;,<br>  &#125;,<br>  &#123;<br>    prop: &quot;createTime&quot;,<br>    label: &quot;创建时间&quot;,<br>    headerRender,<br>    width: 180,<br>    search: &#123;<br>      el: &quot;date-picker&quot;,<br>      span: 2,<br>      props: &#123; type: &quot;datetimerange&quot;, valueFormat: &quot;YYYY-MM-DD HH:mm:ss&quot; &#125;,<br>      defaultValue: [&quot;2022-11-12 11:35:00&quot;, &quot;2022-12-12 11:35:00&quot;],<br>    &#125;,<br>  &#125;,<br>  &#123; prop: &quot;operation&quot;, label: &quot;操作&quot;, fixed: &quot;right&quot;, width: 330 &#125;,<br>];<br><br>// 删除用户信息<br>const deleteAccount = async (params: User.ResUserList) =&gt; &#123;<br>  await useHandleData(<br>    deleteUser,<br>    &#123; id: [params.id] &#125;,<br>    `删除【$&#123;params.username&#125;】用户`<br>  );<br>  proTable.value?.getTableList();<br>&#125;;<br><br>// 批量删除用户信息<br>const batchDelete = async (id: string[]) =&gt; &#123;<br>  await useHandleData(deleteUser, &#123; id &#125;, &quot;删除所选用户信息&quot;);<br>  proTable.value?.clearSelection();<br>  proTable.value?.getTableList();<br>&#125;;<br><br>// 重置用户密码<br>const resetPass = async (params: User.ResUserList) =&gt; &#123;<br>  await useHandleData(<br>    resetUserPassWord,<br>    &#123; id: params.id &#125;,<br>    `重置【$&#123;params.username&#125;】用户密码`<br>  );<br>  proTable.value?.getTableList();<br>&#125;;<br><br>// 切换用户状态<br>const changeStatus = async (row: User.ResUserList) =&gt; &#123;<br>  await useHandleData(<br>    changeUserStatus,<br>    &#123; id: row.id, status: row.status == 1 ? 0 : 1 &#125;,<br>    `切换【$&#123;row.username&#125;】用户状态`<br>  );<br>  proTable.value?.getTableList();<br>&#125;;<br><br>// 导出用户列表<br>const downloadFile = async () =&gt; &#123;<br>  ElMessageBox.confirm(&quot;确认导出用户数据?&quot;, &quot;温馨提示&quot;, &#123;<br>    type: &quot;warning&quot;,<br>  &#125;).then(() =&gt;<br>    useDownload(exportUserInfo, &quot;用户列表&quot;, proTable.value?.searchParam)<br>  );<br>&#125;;<br><br>// 批量添加用户<br>const dialogRef = ref&lt;InstanceType&lt;typeof ImportExcel&gt; | null&gt;(null);<br>const batchAdd = () =&gt; &#123;<br>  const params = &#123;<br>    title: &quot;用户&quot;,<br>    tempApi: exportUserInfo,<br>    importApi: BatchAddUser,<br>    getTableList: proTable.value?.getTableList,<br>  &#125;;<br>  dialogRef.value?.acceptParams(params);<br>&#125;;<br><br>// 打开 drawer(新增、查看、编辑)<br>const drawerRef = ref&lt;InstanceType&lt;typeof UserDrawer&gt; | null&gt;(null);<br>const openDrawer = (title: string, row: Partial&lt;User.ResUserList&gt; = &#123;&#125;) =&gt; &#123;<br>  const params = &#123;<br>    title,<br>    isView: title === &quot;查看&quot;,<br>    row: &#123; ...row &#125;,<br>    api: title === &quot;新增&quot; ? addUser : title === &quot;编辑&quot; ? editUser : undefined,<br>    getTableList: proTable.value?.getTableList,<br>  &#125;;<br>  drawerRef.value?.acceptParams(params);<br>&#125;;<br>&lt;/script&gt;<br></code></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> vue3 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>120、git提交代码终端出现“Enter passphrase for key ‘/Users/yq/.ssh/id_rsa”</title>
      <link href="/2023/02/03/120-github/"/>
      <url>/2023/02/03/120-github/</url>
      
        <content type="html"><![CDATA[<span id="more"></span><h2 id="解决方式"><a href="#解决方式" class="headerlink" title="解决方式"></a>解决方式</h2><p>1、打开终端</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ssh">ssh-add -K /Users/yq/.ssh/id_rsa<br></code></pre></td></tr></table></figure><p>根据终端提示，输入电脑开机密码；</p><p>成功后会提示： Identity added: /Users/yq/.ssh/id_rsa (<a href="mailto:&#x31;&#51;&#51;&#52;&#x33;&#x35;&#50;&#56;&#x30;&#x38;&#64;&#x71;&#x71;&#x2e;&#99;&#x6f;&#x6d;">&#x31;&#51;&#51;&#52;&#x33;&#x35;&#50;&#56;&#x30;&#x38;&#64;&#x71;&#x71;&#x2e;&#99;&#x6f;&#x6d;</a>)</p><p>之后在提交代码的时候，不会需要 enter 以下提交代码</p><p>更改为：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs ssh">ssh-add --apple-use-keychain /Users/yq/.ssh/id_rsa<br>ssh-add --apple-load-keychain /Users/yq/.ssh/id_rsa<br></code></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>119、稀土掘金小册-记账本（十） 个人中心 （完结）</title>
      <link href="/2023/01/31/119-react/"/>
      <url>/2023/01/31/119-react/</url>
      
        <content type="html"><![CDATA[<span id="more"></span><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>行文至此，万里长征已经快要走到头了。本章节带同学们来编写最后一个模块 —— 个人中心。</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/7faa8d9d5851499ba78625108b2ddea1~tplv-k3u1fbpfcp-zoom-in-crop-mark:3024:0:0:0.awebp" alt="img"></p><p>个人中心模块分几个功能点，首先是头部的用户信息展示，包括头像、用户昵称、个人签名。其次是一些账号相关的操作，如用户信息修改、密码重置等。最后是退出登录，将其放置于页面底部，并且设置二次确认弹窗，避免误触。</p><h3 id="知识点"><a href="#知识点" class="headerlink" title="知识点"></a>知识点</h3><ul><li>图片资源上传格式处理。</li><li>原生表单插件 <code>rc-form</code> 的使用。</li><li>底部导航栏定位。</li></ul><h2 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h2><h3 id="头部信息展示"><a href="#头部信息展示" class="headerlink" title="头部信息展示"></a>头部信息展示</h3><p>修改 <code>container/User/index.jsx</code> 代码如下：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">import</span> React <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;react&quot;</span>;<br><br><span class="hljs-keyword">import</span> s <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;./style.module.less&quot;</span>;<br><br><span class="hljs-keyword">const</span> User = <span class="hljs-function">() =&gt;</span> &#123;<br>  <span class="hljs-keyword">return</span> (<br>    <span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">className</span>=<span class="hljs-string">&#123;s.user&#125;</span>&gt;</span></span><br><span class="xml">      <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">className</span>=<span class="hljs-string">&#123;s.head&#125;</span>&gt;</span></span><br><span class="xml">        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">className</span>=<span class="hljs-string">&#123;s.info&#125;</span>&gt;</span></span><br><span class="xml">          <span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>昵称：测试<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span></span><br><span class="xml">          <span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span></span><br><span class="xml">            <span class="hljs-tag">&lt;<span class="hljs-name">img</span></span></span><br><span class="hljs-tag"><span class="xml">              <span class="hljs-attr">style</span>=<span class="hljs-string">&#123;&#123;</span> <span class="hljs-attr">width:</span> <span class="hljs-attr">30</span>, <span class="hljs-attr">height:</span> <span class="hljs-attr">30</span>, <span class="hljs-attr">verticalAlign:</span> &quot;<span class="hljs-attr">-10px</span>&quot; &#125;&#125;</span></span><br><span class="hljs-tag"><span class="xml">              <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;//s.yezgea02.com/1615973630132/geqian.png&quot;</span></span></span><br><span class="hljs-tag"><span class="xml">              <span class="hljs-attr">alt</span>=<span class="hljs-string">&quot;&quot;</span></span></span><br><span class="hljs-tag"><span class="xml">            /&gt;</span></span><br><span class="xml">            <span class="hljs-tag">&lt;<span class="hljs-name">b</span>&gt;</span>个性签名<span class="hljs-tag">&lt;/<span class="hljs-name">b</span>&gt;</span></span><br><span class="xml">          <span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span></span><br><span class="xml">        <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="xml">        <span class="hljs-tag">&lt;<span class="hljs-name">img</span></span></span><br><span class="hljs-tag"><span class="xml">          <span class="hljs-attr">className</span>=<span class="hljs-string">&#123;s.avatar&#125;</span></span></span><br><span class="hljs-tag"><span class="xml">          <span class="hljs-attr">style</span>=<span class="hljs-string">&#123;&#123;</span> <span class="hljs-attr">width:</span> <span class="hljs-attr">60</span>, <span class="hljs-attr">height:</span> <span class="hljs-attr">60</span>, <span class="hljs-attr">borderRadius:</span> <span class="hljs-attr">8</span> &#125;&#125;</span></span><br><span class="hljs-tag"><span class="xml">          <span class="hljs-attr">src</span>=<span class="hljs-string">&#123;</span>&quot;//<span class="hljs-attr">s.yezgea02.com</span>/<span class="hljs-attr">1624959897466</span>/<span class="hljs-attr">avatar.jpeg</span>&quot;&#125;</span></span><br><span class="hljs-tag"><span class="xml">          <span class="hljs-attr">alt</span>=<span class="hljs-string">&quot;&quot;</span></span></span><br><span class="hljs-tag"><span class="xml">        /&gt;</span></span><br><span class="xml">      <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>  );<br>&#125;;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> User;<br></code></pre></td></tr></table></figure><blockquote><p>文末已为同学们提供下本章节 demo 代码，样式部分不再详细说明。</p></blockquote><p>这里给 <code>.head</code> 一个背景图片，介绍一下顶部的布局思路，如下所示：</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/7140a83118464d419c020dd84616954f~tplv-k3u1fbpfcp-zoom-in-crop-mark:3024:0:0:0.awebp" alt="img"></p><p>在 <code>.head</code> 内通过 <code>flex</code> 实现左右布局，在 <code>.info</code> 内通过 <code>flex</code> 的 <code>flex-direction</code> 设置为 <code>column</code> 实现上下布局。</p><p><code>.head</code> 底部留出的位置，用于放置后续的操作。</p><p>完成布局之后，将数据填上，通过 <code>/api/user/get_userinfo</code> 接口，获取用户信息，添加代码如下：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">import</span> React, &#123; useState, useEffect &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;react&quot;</span>;<br><span class="hljs-keyword">import</span> &#123; get &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;@/utils&quot;</span>;<br><br><span class="hljs-keyword">import</span> s <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;./style.module.less&quot;</span>;<br><br><span class="hljs-keyword">const</span> User = <span class="hljs-function">() =&gt;</span> &#123;<br>  <span class="hljs-keyword">const</span> [user, setUser] = useState(&#123;&#125;);<br><br>  useEffect(<span class="hljs-function">() =&gt;</span> &#123;<br>    getUserInfo();<br>  &#125;, []);<br><br>  <span class="hljs-comment">// 获取用户信息</span><br>  <span class="hljs-keyword">const</span> getUserInfo = <span class="hljs-keyword">async</span> () =&gt; &#123;<br>    <span class="hljs-keyword">const</span> &#123; data &#125; = <span class="hljs-keyword">await</span> get(<span class="hljs-string">&quot;/api/user/get_userinfo&quot;</span>);<br>    setUser(data);<br>    setAvatar(data.avatar);<br>  &#125;;<br><br>  <span class="hljs-keyword">return</span> (<br>    <span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">className</span>=<span class="hljs-string">&#123;s.user&#125;</span>&gt;</span></span><br><span class="xml">      <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">className</span>=<span class="hljs-string">&#123;s.head&#125;</span>&gt;</span></span><br><span class="xml">        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">className</span>=<span class="hljs-string">&#123;s.info&#125;</span>&gt;</span></span><br><span class="xml">          <span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>昵称：&#123;user.username || &quot;--&quot;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span></span><br><span class="xml">          <span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span></span><br><span class="xml">            <span class="hljs-tag">&lt;<span class="hljs-name">img</span></span></span><br><span class="hljs-tag"><span class="xml">              <span class="hljs-attr">style</span>=<span class="hljs-string">&#123;&#123;</span> <span class="hljs-attr">width:</span> <span class="hljs-attr">30</span>, <span class="hljs-attr">height:</span> <span class="hljs-attr">30</span>, <span class="hljs-attr">verticalAlign:</span> &quot;<span class="hljs-attr">-10px</span>&quot; &#125;&#125;</span></span><br><span class="hljs-tag"><span class="xml">              <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;//s.yezgea02.com/1615973630132/geqian.png&quot;</span></span></span><br><span class="hljs-tag"><span class="xml">              <span class="hljs-attr">alt</span>=<span class="hljs-string">&quot;&quot;</span></span></span><br><span class="hljs-tag"><span class="xml">            /&gt;</span></span><br><span class="xml">            <span class="hljs-tag">&lt;<span class="hljs-name">b</span>&gt;</span>&#123;user.signature || &quot;暂无个签&quot;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">b</span>&gt;</span></span><br><span class="xml">          <span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span></span><br><span class="xml">        <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="xml">        <span class="hljs-tag">&lt;<span class="hljs-name">img</span></span></span><br><span class="hljs-tag"><span class="xml">          <span class="hljs-attr">className</span>=<span class="hljs-string">&#123;s.avatar&#125;</span></span></span><br><span class="hljs-tag"><span class="xml">          <span class="hljs-attr">style</span>=<span class="hljs-string">&#123;&#123;</span> <span class="hljs-attr">width:</span> <span class="hljs-attr">60</span>, <span class="hljs-attr">height:</span> <span class="hljs-attr">60</span>, <span class="hljs-attr">borderRadius:</span> <span class="hljs-attr">8</span> &#125;&#125;</span></span><br><span class="hljs-tag"><span class="xml">          <span class="hljs-attr">src</span>=<span class="hljs-string">&#123;user.avatar</span> || &quot;&quot;&#125;</span></span><br><span class="hljs-tag"><span class="xml">          <span class="hljs-attr">alt</span>=<span class="hljs-string">&quot;&quot;</span></span></span><br><span class="hljs-tag"><span class="xml">        /&gt;</span></span><br><span class="xml">      <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>  );<br>&#125;;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> User;<br></code></pre></td></tr></table></figure><p><code>/api/user/get_userinfo</code> 接口返回字段分析：</p><ul><li>avatar：头像地址，这里要注意，我目前采用的线上接口，如果是本地开发的情况，需要修改你的 <code>host</code>。</li><li>signature：个性签名。</li><li>username：用户登录名称。</li></ul><p>浏览器展示如下所示：</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/38d7bc9820bb40af9b3c0a587ea44c2d~tplv-k3u1fbpfcp-zoom-in-crop-mark:3024:0:0:0.awebp" alt="img"></p><h3 id="用户信息相关操作"><a href="#用户信息相关操作" class="headerlink" title="用户信息相关操作"></a>用户信息相关操作</h3><p>紧接着，我们需要布局用户相关操作的内容，在上述基础上添加如下代码：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs js">...<br><span class="hljs-keyword">import</span> &#123; useNavigate &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;react-router-dom&#x27;</span>;<br><span class="hljs-keyword">import</span> &#123; Cell,  &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;zarm&#x27;</span>;<br><br><span class="hljs-keyword">const</span> User = <span class="hljs-function">() =&gt;</span> &#123;<br>  ...<br>  <span class="hljs-keyword">const</span> navigateTo = useNavigate();<br><br>  <span class="hljs-keyword">return</span> <span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">className</span>=<span class="hljs-string">&#123;s.user&#125;</span>&gt;</span></span><br><span class="xml">    ...</span><br><span class="xml">    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">className</span>=<span class="hljs-string">&#123;s.content&#125;</span>&gt;</span></span><br><span class="xml">      <span class="hljs-tag">&lt;<span class="hljs-name">Cell</span></span></span><br><span class="hljs-tag"><span class="xml">        <span class="hljs-attr">hasArrow</span></span></span><br><span class="hljs-tag"><span class="xml">        <span class="hljs-attr">title</span>=<span class="hljs-string">&quot;用户信息修改&quot;</span></span></span><br><span class="hljs-tag"><span class="xml">        <span class="hljs-attr">onClick</span>=<span class="hljs-string">&#123;()</span> =&gt;</span> navigateTo(&#x27;/userinfo&#x27;)&#125;</span><br><span class="xml">        icon=&#123;<span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&#123;&#123;</span> <span class="hljs-attr">width:</span> <span class="hljs-attr">20</span>, <span class="hljs-attr">verticalAlign:</span> &#x27;<span class="hljs-attr">-7px</span>&#x27; &#125;&#125; <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;//s.yezgea02.com/1615974766264/gxqm.png&quot;</span> <span class="hljs-attr">alt</span>=<span class="hljs-string">&quot;&quot;</span> /&gt;</span>&#125;</span><br><span class="xml">      /&gt;</span><br><span class="xml">      <span class="hljs-tag">&lt;<span class="hljs-name">Cell</span></span></span><br><span class="hljs-tag"><span class="xml">        <span class="hljs-attr">hasArrow</span></span></span><br><span class="hljs-tag"><span class="xml">        <span class="hljs-attr">title</span>=<span class="hljs-string">&quot;重制密码&quot;</span></span></span><br><span class="hljs-tag"><span class="xml">        <span class="hljs-attr">onClick</span>=<span class="hljs-string">&#123;()</span> =&gt;</span> navigateTo(&#x27;/account&#x27;)&#125;</span><br><span class="xml">        icon=&#123;<span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&#123;&#123;</span> <span class="hljs-attr">width:</span> <span class="hljs-attr">20</span>, <span class="hljs-attr">verticalAlign:</span> &#x27;<span class="hljs-attr">-7px</span>&#x27; &#125;&#125; <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;//s.yezgea02.com/1615974766264/zhaq.png&quot;</span> <span class="hljs-attr">alt</span>=<span class="hljs-string">&quot;&quot;</span> /&gt;</span>&#125;</span><br><span class="xml">      /&gt;</span><br><span class="xml">      <span class="hljs-tag">&lt;<span class="hljs-name">Cell</span></span></span><br><span class="hljs-tag"><span class="xml">        <span class="hljs-attr">hasArrow</span></span></span><br><span class="hljs-tag"><span class="xml">        <span class="hljs-attr">title</span>=<span class="hljs-string">&quot;关于我们&quot;</span></span></span><br><span class="hljs-tag"><span class="xml">        <span class="hljs-attr">onClick</span>=<span class="hljs-string">&#123;()</span> =&gt;</span> navigateTo(&#x27;/about&#x27;)&#125;</span><br><span class="xml">        icon=&#123;<span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&#123;&#123;</span> <span class="hljs-attr">width:</span> <span class="hljs-attr">20</span>, <span class="hljs-attr">verticalAlign:</span> &#x27;<span class="hljs-attr">-7px</span>&#x27; &#125;&#125; <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;//s.yezgea02.com/1615975178434/lianxi.png&quot;</span> <span class="hljs-attr">alt</span>=<span class="hljs-string">&quot;&quot;</span> /&gt;</span>&#125;</span><br><span class="xml">      /&gt;</span><br><span class="xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="xml">  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>&#125;;<br></code></pre></td></tr></table></figure><p>添加样式：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs css">... <span class="hljs-selector-class">.content</span> &#123;<br>  <span class="hljs-attribute">width</span>: <span class="hljs-number">90%</span>;<br>  <span class="hljs-attribute">position</span>: absolute;<br>  <span class="hljs-attribute">top</span>: <span class="hljs-number">120px</span>;<br>  <span class="hljs-attribute">left</span>: <span class="hljs-number">50%</span>;<br>  <span class="hljs-attribute">transform</span>: <span class="hljs-built_in">translateX</span>(-<span class="hljs-number">50%</span>);<br>  <span class="hljs-attribute">box-shadow</span>: <span class="hljs-number">3px</span> <span class="hljs-number">2px</span> <span class="hljs-number">20px</span> <span class="hljs-number">10px</span> <span class="hljs-built_in">rgba</span>(<span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0.1</span>);<br>  <span class="hljs-attribute">border-radius</span>: <span class="hljs-number">10px</span>;<br>  <span class="hljs-attribute">overflow</span>: hidden;<br>&#125;<br></code></pre></td></tr></table></figure><p>代码部分，直接采用 <code>Zarm</code> 组件库提供的 <code>Cell</code> 组件，它适用于列表布局，<a href="https://link.juejin.cn/?target=https://zarm.gitee.io/%23/components/cell">官方文档</a>提供了很多列表布局的例子，可以直接在内部拷贝代码进行二次加工。能不用自己写样式，尽量就不要写。用组件库的目的，就是减少工作量，提高布局的效率。</p><p>浏览器展示效果如下：</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/efc9a9ee5b794140b0da572a651b67f3~tplv-k3u1fbpfcp-zoom-in-crop-mark:3024:0:0:0.awebp" alt="img"></p><p>这里有三个列表跳转项，分别是 <code>userinfo</code>、<code>account</code>、<code>about</code>。我们逐一击破。</p><p>首先我们在 <code>container</code> 目录下新建一个 <code>UserInfo</code> 目录，如下所示：</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/508f67feaa5745689513b1c3a4037bbb~tplv-k3u1fbpfcp-zoom-in-crop-mark:3024:0:0:0.awebp" alt="img"></p><p>添加 <code>index.js</code> 和 <code>style.module.less</code>，并且在 <code>router/index.js</code> 内添加相对应的路由配置项。</p><p>于是我们尝试点击「修改用户信息」，如下所示：</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/be3e4fe43b5f48afa0e627a53efcdada~tplv-k3u1fbpfcp-zoom-in-crop-mark:3024:0:0:0.awebp" alt="img"></p><p>成功之后，我们便可在 <code>UserInfo</code> 中编写编辑用户相关信息的操作，在编写正式代码之前，我们先对 <code>Zarm</code> 的上传组件进行分析，我们尝试编写如下代码：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">import</span> React <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;react&quot;</span>;<br><span class="hljs-keyword">import</span> &#123; FilePicker, Button &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;zarm&quot;</span>;<br><br><span class="hljs-keyword">import</span> s <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;./style.module.less&quot;</span>;<br><br><span class="hljs-keyword">const</span> UserInfo = <span class="hljs-function">() =&gt;</span> &#123;<br>  <span class="hljs-keyword">const</span> handleSelect = <span class="hljs-function">(<span class="hljs-params">file</span>) =&gt;</span> &#123;<br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;file&quot;</span>, file);<br>  &#125;;<br>  <span class="hljs-keyword">return</span> (<br>    <span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">className</span>=<span class="hljs-string">&#123;s.userinfo&#125;</span>&gt;</span></span><br><span class="xml">      <span class="hljs-tag">&lt;<span class="hljs-name">FilePicker</span> <span class="hljs-attr">onChange</span>=<span class="hljs-string">&#123;handleSelect&#125;</span> <span class="hljs-attr">accept</span>=<span class="hljs-string">&quot;image/*&quot;</span>&gt;</span></span><br><span class="xml">        <span class="hljs-tag">&lt;<span class="hljs-name">Button</span> <span class="hljs-attr">theme</span>=<span class="hljs-string">&quot;primary&quot;</span> <span class="hljs-attr">size</span>=<span class="hljs-string">&quot;xs&quot;</span>&gt;</span></span><br><span class="xml">          点击上传</span><br><span class="xml">        <span class="hljs-tag">&lt;/<span class="hljs-name">Button</span>&gt;</span></span><br><span class="xml">      <span class="hljs-tag">&lt;/<span class="hljs-name">FilePicker</span>&gt;</span></span><br><span class="xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>  );<br>&#125;;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> UserInfo;<br></code></pre></td></tr></table></figure><p>点击按钮，上传一张图片，我们查看回调函数 <code>handleSelect</code> 的执行结果：</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/5668a3d8c3ac48fc9c793060570ddf8a~tplv-k3u1fbpfcp-zoom-in-crop-mark:3024:0:0:0.awebp" alt="img"></p><p>此时，我们需要的是上传资源的原始文件，在上述返回对象中，<code>file</code> 属性为 <code>File</code> 文件类型，它是浏览器返回的原生对象，我们需要通过下列代码，将其改造成一个 <code>form-data</code> 对象：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> handleSelect = <span class="hljs-function">(<span class="hljs-params">file</span>) =&gt;</span> &#123;<br>  <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;file&quot;</span>, file);<br>  <span class="hljs-keyword">let</span> formData = <span class="hljs-keyword">new</span> FormData();<br>  formData.append(<span class="hljs-string">&quot;file&quot;</span>, file.file);<br>&#125;;<br></code></pre></td></tr></table></figure><p>再将 <code>formData</code> 通过 <code>axios</code> 上传到服务器，服务端通过 <code>ctx.request.files[0]</code> 获取到前端上传的 文件原始对象，并将其读取，存入服务器内部。这样就完成了一套前端上传资源，服务端存储并返回路径的一个过程。</p><p>接下来进行完整代码的编写，如下所示：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">import</span> React, &#123; useEffect, useState &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;react&quot;</span>;<br><span class="hljs-keyword">import</span> &#123; Button, FilePicker, Input, Toast &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;zarm&quot;</span>;<br><span class="hljs-keyword">import</span> &#123; useNavigate &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;react-router-dom&quot;</span>;<br><span class="hljs-keyword">import</span> Header <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;@/components/Header&quot;</span>; <span class="hljs-comment">// 由于是内页，使用到公用头部</span><br><span class="hljs-keyword">import</span> axios <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;axios&quot;</span>; <span class="hljs-comment">// // 由于采用 form-data 传递参数，所以直接只用 axios 进行请求</span><br><span class="hljs-keyword">import</span> &#123; get, post &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;@/utils&quot;</span>;<br><span class="hljs-keyword">import</span> &#123; baseUrl &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;config&quot;</span>; <span class="hljs-comment">// 由于直接使用 axios 进行请求，统一封装了请求 baseUrl</span><br><span class="hljs-keyword">import</span> s <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;./style.module.less&quot;</span>;<br><br><span class="hljs-keyword">const</span> UserInfo = <span class="hljs-function">() =&gt;</span> &#123;<br>  <span class="hljs-keyword">const</span> navigateTo = useNavigate(); <span class="hljs-comment">// 路由实例</span><br>  <span class="hljs-keyword">const</span> [user, setUser] = useState(&#123;&#125;); <span class="hljs-comment">// 用户</span><br>  <span class="hljs-keyword">const</span> [avatar, setAvatar] = useState(<span class="hljs-string">&quot;&quot;</span>); <span class="hljs-comment">// 头像</span><br>  <span class="hljs-keyword">const</span> [signature, setSignature] = useState(<span class="hljs-string">&quot;&quot;</span>); <span class="hljs-comment">// 个签</span><br>  <span class="hljs-keyword">const</span> token = <span class="hljs-built_in">localStorage</span>.getItem(<span class="hljs-string">&quot;token&quot;</span>); <span class="hljs-comment">// 登录令牌</span><br><br>  useEffect(<span class="hljs-function">() =&gt;</span> &#123;<br>    getUserInfo(); <span class="hljs-comment">// 初始化请求</span><br>  &#125;, []);<br><br>  <span class="hljs-comment">// 获取用户信息</span><br>  <span class="hljs-keyword">const</span> getUserInfo = <span class="hljs-keyword">async</span> () =&gt; &#123;<br>    <span class="hljs-keyword">const</span> &#123; data &#125; = <span class="hljs-keyword">await</span> get(<span class="hljs-string">&quot;/api/user/get_userinfo&quot;</span>);<br>    setUser(data);<br>    setAvatar(data.avatar);<br>    setSignature(data.signature);<br>  &#125;;<br><br>  <span class="hljs-comment">// 获取图片回调</span><br>  <span class="hljs-keyword">const</span> handleSelect = <span class="hljs-function">(<span class="hljs-params">file</span>) =&gt;</span> &#123;<br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;file.file&quot;</span>, file.file);<br>    <span class="hljs-keyword">if</span> (file &amp;&amp; file.file.size &gt; <span class="hljs-number">200</span> * <span class="hljs-number">1024</span>) &#123;<br>      Toast.show(<span class="hljs-string">&quot;上传头像不得超过 200 KB！！&quot;</span>);<br>      <span class="hljs-keyword">return</span>;<br>    &#125;<br>    <span class="hljs-keyword">let</span> formData = <span class="hljs-keyword">new</span> FormData();<br>    <span class="hljs-comment">// 生成 form-data 数据类型</span><br>    formData.append(<span class="hljs-string">&quot;file&quot;</span>, file.file);<br>    <span class="hljs-comment">// 通过 axios 设置  &#x27;Content-Type&#x27;: &#x27;multipart/form-data&#x27;, 进行文件上传</span><br>    axios(&#123;<br>      <span class="hljs-attr">method</span>: <span class="hljs-string">&quot;post&quot;</span>,<br>      <span class="hljs-attr">url</span>: <span class="hljs-string">`<span class="hljs-subst">$&#123;baseUrl&#125;</span>/upload`</span>,<br>      <span class="hljs-attr">data</span>: formData,<br>      <span class="hljs-attr">headers</span>: &#123;<br>        <span class="hljs-string">&quot;Content-Type&quot;</span>: <span class="hljs-string">&quot;multipart/form-data&quot;</span>,<br>        <span class="hljs-attr">Authorization</span>: token,<br>      &#125;,<br>    &#125;).then(<span class="hljs-function">(<span class="hljs-params">res</span>) =&gt;</span> &#123;<br>      <span class="hljs-comment">// 返回图片地址</span><br>      setAvatar(res.data);<br>    &#125;);<br>  &#125;;<br><br>  <span class="hljs-comment">// 编辑用户信息方法</span><br>  <span class="hljs-keyword">const</span> save = <span class="hljs-keyword">async</span> () =&gt; &#123;<br>    <span class="hljs-keyword">const</span> &#123; data &#125; = <span class="hljs-keyword">await</span> post(<span class="hljs-string">&quot;/api/user/edit_userinfo&quot;</span>, &#123;<br>      signature,<br>      avatar,<br>    &#125;);<br><br>    Toast.show(<span class="hljs-string">&quot;修改成功&quot;</span>);<br>    <span class="hljs-comment">// 成功后回到个人中心页面</span><br>    navigateTo(-<span class="hljs-number">1</span>);<br>  &#125;;<br><br>  <span class="hljs-keyword">return</span> (<br>    <span class="xml"><span class="hljs-tag">&lt;&gt;</span></span><br><span class="xml">      <span class="hljs-tag">&lt;<span class="hljs-name">Header</span> <span class="hljs-attr">title</span>=<span class="hljs-string">&quot;用户信息&quot;</span> /&gt;</span></span><br><span class="xml">      <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">className</span>=<span class="hljs-string">&#123;s.userinfo&#125;</span>&gt;</span></span><br><span class="xml">        <span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>个人资料<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span></span><br><span class="xml">        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">className</span>=<span class="hljs-string">&#123;s.item&#125;</span>&gt;</span></span><br><span class="xml">          <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">className</span>=<span class="hljs-string">&#123;s.title&#125;</span>&gt;</span>头像<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="xml">          <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">className</span>=<span class="hljs-string">&#123;s.avatar&#125;</span>&gt;</span></span><br><span class="xml">            <span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">className</span>=<span class="hljs-string">&#123;s.avatarUrl&#125;</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&#123;avatar&#125;</span> <span class="hljs-attr">alt</span>=<span class="hljs-string">&quot;&quot;</span> /&gt;</span></span><br><span class="xml">            <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">className</span>=<span class="hljs-string">&#123;s.desc&#125;</span>&gt;</span></span><br><span class="xml">              <span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>支持 jpg、png、jpeg 格式大小 200KB 以内的图片<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span></span><br><span class="xml">              <span class="hljs-tag">&lt;<span class="hljs-name">FilePicker</span></span></span><br><span class="hljs-tag"><span class="xml">                <span class="hljs-attr">className</span>=<span class="hljs-string">&#123;s.filePicker&#125;</span></span></span><br><span class="hljs-tag"><span class="xml">                <span class="hljs-attr">onChange</span>=<span class="hljs-string">&#123;handleSelect&#125;</span></span></span><br><span class="hljs-tag"><span class="xml">                <span class="hljs-attr">accept</span>=<span class="hljs-string">&quot;image/*&quot;</span></span></span><br><span class="hljs-tag"><span class="xml">              &gt;</span></span><br><span class="xml">                <span class="hljs-tag">&lt;<span class="hljs-name">Button</span> <span class="hljs-attr">className</span>=<span class="hljs-string">&#123;s.upload&#125;</span> <span class="hljs-attr">theme</span>=<span class="hljs-string">&quot;primary&quot;</span> <span class="hljs-attr">size</span>=<span class="hljs-string">&quot;xs&quot;</span>&gt;</span></span><br><span class="xml">                  点击上传</span><br><span class="xml">                <span class="hljs-tag">&lt;/<span class="hljs-name">Button</span>&gt;</span></span><br><span class="xml">              <span class="hljs-tag">&lt;/<span class="hljs-name">FilePicker</span>&gt;</span></span><br><span class="xml">            <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="xml">          <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="xml">        <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="xml">        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">className</span>=<span class="hljs-string">&#123;s.item&#125;</span>&gt;</span></span><br><span class="xml">          <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">className</span>=<span class="hljs-string">&#123;s.title&#125;</span>&gt;</span>个性签名<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="xml">          <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">className</span>=<span class="hljs-string">&#123;s.signature&#125;</span>&gt;</span></span><br><span class="xml">            <span class="hljs-tag">&lt;<span class="hljs-name">Input</span></span></span><br><span class="hljs-tag"><span class="xml">              <span class="hljs-attr">clearable</span></span></span><br><span class="hljs-tag"><span class="xml">              <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span></span></span><br><span class="hljs-tag"><span class="xml">              <span class="hljs-attr">value</span>=<span class="hljs-string">&#123;signature&#125;</span></span></span><br><span class="hljs-tag"><span class="xml">              <span class="hljs-attr">placeholder</span>=<span class="hljs-string">&quot;请输入个性签名&quot;</span></span></span><br><span class="hljs-tag"><span class="xml">              <span class="hljs-attr">onChange</span>=<span class="hljs-string">&#123;(value)</span> =&gt;</span> setSignature(value)&#125;</span><br><span class="xml">            /&gt;</span><br><span class="xml">          <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="xml">        <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="xml">        <span class="hljs-tag">&lt;<span class="hljs-name">Button</span> <span class="hljs-attr">onClick</span>=<span class="hljs-string">&#123;save&#125;</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&#123;&#123;</span> <span class="hljs-attr">marginTop:</span> <span class="hljs-attr">50</span> &#125;&#125; <span class="hljs-attr">block</span> <span class="hljs-attr">theme</span>=<span class="hljs-string">&quot;primary&quot;</span>&gt;</span></span><br><span class="xml">          保存</span><br><span class="xml">        <span class="hljs-tag">&lt;/<span class="hljs-name">Button</span>&gt;</span></span><br><span class="xml">      <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="xml">    <span class="hljs-tag">&lt;/&gt;</span></span><br>  );<br>&#125;;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> UserInfo;<br></code></pre></td></tr></table></figure><p>详细的注释信息，已经在上述代码中表明，需要注意的是，本次请求直接使用了 <code>axios</code> 方法，所以我们需要将 <code>baseUrl</code> 单独封装到一个配置文件中，便于后续使用，在 <code>src</code> 目录下新建 <code>config/index.js</code>，添加如下代码：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> MODE = <span class="hljs-keyword">import</span>.meta.env.MODE; <span class="hljs-comment">// 环境变量</span><br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">const</span> baseUrl =<br>  MODE == <span class="hljs-string">&quot;development&quot;</span> ? <span class="hljs-string">&quot;/api&quot;</span> : <span class="hljs-string">&quot;http://api.chennick.wang&quot;</span>;<br></code></pre></td></tr></table></figure><p><code>MODE</code> 作为 <code>vite</code> 运行时的环境变量，可以通过它来配置开发环境和生成环境的一些变量差异。</p><p>然后需要在 <code>vite.config.js</code> 中修改如下：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs js">resolve: &#123;<br>    <span class="hljs-attr">alias</span>: &#123;<br>      <span class="hljs-string">&#x27;@&#x27;</span>: path.resolve(__dirname, <span class="hljs-string">&#x27;src&#x27;</span>), <span class="hljs-comment">// src 路径</span><br>      <span class="hljs-string">&#x27;utils&#x27;</span>: path.resolve(__dirname, <span class="hljs-string">&#x27;src/utils&#x27;</span>), <span class="hljs-comment">// src 路径</span><br>      <span class="hljs-string">&#x27;config&#x27;</span>: path.resolve(__dirname, <span class="hljs-string">&#x27;src/config&#x27;</span>) <span class="hljs-comment">// src 路径</span><br>    &#125;<br>  &#125;,<br></code></pre></td></tr></table></figure><p>配置好 <code>config</code> ，便可以直接在代码中通过：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">import</span> &#123; baseUrl &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;config&quot;</span>;<br></code></pre></td></tr></table></figure><p>上述形式来获取 <code>config</code> 中的变量信息。</p><p>重启项目，浏览器展示效果如下：</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/8155a0c93fbe47d1a5c061ffb57d91fd~tplv-k3u1fbpfcp-zoom-in-crop-mark:3024:0:0:0.awebp" alt="img"></p><p>通过请求，得到的路径是这样的，因为我们在服务端返回的地址就是一个相对路径，所以我们需要给路径加上 <code>host</code>，要注意如果你是本地启动的服务端代码，这里的 <code>host</code> 就是你的服务端代码启动的 <code>host</code>，如 <code>locahost:7001</code>，而我目前使用的是在线接口，所以我们在 <code>utils/index.js</code> 下新增一个图片地址转换的方法，如下所示：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// utils/index.js</span><br><span class="hljs-keyword">import</span> &#123; baseUrl &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;config&#x27;</span><br><span class="hljs-keyword">const</span> MODE = <span class="hljs-keyword">import</span>.meta.env.MODE <span class="hljs-comment">// 环境变量</span><br>...<br><span class="hljs-keyword">export</span> <span class="hljs-keyword">const</span> imgUrlTrans = <span class="hljs-function">(<span class="hljs-params">url</span>) =&gt;</span> &#123;<br>  <span class="hljs-keyword">if</span> (url &amp;&amp; url.startsWith(<span class="hljs-string">&#x27;http&#x27;</span>)) &#123;<br>    <span class="hljs-keyword">return</span> url<br>  &#125; <span class="hljs-keyword">else</span> &#123;<br>    url = <span class="hljs-string">`<span class="hljs-subst">$&#123;MODE == <span class="hljs-string">&#x27;development&#x27;</span> ? <span class="hljs-string">&#x27;http://api.chennick.wang&#x27;</span> : baseUrl&#125;</span><span class="hljs-subst">$&#123;url&#125;</span>`</span><br>    <span class="hljs-keyword">return</span> url<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>然后在 <code>UserInfo/index.jsx</code> 中引入 <code>imgUrlTrans</code> 并如下使用：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 获取用户信息</span><br><span class="hljs-keyword">const</span> getUserInfo = <span class="hljs-keyword">async</span> () =&gt; &#123;<br>  <span class="hljs-keyword">const</span> &#123; data &#125; = <span class="hljs-keyword">await</span> get(<span class="hljs-string">&#x27;/api/user/get_userinfo&#x27;</span>);<br>  setUser(data);<br>  setAvatar(imgUrlTrans(data.avatar))<br>  setSignature(data.signature)<br>&#125;;<br><br>...<br><br><span class="hljs-comment">// 返回图片地址</span><br>setAvatar(imgUrlTrans(res.data))<br></code></pre></td></tr></table></figure><p>再次打开浏览器，点击选择图片如下：</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/806c25af2a8c4622a7286a1b68f0bcf9~tplv-k3u1fbpfcp-zoom-in-crop-mark:3024:0:0:0.awebp" alt="img"></p><p>保存后，数据成功修改，我们如下所示：</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/3260506bed5945fa94fb872358850ad8~tplv-k3u1fbpfcp-zoom-in-crop-mark:3024:0:0:0.awebp" alt="img"></p><h3 id="重置密码"><a href="#重置密码" class="headerlink" title="重置密码"></a>重置密码</h3><p>完成用户信息编辑之后，接下来实现重置密码部分，我们在 <code>container</code> 目录下新建 <code>Account</code> 目录，在内部分别新建 <code>index.jsx</code> 和 <code>style.module.less</code>。</p><p>首先我们需要安装 <code>rc-form</code> 作为本次页面的表单组件，因为 <code>Zarm</code> 没有提供表单组件，包括 <code>Antd Mobile</code> 这样的组件，也没有提供表单相关的组件，所以这里我们需要使用 <code>rc-form</code> 自己编写表单相关验证方法，它也是 <code>antd</code> 官方使用的表单组件。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">npm i rc-form -S<br></code></pre></td></tr></table></figure><p>我们为 <code>Account/index.jsx</code> 添加如下代码：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// Account/index.jsx</span><br><span class="hljs-keyword">import</span> React <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;react&quot;</span>;<br><span class="hljs-keyword">import</span> &#123; Cell, Input, Button, Toast &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;zarm&quot;</span>;<br><span class="hljs-keyword">import</span> &#123; createForm &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;rc-form&quot;</span>;<br><span class="hljs-keyword">import</span> Header <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;@/components/Header&quot;</span>;<br><span class="hljs-keyword">import</span> &#123; post &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;@/utils&quot;</span>;<br><br><span class="hljs-keyword">import</span> s <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;./style.module.less&quot;</span>;<br><br><span class="hljs-keyword">const</span> Account = <span class="hljs-function">(<span class="hljs-params">props</span>) =&gt;</span> &#123;<br>  <span class="hljs-comment">// Account 通过 createForm 高阶组件包裹之后，可以在 props 中获取到 form 属性</span><br>  <span class="hljs-keyword">const</span> &#123; getFieldProps, getFieldError &#125; = props.form;<br><br>  <span class="hljs-comment">// 提交修改方法</span><br>  <span class="hljs-keyword">const</span> submit = <span class="hljs-function">() =&gt;</span> &#123;<br>    <span class="hljs-comment">// validateFields 获取表单属性元素</span><br>    props.form.validateFields(<span class="hljs-keyword">async</span> (error, value) =&gt; &#123;<br>      <span class="hljs-comment">// error 表单验证全部通过，为 false，否则为 true</span><br>      <span class="hljs-keyword">if</span> (!error) &#123;<br>        <span class="hljs-built_in">console</span>.log(value);<br>        <span class="hljs-keyword">if</span> (value.newpass != value.newpass2) &#123;<br>          Toast.show(<span class="hljs-string">&quot;新密码输入不一致&quot;</span>);<br>          <span class="hljs-keyword">return</span>;<br>        &#125;<br>        <span class="hljs-keyword">await</span> post(<span class="hljs-string">&quot;/api/user/modify_pass&quot;</span>, &#123;<br>          <span class="hljs-attr">old_pass</span>: value.oldpass,<br>          <span class="hljs-attr">new_pass</span>: value.newpass,<br>          <span class="hljs-attr">new_pass2</span>: value.newpass2,<br>        &#125;);<br>        Toast.show(<span class="hljs-string">&quot;修改成功&quot;</span>);<br>      &#125;<br>    &#125;);<br>  &#125;;<br><br>  <span class="hljs-keyword">return</span> (<br>    <span class="xml"><span class="hljs-tag">&lt;&gt;</span></span><br><span class="xml">      <span class="hljs-tag">&lt;<span class="hljs-name">Header</span> <span class="hljs-attr">title</span>=<span class="hljs-string">&quot;重制密码&quot;</span> /&gt;</span></span><br><span class="xml">      <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">className</span>=<span class="hljs-string">&#123;s.account&#125;</span>&gt;</span></span><br><span class="xml">        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">className</span>=<span class="hljs-string">&#123;s.form&#125;</span>&gt;</span></span><br><span class="xml">          <span class="hljs-tag">&lt;<span class="hljs-name">Cell</span> <span class="hljs-attr">title</span>=<span class="hljs-string">&quot;原密码&quot;</span>&gt;</span></span><br><span class="xml">            <span class="hljs-tag">&lt;<span class="hljs-name">Input</span></span></span><br><span class="hljs-tag"><span class="xml">              <span class="hljs-attr">clearable</span></span></span><br><span class="hljs-tag"><span class="xml">              <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span></span></span><br><span class="hljs-tag"><span class="xml">              <span class="hljs-attr">placeholder</span>=<span class="hljs-string">&quot;请输入原密码&quot;</span></span></span><br><span class="hljs-tag"><span class="xml">              &#123;<span class="hljs-attr">...getFieldProps</span>(&quot;<span class="hljs-attr">oldpass</span>&quot;, &#123; <span class="hljs-attr">rules:</span> [&#123; <span class="hljs-attr">required:</span> <span class="hljs-attr">true</span> &#125;] &#125;)&#125;</span></span><br><span class="hljs-tag"><span class="xml">            /&gt;</span></span><br><span class="xml">          <span class="hljs-tag">&lt;/<span class="hljs-name">Cell</span>&gt;</span></span><br><span class="xml">          <span class="hljs-tag">&lt;<span class="hljs-name">Cell</span> <span class="hljs-attr">title</span>=<span class="hljs-string">&quot;新密码&quot;</span>&gt;</span></span><br><span class="xml">            <span class="hljs-tag">&lt;<span class="hljs-name">Input</span></span></span><br><span class="hljs-tag"><span class="xml">              <span class="hljs-attr">clearable</span></span></span><br><span class="hljs-tag"><span class="xml">              <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span></span></span><br><span class="hljs-tag"><span class="xml">              <span class="hljs-attr">placeholder</span>=<span class="hljs-string">&quot;请输入新密码&quot;</span></span></span><br><span class="hljs-tag"><span class="xml">              &#123;<span class="hljs-attr">...getFieldProps</span>(&quot;<span class="hljs-attr">newpass</span>&quot;, &#123; <span class="hljs-attr">rules:</span> [&#123; <span class="hljs-attr">required:</span> <span class="hljs-attr">true</span> &#125;] &#125;)&#125;</span></span><br><span class="hljs-tag"><span class="xml">            /&gt;</span></span><br><span class="xml">          <span class="hljs-tag">&lt;/<span class="hljs-name">Cell</span>&gt;</span></span><br><span class="xml">          <span class="hljs-tag">&lt;<span class="hljs-name">Cell</span> <span class="hljs-attr">title</span>=<span class="hljs-string">&quot;确认密码&quot;</span>&gt;</span></span><br><span class="xml">            <span class="hljs-tag">&lt;<span class="hljs-name">Input</span></span></span><br><span class="hljs-tag"><span class="xml">              <span class="hljs-attr">clearable</span></span></span><br><span class="hljs-tag"><span class="xml">              <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span></span></span><br><span class="hljs-tag"><span class="xml">              <span class="hljs-attr">placeholder</span>=<span class="hljs-string">&quot;请再此输入新密码确认&quot;</span></span></span><br><span class="hljs-tag"><span class="xml">              &#123;<span class="hljs-attr">...getFieldProps</span>(&quot;<span class="hljs-attr">newpass2</span>&quot;, &#123; <span class="hljs-attr">rules:</span> [&#123; <span class="hljs-attr">required:</span> <span class="hljs-attr">true</span> &#125;] &#125;)&#125;</span></span><br><span class="hljs-tag"><span class="xml">            /&gt;</span></span><br><span class="xml">          <span class="hljs-tag">&lt;/<span class="hljs-name">Cell</span>&gt;</span></span><br><span class="xml">        <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="xml">        <span class="hljs-tag">&lt;<span class="hljs-name">Button</span> <span class="hljs-attr">className</span>=<span class="hljs-string">&#123;s.btn&#125;</span> <span class="hljs-attr">block</span> <span class="hljs-attr">theme</span>=<span class="hljs-string">&quot;primary&quot;</span> <span class="hljs-attr">onClick</span>=<span class="hljs-string">&#123;submit&#125;</span>&gt;</span></span><br><span class="xml">          提交</span><br><span class="xml">        <span class="hljs-tag">&lt;/<span class="hljs-name">Button</span>&gt;</span></span><br><span class="xml">      <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="xml">    <span class="hljs-tag">&lt;/&gt;</span></span><br>  );<br>&#125;;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> createForm()(Account);<br></code></pre></td></tr></table></figure><p>样式代码：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-class">.account</span> &#123;<br>  <span class="hljs-attribute">padding</span>: <span class="hljs-number">0</span> <span class="hljs-number">12px</span>;<br>  <span class="hljs-selector-class">.form</span> &#123;<br>    :global &#123;<br>      .za-cell:after &#123;<br>        left: unset;<br>        <span class="hljs-attribute">border-top</span>: unset;<br>        <span class="hljs-attribute">border-bottom</span>: <span class="hljs-number">1px</span> solid <span class="hljs-number">#e9e9e9</span>;<br>      &#125;<br>    &#125;<br>  &#125;<br>  <span class="hljs-selector-class">.btn</span> &#123;<br>    <span class="hljs-attribute">margin-top</span>: <span class="hljs-number">50px</span>;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>这里要注意，<code>Account</code> 在抛出去的时候，需要用 <code>createForm()</code> 高阶组件进行包裹，这样在 <code>Account</code> 的内部能接收到 <code>form</code> 属性，它的内部提供了 <code>getFieldProps</code> 方法，对 <code>Input</code> 组件进行表单设置，<code>Input</code> 的 <code>onChange</code> 方法会被代理，最终可以通过 <code>form.validateFields</code> 以回到函数的形式拿到 <code>Input</code> 内的值，并且可以加以验证。</p><p>别忘记在路由配置项中添加相应的路由：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// router/index.js</span><br>...<br><span class="hljs-keyword">import</span> Account <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@/container/Account&#x27;</span><br><br>...<br>&#123;<br>  <span class="hljs-attr">path</span>: <span class="hljs-string">&quot;/account&quot;</span>,<br>  <span class="hljs-attr">component</span>: Account<br>&#125;<br></code></pre></td></tr></table></figure><p>页面展示如下：</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/219b6798b5bc4e6ca78b6db0165af6b8~tplv-k3u1fbpfcp-zoom-in-crop-mark:3024:0:0:0.awebp" alt="img"></p><p>这里为了方便查看效果，输入框就不以密码的形式隐藏输入了，点击「提交」按钮之后，接口调用成功，但是我为 <code>admin</code> 账户在服务端设置了不能修改密码的权限，这里方便大家测试页面方便，不能随意修改密码。</p><blockquote><p>测试账号：admin，密码：111111</p></blockquote><h3 id="退出登录"><a href="#退出登录" class="headerlink" title="退出登录"></a>退出登录</h3><p>退出登录操作，我的处理方式是将本地的 <code>token</code> 清除，并且回到登录页面，简单粗暴了一些，但也不失为一个解决方案。</p><p>在 <code>User/index.jsx</code> 下添加代码如下：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> User = <span class="hljs-function">() =&gt;</span> &#123;<br>  <span class="hljs-comment">// 退出登录</span><br>  <span class="hljs-keyword">const</span> logout = <span class="hljs-keyword">async</span> () =&gt; &#123;<br>    <span class="hljs-built_in">localStorage</span>.removeItem(<span class="hljs-string">&quot;token&quot;</span>);<br>    navigateTo(<span class="hljs-string">&quot;/login&quot;</span>);<br>  &#125;;<br><br>  <span class="hljs-keyword">return</span> (<br>    <span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">className</span>=<span class="hljs-string">&#123;s.user&#125;</span>&gt;</span></span><br><span class="xml">      ...</span><br><span class="xml">      <span class="hljs-tag">&lt;<span class="hljs-name">Button</span> <span class="hljs-attr">className</span>=<span class="hljs-string">&#123;s.logout&#125;</span> <span class="hljs-attr">block</span> <span class="hljs-attr">theme</span>=<span class="hljs-string">&quot;danger&quot;</span> <span class="hljs-attr">onClick</span>=<span class="hljs-string">&#123;logout&#125;</span>&gt;</span></span><br><span class="xml">        退出登录</span><br><span class="xml">      <span class="hljs-tag">&lt;/<span class="hljs-name">Button</span>&gt;</span></span><br><span class="xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>  );<br>&#125;;<br></code></pre></td></tr></table></figure><p>样式如下：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-class">.logout</span> &#123;<br>  <span class="hljs-attribute">width</span>: <span class="hljs-number">90%</span>;<br>  <span class="hljs-attribute">position</span>: absolute;<br>  <span class="hljs-attribute">bottom</span>: <span class="hljs-number">70px</span>;<br>  <span class="hljs-attribute">left</span>: <span class="hljs-number">50%</span>;<br>  <span class="hljs-attribute">transform</span>: <span class="hljs-built_in">translateX</span>(-<span class="hljs-number">50%</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p>通过绝对定位将按钮定位在底部，我们尝试点击它，如下所示：</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/502235db11294dad90861694845e5241~tplv-k3u1fbpfcp-zoom-in-crop-mark:3024:0:0:0.awebp" alt="img"></p><p>再次点击登录，发现没有自动前往首页，我们这里对登录页面进行修改，打开 <code>Login/index.jsx</code>，做如下修改：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> &#123; data &#125; = <span class="hljs-keyword">await</span> post(<span class="hljs-string">&quot;/api/user/login&quot;</span>, &#123;<br>  username,<br>  password,<br>&#125;);<br><span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;data&quot;</span>, data);<br><span class="hljs-built_in">localStorage</span>.setItem(<span class="hljs-string">&quot;token&quot;</span>, data.token);<br><span class="hljs-built_in">window</span>.location.href = <span class="hljs-string">&quot;/&quot;</span>;<br></code></pre></td></tr></table></figure><p>这里之所以用 <code>window.location.href</code> 的原因是，<code>utils/axios.js</code> 内部需要再次被执行，才能通过 <code>localStorage.getItem</code> 拿到最新的 <code>token</code>。如果只是用 <code>navigateTo</code> 跳转页面的话，页面是不会被刷新，那么 <code>axios.js</code> 的 <code>token</code> 就无法设置。</p>]]></content>
      
      
      
        <tags>
            
            <tag> react </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>118、稀土掘金小册-记账本（九） 账单可视化</title>
      <link href="/2023/01/28/118-react/"/>
      <url>/2023/01/28/118-react/</url>
      
        <content type="html"><![CDATA[<span id="more"></span><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>账单的操作部分在之前的章节已经结束了，本章节我们学习如何将账单列表，以可视化数据的新形势展示，本章节我们会通过 <code>Echart</code> 插件，对数据进行可视化展示。</p><p>页面布局和分析如下所示：</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/af9e832e388940eeade66dcf304a4eeb~tplv-k3u1fbpfcp-zoom-in-crop-mark:3024:0:0:0.awebp" alt="img"></p><h3 id="知识点"><a href="#知识点" class="headerlink" title="知识点"></a>知识点</h3><ul><li>Echart 引入和使用。</li><li>进度条组件 <code>Progress</code> 的使用。</li></ul><h2 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h2><h3 id="头部筛选和数据实现"><a href="#头部筛选和数据实现" class="headerlink" title="头部筛选和数据实现"></a>头部筛选和数据实现</h3><p>当你看到顶部的时间筛选项的时候，你会再一次体会到当初把时间筛选功能封装成公用组件的好处，于是我们打开 <code>Data/index.jsx</code>，添加如下代码：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">import</span> React, &#123; useEffect, useRef, useState &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;react&quot;</span>;<br><span class="hljs-keyword">import</span> &#123; Icon, Progress &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;zarm&quot;</span>;<br><span class="hljs-keyword">import</span> cx <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;classnames&quot;</span>;<br><span class="hljs-keyword">import</span> dayjs <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;dayjs&quot;</span>;<br><span class="hljs-keyword">import</span> &#123; get, typeMap &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;@/utils&quot;</span>;<br><span class="hljs-keyword">import</span> CustomIcon <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;@/components/CustomIcon&quot;</span>;<br><span class="hljs-keyword">import</span> PopupDate <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;@/components/PopupDate&quot;</span>;<br><span class="hljs-keyword">import</span> s <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;./style.module.less&quot;</span>;<br><br><span class="hljs-keyword">const</span> Data = <span class="hljs-function">() =&gt;</span> &#123;<br>  <span class="hljs-keyword">return</span> (<br>    <span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">className</span>=<span class="hljs-string">&#123;s.data&#125;</span>&gt;</span></span><br><span class="xml">      <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">className</span>=<span class="hljs-string">&#123;s.total&#125;</span>&gt;</span></span><br><span class="xml">        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">className</span>=<span class="hljs-string">&#123;s.time&#125;</span>&gt;</span></span><br><span class="xml">          <span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>2021-06<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span></span><br><span class="xml">          <span class="hljs-tag">&lt;<span class="hljs-name">Icon</span> <span class="hljs-attr">className</span>=<span class="hljs-string">&#123;s.date&#125;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;date&quot;</span> /&gt;</span></span><br><span class="xml">        <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="xml">        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">className</span>=<span class="hljs-string">&#123;s.title&#125;</span>&gt;</span>共支出<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="xml">        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">className</span>=<span class="hljs-string">&#123;s.expense&#125;</span>&gt;</span>¥1000<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="xml">        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">className</span>=<span class="hljs-string">&#123;s.income&#125;</span>&gt;</span>共收入¥200<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="xml">      <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>  );<br>&#125;;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> Data;<br></code></pre></td></tr></table></figure><p>头部的一些引入是为后面的代码所用，在这里事先引入，避免后面重复出现。</p><p>上述代码为头部统计的页面布局，同样采用的 <code>flex</code> 布局，样式部分如下：</p><blockquote><p>文末已为同学们提供下本章节 demo 代码，样式部分不再详细说明。</p></blockquote><p>样式部分有一个小技巧需要注意，日期后面的小竖线，如下所示：</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/c98a98ee5aee44af8f5361ce8f144eda~tplv-k3u1fbpfcp-zoom-in-crop-mark:3024:0:0:0.awebp" alt="img"></p><p>在业务中，类似这样的需求非常多，这里我们可以使用伪类 <code>::before</code> 或 <code>::after</code> 去实现，减少在页面中再添加一些多余的标签。上述代码实现的逻辑是在日期的 <code>span</code> 上加上 <code>::after</code>，如下所示：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-tag">span</span><span class="hljs-selector-pseudo">:nth-of-type</span>(<span class="hljs-number">1</span>)<span class="hljs-selector-pseudo">::after</span> &#123;<br>  <span class="hljs-attribute">content</span>: <span class="hljs-string">&quot;&quot;</span>;<br>  <span class="hljs-attribute">position</span>: absolute;<br>  <span class="hljs-attribute">top</span>: <span class="hljs-number">9px</span>;<br>  <span class="hljs-attribute">bottom</span>: <span class="hljs-number">8px</span>;<br>  <span class="hljs-attribute">right</span>: <span class="hljs-number">28px</span>;<br>  <span class="hljs-attribute">width</span>: <span class="hljs-number">1px</span>;<br>  <span class="hljs-attribute">background-color</span>: <span class="hljs-built_in">rgba</span>(<span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0.5</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p>给一个空的 <code>content</code>，再给上 <code>1px</code> 的宽度，颜色和上下距离可以根据需求调整。</p><p>苦口婆心的我再次强调，<code>flex</code> 布局的重要性，一定要把它吃透，至少在布局的时候，你可以灵活的运用横竖布局。</p><p>点击如期按钮，弹出底部弹窗，这里使用到了之前写好的 <code>PopupDate</code> 组件，代码如下：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> Data = <span class="hljs-function">() =&gt;</span> &#123;<br>  <span class="hljs-keyword">const</span> monthRef = useRef();<br>  <span class="hljs-keyword">const</span> [currentMonth, setCurrentMonth] = useState(dayjs().format(<span class="hljs-string">&quot;YYYY-MM&quot;</span>));<br><br>  <span class="hljs-comment">// 月份弹窗开关</span><br>  <span class="hljs-keyword">const</span> monthShow = <span class="hljs-function">() =&gt;</span> &#123;<br>    monthRef.current &amp;&amp; monthRef.current.show();<br>  &#125;;<br><br>  <span class="hljs-keyword">const</span> selectMonth = <span class="hljs-function">(<span class="hljs-params">item</span>) =&gt;</span> &#123;<br>    setCurrentMonth(item);<br>  &#125;;<br><br>  <span class="hljs-keyword">return</span> (<br>    <span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">className</span>=<span class="hljs-string">&#123;s.data&#125;</span>&gt;</span></span><br><span class="xml">      <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">className</span>=<span class="hljs-string">&#123;s.total&#125;</span>&gt;</span></span><br><span class="xml">        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">className</span>=<span class="hljs-string">&#123;s.time&#125;</span> <span class="hljs-attr">onClick</span>=<span class="hljs-string">&#123;monthShow&#125;</span>&gt;</span></span><br><span class="xml">          <span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>&#123;currentMonth&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span></span><br><span class="xml">          <span class="hljs-tag">&lt;<span class="hljs-name">Icon</span> <span class="hljs-attr">className</span>=<span class="hljs-string">&#123;s.date&#125;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;date&quot;</span> /&gt;</span></span><br><span class="xml">        <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="xml">        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">className</span>=<span class="hljs-string">&#123;s.title&#125;</span>&gt;</span>共支出<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="xml">        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">className</span>=<span class="hljs-string">&#123;s.expense&#125;</span>&gt;</span>¥1000<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="xml">        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">className</span>=<span class="hljs-string">&#123;s.income&#125;</span>&gt;</span>共收入¥200<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="xml">      <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="xml">      <span class="hljs-tag">&lt;<span class="hljs-name">PopupDate</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&#123;monthRef&#125;</span> <span class="hljs-attr">mode</span>=<span class="hljs-string">&quot;month&quot;</span> <span class="hljs-attr">onSelect</span>=<span class="hljs-string">&#123;selectMonth&#125;</span> /&gt;</span></span><br><span class="xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>  );<br>&#125;;<br></code></pre></td></tr></table></figure><p>给日期按钮添加 <code>monthShow</code> 点击事件，调出 <code>PopupDate</code> 弹窗。并且，通过 <code>selectMonth</code> 方法，设置好选择的月份，展示于页面之上。效果如下所示：</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/34f85185a5934aaba55e13a58d3bdfdd~tplv-k3u1fbpfcp-zoom-in-crop-mark:3024:0:0:0.awebp" alt="img"></p><h3 id="账单单项排名制作"><a href="#账单单项排名制作" class="headerlink" title="账单单项排名制作"></a>账单单项排名制作</h3><p>我们将账单排名部分的结构搭建出来，通过请求数据接口，将数据展示在页面上，代码如下：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> Data = <span class="hljs-function">() =&gt;</span> &#123;<br>  ...<br>  <span class="hljs-keyword">const</span> [totalType, setTotalType] = useState(<span class="hljs-string">&#x27;expense&#x27;</span>); <span class="hljs-comment">// 收入或支出类型</span><br>  <span class="hljs-keyword">const</span> [totalExpense, setTotalExpense] = useState(<span class="hljs-number">0</span>); <span class="hljs-comment">// 总支出</span><br>  <span class="hljs-keyword">const</span> [totalIncome, setTotalIncome] = useState(<span class="hljs-number">0</span>); <span class="hljs-comment">// 总收入</span><br>  <span class="hljs-keyword">const</span> [expenseData, setExpenseData] = useState([]); <span class="hljs-comment">// 支出数据</span><br>  <span class="hljs-keyword">const</span> [incomeData, setIncomeData] = useState([]); <span class="hljs-comment">// 收入数据</span><br><br>  useEffect(<span class="hljs-function">() =&gt;</span> &#123;<br>    getData()<br>  &#125;, [currentMonth]);<br><br>  <span class="hljs-comment">// 获取数据详情</span><br>  <span class="hljs-keyword">const</span> getData = <span class="hljs-keyword">async</span> () =&gt; &#123;<br>    <span class="hljs-keyword">const</span> &#123; data &#125; = <span class="hljs-keyword">await</span> get(<span class="hljs-string">`/api/bill/data?date=<span class="hljs-subst">$&#123;currentMonth&#125;</span>`</span>);<br><br>    <span class="hljs-comment">// 总收支</span><br>    setTotalExpense(data.total_expense);<br>    setTotalIncome(data.total_income);<br><br>    <span class="hljs-comment">// 过滤支出和收入</span><br>    <span class="hljs-keyword">const</span> expense_data = data.total_data.filter(<span class="hljs-function"><span class="hljs-params">item</span> =&gt;</span> item.pay_type == <span class="hljs-number">1</span>).sort(<span class="hljs-function">(<span class="hljs-params">a, b</span>) =&gt;</span> b.number - a.number); <span class="hljs-comment">// 过滤出账单类型为支出的项</span><br>    <span class="hljs-keyword">const</span> income_data = data.total_data.filter(<span class="hljs-function"><span class="hljs-params">item</span> =&gt;</span> item.pay_type == <span class="hljs-number">2</span>).sort(<span class="hljs-function">(<span class="hljs-params">a, b</span>) =&gt;</span> b.number - a.number); <span class="hljs-comment">// 过滤出账单类型为收入的项</span><br>    setExpenseData(expense_data);<br>    setIncomeData(income_data);<br>  &#125;;<br><br>  <span class="hljs-keyword">return</span> <span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">className</span>=<span class="hljs-string">&#123;s.data&#125;</span>&gt;</span></span><br><span class="xml">    ...</span><br><span class="xml">    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">className</span>=<span class="hljs-string">&#123;s.structure&#125;</span>&gt;</span></span><br><span class="xml">      <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">className</span>=<span class="hljs-string">&#123;s.head&#125;</span>&gt;</span></span><br><span class="xml">        <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">className</span>=<span class="hljs-string">&#123;s.title&#125;</span>&gt;</span>收支构成<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span></span><br><span class="xml">        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">className</span>=<span class="hljs-string">&#123;s.tab&#125;</span>&gt;</span></span><br><span class="xml">          <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">onClick</span>=<span class="hljs-string">&#123;()</span> =&gt;</span> changeTotalType(&#x27;expense&#x27;)&#125; className=&#123;cx(&#123; [s.expense]: true, [s.active]: totalType == &#x27;expense&#x27; &#125;)&#125;&gt;支出<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span></span><br><span class="xml">          <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">onClick</span>=<span class="hljs-string">&#123;()</span> =&gt;</span> changeTotalType(&#x27;income&#x27;)&#125; className=&#123;cx(&#123; [s.income]: true, [s.active]: totalType == &#x27;income&#x27; &#125;)&#125;&gt;收入<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span></span><br><span class="xml">        <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="xml">      <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="xml">      <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">className</span>=<span class="hljs-string">&#123;s.content&#125;</span>&gt;</span></span><br><span class="xml">        &#123;</span><br><span class="xml">          (totalType == &#x27;expense&#x27; ? expenseData : incomeData).map(item =&gt; <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">key</span>=<span class="hljs-string">&#123;item.type_id&#125;</span> <span class="hljs-attr">className</span>=<span class="hljs-string">&#123;s.item&#125;</span>&gt;</span></span><br><span class="xml">            <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">className</span>=<span class="hljs-string">&#123;s.left&#125;</span>&gt;</span></span><br><span class="xml">              <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">className</span>=<span class="hljs-string">&#123;s.type&#125;</span>&gt;</span></span><br><span class="xml">                <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">className</span>=<span class="hljs-string">&#123;cx(&#123;</span> [<span class="hljs-attr">s.expense</span>]<span class="hljs-attr">:</span> <span class="hljs-attr">totalType</span> == <span class="hljs-string">&#x27;expense&#x27;</span>, [<span class="hljs-attr">s.income</span>]<span class="hljs-attr">:</span> <span class="hljs-attr">totalType</span> == <span class="hljs-string">&#x27;income&#x27;</span> &#125;)&#125;&gt;</span></span><br><span class="xml">                  <span class="hljs-tag">&lt;<span class="hljs-name">CustomIcon</span></span></span><br><span class="hljs-tag"><span class="xml">                    <span class="hljs-attr">type</span>=<span class="hljs-string">&#123;item.type_id</span> ? <span class="hljs-attr">typeMap</span>[<span class="hljs-attr">item.type_id</span>]<span class="hljs-attr">.icon</span> <span class="hljs-attr">:</span> <span class="hljs-attr">1</span>&#125;</span></span><br><span class="hljs-tag"><span class="xml">                  /&gt;</span></span><br><span class="xml">                <span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span></span><br><span class="xml">                <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">className</span>=<span class="hljs-string">&#123;s.name&#125;</span>&gt;</span>&#123; item.type_name &#125;<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span></span><br><span class="xml">              <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="xml">              <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">className</span>=<span class="hljs-string">&#123;s.progress&#125;</span>&gt;</span>¥&#123; Number(item.number).toFixed(2) || 0 &#125;<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="xml">            <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="xml">            <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">className</span>=<span class="hljs-string">&#123;s.right&#125;</span>&gt;</span></span><br><span class="xml">              <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">className</span>=<span class="hljs-string">&#123;s.percent&#125;</span>&gt;</span></span><br><span class="xml">                <span class="hljs-tag">&lt;<span class="hljs-name">Progress</span></span></span><br><span class="hljs-tag"><span class="xml">                  <span class="hljs-attr">shape</span>=<span class="hljs-string">&quot;line&quot;</span></span></span><br><span class="hljs-tag"><span class="xml">                  <span class="hljs-attr">percent</span>=<span class="hljs-string">&#123;Number((item.number</span> / <span class="hljs-attr">Number</span>(<span class="hljs-attr">totalType</span> == <span class="hljs-string">&#x27;expense&#x27;</span> ? <span class="hljs-attr">totalExpense</span> <span class="hljs-attr">:</span> <span class="hljs-attr">totalIncome</span>)) * <span class="hljs-attr">100</span>)<span class="hljs-attr">.toFixed</span>(<span class="hljs-attr">2</span>)&#125;</span></span><br><span class="hljs-tag"><span class="xml">                  <span class="hljs-attr">theme</span>=<span class="hljs-string">&#x27;primary&#x27;</span></span></span><br><span class="hljs-tag"><span class="xml">                /&gt;</span></span><br><span class="xml">              <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="xml">            <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="xml">          <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>)</span><br><span class="xml">        &#125;</span><br><span class="xml">      <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="xml">    ...</span><br><span class="xml">  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>&#125;<br></code></pre></td></tr></table></figure><p>上述是账单排名部分的代码部分，通过 <code>getData</code> 方法获取账单数据，接口字段分析：</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/139ab1e147bb4fd2a30d543b7e445b82~tplv-k3u1fbpfcp-zoom-in-crop-mark:3024:0:0:0.awebp" alt="img"></p><p>首先我们需要传递日期参数 <code>date</code>，才能正常获取该月份的数据。</p><ul><li>number: 账单金额。</li><li>pay_type：账单类型，1 为支出，2 为收入。</li><li>type_id：账单种类 id。</li><li>type_name：账单种类名称，如购物、交通、医疗等。</li></ul><p>并将数据进行二次处理，将「收入」和「支出」分成两个数组保存。</p><p>通过 <code>changeTotalType</code> 方法，切换展示「收入」或「支出」。</p><p>通过对 <code>Progress</code> 组件的样式二次修改，样式代码如下：</p><blockquote><p>文末已为同学们提供下本章节 demo 代码，样式部分不再详细说明。</p></blockquote><p>将组件展示效果改成如下所示：</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/d660fe020efb419394c6951253775124~tplv-k3u1fbpfcp-zoom-in-crop-mark:3024:0:0:0.awebp" alt="img"></p><h3 id="饼图制作"><a href="#饼图制作" class="headerlink" title="饼图制作"></a>饼图制作</h3><p>接下来我们尝试引入 <code>Echart</code>，我们不通过 <code>npm</code> 引入它，我们尝试引入它的静态资源，找到根目录下的 <code>index.html</code>，添加如下代码：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs js">&lt;!DOCTYPE html&gt;<br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span></span><br><span class="xml">  <span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span></span><br><span class="xml">    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span> /&gt;</span></span><br><span class="xml">    <span class="hljs-tag">&lt;<span class="hljs-name">link</span> <span class="hljs-attr">rel</span>=<span class="hljs-string">&quot;icon&quot;</span> <span class="hljs-attr">sizes</span>=<span class="hljs-string">&quot;32x32&quot;</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-assets/favicons/v2/favicon-32x32.png~tplv-t2oaga2asx-image.image&quot;</span>&gt;</span></span><br><span class="xml">    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;viewport&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;width=device-width, initial-scale=1.0&quot;</span> /&gt;</span></span><br><span class="xml">    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>掘掘手札<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span></span><br><span class="xml">  <span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span></span><br><span class="xml">  <span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span></span><br><span class="xml">    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;root&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="xml">    <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;//s.yezgea02.com/1609305532675/echarts.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br><span class="xml">    <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;module&quot;</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;/src/main.jsx&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br><span class="xml">  <span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span></span><br></code></pre></td></tr></table></figure><p>这种引入方式，不会将 <code>echart</code> 打包到最终的入口脚本里。有同学会说可以按需引入，但是就算是按需引入，脚本也会变得很大，本身 <code>echart</code> 这类可视化工具库就非常大，因为内部使用了大量绘制图形的代码。</p><p>完成上述操作之后，我们尝试在 <code>/Data/index.jsx</code> 添加如下代码：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">let</span> proportionChart = <span class="hljs-literal">null</span>; <span class="hljs-comment">// 用于存放 echart 初始化返回的实例</span><br><br><span class="hljs-keyword">const</span> Data = <span class="hljs-function">() =&gt;</span> &#123;<br>  ...<br>  <span class="hljs-keyword">const</span> [pieType, setPieType] = useState(<span class="hljs-string">&#x27;expense&#x27;</span>); <span class="hljs-comment">// 饼图的「收入」和「支出」控制</span><br><br>  useEffect(<span class="hljs-function">() =&gt;</span> &#123;<br>    getData();<br>    <span class="hljs-keyword">return</span> <span class="hljs-function">() =&gt;</span> &#123;<br>      <span class="hljs-comment">// 每次组件卸载的时候，需要释放图表实例。clear 只是将其清空不会释放。</span><br>      proportionChart.dispose();<br>    &#125;;<br>  &#125;, [currentMonth]);<br><br>  <span class="hljs-comment">// 绘制饼图方法</span><br>  <span class="hljs-keyword">const</span> setPieChart = <span class="hljs-function">(<span class="hljs-params">data</span>) =&gt;</span> &#123;<br>    <span class="hljs-keyword">if</span> (<span class="hljs-built_in">window</span>.echarts) &#123;<br>      <span class="hljs-comment">// 初始化饼图，返回实例。</span><br>      proportionChart = echarts.init(<span class="hljs-built_in">document</span>.getElementById(<span class="hljs-string">&#x27;proportion&#x27;</span>));<br>      proportionChart.setOption(&#123;<br>          <span class="hljs-attr">tooltip</span>: &#123;<br>            <span class="hljs-attr">trigger</span>: <span class="hljs-string">&#x27;item&#x27;</span>,<br>            <span class="hljs-attr">formatter</span>: <span class="hljs-string">&#x27;&#123;a&#125; &lt;br/&gt;&#123;b&#125; : &#123;c&#125; (&#123;d&#125;%)&#x27;</span><br>          &#125;,<br>          <span class="hljs-comment">// 图例</span><br>          <span class="hljs-attr">legend</span>: &#123;<br>              <span class="hljs-attr">data</span>: data.map(<span class="hljs-function"><span class="hljs-params">item</span> =&gt;</span> item.type_name)<br>          &#125;,<br>          <span class="hljs-attr">series</span>: [<br>            &#123;<br>              <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;支出&#x27;</span>,<br>              <span class="hljs-attr">type</span>: <span class="hljs-string">&#x27;pie&#x27;</span>,<br>              <span class="hljs-attr">radius</span>: <span class="hljs-string">&#x27;55%&#x27;</span>,<br>              <span class="hljs-attr">data</span>: data.map(<span class="hljs-function"><span class="hljs-params">item</span> =&gt;</span> &#123;<br>                <span class="hljs-keyword">return</span> &#123;<br>                  <span class="hljs-attr">value</span>: item.number,<br>                  <span class="hljs-attr">name</span>: item.type_name<br>                &#125;<br>              &#125;),<br>              <span class="hljs-attr">emphasis</span>: &#123;<br>                <span class="hljs-attr">itemStyle</span>: &#123;<br>                  <span class="hljs-attr">shadowBlur</span>: <span class="hljs-number">10</span>,<br>                  <span class="hljs-attr">shadowOffsetX</span>: <span class="hljs-number">0</span>,<br>                  <span class="hljs-attr">shadowColor</span>: <span class="hljs-string">&#x27;rgba(0, 0, 0, 0.5)&#x27;</span><br>                &#125;<br>              &#125;<br>            &#125;<br>          ]<br>      &#125;)<br>    &#125;;<br>  &#125;;<br><br>  <span class="hljs-comment">// 获取数据详情</span><br>  <span class="hljs-keyword">const</span> getData = <span class="hljs-keyword">async</span> () =&gt; &#123;<br>    <span class="hljs-comment">// ...</span><br>    <span class="hljs-comment">// 绘制饼图</span><br>    setPieChart(pieType == <span class="hljs-string">&#x27;expense&#x27;</span> ? expense_data : income_data);<br>  &#125;;<br><br>  <span class="hljs-comment">// 切换饼图收支类型</span><br>  <span class="hljs-keyword">const</span> changePieType = <span class="hljs-function">(<span class="hljs-params">type</span>) =&gt;</span> &#123;<br>    setPieType(type);<br>    <span class="hljs-comment">// 重绘饼图</span><br>    setPieChart(type == <span class="hljs-string">&#x27;expense&#x27;</span> ? expenseData : incomeData);<br>  &#125;<br><br>  <span class="hljs-keyword">return</span> <span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">className</span>=<span class="hljs-string">&#123;s.data&#125;</span>&gt;</span></span><br><span class="xml">    ...</span><br><span class="xml">    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">className</span>=<span class="hljs-string">&#123;s.structure&#125;</span>&gt;</span></span><br><span class="xml">      <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">className</span>=<span class="hljs-string">&#123;s.proportion&#125;</span>&gt;</span></span><br><span class="xml">        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">className</span>=<span class="hljs-string">&#123;s.head&#125;</span>&gt;</span></span><br><span class="xml">          <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">className</span>=<span class="hljs-string">&#123;s.title&#125;</span>&gt;</span>收支构成<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span></span><br><span class="xml">          <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">className</span>=<span class="hljs-string">&#123;s.tab&#125;</span>&gt;</span></span><br><span class="xml">            <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">onClick</span>=<span class="hljs-string">&#123;()</span> =&gt;</span> changePieType(&#x27;expense&#x27;)&#125; className=&#123;cx(&#123; [s.expense]: true, [s.active]: pieType == &#x27;expense&#x27;  &#125;)&#125;&gt;支出<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span></span><br><span class="xml">            <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">onClick</span>=<span class="hljs-string">&#123;()</span> =&gt;</span> changePieType(&#x27;income&#x27;)&#125; className=&#123;cx(&#123; [s.income]: true, [s.active]: pieType == &#x27;income&#x27;  &#125;)&#125;&gt;收入<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span></span><br><span class="xml">          <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="xml">        <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="xml">        &#123;/* 这是用于放置饼图的 DOM 节点 */&#125;</span><br><span class="xml">        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;proportion&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="xml">      <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="xml">  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>&#125;<br></code></pre></td></tr></table></figure><p>切换饼图「收入」和「支出」这里，我使用了一个小技巧，每次调用 <code>setPieChart</code> 的时候，会将数据重新传入，此时的数据是经过 <code>changePieType</code> 接收的参数进行筛选的，如果形参 <code>type</code> 的值为 <code>expense</code>，那么给 <code>setPieChart</code> 传的参数为 <code>expenseData</code>，反之则为 <code>incomeData</code>。</p><p>注意，在页面销毁前，需要将实例清除。在 <code>useEffect</code> 内 <code>return</code> 一个函数，该函数就是在组件销毁时执行，在函数内部执行 <code>proportionChart.dispose();</code> 对实例进行销毁操作。</p><p>最后，我们将头部的数据补上，如下所示：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">className</span>=<span class="hljs-string">&quot;&#123;s.expense&#125;&quot;</span>&gt;</span>¥&#123; totalExpense &#125;<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">className</span>=<span class="hljs-string">&quot;&#123;s.income&#125;&quot;</span>&gt;</span>共收入¥&#123; totalIncome &#125;<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></td></tr></table></figure><p>浏览器展示如下：</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/f1509f4c80c0429ebcd09d5c91144631~tplv-k3u1fbpfcp-zoom-in-crop-mark:3024:0:0:0.awebp" alt="img"></p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>可视化的形式还有很多，相关的可视化库有 three.js、d3.js、highchart.js 等等，这些内容都值得你去深入，但是在此之前，希望同学们能明确自己希望深入那一方面的知识，进行深度学习。比如张鑫旭大神，对 <code>CSS</code> 的研究，入骨三分，我相信业务无人出其右。所以找准方向，往前冲。</p><p><img src="https://lf3-cdn-tos.bytescm.com/obj/static/xitu_juejin_web/img/jj_emoji_67.9ceed33.png" alt="[嘿哈]"></p>]]></content>
      
      
      
        <tags>
            
            <tag> react </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>117、稀土掘金小册-记账本（八） 账单详情</title>
      <link href="/2023/01/21/117-react/"/>
      <url>/2023/01/21/117-react/</url>
      
        <content type="html"><![CDATA[<span id="more"></span><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>账单模块还剩最后一个小节，账单详情。账单详情页要做的事情有两个，一个是编辑当前账单操作，另一个是删除当前账单操作，我们先来观察完成后页面结构，如下所示：</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/cd8a2c4723fb4bbdbde0695d55e6bd92~tplv-k3u1fbpfcp-zoom-in-crop-mark:3024:0:0:0.awebp" alt="img"></p><p>这里是第一次涉及内页，所以我们需要制作一个公用的头部 <code>Header</code>，支持传参接收 <code>title</code> 信息。我们在上一章节提取的「添加账单弹窗组件」，在这里派上了用场，新增和编辑是一家，唯一的差别就是编辑的时候，需要传入当前账单的 <code>id</code> 给「添加账单组件」，组件内通过账单详情接口，获取账单详情，并将获取的参数用于各个字段初始化值，这就实现了组件的复用。</p><h3 id="知识点"><a href="#知识点" class="headerlink" title="知识点"></a>知识点</h3><ul><li>封装公用头部组件</li><li>复用添加账单弹窗组件</li></ul><h2 id="正文开始"><a href="#正文开始" class="headerlink" title="正文开始"></a>正文开始</h2><h3 id="公用头部"><a href="#公用头部" class="headerlink" title="公用头部"></a>公用头部</h3><p>在 <code>components</code> 目录下新建 <code>Header</code> 目录，老规矩，添加两个文件 <code>index.jsx</code> 和 <code>style.module.less</code>。</p><p>为 <code>Header/index.jsx</code> 添加代码如下：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">import</span> React <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;react&quot;</span>;<br><span class="hljs-keyword">import</span> PropTypes <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;prop-types&quot;</span>;<br><span class="hljs-keyword">import</span> &#123; useNavigate &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;react-router-dom&quot;</span>;<br><span class="hljs-keyword">import</span> &#123; NavBar, Icon &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;zarm&quot;</span>;<br><br><span class="hljs-keyword">import</span> s <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;./style.module.less&quot;</span>;<br><br><span class="hljs-keyword">const</span> Header = <span class="hljs-function">(<span class="hljs-params">&#123; title = <span class="hljs-string">&quot;&quot;</span> &#125;</span>) =&gt;</span> &#123;<br>  <span class="hljs-keyword">const</span> navigateTo = useNavigate();<br>  <span class="hljs-keyword">return</span> (<br>    <span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">className</span>=<span class="hljs-string">&#123;s.headerWarp&#125;</span>&gt;</span></span><br><span class="xml">      <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">className</span>=<span class="hljs-string">&#123;s.block&#125;</span>&gt;</span></span><br><span class="xml">        <span class="hljs-tag">&lt;<span class="hljs-name">NavBar</span></span></span><br><span class="hljs-tag"><span class="xml">          <span class="hljs-attr">className</span>=<span class="hljs-string">&#123;s.header&#125;</span></span></span><br><span class="hljs-tag"><span class="xml">          <span class="hljs-attr">left</span>=<span class="hljs-string">&#123;</span></span></span><br><span class="hljs-tag"><span class="xml">            &lt;<span class="hljs-attr">Icon</span></span></span><br><span class="hljs-tag"><span class="xml">              <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;arrow-left&quot;</span></span></span><br><span class="hljs-tag"><span class="xml">              <span class="hljs-attr">theme</span>=<span class="hljs-string">&quot;primary&quot;</span></span></span><br><span class="hljs-tag"><span class="xml">              <span class="hljs-attr">onClick</span>=<span class="hljs-string">&#123;()</span> =&gt;</span> navigateTo(-1)&#125;</span><br><span class="xml">            /&gt;</span><br><span class="xml">          &#125;</span><br><span class="xml">          title=&#123;title&#125;</span><br><span class="xml">        /&gt;</span><br><span class="xml">      <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>  );<br>&#125;;<br><br>Header.propTypes = &#123;<br>  <span class="hljs-attr">title</span>: PropTypes.string, <span class="hljs-comment">// 标题</span><br>&#125;;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> Header;<br></code></pre></td></tr></table></figure><p>我们采用 <code>Zarm</code> 组件库为我们提供的 <code>NavBar</code> 组件，实现头部的组件布局。为左边的返回箭头添加一个事件，<code>navigateTo(-1)</code> 的作用是路由返回事件，它不会触发浏览器的刷新，而是改变浏览器的地址栏，让组件匹配地址栏对应的地址组件。</p><p>还有一点要提醒大家，写公用组件一定要写 <code>PropTypes</code>，这是让其他使用该组件的同事知道，你这个组件接受的参数有哪些，以及每个参数的作用是什么，都要注释清楚，这才是一个好的公用组件。我见过很多同事写公用组件都不写 <code>PropTypes</code>，这让使用者非常头大。</p><p><strong>CSS 样式代码</strong></p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-class">.header-warp</span> &#123;<br>  <span class="hljs-attribute">border-bottom</span>: <span class="hljs-number">1px</span> solid <span class="hljs-number">#e9e9e9</span>;<br>  <span class="hljs-selector-class">.block</span> &#123;<br>    <span class="hljs-attribute">width</span>: <span class="hljs-number">100%</span>;<br>    <span class="hljs-attribute">height</span>: <span class="hljs-number">46px</span>;<br>    :global &#123;<br>      .za-nav-bar__title &#123;<br>        font-size: <span class="hljs-number">14px</span>;<br>        <span class="hljs-attribute">color</span>: <span class="hljs-built_in">rgba</span>(<span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0.9</span>);<br>      &#125;<br>      <span class="hljs-selector-class">.za-icon--arrow-left</span> &#123;<br>        <span class="hljs-attribute">font-size</span>: <span class="hljs-number">20px</span>;<br>      &#125;<br>    &#125;<br>  &#125;<br>  <span class="hljs-selector-class">.header</span> &#123;<br>    <span class="hljs-attribute">position</span>: fixed;<br>    <span class="hljs-attribute">top</span>: <span class="hljs-number">0</span>;<br>    <span class="hljs-attribute">left</span>: <span class="hljs-number">0</span>;<br>    <span class="hljs-attribute">width</span>: <span class="hljs-number">100%</span>;<br>    <span class="hljs-selector-class">.more</span> &#123;<br>      <span class="hljs-attribute">font-size</span>: <span class="hljs-number">20px</span>;<br>    &#125;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>完成上述代码之后，我们需要在 <code>container/Detail/index.jsx</code> 下引入这个公用头部，代码如下：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">import</span> React <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;react&quot;</span>;<br><span class="hljs-keyword">import</span> Header <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;@/components/Header&quot;</span>;<br><br><span class="hljs-keyword">import</span> s <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;./style.module.less&quot;</span>;<br><br><span class="hljs-keyword">const</span> Detail = <span class="hljs-function">() =&gt;</span> &#123;<br>  <span class="hljs-keyword">return</span> (<br>    <span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">className</span>=<span class="hljs-string">&#123;s.detail&#125;</span>&gt;</span></span><br><span class="xml">      <span class="hljs-tag">&lt;<span class="hljs-name">Header</span> <span class="hljs-attr">title</span>=<span class="hljs-string">&quot;账单详情&quot;</span> /&gt;</span></span><br><span class="xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>  );<br>&#125;;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> Detail;<br></code></pre></td></tr></table></figure><p>效果如下所示：</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/4711827eba5141a2822bbde2237032d9~tplv-k3u1fbpfcp-zoom-in-crop-mark:3024:0:0:0.awebp" alt="img"></p><h3 id="账单明细"><a href="#账单明细" class="headerlink" title="账单明细"></a>账单明细</h3><p>接下来，我们通过列表页传入的浏览器查询字符串，通俗的将就是浏览器地址栏上的参数，来获取该笔账单的详情，如下所示：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// container/Detail/index.jsx</span><br><span class="hljs-keyword">import</span> React, &#123; useEffect, useState &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;react&quot;</span>;<br><span class="hljs-keyword">import</span> &#123; useLocation &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;react-router-dom&quot;</span>;<br><span class="hljs-keyword">import</span> qs <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;query-string&quot;</span>;<br><span class="hljs-keyword">import</span> Header <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;@/components/Header&quot;</span>;<br><span class="hljs-keyword">import</span> &#123; get &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;@/utils&quot;</span>;<br><br><span class="hljs-keyword">import</span> s <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;./style.module.less&quot;</span>;<br><br><span class="hljs-keyword">const</span> Detail = <span class="hljs-function">() =&gt;</span> &#123;<br>  <span class="hljs-keyword">const</span> location = useLocation(); <span class="hljs-comment">// 获取 locaton 实例，我们可以通过打印查看内部都有些什么内容。</span><br>  <span class="hljs-keyword">const</span> &#123; id &#125; = qs.parse(location.search);<br><br>  <span class="hljs-keyword">const</span> [detail, setDetail] = useState(&#123;&#125;);<br><br>  <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;location&quot;</span>, location);<br><br>  useEffect(<span class="hljs-function">() =&gt;</span> &#123;<br>    getDetail();<br>  &#125;, []);<br><br>  <span class="hljs-keyword">const</span> getDetail = <span class="hljs-keyword">async</span> () =&gt; &#123;<br>    <span class="hljs-keyword">const</span> &#123; data &#125; = <span class="hljs-keyword">await</span> get(<span class="hljs-string">`/api/bill/detail?id=<span class="hljs-subst">$&#123;id&#125;</span>`</span>);<br>    setDetail(data);<br>  &#125;;<br>  <span class="hljs-keyword">return</span> (<br>    <span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">className</span>=<span class="hljs-string">&#123;s.detail&#125;</span>&gt;</span></span><br><span class="xml">      <span class="hljs-tag">&lt;<span class="hljs-name">Header</span> <span class="hljs-attr">title</span>=<span class="hljs-string">&quot;账单详情&quot;</span> /&gt;</span></span><br><span class="xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>  );<br>&#125;;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> Detail;<br></code></pre></td></tr></table></figure><p>我们先来看看，浏览器控制台打印出的 <code>location</code> 如下所示：</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/8ec916d9afd2477680bd98f0ac24a052~tplv-k3u1fbpfcp-zoom-in-crop-mark:3024:0:0:0.awebp" alt="img"></p><p>可以看到，我们想要的参数在 <code>search</code> 属性中，我想把 <code>?id=917</code> 转换成 <code>json</code> 键值对的形式，如：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs json">&#123;<br>  <span class="hljs-attr">&quot;id&quot;</span>: <span class="hljs-number">917</span><br>&#125;<br></code></pre></td></tr></table></figure><p>所以我通过 <code>npm install query-string</code> 引入了查询字符串解析的一个插件，通过如下方式：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js">qs.parse(location.search);<br></code></pre></td></tr></table></figure><p>可以将浏览器查询参数变成一个对象形式，所以我们在代码中可以通过 <code>const</code> 的解构，将 <code>id</code> 取出。最后通过 <code>get</code> 方法请求详情接口：</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/fa5910c717994f729e744328c2cf2517~tplv-k3u1fbpfcp-zoom-in-crop-mark:3024:0:0:0.awebp" alt="img"></p><p>接下来，我们给账单明细部分布局，并且将数据接入，代码如下所示：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">import</span> React, &#123; useEffect, useState &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;react&quot;</span>;<br><span class="hljs-keyword">import</span> &#123; useLocation &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;react-router-dom&quot;</span>;<br><span class="hljs-keyword">import</span> qs <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;query-string&quot;</span>;<br><span class="hljs-keyword">import</span> dayjs <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;dayjs&quot;</span>;<br><span class="hljs-keyword">import</span> cx <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;classnames&quot;</span>;<br><span class="hljs-keyword">import</span> Header <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;@/components/Header&quot;</span>;<br><span class="hljs-keyword">import</span> CustomIcon <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;@/components/CustomIcon&quot;</span>;<br><span class="hljs-keyword">import</span> &#123; get, typeMap &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;@/utils&quot;</span>;<br><br><span class="hljs-keyword">import</span> s <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;./style.module.less&quot;</span>;<br><br><span class="hljs-keyword">const</span> Detail = <span class="hljs-function">() =&gt;</span> &#123;<br>  <span class="hljs-keyword">const</span> location = useLocation(); <span class="hljs-comment">// 路由 location 实例</span><br>  <span class="hljs-keyword">const</span> &#123; id &#125; = qs.parse(location.search); <span class="hljs-comment">// 查询字符串反序列化</span><br><br>  <span class="hljs-keyword">const</span> [detail, setDetail] = useState(&#123;&#125;); <span class="hljs-comment">// 订单详情数据</span><br><br>  useEffect(<span class="hljs-function">() =&gt;</span> &#123;<br>    getDetail();<br>  &#125;, []);<br><br>  <span class="hljs-keyword">const</span> getDetail = <span class="hljs-keyword">async</span> () =&gt; &#123;<br>    <span class="hljs-keyword">const</span> &#123; data &#125; = <span class="hljs-keyword">await</span> get(<span class="hljs-string">`/api/bill/detail?id=<span class="hljs-subst">$&#123;id&#125;</span>`</span>);<br>    setDetail(data);<br>  &#125;;<br>  <span class="hljs-keyword">return</span> (<br>    <span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">className</span>=<span class="hljs-string">&#123;s.detail&#125;</span>&gt;</span></span><br><span class="xml">      <span class="hljs-tag">&lt;<span class="hljs-name">Header</span> <span class="hljs-attr">title</span>=<span class="hljs-string">&quot;账单详情&quot;</span> /&gt;</span></span><br><span class="xml">      <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">className</span>=<span class="hljs-string">&#123;s.card&#125;</span>&gt;</span></span><br><span class="xml">        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">className</span>=<span class="hljs-string">&#123;s.type&#125;</span>&gt;</span></span><br><span class="xml">          &#123;/* 通过 pay_type 属性，判断是收入或指出，给出不同的颜色*/&#125;</span><br><span class="xml">          <span class="hljs-tag">&lt;<span class="hljs-name">span</span></span></span><br><span class="hljs-tag"><span class="xml">            <span class="hljs-attr">className</span>=<span class="hljs-string">&#123;cx(&#123;</span></span></span><br><span class="hljs-tag"><span class="xml">              [<span class="hljs-attr">s.expense</span>]<span class="hljs-attr">:</span> <span class="hljs-attr">detail.pay_type</span> == <span class="hljs-string">1,</span></span></span><br><span class="hljs-tag"><span class="xml">              [<span class="hljs-attr">s.income</span>]<span class="hljs-attr">:</span> <span class="hljs-attr">detail.pay_type</span> == <span class="hljs-string">2,</span></span></span><br><span class="hljs-tag"><span class="xml">            &#125;)&#125;</span></span><br><span class="hljs-tag"><span class="xml">          &gt;</span></span><br><span class="xml">            &#123;/* typeMap 是我们事先约定好的 icon 列表 */&#125;</span><br><span class="xml">            <span class="hljs-tag">&lt;<span class="hljs-name">CustomIcon</span></span></span><br><span class="hljs-tag"><span class="xml">              <span class="hljs-attr">className</span>=<span class="hljs-string">&#123;s.iconfont&#125;</span></span></span><br><span class="hljs-tag"><span class="xml">              <span class="hljs-attr">type</span>=<span class="hljs-string">&#123;detail.type_id</span> ? <span class="hljs-attr">typeMap</span>[<span class="hljs-attr">detail.type_id</span>]<span class="hljs-attr">.icon</span> <span class="hljs-attr">:</span> <span class="hljs-attr">1</span>&#125;</span></span><br><span class="hljs-tag"><span class="xml">            /&gt;</span></span><br><span class="xml">          <span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span></span><br><span class="xml">          <span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>&#123;detail.type_name || &quot;&quot;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span></span><br><span class="xml">        <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="xml">        &#123;detail.pay_type == 1 ? (</span><br><span class="xml">          <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">className</span>=<span class="hljs-string">&#123;cx(s.amount,</span> <span class="hljs-attr">s.expense</span>)&#125;&gt;</span>-&#123;detail.amount&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="xml">        ) : (</span><br><span class="xml">          <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">className</span>=<span class="hljs-string">&#123;cx(s.amount,</span> <span class="hljs-attr">s.incom</span>)&#125;&gt;</span>+&#123;detail.amount&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="xml">        )&#125;</span><br><span class="xml">        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">className</span>=<span class="hljs-string">&#123;s.info&#125;</span>&gt;</span></span><br><span class="xml">          <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">className</span>=<span class="hljs-string">&#123;s.time&#125;</span>&gt;</span></span><br><span class="xml">            <span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>记录时间<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span></span><br><span class="xml">            <span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>&#123;dayjs(Number(detail.date)).format(&quot;YYYY-MM-DD HH:mm&quot;)&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span></span><br><span class="xml">          <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="xml">          <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">className</span>=<span class="hljs-string">&#123;s.remark&#125;</span>&gt;</span></span><br><span class="xml">            <span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>备注<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span></span><br><span class="xml">            <span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>&#123;detail.remark || &quot;-&quot;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span></span><br><span class="xml">          <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="xml">        <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="xml">        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">className</span>=<span class="hljs-string">&#123;s.operation&#125;</span>&gt;</span></span><br><span class="xml">          <span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span></span><br><span class="xml">            <span class="hljs-tag">&lt;<span class="hljs-name">CustomIcon</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;shanchu&quot;</span> /&gt;</span></span><br><span class="xml">            删除</span><br><span class="xml">          <span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span></span><br><span class="xml">          <span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span></span><br><span class="xml">            <span class="hljs-tag">&lt;<span class="hljs-name">CustomIcon</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;tianjia&quot;</span> /&gt;</span></span><br><span class="xml">            编辑</span><br><span class="xml">          <span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span></span><br><span class="xml">        <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="xml">      <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>  );<br>&#125;;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> Detail;<br></code></pre></td></tr></table></figure><blockquote><p>文末已为同学们提供下本章节 demo 代码，样式部分不再详细说明。</p></blockquote><p>布局部分我都已经在代码中给了注释，还有不明白的同学可以在群里提问，再次强调一点，<code>flex</code> 布局请务必要掌握熟练，在日后的开发过程中，无论是小册还是公司的项目，都会大量的运用到它。甚至 <code>Flutter</code> 的布局也借鉴了 <code>flex</code> 的原理。</p><p>浏览器展示效果如下：</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/9ccc8d4d2fb343878c22bb37f3949673~tplv-k3u1fbpfcp-zoom-in-crop-mark:3024:0:0:0.awebp" alt="img"></p><p>我们还需为底部的两个按钮添加事件。首先，为删除按钮添加删除事件：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">import</span> &#123; useLocation, useNavigate &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;react-router-dom&#x27;</span>;<br><span class="hljs-keyword">import</span> &#123; get, post, typeMap &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@/utils&#x27;</span>;<br><span class="hljs-keyword">import</span> &#123; Modal, Toast &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;zarm&#x27;</span>;<br>...<br><br><span class="hljs-keyword">const</span> navigateTo = useNavigate();<br><br><span class="hljs-comment">// 删除方法</span><br><span class="hljs-keyword">const</span> deleteDetail = <span class="hljs-function">() =&gt;</span> &#123;<br>  Modal.confirm(&#123;<br>    <span class="hljs-attr">title</span>: <span class="hljs-string">&#x27;删除&#x27;</span>,<br>    <span class="hljs-attr">content</span>: <span class="hljs-string">&#x27;确认删除账单？&#x27;</span>,<br>    <span class="hljs-attr">onOk</span>: <span class="hljs-keyword">async</span> () =&gt; &#123;<br>      <span class="hljs-keyword">const</span> &#123; data &#125; = <span class="hljs-keyword">await</span> post(<span class="hljs-string">&#x27;/api/bill/delete&#x27;</span>, &#123; id &#125;)<br>      Toast.show(<span class="hljs-string">&#x27;删除成功&#x27;</span>)<br>      navigateTo(-<span class="hljs-number">1</span>)<br>    &#125;,<br>  &#125;);<br>&#125;<br></code></pre></td></tr></table></figure><p>这里我们利用 <code>Zarm</code> 组件提供的 <code>Modal</code> 组件，该组件提供了调用方法的形式唤起弹窗，我们利用这个属性 为「删除」加一个二次确认的形式，避免误触按钮。</p><p>效果如下所示：</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/c7f1edbbe9d147e39ffd28d9b0a0ab1c~tplv-k3u1fbpfcp-zoom-in-crop-mark:3024:0:0:0.awebp" alt="img"></p><p>最麻烦的编辑事件处理，我们先来明确一下思路。在点击「编辑」按钮之后，我们会唤起之前写好的「添加账单天窗」，然后将账单 <code>detail</code> 参数通过 <code>props</code> 传递给弹窗组件，组件在接收到 <code>detail</code> 时，将信息初始化给弹窗给的相应参数。</p><p>我们来看代码的实现，首先在 <code>Detail/index.jsx</code> 内添加代码：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">import</span> React, &#123; useEffect, useState, useRef &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;react&#x27;</span>;<br><span class="hljs-keyword">import</span> PopupAddBill <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@/components/PopupAddBill&#x27;</span>;<br>...<br><br><span class="hljs-keyword">const</span> editRef = useRef();<br>...<br>&lt;div className=&#123;s.operation&#125;&gt;<br>  <span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">onClick</span>=<span class="hljs-string">&#123;deleteDetail&#125;</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">CustomIcon</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&#x27;shanchu&#x27;</span> /&gt;</span>删除<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span></span><br>  <span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">onClick</span>=<span class="hljs-string">&#123;()</span> =&gt;</span> editRef.current &amp;&amp; editRef.current.show()&#125;&gt;<span class="hljs-tag">&lt;<span class="hljs-name">CustomIcon</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&#x27;tianjia&#x27;</span> /&gt;</span>编辑<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span></span><br>&lt;/div&gt;<br>...<br>&lt;PopupAddBill ref=&#123;editRef&#125; detail=&#123;detail&#125; onReload=&#123;getDetail&#125; /&gt;<br></code></pre></td></tr></table></figure><p>尝试点击编辑按钮：</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/2e946a44ae224128ae356abc36d990eb~tplv-k3u1fbpfcp-zoom-in-crop-mark:3024:0:0:0.awebp" alt="img"></p><p>紧接着，我们修改 <code>PopupAddBill</code> 组件，如下所示：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> PopupAddBill = forwardRef(<span class="hljs-function">(<span class="hljs-params">&#123; detail = &#123;&#125;, onReload &#125;, ref</span>) =&gt;</span> &#123;<br>  ...<br>  <span class="hljs-keyword">const</span> id = detail &amp;&amp; detail.id <span class="hljs-comment">// 外部传进来的账单详情 id</span><br><br>  useEffect(<span class="hljs-function">() =&gt;</span> &#123;<br>    <span class="hljs-keyword">if</span> (detail.id) &#123;<br>      setPayType(detail.pay_type == <span class="hljs-number">1</span> ? <span class="hljs-string">&#x27;expense&#x27;</span> : <span class="hljs-string">&#x27;income&#x27;</span>)<br>      setCurrentType(&#123;<br>        <span class="hljs-attr">id</span>: detail.type_id,<br>        <span class="hljs-attr">name</span>: detail.type_name<br>      &#125;)<br>      setRemark(detail.remark)<br>      setAmount(detail.amount)<br>      setDate(dayjs(<span class="hljs-built_in">Number</span>(detail.date)).$d)<br>    &#125;<br>  &#125;, [detail])<br><br>  ...<br><br>  useEffect(<span class="hljs-keyword">async</span> () =&gt; &#123;<br>    <span class="hljs-keyword">const</span> &#123; <span class="hljs-attr">data</span>: &#123; list &#125; &#125; = <span class="hljs-keyword">await</span> get(<span class="hljs-string">&#x27;/api/type/list&#x27;</span>);<br>    <span class="hljs-keyword">const</span> _expense = list.filter(<span class="hljs-function"><span class="hljs-params">i</span> =&gt;</span> i.type == <span class="hljs-number">1</span>); <span class="hljs-comment">// 支出类型</span><br>    <span class="hljs-keyword">const</span> _income = list.filter(<span class="hljs-function"><span class="hljs-params">i</span> =&gt;</span> i.type == <span class="hljs-number">2</span>); <span class="hljs-comment">// 收入类型</span><br>    setExpense(_expense);<br>    setIncome(_income);<br>      <span class="hljs-comment">// 没有 id 的情况下，说明是新建账单。</span><br>    <span class="hljs-keyword">if</span> (!id) &#123;<br>      setCurrentType(_expense[<span class="hljs-number">0</span>]);<br>    &#125;;<br>  &#125;, []);<br><br>  ...<br><br>  <span class="hljs-comment">// 添加账单</span><br>  <span class="hljs-keyword">const</span> addBill = <span class="hljs-keyword">async</span> () =&gt; &#123;<br>    <span class="hljs-keyword">if</span> (!amount) &#123;<br>      Toast.show(<span class="hljs-string">&#x27;请输入具体金额&#x27;</span>)<br>      <span class="hljs-keyword">return</span><br>    &#125;<br>    <span class="hljs-keyword">const</span> params = &#123;<br>      <span class="hljs-attr">amount</span>: <span class="hljs-built_in">Number</span>(amount).toFixed(<span class="hljs-number">2</span>),<br>      <span class="hljs-attr">type_id</span>: currentType.id,<br>      <span class="hljs-attr">type_name</span>: currentType.name,<br>      <span class="hljs-attr">date</span>: dayjs(date).unix() * <span class="hljs-number">1000</span>,<br>      <span class="hljs-attr">pay_type</span>: payType == <span class="hljs-string">&#x27;expense&#x27;</span> ? <span class="hljs-number">1</span> : <span class="hljs-number">2</span>,<br>      <span class="hljs-attr">remark</span>: remark || <span class="hljs-string">&#x27;&#x27;</span><br>    &#125;<br>    <span class="hljs-keyword">if</span> (id) &#123;<br>      params.id = id;<br>      <span class="hljs-comment">// 如果有 id 需要调用详情更新接口</span><br>      <span class="hljs-keyword">const</span> result = <span class="hljs-keyword">await</span> post(<span class="hljs-string">&#x27;/api/bill/update&#x27;</span>, params);<br>      Toast.show(<span class="hljs-string">&#x27;修改成功&#x27;</span>);<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>      <span class="hljs-keyword">const</span> result = <span class="hljs-keyword">await</span> post(<span class="hljs-string">&#x27;/api/bill/add&#x27;</span>, params);<br>      setAmount(<span class="hljs-string">&#x27;&#x27;</span>);<br>      setPayType(<span class="hljs-string">&#x27;expense&#x27;</span>);<br>      setCurrentType(expense[<span class="hljs-number">0</span>]);<br>      setDate(<span class="hljs-keyword">new</span> <span class="hljs-built_in">Date</span>());<br>      setRemark(<span class="hljs-string">&#x27;&#x27;</span>);<br>      Toast.show(<span class="hljs-string">&#x27;添加成功&#x27;</span>);<br>    &#125;<br>    setShow(<span class="hljs-literal">false</span>);<br>    <span class="hljs-keyword">if</span> (onReload) onReload();<br>  &#125;<br>&#125;)<br></code></pre></td></tr></table></figure><p>首先，通过 <code>setXXX</code> 将 <code>detail</code> 的数据依次设置初始值；其次，账单种类需要判断是否是编辑或是新建；最后，修改添加账单按钮，如果是「编辑」操作，给 <code>params</code> 参数添加一个 <code>id</code>，并且调用的接口变成 <code>/api/bill/update</code>。</p><p>完成上述操作之后，我们查看浏览器操作情况如下所示：</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/c97d70e0092747cb8c78da25cf17c576~tplv-k3u1fbpfcp-zoom-in-crop-mark:3024:0:0:0.awebp" alt="img"></p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>本小节我们学习了如何封装内页的头部组件，以及如何将之前的「新增」复用给「编辑」操作，可以以这个为一个思考点，用发散的思维去复制这样的模式，是否其他的新增和编辑操作，也可以这么实现。</p>]]></content>
      
      
      
        <tags>
            
            <tag> react </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>116、稀土掘金小册-记账本（七）新增账单弹窗封装</title>
      <link href="/2023/01/18/116-react/"/>
      <url>/2023/01/18/116-react/</url>
      
        <content type="html"><![CDATA[<span id="more"></span><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>回顾一下上一章节学习的内容。无限滚动列表、弹窗组件的内部控制显隐、工具方法以及常量的提取。若是你开发项目时，在潜意识里，有对这些内容进行封装的思想，那么你已经有模块化、组件化的开发理念了。在大量的工程中得出的实践，将会根深蒂固在你的开发理念里。</p><p>之前，我们是对一个小组件，如时间筛选、类型筛选等小组件进行封装。本章节，我们对一个添加模块进行封装，好处就是你在任何地方，都能使用这个添加组件，对账单进行增加操作。</p><p>我们先来看看本章节要绘制的页面和逻辑：</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/349d2f897ff84498a7016596b2e11882~tplv-k3u1fbpfcp-zoom-in-crop-mark:3024:0:0:0.awebp" alt="img"></p><p>如上图所示，本章节要实现的需求逻辑，基本上已经绘制在图中。所有的努力，都是为了凑出这几个参数：</p><ul><li>账单类型</li><li>账单金额</li><li>账单日期</li><li>账单种类</li><li>备注</li></ul><p>然后将这些数据，提交给服务端进行处理，然后存储到数据库，完事。</p><h2 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h2><p>上述需求整理清楚之后，我们开始本章节的制作环节。</p><h3 id="弹窗组件实现"><a href="#弹窗组件实现" class="headerlink" title="弹窗组件实现"></a>弹窗组件实现</h3><p>先实现点击新增按钮，调出弹窗的功能。首先，在 <code>Home/index.jsx</code> 文件中添加 「新增按钮」，如下所示：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">import</span> CustomIcon <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@/components/CustomIcon&#x27;</span><br>...<br><span class="hljs-keyword">const</span> Home = <span class="hljs-function">() =&gt;</span> &#123;<br>  ...<br>  <span class="hljs-keyword">const</span> addToggle = <span class="hljs-function">() =&gt;</span> &#123;<br>    <span class="hljs-comment">// do something</span><br>  &#125;<br>  ...<br>  <span class="hljs-keyword">return</span> <span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">className</span>=<span class="hljs-string">&#123;s.home&#125;</span>&gt;</span></span><br><span class="xml">    ...</span><br><span class="xml">    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">className</span>=<span class="hljs-string">&#123;s.add&#125;</span> <span class="hljs-attr">onClick</span>=<span class="hljs-string">&#123;addToggle&#125;</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">CustomIcon</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&#x27;tianjia&#x27;</span> /&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="xml">  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>文末已为同学们提供下本章节 demo 代码，样式部分不再详细说明。</p></blockquote><p>样式中，注意我给 <code>border</code> 设置的是 <code>1PX</code>，大写的单位，因为这样写的话，<code>postcss-pxtorem</code> 插件就不会将其转化为 <code>rem</code> 单位。</p><p>重启项目之后，刷新浏览器，如下所示：</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/acf8cf59aeed4061b36a5b7359fb42b9~tplv-k3u1fbpfcp-zoom-in-crop-mark:3024:0:0:0.awebp" alt="img"></p><p>根据之前实现的弹窗组件，我们再实现一套类似的，在弹窗内控制弹窗组件的显示隐藏，在 <code>components</code> 下新建 <code>PopupAddBill</code> 文件夹，再新建 <code>index.jsx</code> 和 <code>style.module.less</code>，代码如下：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// PopupAddBill/index.jsx</span><br><span class="hljs-keyword">import</span> React, &#123; forwardRef, useEffect, useRef, useState &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;react&quot;</span>;<br><span class="hljs-keyword">import</span> PropTypes <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;prop-types&quot;</span>;<br><span class="hljs-keyword">import</span> &#123; Popup &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;zarm&quot;</span>;<br><br><span class="hljs-keyword">const</span> PopupAddBill = forwardRef(<span class="hljs-function">(<span class="hljs-params">props, ref</span>) =&gt;</span> &#123;<br>  <span class="hljs-keyword">const</span> [show, setShow] = useState(<span class="hljs-literal">false</span>); <span class="hljs-comment">// 内部控制弹窗显示隐藏。</span><br>  <span class="hljs-comment">// 通过 forwardRef 拿到外部传入的 ref，并添加属性，使得父组件可以通过 ref 控制子组件。</span><br>  <span class="hljs-keyword">if</span> (ref) &#123;<br>    ref.current = &#123;<br>      <span class="hljs-attr">show</span>: <span class="hljs-function">() =&gt;</span> &#123;<br>        setShow(<span class="hljs-literal">true</span>);<br>      &#125;,<br>      <span class="hljs-attr">close</span>: <span class="hljs-function">() =&gt;</span> &#123;<br>        setShow(<span class="hljs-literal">false</span>);<br>      &#125;,<br>    &#125;;<br>  &#125;<br><br>  <span class="hljs-keyword">return</span> (<br>    <span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">Popup</span></span></span><br><span class="hljs-tag"><span class="xml">      <span class="hljs-attr">visible</span>=<span class="hljs-string">&#123;show&#125;</span></span></span><br><span class="hljs-tag"><span class="xml">      <span class="hljs-attr">direction</span>=<span class="hljs-string">&quot;bottom&quot;</span></span></span><br><span class="hljs-tag"><span class="xml">      <span class="hljs-attr">onMaskClick</span>=<span class="hljs-string">&#123;()</span> =&gt;</span> setShow(false)&#125;</span><br><span class="xml">      destroy=&#123;false&#125;</span><br><span class="xml">      mountContainer=&#123;() =&gt; document.body&#125;</span><br><span class="xml">    &gt;</span><br><span class="xml">      <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&#123;&#123;</span> <span class="hljs-attr">height:</span> <span class="hljs-attr">200</span>, <span class="hljs-attr">background:</span> &quot;#<span class="hljs-attr">fff</span>&quot; &#125;&#125;&gt;</span>弹窗<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">Popup</span>&gt;</span></span><br>  );<br>&#125;);<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> PopupAddBill;<br></code></pre></td></tr></table></figure><p>写完弹窗组件，当然就得去 <code>Home/index.jsx</code> 中调用：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// Home/index.jsx</span><br><span class="hljs-keyword">import</span> PopupAddBill <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@/components/PopupAddBill&#x27;</span><br><br><span class="hljs-keyword">const</span> Home = <span class="hljs-function">() =&gt;</span> &#123;<br>  ...<br>  <span class="hljs-keyword">const</span> addRef = useRef(); <span class="hljs-comment">// 添加账单 ref</span><br>  ...<br>  <span class="hljs-comment">// 添加账单弹窗</span><br>  <span class="hljs-keyword">const</span> addToggle = <span class="hljs-function">() =&gt;</span> &#123;<br>    addRef.current &amp;&amp; addRef.current.show()<br>  &#125;<br><br>  <span class="hljs-keyword">return</span> <span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">className</span>=<span class="hljs-string">&#123;s.home&#125;</span>&gt;</span></span><br><span class="xml">    ...</span><br><span class="xml">    <span class="hljs-tag">&lt;<span class="hljs-name">PopupAddBill</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&#123;addRef&#125;</span> /&gt;</span></span><br><span class="xml">  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>&#125;<br></code></pre></td></tr></table></figure><p>重启浏览器，效果如下：</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/7025a89978114333bdf7cbdb20139482~tplv-k3u1fbpfcp-zoom-in-crop-mark:3024:0:0:0.awebp" alt="img"></p><p>此时我们的“地基”已经打好了，接下来我们要在这个基础上给新增账单弹窗“添砖加瓦”。</p><h3 id="账单类型和账单时间"><a href="#账单类型和账单时间" class="headerlink" title="账单类型和账单时间"></a>账单类型和账单时间</h3><p>我们先实现弹窗头部左侧的「支出」和「收入」账单类型切换功能，添加代码如下：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// components/PopupAddBill/index.jsx</span><br>...<br><span class="hljs-keyword">import</span> cx <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;classnames&#x27;</span>;<br><span class="hljs-keyword">import</span> &#123; Popup, Icon  &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;zarm&#x27;</span>;<br><br><span class="hljs-keyword">import</span> s <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./style.module.less&#x27;</span>;<br><br><span class="hljs-keyword">const</span> PopupAddBill = forwardRef(<span class="hljs-function">(<span class="hljs-params">props, ref</span>) =&gt;</span> &#123;<br>  ...<br>  <span class="hljs-keyword">const</span> [payType, setPayType] = useState(<span class="hljs-string">&#x27;expense&#x27;</span>); <span class="hljs-comment">// 支出或收入类型</span><br>  ...<br>  <span class="hljs-comment">// 切换收入还是支出</span><br>  <span class="hljs-keyword">const</span> changeType = <span class="hljs-function">(<span class="hljs-params">type</span>) =&gt;</span> &#123;<br>    setPayType(type);<br>  &#125;;<br><br>  <span class="hljs-keyword">return</span> <span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">Popup</span></span></span><br><span class="hljs-tag"><span class="xml">    <span class="hljs-attr">visible</span>=<span class="hljs-string">&#123;show&#125;</span></span></span><br><span class="hljs-tag"><span class="xml">    <span class="hljs-attr">direction</span>=<span class="hljs-string">&quot;bottom&quot;</span></span></span><br><span class="hljs-tag"><span class="xml">    <span class="hljs-attr">onMaskClick</span>=<span class="hljs-string">&#123;()</span> =&gt;</span> setShow(false)&#125;</span><br><span class="xml">    destroy=&#123;false&#125;</span><br><span class="xml">    mountContainer=&#123;() =&gt; document.body&#125;</span><br><span class="xml">  &gt;</span><br><span class="xml">    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">className</span>=<span class="hljs-string">&#123;s.addWrap&#125;</span>&gt;</span></span><br><span class="xml">      &#123;/* 右上角关闭弹窗 */&#125;</span><br><span class="xml">      <span class="hljs-tag">&lt;<span class="hljs-name">header</span> <span class="hljs-attr">className</span>=<span class="hljs-string">&#123;s.header&#125;</span>&gt;</span></span><br><span class="xml">        <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">className</span>=<span class="hljs-string">&#123;s.close&#125;</span> <span class="hljs-attr">onClick</span>=<span class="hljs-string">&#123;()</span> =&gt;</span> setShow(false)&#125;&gt;<span class="hljs-tag">&lt;<span class="hljs-name">Icon</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;wrong&quot;</span> /&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span></span><br><span class="xml">      <span class="hljs-tag">&lt;/<span class="hljs-name">header</span>&gt;</span></span><br><span class="xml">       &#123;/* 「收入」和「支出」类型切换 */&#125;</span><br><span class="xml">      <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">className</span>=<span class="hljs-string">&#123;s.filter&#125;</span>&gt;</span></span><br><span class="xml">        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">className</span>=<span class="hljs-string">&#123;s.type&#125;</span>&gt;</span></span><br><span class="xml">          <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">onClick</span>=<span class="hljs-string">&#123;()</span> =&gt;</span> changeType(&#x27;expense&#x27;)&#125; className=&#123;cx(&#123; [s.expense]: true, [s.active]: payType == &#x27;expense&#x27; &#125;)&#125;&gt;支出<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span></span><br><span class="xml">          <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">onClick</span>=<span class="hljs-string">&#123;()</span> =&gt;</span> changeType(&#x27;income&#x27;)&#125; className=&#123;cx(&#123; [s.income]: true, [s.active]: payType == &#x27;income&#x27; &#125;)&#125;&gt;收入<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span></span><br><span class="xml">        <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="xml">      <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="xml">  <span class="hljs-tag">&lt;/<span class="hljs-name">Popup</span>&gt;</span></span><br>&#125;)<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> PopupAddBill<br></code></pre></td></tr></table></figure><p>为了减少代码的重复，上述代码只展示了需要添加的部分，尽量不让大家混淆视听。</p><p>我们定义 <code>expense</code> 为支出，<code>income</code> 为收入，代码中通过 <code>payType</code> 变量，来控制「收入」和「支出」按钮的切换。上述代码视图效果如下所示：</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/bd1f72d07dff4f69af0848e8d2f0696f~tplv-k3u1fbpfcp-zoom-in-crop-mark:3024:0:0:0.awebp" alt="img"></p><p>接下来在类型边上添加时间筛选弹窗，此时你将体会到之前提取时间筛选组件是多么的明智。我们继续添加代码：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">import</span> React, &#123; forwardRef, useEffect, useRef, useState &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;react&#x27;</span>;<br>...<br><span class="hljs-keyword">import</span> dayjs <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;dayjs&#x27;</span>;<br><span class="hljs-keyword">import</span> PopupDate <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;../PopupDate&#x27;</span><br>...<br><br><span class="hljs-keyword">const</span> PopupAddBill = forwardRef(<span class="hljs-function">(<span class="hljs-params">props, ref</span>) =&gt;</span> &#123;<br>  ...<br>  <span class="hljs-keyword">const</span> dateRef = useRef();<br>  <span class="hljs-keyword">const</span> [date, setDate] = useState(<span class="hljs-keyword">new</span> <span class="hljs-built_in">Date</span>()); <span class="hljs-comment">// 日期</span><br>  ...<br>  <span class="hljs-comment">// 日期选择回调</span><br>  <span class="hljs-keyword">const</span> selectDate = <span class="hljs-function">(<span class="hljs-params">val</span>) =&gt;</span> &#123;<br>    setDate(val);<br>  &#125;<br><br>  <span class="hljs-keyword">return</span> <span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">Popup</span></span></span><br><span class="hljs-tag"><span class="xml">    <span class="hljs-attr">visible</span>=<span class="hljs-string">&#123;show&#125;</span></span></span><br><span class="hljs-tag"><span class="xml">    <span class="hljs-attr">direction</span>=<span class="hljs-string">&quot;bottom&quot;</span></span></span><br><span class="hljs-tag"><span class="xml">    <span class="hljs-attr">onMaskClick</span>=<span class="hljs-string">&#123;()</span> =&gt;</span> setShow(false)&#125;</span><br><span class="xml">    destroy=&#123;false&#125;</span><br><span class="xml">    mountContainer=&#123;() =&gt; document.body&#125;</span><br><span class="xml">  &gt;</span><br><span class="xml">    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">className</span>=<span class="hljs-string">&#123;s.addWrap&#125;</span>&gt;</span></span><br><span class="xml">       &#123;/* 「收入」和「支出」类型切换 */&#125;</span><br><span class="xml">      <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">className</span>=<span class="hljs-string">&#123;s.filter&#125;</span>&gt;</span></span><br><span class="xml">        ...</span><br><span class="xml">        <span class="hljs-tag">&lt;<span class="hljs-name">div</span></span></span><br><span class="hljs-tag"><span class="xml">          <span class="hljs-attr">className</span>=<span class="hljs-string">&#123;s.time&#125;</span></span></span><br><span class="hljs-tag"><span class="xml">          <span class="hljs-attr">onClick</span>=<span class="hljs-string">&#123;()</span> =&gt;</span> dateRef.current &amp;&amp; dateRef.current.show()&#125;</span><br><span class="xml">        &gt;&#123;dayjs(date).format(&#x27;MM-DD&#x27;)&#125; <span class="hljs-tag">&lt;<span class="hljs-name">Icon</span> <span class="hljs-attr">className</span>=<span class="hljs-string">&#123;s.arrow&#125;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;arrow-bottom&quot;</span> /&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="xml">      <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="xml">      <span class="hljs-tag">&lt;<span class="hljs-name">PopupDate</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&#123;dateRef&#125;</span> <span class="hljs-attr">onSelect</span>=<span class="hljs-string">&#123;selectDate&#125;</span> /&gt;</span></span><br><span class="xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="xml">  <span class="hljs-tag">&lt;/<span class="hljs-name">Popup</span>&gt;</span></span><br>&#125;)<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> PopupAddBill<br></code></pre></td></tr></table></figure><p>我们引入了公共组件 <code>PopupDate</code>，传入 <code>ref</code> 控制弹窗的显示隐藏，传入 <code>onSelect</code> 获取日期组件选择后回调的值，并通过 <code>setDate</code> 重制 <code>date</code>，触发视图的更新，我们来看浏览器展示效果如下：</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/ee3fa326b74f41ddb0d211e886ca5ccb~tplv-k3u1fbpfcp-zoom-in-crop-mark:3024:0:0:0.awebp" alt="img"></p><p>我们通过上述代码，已经创造出了两个值，分别是「账单类型」和「账单日期」，还差「账单金额」 「账单种类」、「备注」。</p><h3 id="账单金额"><a href="#账单金额" class="headerlink" title="账单金额"></a>账单金额</h3><p>本章开头大家也应该看到了，金额输入框是模拟的，也就是说当下面模拟数字键盘点击的时候，我们将返回的数据渲染到进入输入框的位置，下面我们先将金额输入框搭建出来，添加代码如下：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs js">&lt;div className=&#123;s.money&#125;&gt;<br>  <span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">className</span>=<span class="hljs-string">&#123;s.sufix&#125;</span>&gt;</span>¥<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span></span><br>  <span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">className</span>=<span class="hljs-string">&#123;cx(s.amount,</span> <span class="hljs-attr">s.animation</span>)&#125;&gt;</span>10<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span></span><br>&lt;/div&gt;<br></code></pre></td></tr></table></figure><blockquote><p>文末已为同学们提供下本章节 demo 代码，样式部分不再详细说明。</p></blockquote><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/15dc48f98c4f42eb9310619510603506~tplv-k3u1fbpfcp-zoom-in-crop-mark:3024:0:0:0.awebp" alt="img"></p><p>我们将金额动态化，引入 <code>Zarm</code> 为我们提供的模拟数字键盘组件 <code>Keyboard</code>，代码如下：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs js">...<br><span class="hljs-comment">// 监听输入框改变值</span><br>  <span class="hljs-keyword">const</span> handleMoney = <span class="hljs-function">(<span class="hljs-params">value</span>) =&gt;</span> &#123;<br>    value = <span class="hljs-built_in">String</span>(value)<br>    <span class="hljs-comment">// 点击是删除按钮时</span><br>    <span class="hljs-keyword">if</span> (value == <span class="hljs-string">&#x27;delete&#x27;</span>) &#123;<br>      <span class="hljs-keyword">let</span> _amount = amount.slice(<span class="hljs-number">0</span>, amount.length - <span class="hljs-number">1</span>)<br>      setAmount(_amount)<br>      <span class="hljs-keyword">return</span><br>    &#125;<br><br>    <span class="hljs-comment">// 点击确认按钮时</span><br>    <span class="hljs-keyword">if</span> (value == <span class="hljs-string">&#x27;ok&#x27;</span>) &#123;<br>      <span class="hljs-comment">// 这里后续将处理添加账单逻辑</span><br>      <span class="hljs-keyword">return</span><br>    &#125;<br><br>    <span class="hljs-comment">// 当输入的值为 &#x27;.&#x27; 且 已经存在 &#x27;.&#x27;，则不让其继续字符串相加。</span><br>    <span class="hljs-keyword">if</span> (value == <span class="hljs-string">&#x27;.&#x27;</span> &amp;&amp; amount.includes(<span class="hljs-string">&#x27;.&#x27;</span>)) <span class="hljs-keyword">return</span><br>    <span class="hljs-comment">// 小数点后保留两位，当超过两位时，不让其字符串继续相加。</span><br>    <span class="hljs-keyword">if</span> (value != <span class="hljs-string">&#x27;.&#x27;</span> &amp;&amp; amount.includes(<span class="hljs-string">&#x27;.&#x27;</span>) &amp;&amp; amount &amp;&amp; amount.split(<span class="hljs-string">&#x27;.&#x27;</span>)[<span class="hljs-number">1</span>].length &gt;= <span class="hljs-number">2</span>) <span class="hljs-keyword">return</span><br>    <span class="hljs-comment">// amount += value</span><br>    setAmount(amount + value)<br>  &#125;<br>...<br><br>&lt;div className=&#123;s.money&#125;&gt;<br>  <span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">className</span>=<span class="hljs-string">&#123;s.sufix&#125;</span>&gt;</span>¥<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span></span><br>  <span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">className</span>=<span class="hljs-string">&#123;cx(s.amount,</span> <span class="hljs-attr">s.animation</span>)&#125;&gt;</span>&#123;amount&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span></span><br>&lt;/div&gt;<br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">Keyboard</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;price&quot;</span> <span class="hljs-attr">onKeyClick</span>=<span class="hljs-string">&#123;(value)</span> =&gt;</span> handleMoney(value)&#125; /&gt;</span><br></code></pre></td></tr></table></figure><p>重启项目，浏览器展示如下图所示：</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/0fc90561f73d4b2c921864ebefc2cd2c~tplv-k3u1fbpfcp-zoom-in-crop-mark:3024:0:0:0.awebp" alt="img"></p><blockquote><p>这里一个小提示，我在制作项目的过程中，发现一个 Zarm 2.9.0 版本的 bug，Keyboard 组件在点击删除按钮的时候，onKeyClick 方法会反复被执行，于是我降级为 2.8.2 版本，并且去他们的官网提了 issue。</p></blockquote><p>此时「账单金额」也被安排上了。</p><h3 id="账单种类"><a href="#账单种类" class="headerlink" title="账单种类"></a>账单种类</h3><p>账单种类的作用是表示该笔账单的大致用途，我们通过接口从数据库回去账单种类列表，以横向滚动的形式，展示在金额的下面，接下来我们看具体的代码实现：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs js">...<br><span class="hljs-keyword">import</span> CustomIcon <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;../CustomIcon&#x27;</span>;<br><span class="hljs-keyword">import</span> &#123; get, typeMap &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@/utils&#x27;</span>;<br><br>...<br><span class="hljs-keyword">const</span> [currentType, setCurrentType] = useState(&#123;&#125;); <span class="hljs-comment">// 当前选中账单类型</span><br><span class="hljs-keyword">const</span> [expense, setExpense] = useState([]); <span class="hljs-comment">// 支出类型数组</span><br><span class="hljs-keyword">const</span> [income, setIncome] = useState([]); <span class="hljs-comment">// 收入类型数组</span><br><br>useEffect(<span class="hljs-keyword">async</span> () =&gt; &#123;<br>  <span class="hljs-keyword">const</span> &#123; <span class="hljs-attr">data</span>: &#123; list &#125; &#125; = <span class="hljs-keyword">await</span> get(<span class="hljs-string">&#x27;/api/type/list&#x27;</span>);<br>  <span class="hljs-keyword">const</span> _expense = list.filter(<span class="hljs-function"><span class="hljs-params">i</span> =&gt;</span> i.type == <span class="hljs-number">1</span>); <span class="hljs-comment">// 支出类型</span><br>  <span class="hljs-keyword">const</span> _income = list.filter(<span class="hljs-function"><span class="hljs-params">i</span> =&gt;</span> i.type == <span class="hljs-number">2</span>); <span class="hljs-comment">// 收入类型</span><br>  setExpense(_expense);<br>  setIncome(_income);<br>  setCurrentType(_expense[<span class="hljs-number">0</span>]); <span class="hljs-comment">// 新建账单，类型默认是支出类型数组的第一项</span><br>&#125;, [])<br><br><br>...<br>&lt;div className=&#123;s.typeWarp&#125;&gt;<br>  <span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">className</span>=<span class="hljs-string">&#123;s.typeBody&#125;</span>&gt;</span></span><br><span class="xml">    &#123;/* 通过 payType 判断，是展示收入账单类型，还是支出账单类型 */&#125;</span><br><span class="xml">    &#123;</span><br><span class="xml">      (payType == &#x27;expense&#x27; ? expense : income).map(item =&gt; <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">onClick</span>=<span class="hljs-string">&#123;()</span> =&gt;</span> setCurrentType(item)&#125; key=&#123;item.id&#125; className=&#123;s.typeItem&#125;&gt;</span><br><span class="xml">        &#123;/* 收入和支出的字体颜色，以及背景颜色通过 payType 区分，并且设置高亮 */&#125;</span><br><span class="xml">        <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">className</span>=<span class="hljs-string">&#123;cx(&#123;[s.iconfontWrap]:</span> <span class="hljs-attr">true</span>, [<span class="hljs-attr">s.expense</span>]<span class="hljs-attr">:</span> <span class="hljs-attr">payType</span> == <span class="hljs-string">&#x27;expense&#x27;</span>, [<span class="hljs-attr">s.income</span>]<span class="hljs-attr">:</span> <span class="hljs-attr">payType</span> == <span class="hljs-string">&#x27;income&#x27;</span>, [<span class="hljs-attr">s.active</span>]<span class="hljs-attr">:</span> <span class="hljs-attr">currentType.id</span> == <span class="hljs-string">item.id&#125;)&#125;</span>&gt;</span></span><br><span class="xml">          <span class="hljs-tag">&lt;<span class="hljs-name">CustomIcon</span> <span class="hljs-attr">className</span>=<span class="hljs-string">&#123;s.iconfont&#125;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&#123;typeMap[item.id].icon&#125;</span> /&gt;</span></span><br><span class="xml">        <span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span></span><br><span class="xml">        <span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>&#123;item.name&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span></span><br><span class="xml">      <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>)</span><br><span class="xml">    &#125;</span><br><span class="xml">  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>&lt;/div&gt;<br></code></pre></td></tr></table></figure><p>注意，在 <code>h5</code> 界面实现横向滚动，和在网页端相比，多了如下属性：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs css">* &#123;<br>  touch-action: pan-x;<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>CSS 属性 touch-action 用于设置触摸屏用户如何操纵元素的区域(例如，浏览器内置的缩放功能)。</p></blockquote><p>如果不设置它，只是通过 <code>overflow-x: auto</code>，无法实现 <code>h5</code> 端的横向滚动的，并且你要在一个 <code>div</code> 容器内设置全局 <code>*</code> 为 <code>touch-action: pan-x;</code>，如果后续遇到类似的问题，大家可以参考我上述做法，这是经过实践验证过的方法。</p><p>我们来看看浏览器的展示效果：</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/9047dbf8d2d44f09ab66fce10dc1ee89~tplv-k3u1fbpfcp-zoom-in-crop-mark:3024:0:0:0.awebp" alt="img"></p><h3 id="备注弹窗"><a href="#备注弹窗" class="headerlink" title="备注弹窗"></a>备注弹窗</h3><p>备注虽然不起眼，但是别小看它，它可以在账单类型不足以概括账单时，加以一定的文字描述。</p><p>我们直接将其放置于「账单种类」的下面，代码如下：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs js">...<br><span class="hljs-keyword">import</span> &#123;  Input  &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;zarm&#x27;</span>;<br><br>...<br><span class="hljs-keyword">const</span> [remark, setRemark] = useState(<span class="hljs-string">&#x27;&#x27;</span>); <span class="hljs-comment">// 备注</span><br><span class="hljs-keyword">const</span> [showRemark, setShowRemark] = useState(<span class="hljs-literal">false</span>); <span class="hljs-comment">// 备注输入框展示控制</span><br><br>...<br>&lt;div className=&#123;s.remark&#125;&gt;<br>  &#123;<br>    showRemark ? <span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">Input</span></span></span><br><span class="hljs-tag"><span class="xml">      <span class="hljs-attr">autoHeight</span></span></span><br><span class="hljs-tag"><span class="xml">      <span class="hljs-attr">showLength</span></span></span><br><span class="hljs-tag"><span class="xml">      <span class="hljs-attr">maxLength</span>=<span class="hljs-string">&#123;50&#125;</span></span></span><br><span class="hljs-tag"><span class="xml">      <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span></span></span><br><span class="hljs-tag"><span class="xml">      <span class="hljs-attr">rows</span>=<span class="hljs-string">&#123;3&#125;</span></span></span><br><span class="hljs-tag"><span class="xml">      <span class="hljs-attr">value</span>=<span class="hljs-string">&#123;remark&#125;</span></span></span><br><span class="hljs-tag"><span class="xml">      <span class="hljs-attr">placeholder</span>=<span class="hljs-string">&quot;请输入备注信息&quot;</span></span></span><br><span class="hljs-tag"><span class="xml">      <span class="hljs-attr">onChange</span>=<span class="hljs-string">&#123;(val)</span> =&gt;</span> setRemark(val)&#125;</span><br><span class="xml">      onBlur=&#123;() =&gt; setShowRemark(false)&#125;</span><br><span class="xml">    /&gt;</span> : <span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">onClick</span>=<span class="hljs-string">&#123;()</span> =&gt;</span> setShowRemark(true)&#125;&gt;&#123;remark || &#x27;添加备注&#x27;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span></span><br>  &#125;<br>&lt;/div&gt;<br></code></pre></td></tr></table></figure><p><strong>CSS 样式部分</strong></p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-class">.remark</span> &#123;<br>  <span class="hljs-attribute">padding</span>: <span class="hljs-number">0</span> <span class="hljs-number">24px</span>;<br>  <span class="hljs-attribute">padding-bottom</span>: <span class="hljs-number">12px</span>;<br>  <span class="hljs-attribute">color</span>: <span class="hljs-number">#4b67e2</span>;<br>  :global &#123;<br>    .za-input--textarea &#123;<br>      border: <span class="hljs-number">1px</span> solid <span class="hljs-number">#e9e9e9</span>;<br>      <span class="hljs-attribute">padding</span>: <span class="hljs-number">10px</span>;<br>    &#125;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><code>:global</code> 的使用之前已经有描述过，这里再提醒大家一句，目前项目使用的是 <code>css module</code> 的形式，所以样式名都会被打上 <code>hash</code> 值，我们需要修改没有打 <code>hash</code> 值的 <code>zarm</code> 内部样式，需要通过 <code>:global</code> 方法。</p><p>浏览器展示效果如下：</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/28bec13e3c9444cb8a4fd3779290193f~tplv-k3u1fbpfcp-zoom-in-crop-mark:3024:0:0:0.awebp" alt="img"></p><h3 id="调用上传账单接口"><a href="#调用上传账单接口" class="headerlink" title="调用上传账单接口"></a>调用上传账单接口</h3><p>此时我们集齐了五大参数：</p><ul><li>账单类型：payType</li><li>账单金额：amount</li><li>账单日期：date</li><li>账单种类：currentType</li><li>备注：remark</li></ul><p>我们给 <code>Keyboard</code> 的「确定」按钮回调添加方法：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">import</span> &#123; Toast &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;zarm&quot;</span>;<br><span class="hljs-keyword">import</span> &#123; post &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;@/utils&quot;</span>;<br><span class="hljs-comment">// 监听输入框改变值</span><br><span class="hljs-keyword">const</span> handleMoney = <span class="hljs-function">(<span class="hljs-params">value</span>) =&gt;</span> &#123;<br>  value = <span class="hljs-built_in">String</span>(value);<br>  <span class="hljs-comment">// 点击是删除按钮时</span><br>  <span class="hljs-keyword">if</span> (value == <span class="hljs-string">&quot;delete&quot;</span>) &#123;<br>    <span class="hljs-keyword">let</span> _amount = amount.slice(<span class="hljs-number">0</span>, amount.length - <span class="hljs-number">1</span>);<br>    setAmount(_amount);<br>    <span class="hljs-keyword">return</span>;<br>  &#125;<br>  <span class="hljs-comment">// 点击确认按钮时</span><br>  <span class="hljs-keyword">if</span> (value == <span class="hljs-string">&quot;ok&quot;</span>) &#123;<br>    addBill();<br>    <span class="hljs-keyword">return</span>;<br>  &#125;<br>  <span class="hljs-comment">// 当输入的值为 &#x27;.&#x27; 且 已经存在 &#x27;.&#x27;，则不让其继续字符串相加。</span><br>  <span class="hljs-keyword">if</span> (value == <span class="hljs-string">&quot;.&quot;</span> &amp;&amp; amount.includes(<span class="hljs-string">&quot;.&quot;</span>)) <span class="hljs-keyword">return</span>;<br>  <span class="hljs-comment">// 小数点后保留两位，当超过两位时，不让其字符串继续相加。</span><br>  <span class="hljs-keyword">if</span> (<br>    value != <span class="hljs-string">&quot;.&quot;</span> &amp;&amp;<br>    amount.includes(<span class="hljs-string">&quot;.&quot;</span>) &amp;&amp;<br>    amount &amp;&amp;<br>    amount.split(<span class="hljs-string">&quot;.&quot;</span>)[<span class="hljs-number">1</span>].length &gt;= <span class="hljs-number">2</span><br>  )<br>    <span class="hljs-keyword">return</span>;<br>  <span class="hljs-comment">// amount += value</span><br>  setAmount(amount + value);<br>&#125;;<br><br><span class="hljs-comment">// 添加账单</span><br><span class="hljs-keyword">const</span> addBill = <span class="hljs-keyword">async</span> () =&gt; &#123;<br>  <span class="hljs-keyword">if</span> (!amount) &#123;<br>    Toast.show(<span class="hljs-string">&quot;请输入具体金额&quot;</span>);<br>    <span class="hljs-keyword">return</span>;<br>  &#125;<br>  <span class="hljs-keyword">const</span> params = &#123;<br>    <span class="hljs-attr">amount</span>: <span class="hljs-built_in">Number</span>(amount).toFixed(<span class="hljs-number">2</span>), <span class="hljs-comment">// 账单金额小数点后保留两位</span><br>    <span class="hljs-attr">type_id</span>: currentType.id, <span class="hljs-comment">// 账单种类id</span><br>    <span class="hljs-attr">type_name</span>: currentType.name, <span class="hljs-comment">// 账单种类名称</span><br>    <span class="hljs-attr">date</span>: dayjs(date).unix() * <span class="hljs-number">1000</span>, <span class="hljs-comment">// 日期传时间戳</span><br>    <span class="hljs-attr">pay_type</span>: payType == <span class="hljs-string">&quot;expense&quot;</span> ? <span class="hljs-number">1</span> : <span class="hljs-number">2</span>, <span class="hljs-comment">// 账单类型传 1 或 2</span><br>    <span class="hljs-attr">remark</span>: remark || <span class="hljs-string">&quot;&quot;</span>, <span class="hljs-comment">// 备注</span><br>  &#125;;<br>  <span class="hljs-keyword">const</span> result = <span class="hljs-keyword">await</span> post(<span class="hljs-string">&quot;/api/bill/add&quot;</span>, params);<br>  <span class="hljs-comment">// 重制数据</span><br>  setAmount(<span class="hljs-string">&quot;&quot;</span>);<br>  setPayType(<span class="hljs-string">&quot;expense&quot;</span>);<br>  setCurrentType(expense[<span class="hljs-number">0</span>]);<br>  setDate(<span class="hljs-keyword">new</span> <span class="hljs-built_in">Date</span>());<br>  setRemark(<span class="hljs-string">&quot;&quot;</span>);<br>  Toast.show(<span class="hljs-string">&quot;添加成功&quot;</span>);<br>  setShow(<span class="hljs-literal">false</span>);<br>  <span class="hljs-keyword">if</span> (props.onReload) props.onReload();<br>&#125;;<br></code></pre></td></tr></table></figure><p><code>onReload</code> 方法为首页账单列表传进来的函数，当添加完账单的时候，执行 <code>onReload</code> 重新获取首页列表数据。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js">&lt;PopupAddBill ref=&#123;addRef&#125; onReload=&#123;refreshData&#125; /&gt;<br></code></pre></td></tr></table></figure><p>浏览器展示如下所示：</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/8c3fd021a8f8497d8b14ff0c81a53367~tplv-k3u1fbpfcp-zoom-in-crop-mark:3024:0:0:0.awebp" alt="img"></p><p>如果如上图所示，恭喜你，你已经成功完成了添加账单的 工作，此时再回头甚至之前写的代码，马上改正一些变量及一些方法的命名，规范化一下代码。</p><p>千万别在后面再去完善，因为很大程度上，到后面你会懒得翻前面写的代码，除非实在是逻辑问题导致的 bug。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>本章节的内容也是非常丰富，我们的所有的努力，就是为了集齐「添加账单」所需要的五大参数。这是很多需求的一个索引，试问前端在调用接口的过程中，不都是做各种努力为了凑齐那几个参数呢？过程很重要，只要流程做得完善，结果自然水到渠成。</p>]]></content>
      
      
      
        <tags>
            
            <tag> react </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>115、稀土掘金小册-记账本（六）账单列表</title>
      <link href="/2023/01/11/115-react/"/>
      <url>/2023/01/11/115-react/</url>
      
        <content type="html"><![CDATA[<span id="more"></span><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>上一章节介绍的登录注册是整个项目的根基，没有拿到 <code>token</code>，将无法进行后续的各种操作，如账单的增删改查。所以务必将上一章节好好地阅读与揣摩，为后面的学习做好铺垫。我们直接进入本次前端实战项目的主题，账单的增删改查之列表页。</p><blockquote><p>本教程已有线上地址<a href="https://link.juejin.cn/?target=http://cost.chennick.wang">在线地址</a>，同学们可以在实战部分，对照着线上页面进行学习。</p></blockquote><h3 id="知识点"><a href="#知识点" class="headerlink" title="知识点"></a>知识点</h3><ul><li>单项组件抽离</li><li>列表页无限滚动</li><li>下拉刷新列表</li><li>弹窗组件封装</li></ul><p>我们先来欣赏一下最终的页面效果：</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/8fc0196a649c41cb8fe73dafe50233b0~tplv-k3u1fbpfcp-zoom-in-crop-mark:3024:0:0:0.awebp" alt="img"></p><h2 id="列表页编写（静态部分）"><a href="#列表页编写（静态部分）" class="headerlink" title="列表页编写（静态部分）"></a>列表页编写（静态部分）</h2><p>按照正常的开发流程，我们先将静态页面切出来，再填入数据使其动态化。在此之前，我们已经新建好了 <code>Home</code> 目录，该目录便是用于放置账单列表，所以我们直接在 <code>Home/index.jsx</code> 新增代码。</p><h3 id="头部统计实现"><a href="#头部统计实现" class="headerlink" title="头部统计实现"></a>头部统计实现</h3><p>列表的头部展示的内容为当月的收入和支出汇总，并且有两个列表条件过滤项，分别是类型过滤和时间过滤。</p><p>我们新增代码如下：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">import</span> React <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;react&quot;</span>;<br><span class="hljs-keyword">import</span> &#123; Icon &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;zarm&quot;</span>;<br><br><span class="hljs-keyword">import</span> s <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;./style.module.less&quot;</span>;<br><br><span class="hljs-keyword">const</span> Home = <span class="hljs-function">() =&gt;</span> &#123;<br>  <span class="hljs-keyword">return</span> (<br>    <span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">className</span>=<span class="hljs-string">&#123;s.home&#125;</span>&gt;</span></span><br><span class="xml">      <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">className</span>=<span class="hljs-string">&#123;s.header&#125;</span>&gt;</span></span><br><span class="xml">        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">className</span>=<span class="hljs-string">&#123;s.dataWrap&#125;</span>&gt;</span></span><br><span class="xml">          <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">className</span>=<span class="hljs-string">&#123;s.expense&#125;</span>&gt;</span></span><br><span class="xml">            总支出：<span class="hljs-tag">&lt;<span class="hljs-name">b</span>&gt;</span>¥ 200<span class="hljs-tag">&lt;/<span class="hljs-name">b</span>&gt;</span></span><br><span class="xml">          <span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span></span><br><span class="xml">          <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">className</span>=<span class="hljs-string">&#123;s.income&#125;</span>&gt;</span></span><br><span class="xml">            总收入：<span class="hljs-tag">&lt;<span class="hljs-name">b</span>&gt;</span>¥ 500<span class="hljs-tag">&lt;/<span class="hljs-name">b</span>&gt;</span></span><br><span class="xml">          <span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span></span><br><span class="xml">        <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="xml">        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">className</span>=<span class="hljs-string">&#123;s.typeWrap&#125;</span>&gt;</span></span><br><span class="xml">          <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">className</span>=<span class="hljs-string">&#123;s.left&#125;</span>&gt;</span></span><br><span class="xml">            <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">className</span>=<span class="hljs-string">&#123;s.title&#125;</span>&gt;</span></span><br><span class="xml">              类型 <span class="hljs-tag">&lt;<span class="hljs-name">Icon</span> <span class="hljs-attr">className</span>=<span class="hljs-string">&#123;s.arrow&#125;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;arrow-bottom&quot;</span> /&gt;</span></span><br><span class="xml">            <span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span></span><br><span class="xml">          <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="xml">          <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">className</span>=<span class="hljs-string">&#123;s.right&#125;</span>&gt;</span></span><br><span class="xml">            <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">className</span>=<span class="hljs-string">&#123;s.time&#125;</span>&gt;</span></span><br><span class="xml">              2022-06</span><br><span class="xml">              <span class="hljs-tag">&lt;<span class="hljs-name">Icon</span> <span class="hljs-attr">className</span>=<span class="hljs-string">&#123;s.arrow&#125;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;arrow-bottom&quot;</span> /&gt;</span></span><br><span class="xml">            <span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span></span><br><span class="xml">          <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="xml">        <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="xml">      <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>  );<br>&#125;;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> Home;<br></code></pre></td></tr></table></figure><blockquote><p>文末已为同学们提供下本章节 demo 代码，样式部分不再详细说明。</p></blockquote><p>代码分析：</p><p><code>header</code> 采用 <code>fixed</code> 固定定位，将整个汇总信息固定在页面的顶部位置，这样后续列表滚动的时候，你可以方便查看当月的收入汇总，以及筛选当月消费类型和时间段的筛选。每个列表展示的是当月的收入与支出明细，比如 <code>2021-06</code> 的收入明细。</p><p>本次项目全程采用的是 <code>Flex</code> 弹性布局，这种布局形式在当下的开发生产环境已经非常成熟，同学们如果还有不熟悉的，请实现对 <code>Flex</code> 布局做一个简单的学习，这边推荐一个学习网站：</p><blockquote><p><a href="https://link.juejin.cn/?target=http://flexboxfroggy.com/%23zh-cn">flexboxfroggy.com/#zh-cn</a></p></blockquote><p>笔者当初也是通过这个网站的学习，入门的 <code>Flex</code>。</p><p>完成上述布局之后，页面如下所示：</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/4b4da908ba7d412ea25d6b925006f163~tplv-k3u1fbpfcp-zoom-in-crop-mark:3024:0:0:0.awebp" alt="img"></p><h3 id="列表页面实现"><a href="#列表页面实现" class="headerlink" title="列表页面实现"></a>列表页面实现</h3><p>列表页面会用到 <code>Zarm</code> 组件库为我们提供的 <a href="https://link.juejin.cn/?target=https://zarm.gitee.io/%23/components/pull">Pull</a> 组件，来实现下拉刷新以及无限滚动，我们先来将基础布局实现，如下所示：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// Home/index.jsx</span><br><span class="hljs-keyword">const</span> Home = <span class="hljs-function">() =&gt;</span> &#123;<br>  <span class="hljs-keyword">const</span> [list, setList] = useState([<br>    &#123;<br>      <span class="hljs-attr">bills</span>: [<br>        &#123;<br>          <span class="hljs-attr">amount</span>: <span class="hljs-string">&quot;25.00&quot;</span>,<br>          <span class="hljs-attr">date</span>: <span class="hljs-string">&quot;1623390740000&quot;</span>,<br>          <span class="hljs-attr">id</span>: <span class="hljs-number">911</span>,<br>          <span class="hljs-attr">pay_type</span>: <span class="hljs-number">1</span>,<br>          <span class="hljs-attr">remark</span>: <span class="hljs-string">&quot;&quot;</span>,<br>          <span class="hljs-attr">type_id</span>: <span class="hljs-number">1</span>,<br>          <span class="hljs-attr">type_name</span>: <span class="hljs-string">&quot;餐饮&quot;</span>,<br>        &#125;,<br>      ],<br>      <span class="hljs-attr">date</span>: <span class="hljs-string">&quot;2021-06-11&quot;</span>,<br>    &#125;,<br>  ]); <span class="hljs-comment">// 账单列表</span><br>  <span class="hljs-keyword">return</span> (<br>    <span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">className</span>=<span class="hljs-string">&#123;s.home&#125;</span>&gt;</span></span><br><span class="xml">      <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">className</span>=<span class="hljs-string">&#123;s.header&#125;</span>&gt;</span>...<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="xml">      <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">className</span>=<span class="hljs-string">&#123;s.contentWrap&#125;</span>&gt;</span></span><br><span class="xml">        &#123;list.map((item, index) =&gt; (</span><br><span class="xml">          <span class="hljs-tag">&lt;<span class="hljs-name">BillItem</span> /&gt;</span></span><br><span class="xml">        ))&#125;</span><br><span class="xml">      <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>  );<br>&#125;;<br></code></pre></td></tr></table></figure><p>上述我们添加 <code>list</code> 为列表假数据，<code>BillItem</code> 组件为账单单项组件，我们将其抽离到 <code>components</code> 组件库，如下：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// components/BillItem/index.jsx</span><br><span class="hljs-keyword">import</span> React, &#123; useEffect, useState &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;react&quot;</span>;<br><span class="hljs-keyword">import</span> PropTypes <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;prop-types&quot;</span>;<br><span class="hljs-keyword">import</span> dayjs <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;dayjs&quot;</span>;<br><span class="hljs-keyword">import</span> &#123; Cell &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;zarm&quot;</span>;<br><span class="hljs-keyword">import</span> &#123; useNavigate &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;react-router-dom&quot;</span>;<br><span class="hljs-keyword">import</span> CustomIcon <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;../CustomIcon&quot;</span>;<br><span class="hljs-keyword">import</span> &#123; typeMap &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;@/utils&quot;</span>;<br><br><span class="hljs-keyword">import</span> s <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;./style.module.less&quot;</span>;<br><br><span class="hljs-keyword">const</span> BillItem = <span class="hljs-function">(<span class="hljs-params">&#123; bill &#125;</span>) =&gt;</span> &#123;<br>  <span class="hljs-keyword">const</span> [income, setIncome] = useState(<span class="hljs-number">0</span>); <span class="hljs-comment">// 收入</span><br>  <span class="hljs-keyword">const</span> [expense, setExpense] = useState(<span class="hljs-number">0</span>); <span class="hljs-comment">// 支出</span><br>  <span class="hljs-keyword">const</span> navigateTo = useNavigate(); <span class="hljs-comment">// 路由实例</span><br><br>  <span class="hljs-comment">// 当添加账单是，bill.bills 长度变化，触发当日收支总和计算。</span><br>  useEffect(<span class="hljs-function">() =&gt;</span> &#123;<br>    <span class="hljs-comment">// 初始化将传入的 bill 内的 bills 数组内数据项，过滤出支出和收入。</span><br>    <span class="hljs-comment">// pay_type：1 为支出；2 为收入</span><br>    <span class="hljs-comment">// 通过 reduce 累加</span><br>    <span class="hljs-keyword">const</span> _income = bill.bills<br>      .filter(<span class="hljs-function">(<span class="hljs-params">i</span>) =&gt;</span> i.pay_type == <span class="hljs-number">2</span>)<br>      .reduce(<span class="hljs-function">(<span class="hljs-params">curr, item</span>) =&gt;</span> &#123;<br>        curr += <span class="hljs-built_in">Number</span>(item.amount);<br>        <span class="hljs-keyword">return</span> curr;<br>      &#125;, <span class="hljs-number">0</span>);<br>    setIncome(_income);<br>    <span class="hljs-keyword">const</span> _expense = bill.bills<br>      .filter(<span class="hljs-function">(<span class="hljs-params">i</span>) =&gt;</span> i.pay_type == <span class="hljs-number">1</span>)<br>      .reduce(<span class="hljs-function">(<span class="hljs-params">curr, item</span>) =&gt;</span> &#123;<br>        curr += <span class="hljs-built_in">Number</span>(item.amount);<br>        <span class="hljs-keyword">return</span> curr;<br>      &#125;, <span class="hljs-number">0</span>);<br>    setExpense(_expense);<br>  &#125;, [bill.bills]);<br><br>  <span class="hljs-comment">// 前往账单详情</span><br>  <span class="hljs-keyword">const</span> goToDetail = <span class="hljs-function">(<span class="hljs-params">item</span>) =&gt;</span> &#123;<br>    navigateTo(<span class="hljs-string">`/detail?id=<span class="hljs-subst">$&#123;item.id&#125;</span>`</span>);<br>  &#125;;<br><br>  <span class="hljs-keyword">return</span> (<br>    <span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">className</span>=<span class="hljs-string">&#123;s.item&#125;</span>&gt;</span></span><br><span class="xml">      <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">className</span>=<span class="hljs-string">&#123;s.headerDate&#125;</span>&gt;</span></span><br><span class="xml">        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">className</span>=<span class="hljs-string">&#123;s.date&#125;</span>&gt;</span>&#123;bill.date&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="xml">        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">className</span>=<span class="hljs-string">&#123;s.money&#125;</span>&gt;</span></span><br><span class="xml">          <span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span></span><br><span class="xml">            <span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;//s.yezgea02.com/1615953405599/zhi%402x.png&quot;</span> <span class="hljs-attr">alt</span>=<span class="hljs-string">&quot;支&quot;</span> /&gt;</span></span><br><span class="xml">            <span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>¥&#123;expense.toFixed(2)&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span></span><br><span class="xml">          <span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span></span><br><span class="xml">          <span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span></span><br><span class="xml">            <span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;//s.yezgea02.com/1615953405599/shou%402x.png&quot;</span> <span class="hljs-attr">alt</span>=<span class="hljs-string">&quot;收&quot;</span> /&gt;</span></span><br><span class="xml">            <span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>¥&#123;income.toFixed(2)&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span></span><br><span class="xml">          <span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span></span><br><span class="xml">        <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="xml">      <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="xml">      &#123;bill &amp;&amp;</span><br><span class="xml">        bill.bills.map((item) =&gt; (</span><br><span class="xml">          <span class="hljs-tag">&lt;<span class="hljs-name">Cell</span></span></span><br><span class="hljs-tag"><span class="xml">            <span class="hljs-attr">className</span>=<span class="hljs-string">&#123;s.bill&#125;</span></span></span><br><span class="hljs-tag"><span class="xml">            <span class="hljs-attr">key</span>=<span class="hljs-string">&#123;item.id&#125;</span></span></span><br><span class="hljs-tag"><span class="xml">            <span class="hljs-attr">onClick</span>=<span class="hljs-string">&#123;()</span> =&gt;</span> goToDetail(item)&#125;</span><br><span class="xml">            title=&#123;</span><br><span class="xml">              <span class="hljs-tag">&lt;&gt;</span></span><br><span class="xml">                <span class="hljs-tag">&lt;<span class="hljs-name">CustomIcon</span></span></span><br><span class="hljs-tag"><span class="xml">                  <span class="hljs-attr">className</span>=<span class="hljs-string">&#123;s.itemIcon&#125;</span></span></span><br><span class="hljs-tag"><span class="xml">                  <span class="hljs-attr">type</span>=<span class="hljs-string">&#123;item.type_id</span> ? <span class="hljs-attr">typeMap</span>[<span class="hljs-attr">item.type_id</span>]<span class="hljs-attr">.icon</span> <span class="hljs-attr">:</span> <span class="hljs-attr">1</span>&#125;</span></span><br><span class="hljs-tag"><span class="xml">                /&gt;</span></span><br><span class="xml">                <span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>&#123;item.type_name&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span></span><br><span class="xml">              <span class="hljs-tag">&lt;/&gt;</span></span><br><span class="xml">            &#125;</span><br><span class="xml">            description=&#123;</span><br><span class="xml">              <span class="hljs-tag">&lt;<span class="hljs-name">span</span></span></span><br><span class="hljs-tag"><span class="xml">                <span class="hljs-attr">style</span>=<span class="hljs-string">&#123;&#123;</span> <span class="hljs-attr">color:</span> <span class="hljs-attr">item.pay_type</span> == <span class="hljs-string">2</span> ? &quot;<span class="hljs-attr">red</span>&quot; <span class="hljs-attr">:</span> &quot;#<span class="hljs-attr">39be77</span>&quot; &#125;&#125;</span></span><br><span class="hljs-tag"><span class="xml">              &gt;</span>&#123;`$&#123;item.pay_type == 1 ? &quot;-&quot; : &quot;+&quot;&#125;$&#123;item.amount&#125;`&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span></span><br><span class="xml">            &#125;</span><br><span class="xml">            help=&#123;</span><br><span class="xml">              <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span></span><br><span class="xml">                &#123;dayjs(Number(item.date)).format(&quot;HH:mm&quot;)&#125;&#123;&quot; &quot;&#125;</span><br><span class="xml">                &#123;item.remark ? `| $&#123;item.remark&#125;` : &quot;&quot;&#125;</span><br><span class="xml">              <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="xml">            &#125;</span><br><span class="xml">          &gt;<span class="hljs-tag">&lt;/<span class="hljs-name">Cell</span>&gt;</span></span><br>        ))&#125;<br>    &lt;/div&gt;<br>  );<br>&#125;;<br><br>BillItem.propTypes = &#123;<br>  <span class="hljs-attr">bill</span>: PropTypes.object,<br>&#125;;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> BillItem;<br></code></pre></td></tr></table></figure><p>通过 <code>npm i dayjs -S</code> 添加日期操作工具，移动端建议使用 <code>dayjs</code>，因为它相比 <code>moment</code>，体积小很多。</p><p>上述代码中，<code>typeMap</code> 为我们自定义的属性，它是一个简直对，<code>key</code> 为消费类型 <code>icon</code> 的 <code>id</code>，<code>value</code> 为消费类型的 <code>iconfont</code> 的值，如下所示：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// utils/index.js</span><br>...<br><span class="hljs-keyword">export</span> <span class="hljs-keyword">const</span> typeMap = &#123;<br>  <span class="hljs-number">1</span>: &#123;<br>    <span class="hljs-attr">icon</span>: <span class="hljs-string">&#x27;canyin&#x27;</span><br>  &#125;,<br>  <span class="hljs-number">2</span>: &#123;<br>    <span class="hljs-attr">icon</span>: <span class="hljs-string">&#x27;fushi&#x27;</span><br>  &#125;,<br>  <span class="hljs-number">3</span>: &#123;<br>    <span class="hljs-attr">icon</span>: <span class="hljs-string">&#x27;jiaotong&#x27;</span><br>  &#125;,<br>  <span class="hljs-number">4</span>: &#123;<br>    <span class="hljs-attr">icon</span>: <span class="hljs-string">&#x27;riyong&#x27;</span><br>  &#125;,<br>  <span class="hljs-number">5</span>: &#123;<br>    <span class="hljs-attr">icon</span>: <span class="hljs-string">&#x27;gouwu&#x27;</span><br>  &#125;,<br>  <span class="hljs-number">6</span>: &#123;<br>    <span class="hljs-attr">icon</span>: <span class="hljs-string">&#x27;xuexi&#x27;</span><br>  &#125;,<br>  <span class="hljs-number">7</span>: &#123;<br>    <span class="hljs-attr">icon</span>: <span class="hljs-string">&#x27;yiliao&#x27;</span><br>  &#125;,<br>  <span class="hljs-number">8</span>: &#123;<br>    <span class="hljs-attr">icon</span>: <span class="hljs-string">&#x27;lvxing&#x27;</span><br>  &#125;,<br>  <span class="hljs-number">9</span>: &#123;<br>    <span class="hljs-attr">icon</span>: <span class="hljs-string">&#x27;renqing&#x27;</span><br>  &#125;,<br>  <span class="hljs-number">10</span>: &#123;<br>    <span class="hljs-attr">icon</span>: <span class="hljs-string">&#x27;qita&#x27;</span><br>  &#125;,<br>  <span class="hljs-number">11</span>: &#123;<br>    <span class="hljs-attr">icon</span>: <span class="hljs-string">&#x27;gongzi&#x27;</span><br>  &#125;,<br>  <span class="hljs-number">12</span>: &#123;<br>    <span class="hljs-attr">icon</span>: <span class="hljs-string">&#x27;jiangjin&#x27;</span><br>  &#125;,<br>  <span class="hljs-number">13</span>: &#123;<br>    <span class="hljs-attr">icon</span>: <span class="hljs-string">&#x27;zhuanzhang&#x27;</span><br>  &#125;,<br>  <span class="hljs-number">14</span>: &#123;<br>    <span class="hljs-attr">icon</span>: <span class="hljs-string">&#x27;licai&#x27;</span><br>  &#125;,<br>  <span class="hljs-number">15</span>: &#123;<br>    <span class="hljs-attr">icon</span>: <span class="hljs-string">&#x27;tuikuang&#x27;</span><br>  &#125;,<br>  <span class="hljs-number">16</span>: &#123;<br>    <span class="hljs-attr">icon</span>: <span class="hljs-string">&#x27;qita&#x27;</span><br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>完成上述操作之后，我们重启浏览器，如下所示：</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/d2eb308feee24749a7ce4cd0d00a9645~tplv-k3u1fbpfcp-zoom-in-crop-mark:3024:0:0:0.awebp" alt="img"></p><p>样式部分大家可以根据自己的喜好进行微调，不一定要一模一样，仁者见仁。</p><h3 id="下拉刷新、上滑无限加载"><a href="#下拉刷新、上滑无限加载" class="headerlink" title="下拉刷新、上滑无限加载"></a>下拉刷新、上滑无限加载</h3><p>我们修改 <code>Home/index.jsx</code> 如下所示：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">import</span> React, &#123; useState, useEffect &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;react&#x27;</span><br><span class="hljs-keyword">import</span> &#123; Icon, Pull &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;zarm&#x27;</span><br><span class="hljs-keyword">import</span> dayjs <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;dayjs&#x27;</span><br><span class="hljs-keyword">import</span> BillItem <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@/components/BillItem&#x27;</span><br><span class="hljs-keyword">import</span> &#123; get, REFRESH_STATE, LOAD_STATE &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@/utils&#x27;</span> <span class="hljs-comment">// Pull 组件需要的一些常量</span><br><br><span class="hljs-keyword">import</span> s <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./style.module.less&#x27;</span><br><br><span class="hljs-keyword">const</span> Home = <span class="hljs-function">() =&gt;</span> &#123;<br>  <span class="hljs-keyword">const</span> [currentTime, setCurrentTime] = useState(dayjs().format(<span class="hljs-string">&#x27;YYYY-MM&#x27;</span>)); <span class="hljs-comment">// 当前筛选时间</span><br>  <span class="hljs-keyword">const</span> [page, setPage] = useState(<span class="hljs-number">1</span>); <span class="hljs-comment">// 分页</span><br>  <span class="hljs-keyword">const</span> [list, setList] = useState([]); <span class="hljs-comment">// 账单列表</span><br>  <span class="hljs-keyword">const</span> [totalPage, setTotalPage] = useState(<span class="hljs-number">0</span>); <span class="hljs-comment">// 分页总数</span><br>  <span class="hljs-keyword">const</span> [refreshing, setRefreshing] = useState(REFRESH_STATE.normal); <span class="hljs-comment">// 下拉刷新状态</span><br>  <span class="hljs-keyword">const</span> [loading, setLoading] = useState(LOAD_STATE.normal); <span class="hljs-comment">// 上拉加载状态</span><br><br>  useEffect(<span class="hljs-function">() =&gt;</span> &#123;<br>    getBillList() <span class="hljs-comment">// 初始化</span><br>  &#125;, [page])<br><br>  <span class="hljs-comment">// 获取账单方法</span><br>  <span class="hljs-keyword">const</span> getBillList = <span class="hljs-keyword">async</span> () =&gt; &#123;<br>    <span class="hljs-keyword">const</span> &#123; data &#125; = <span class="hljs-keyword">await</span> get(<span class="hljs-string">`/api/bill/list?page=<span class="hljs-subst">$&#123;page&#125;</span>&amp;page_size=5&amp;date=<span class="hljs-subst">$&#123;currentTime&#125;</span>`</span>);<br>    <span class="hljs-comment">// 下拉刷新，重制数据</span><br>    <span class="hljs-keyword">if</span> (page == <span class="hljs-number">1</span>) &#123;<br>      setList(data.list);<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>      setList(list.concat(data.list));<br>    &#125;<br>    setTotalPage(data.totalPage);<br>    <span class="hljs-comment">// 上滑加载状态</span><br>    setLoading(LOAD_STATE.success);<br>    setRefreshing(REFRESH_STATE.success);<br>  &#125;<br><br>  <span class="hljs-comment">// 请求列表数据</span><br>  <span class="hljs-keyword">const</span> refreshData = <span class="hljs-function">() =&gt;</span> &#123;<br>    setRefreshing(REFRESH_STATE.loading);<br>    <span class="hljs-keyword">if</span> (page != <span class="hljs-number">1</span>) &#123;<br>      setPage(<span class="hljs-number">1</span>);<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>      getBillList();<br>    &#125;;<br>  &#125;;<br><br>  <span class="hljs-keyword">const</span> loadData = <span class="hljs-function">() =&gt;</span> &#123;<br>    <span class="hljs-keyword">if</span> (page &lt; totalPage) &#123;<br>      setLoading(LOAD_STATE.loading);<br>      setPage(page + <span class="hljs-number">1</span>);<br>    &#125;<br>  &#125;<br><br>  <span class="hljs-keyword">return</span> <span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">className</span>=<span class="hljs-string">&#123;s.home&#125;</span>&gt;</span></span><br><span class="xml">    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">className</span>=<span class="hljs-string">&#123;s.header&#125;</span>&gt;</span></span><br><span class="xml">      <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">className</span>=<span class="hljs-string">&#123;s.dataWrap&#125;</span>&gt;</span></span><br><span class="xml">        <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">className</span>=<span class="hljs-string">&#123;s.expense&#125;</span>&gt;</span>总支出：<span class="hljs-tag">&lt;<span class="hljs-name">b</span>&gt;</span>¥ 200<span class="hljs-tag">&lt;/<span class="hljs-name">b</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span></span><br><span class="xml">        <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">className</span>=<span class="hljs-string">&#123;s.income&#125;</span>&gt;</span>总收入：<span class="hljs-tag">&lt;<span class="hljs-name">b</span>&gt;</span>¥ 500<span class="hljs-tag">&lt;/<span class="hljs-name">b</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span></span><br><span class="xml">      <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="xml">      <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">className</span>=<span class="hljs-string">&#123;s.typeWrap&#125;</span>&gt;</span></span><br><span class="xml">        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">className</span>=<span class="hljs-string">&#123;s.left&#125;</span>&gt;</span></span><br><span class="xml">          <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">className</span>=<span class="hljs-string">&#123;s.title&#125;</span>&gt;</span>类型 <span class="hljs-tag">&lt;<span class="hljs-name">Icon</span> <span class="hljs-attr">className</span>=<span class="hljs-string">&#123;s.arrow&#125;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;arrow-bottom&quot;</span> /&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span></span><br><span class="xml">        <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="xml">        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">className</span>=<span class="hljs-string">&#123;s.right&#125;</span>&gt;</span></span><br><span class="xml">          <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">className</span>=<span class="hljs-string">&#123;s.time&#125;</span>&gt;</span>2022-06<span class="hljs-tag">&lt;<span class="hljs-name">Icon</span> <span class="hljs-attr">className</span>=<span class="hljs-string">&#123;s.arrow&#125;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;arrow-bottom&quot;</span> /&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span></span><br><span class="xml">        <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="xml">      <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="xml">    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">className</span>=<span class="hljs-string">&#123;s.contentWrap&#125;</span>&gt;</span></span><br><span class="xml">      &#123;</span><br><span class="xml">        list.length ? <span class="hljs-tag">&lt;<span class="hljs-name">Pull</span></span></span><br><span class="hljs-tag"><span class="xml">          <span class="hljs-attr">animationDuration</span>=<span class="hljs-string">&#123;200&#125;</span></span></span><br><span class="hljs-tag"><span class="xml">          <span class="hljs-attr">stayTime</span>=<span class="hljs-string">&#123;400&#125;</span></span></span><br><span class="hljs-tag"><span class="xml">          <span class="hljs-attr">refresh</span>=<span class="hljs-string">&#123;&#123;</span></span></span><br><span class="hljs-tag"><span class="xml">            <span class="hljs-attr">state:</span> <span class="hljs-attr">refreshing</span>,</span></span><br><span class="hljs-tag"><span class="xml">            <span class="hljs-attr">handler:</span> <span class="hljs-attr">refreshData</span></span></span><br><span class="hljs-tag"><span class="xml">          &#125;&#125;</span></span><br><span class="hljs-tag"><span class="xml">          <span class="hljs-attr">load</span>=<span class="hljs-string">&#123;&#123;</span></span></span><br><span class="hljs-tag"><span class="xml">            <span class="hljs-attr">state:</span> <span class="hljs-attr">loading</span>,</span></span><br><span class="hljs-tag"><span class="xml">            <span class="hljs-attr">distance:</span> <span class="hljs-attr">200</span>,</span></span><br><span class="hljs-tag"><span class="xml">            <span class="hljs-attr">handler:</span> <span class="hljs-attr">loadData</span></span></span><br><span class="hljs-tag"><span class="xml">          &#125;&#125;</span></span><br><span class="hljs-tag"><span class="xml">        &gt;</span></span><br><span class="xml">          &#123;</span><br><span class="xml">            list.map((item, index) =&gt; <span class="hljs-tag">&lt;<span class="hljs-name">BillItem</span></span></span><br><span class="hljs-tag"><span class="xml">              <span class="hljs-attr">bill</span>=<span class="hljs-string">&#123;item&#125;</span></span></span><br><span class="hljs-tag"><span class="xml">              <span class="hljs-attr">key</span>=<span class="hljs-string">&#123;index&#125;</span></span></span><br><span class="hljs-tag"><span class="xml">            /&gt;</span>)</span><br><span class="xml">          &#125;</span><br><span class="xml">        <span class="hljs-tag">&lt;/<span class="hljs-name">Pull</span>&gt;</span> : null</span><br><span class="xml">      &#125;</span><br><span class="xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="xml">  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>&#125;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> Home<br>&#125;<br></code></pre></td></tr></table></figure><p>在 <code>utils/index.js</code> 中添加一些 <code>Pull</code> 组件需要用到的常量，如下：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// utils/index.js</span><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">const</span> REFRESH_STATE = &#123;<br>  <span class="hljs-attr">normal</span>: <span class="hljs-number">0</span>, <span class="hljs-comment">// 普通</span><br>  <span class="hljs-attr">pull</span>: <span class="hljs-number">1</span>, <span class="hljs-comment">// 下拉刷新（未满足刷新条件）</span><br>  <span class="hljs-attr">drop</span>: <span class="hljs-number">2</span>, <span class="hljs-comment">// 释放立即刷新（满足刷新条件）</span><br>  <span class="hljs-attr">loading</span>: <span class="hljs-number">3</span>, <span class="hljs-comment">// 加载中</span><br>  <span class="hljs-attr">success</span>: <span class="hljs-number">4</span>, <span class="hljs-comment">// 加载成功</span><br>  <span class="hljs-attr">failure</span>: <span class="hljs-number">5</span>, <span class="hljs-comment">// 加载失败</span><br>&#125;;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">const</span> LOAD_STATE = &#123;<br>  <span class="hljs-attr">normal</span>: <span class="hljs-number">0</span>, <span class="hljs-comment">// 普通</span><br>  <span class="hljs-attr">abort</span>: <span class="hljs-number">1</span>, <span class="hljs-comment">// 中止</span><br>  <span class="hljs-attr">loading</span>: <span class="hljs-number">2</span>, <span class="hljs-comment">// 加载中</span><br>  <span class="hljs-attr">success</span>: <span class="hljs-number">3</span>, <span class="hljs-comment">// 加载成功</span><br>  <span class="hljs-attr">failure</span>: <span class="hljs-number">4</span>, <span class="hljs-comment">// 加载失败</span><br>  <span class="hljs-attr">complete</span>: <span class="hljs-number">5</span>, <span class="hljs-comment">// 加载完成（无新数据）</span><br>&#125;;<br></code></pre></td></tr></table></figure><p>代码中，已经为大家整理了详细的注释。无限滚动在移动端的应用随处可见，所以这块内容大家尽量能做到烂熟于心。如果有可能的话，希望你也能将其二次封装，便于多个地方的复用。我们打开浏览器查看效果：</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/9b1408791dbd457f9a68abd898f6bb74~tplv-k3u1fbpfcp-zoom-in-crop-mark:3024:0:0:0.awebp" alt="img"></p><p>同学们注意一下上述动图中的细节，滑到底部的时候，有一部分内容被遮挡住了，此时我们需要添加下列样式，进行修复：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-class">.home</span> &#123;<br>  ... <span class="hljs-selector-class">.content-wrap</span> &#123;<br>    <span class="hljs-attribute">height</span>: <span class="hljs-built_in">calc</span>(~<span class="hljs-string">&quot;(100% - 50px)&quot;</span>);<br>    <span class="hljs-attribute">overflow</span>: hidden;<br>    <span class="hljs-attribute">overflow-y</span>: scroll;<br>    <span class="hljs-attribute">background-color</span>: <span class="hljs-number">#f5f5f5</span>;<br>    <span class="hljs-attribute">padding</span>: <span class="hljs-number">10px</span>;<br>    :global &#123;<br>      .za-pull &#123;<br>        overflow: unset;<br>      &#125;<br>    &#125;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>给 <code>content-wrap</code> 对应的标签一个高度，并且减去 <code>50px</code> 的高度，这样就不会被遮挡住下面一点的部分。</p><p>还有一个很关键的步骤，给 <code>src</code> 目录下的的 <code>index.css</code> 添加初始化高度和样式：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-tag">body</span> &#123;<br>  <span class="hljs-attribute">margin</span>: <span class="hljs-number">0</span>;<br>  <span class="hljs-attribute">font-family</span>: -apple-system, BlinkMacSystemFont, <span class="hljs-string">&quot;Segoe UI&quot;</span>, <span class="hljs-string">&quot;Roboto&quot;</span>,<br>    <span class="hljs-string">&quot;Oxygen&quot;</span>, <span class="hljs-string">&quot;Ubuntu&quot;</span>, <span class="hljs-string">&quot;Cantarell&quot;</span>, <span class="hljs-string">&quot;Fira Sans&quot;</span>, <span class="hljs-string">&quot;Droid Sans&quot;</span>,<br>    <span class="hljs-string">&quot;Helvetica Neue&quot;</span>, sans-serif;<br>  -webkit-<span class="hljs-attribute">font-smoothing</span>: antialiased;<br>  -moz-osx-<span class="hljs-attribute">font-smoothing</span>: grayscale;<br>&#125;<br><br><span class="hljs-selector-tag">body</span>,<br><span class="hljs-selector-tag">html</span>,<br><span class="hljs-selector-tag">p</span> &#123;<br>  <span class="hljs-attribute">height</span>: <span class="hljs-number">100%</span>;<br>  <span class="hljs-attribute">margin</span>: <span class="hljs-number">0</span>;<br>  <span class="hljs-attribute">padding</span>: <span class="hljs-number">0</span>;<br>&#125;<br><br>* &#123;<br>  <span class="hljs-attribute">box-sizing</span>: border-box;<br>&#125;<br><br><span class="hljs-selector-id">#root</span> &#123;<br>  <span class="hljs-attribute">height</span>: <span class="hljs-number">100%</span>;<br>&#125;<br><br><span class="hljs-selector-class">.text-deep</span> &#123;<br>  <span class="hljs-attribute">color</span>: <span class="hljs-built_in">rgba</span>(<span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0.9</span>);<br>&#125;<br><br><span class="hljs-selector-class">.text-light</span> &#123;<br>  <span class="hljs-attribute">color</span>: <span class="hljs-built_in">rgba</span>(<span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0.6</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p>至此，滚动加载基本上就完成了。</p><h3 id="添加筛选条件"><a href="#添加筛选条件" class="headerlink" title="添加筛选条件"></a>添加筛选条件</h3><p>最后我们需要添加两个筛选条件，类型选择和日期选择。</p><p>我们先来实现类型选择弹窗，我们采用的形式如下，底部弹出的弹窗形式，大致如下：</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/6a334aa0eee1451fbb268f3b2e70a67c~tplv-k3u1fbpfcp-zoom-in-crop-mark:3024:0:0:0.awebp" alt="img"></p><p>想要实现上述形式，我们需要借助 <code>Zarm</code> 组件库为我们提供的 <a href="https://link.juejin.cn/?target=https://zarm.gitee.io/%23/components/popup">Popup</a> 组件，它的作用就是从不同方向弹出一个脱离文档流的弹出层。同样，我们使用组件的形式将其放置于 <code>components</code> 文件夹内实现，这样便于后续其他地方的使用。</p><p>新建 <code>components/PopupType</code>，在其内部新建 <code>index.jsx</code> 和 <code>style.module.less</code> 内容如下：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// PopupType/index.jsx</span><br><span class="hljs-keyword">import</span> React, &#123; forwardRef, useEffect, useState &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;react&quot;</span>;<br><span class="hljs-keyword">import</span> PropTypes <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;prop-types&quot;</span>;<br><span class="hljs-keyword">import</span> &#123; Popup, Icon &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;zarm&quot;</span>;<br><span class="hljs-keyword">import</span> cx <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;classnames&quot;</span>;<br><span class="hljs-keyword">import</span> &#123; get &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;@/utils&quot;</span>;<br><br><span class="hljs-keyword">import</span> s <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;./style.module.less&quot;</span>;<br><br><span class="hljs-comment">// forwardRef 用于拿到父组件传入的 ref 属性，这样在父组件便能通过 ref 控制子组件。</span><br><span class="hljs-keyword">const</span> PopupType = forwardRef(<span class="hljs-function">(<span class="hljs-params">&#123; onSelect &#125;, ref</span>) =&gt;</span> &#123;<br>  <span class="hljs-keyword">const</span> [show, setShow] = useState(<span class="hljs-literal">false</span>); <span class="hljs-comment">// 组件的显示和隐藏</span><br>  <span class="hljs-keyword">const</span> [active, setActive] = useState(<span class="hljs-string">&quot;all&quot;</span>); <span class="hljs-comment">// 激活的 type</span><br>  <span class="hljs-keyword">const</span> [expense, setExpense] = useState([]); <span class="hljs-comment">// 支出类型标签</span><br>  <span class="hljs-keyword">const</span> [income, setIncome] = useState([]); <span class="hljs-comment">// 收入类型标签</span><br><br>  useEffect(<span class="hljs-keyword">async</span> () =&gt; &#123;<br>    <span class="hljs-comment">// 请求标签接口放在弹窗内，这个弹窗可能会被复用，所以请求如果放在外面，会造成代码冗余。</span><br>    <span class="hljs-keyword">const</span> &#123;<br>      <span class="hljs-attr">data</span>: &#123; list &#125;,<br>    &#125; = <span class="hljs-keyword">await</span> get(<span class="hljs-string">&quot;/api/type/list&quot;</span>);<br>    setExpense(list.filter(<span class="hljs-function">(<span class="hljs-params">i</span>) =&gt;</span> i.type == <span class="hljs-number">1</span>));<br>    setIncome(list.filter(<span class="hljs-function">(<span class="hljs-params">i</span>) =&gt;</span> i.type == <span class="hljs-number">2</span>));<br>  &#125;, []);<br><br>  <span class="hljs-keyword">if</span> (ref) &#123;<br>    ref.current = &#123;<br>      <span class="hljs-comment">// 外部可以通过 ref.current.show 来控制组件的显示</span><br>      <span class="hljs-attr">show</span>: <span class="hljs-function">() =&gt;</span> &#123;<br>        setShow(<span class="hljs-literal">true</span>);<br>      &#125;,<br>      <span class="hljs-comment">// 外部可以通过 ref.current.close 来控制组件的显示</span><br>      <span class="hljs-attr">close</span>: <span class="hljs-function">() =&gt;</span> &#123;<br>        setShow(<span class="hljs-literal">false</span>);<br>      &#125;,<br>    &#125;;<br>  &#125;<br><br>  <span class="hljs-comment">// 选择类型回调</span><br>  <span class="hljs-keyword">const</span> choseType = <span class="hljs-function">(<span class="hljs-params">item</span>) =&gt;</span> &#123;<br>    setActive(item.id);<br>    setShow(<span class="hljs-literal">false</span>);<br>    <span class="hljs-comment">// 父组件传入的 onSelect，为了获取类型</span><br>    onSelect(item);<br>  &#125;;<br><br>  <span class="hljs-keyword">return</span> (<br>    <span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">Popup</span></span></span><br><span class="hljs-tag"><span class="xml">      <span class="hljs-attr">visible</span>=<span class="hljs-string">&#123;show&#125;</span></span></span><br><span class="hljs-tag"><span class="xml">      <span class="hljs-attr">direction</span>=<span class="hljs-string">&quot;bottom&quot;</span></span></span><br><span class="hljs-tag"><span class="xml">      <span class="hljs-attr">onMaskClick</span>=<span class="hljs-string">&#123;()</span> =&gt;</span> setShow(false)&#125;</span><br><span class="xml">      destroy=&#123;false&#125;</span><br><span class="xml">      mountContainer=&#123;() =&gt; document.body&#125;</span><br><span class="xml">    &gt;</span><br><span class="xml">      <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">className</span>=<span class="hljs-string">&#123;s.popupType&#125;</span>&gt;</span></span><br><span class="xml">        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">className</span>=<span class="hljs-string">&#123;s.header&#125;</span>&gt;</span></span><br><span class="xml">          请选择类型</span><br><span class="xml">          <span class="hljs-tag">&lt;<span class="hljs-name">Icon</span></span></span><br><span class="hljs-tag"><span class="xml">            <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;wrong&quot;</span></span></span><br><span class="hljs-tag"><span class="xml">            <span class="hljs-attr">className</span>=<span class="hljs-string">&#123;s.cross&#125;</span></span></span><br><span class="hljs-tag"><span class="xml">            <span class="hljs-attr">onClick</span>=<span class="hljs-string">&#123;()</span> =&gt;</span> setShow(false)&#125;</span><br><span class="xml">          /&gt;</span><br><span class="xml">        <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="xml">        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">className</span>=<span class="hljs-string">&#123;s.content&#125;</span>&gt;</span></span><br><span class="xml">          <span class="hljs-tag">&lt;<span class="hljs-name">div</span></span></span><br><span class="hljs-tag"><span class="xml">            <span class="hljs-attr">onClick</span>=<span class="hljs-string">&#123;()</span> =&gt;</span> choseType(&#123; id: &quot;all&quot; &#125;)&#125;</span><br><span class="xml">            className=&#123;cx(&#123; [s.all]: true, [s.active]: active == &quot;all&quot; &#125;)&#125;</span><br><span class="xml">          &gt;</span><br><span class="xml">            全部类型</span><br><span class="xml">          <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="xml">          <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">className</span>=<span class="hljs-string">&#123;s.title&#125;</span>&gt;</span>支出<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="xml">          <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">className</span>=<span class="hljs-string">&#123;s.expenseWrap&#125;</span>&gt;</span></span><br><span class="xml">            &#123;expense.map((item, index) =&gt; (</span><br><span class="xml">              <span class="hljs-tag">&lt;<span class="hljs-name">p</span></span></span><br><span class="hljs-tag"><span class="xml">                <span class="hljs-attr">key</span>=<span class="hljs-string">&#123;index&#125;</span></span></span><br><span class="hljs-tag"><span class="xml">                <span class="hljs-attr">onClick</span>=<span class="hljs-string">&#123;()</span> =&gt;</span> choseType(item)&#125;</span><br><span class="xml">                className=&#123;cx(&#123; [s.active]: active == item.id &#125;)&#125;</span><br><span class="xml">              &gt;</span><br><span class="xml">                &#123;item.name&#125;</span><br><span class="xml">              <span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span></span><br><span class="xml">            ))&#125;</span><br><span class="xml">          <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="xml">          <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">className</span>=<span class="hljs-string">&#123;s.title&#125;</span>&gt;</span>收入<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="xml">          <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">className</span>=<span class="hljs-string">&#123;s.incomeWrap&#125;</span>&gt;</span></span><br><span class="xml">            &#123;income.map((item, index) =&gt; (</span><br><span class="xml">              <span class="hljs-tag">&lt;<span class="hljs-name">p</span></span></span><br><span class="hljs-tag"><span class="xml">                <span class="hljs-attr">key</span>=<span class="hljs-string">&#123;index&#125;</span></span></span><br><span class="hljs-tag"><span class="xml">                <span class="hljs-attr">onClick</span>=<span class="hljs-string">&#123;()</span> =&gt;</span> choseType(item)&#125;</span><br><span class="xml">                className=&#123;cx(&#123; [s.active]: active == item.id &#125;)&#125;</span><br><span class="xml">              &gt;</span><br><span class="xml">                &#123;item.name&#125;</span><br><span class="xml">              <span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span></span><br><span class="xml">            ))&#125;</span><br><span class="xml">          <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="xml">        <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="xml">      <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">Popup</span>&gt;</span></span><br>  );<br>&#125;);<br><br>PopupType.propTypes = &#123;<br>  <span class="hljs-attr">onSelect</span>: PropTypes.func,<br>&#125;;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> PopupType;<br></code></pre></td></tr></table></figure><p>老规矩，代码逻辑注释我都写在代码中，我坚持不把注释和逻辑分开，是因为我自己在看其他教程的时候，遇到代码中没写逻辑的文章，来回看下边的注释和上边的代码，有点乱，如果同学们有疑问，可以进群截图咨询，我在群里看到的话，随时进行解答。</p><p>类型弹窗组件写完之后，我们在 <code>Home/index.jsx</code> 内尝试调用它，如下所示：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br></pre></td><td class="code"><pre><code class="hljs js">...<br><span class="hljs-keyword">import</span> PopupType <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@/components/PopupType&#x27;</span><br><br><span class="hljs-keyword">const</span> Home = <span class="hljs-function">() =&gt;</span> &#123;<br>  <span class="hljs-keyword">const</span> typeRef = useRef(); <span class="hljs-comment">// 账单类型 ref</span><br>  <span class="hljs-keyword">const</span> [currentSelect, setCurrentSelect] = useState(&#123;&#125;); <span class="hljs-comment">// 当前筛选类型</span><br>  ...<br><br>  useEffect(<span class="hljs-function">() =&gt;</span> &#123;<br>    getBillList() <span class="hljs-comment">// 初始化</span><br>  &#125;, [page, currentSelect])<br><br>  <span class="hljs-keyword">const</span> getBillList = <span class="hljs-keyword">async</span> () =&gt; &#123;<br>    <span class="hljs-keyword">const</span> &#123; data &#125; = <span class="hljs-keyword">await</span> get(<span class="hljs-string">`/api/bill/list?page=<span class="hljs-subst">$&#123;page&#125;</span>&amp;page_size=5&amp;date=<span class="hljs-subst">$&#123;currentTime&#125;</span>&amp;type_id=<span class="hljs-subst">$&#123;currentSelect.id || <span class="hljs-string">&#x27;all&#x27;</span>&#125;</span>`</span>);<br>    <span class="hljs-comment">// 下拉刷新，重制数据</span><br>    <span class="hljs-keyword">if</span> (page == <span class="hljs-number">1</span>) &#123;<br>      setList(data.list);<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>      setList(list.concat(data.list));<br>    &#125;<br>    setTotalPage(data.totalPage);<br>    <span class="hljs-comment">// 上滑加载状态</span><br>    setLoading(LOAD_STATE.success);<br>    setRefreshing(REFRESH_STATE.success);<br>  &#125;<br><br>  ...<br><br>  <span class="hljs-comment">// 添加账单弹窗</span><br>  <span class="hljs-keyword">const</span> toggle = <span class="hljs-function">() =&gt;</span> &#123;<br>    typeRef.current &amp;&amp; typeRef.current.show()<br>  &#125;;<br><br>  <span class="hljs-comment">// 筛选类型</span><br>  <span class="hljs-keyword">const</span> select = <span class="hljs-function">(<span class="hljs-params">item</span>) =&gt;</span> &#123;<br>    setRefreshing(REFRESH_STATE.loading);<br>    <span class="hljs-comment">// 触发刷新列表，将分页重制为 1</span><br>    setPage(<span class="hljs-number">1</span>);<br>    setCurrentSelect(item)<br>  &#125;<br><br>  <span class="hljs-keyword">return</span> <span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">className</span>=<span class="hljs-string">&#123;s.home&#125;</span>&gt;</span></span><br><span class="xml">    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">className</span>=<span class="hljs-string">&#123;s.header&#125;</span>&gt;</span></span><br><span class="xml">      <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">className</span>=<span class="hljs-string">&#123;s.dataWrap&#125;</span>&gt;</span></span><br><span class="xml">        <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">className</span>=<span class="hljs-string">&#123;s.expense&#125;</span>&gt;</span>总支出：<span class="hljs-tag">&lt;<span class="hljs-name">b</span>&gt;</span>¥ 200<span class="hljs-tag">&lt;/<span class="hljs-name">b</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span></span><br><span class="xml">        <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">className</span>=<span class="hljs-string">&#123;s.income&#125;</span>&gt;</span>总收入：<span class="hljs-tag">&lt;<span class="hljs-name">b</span>&gt;</span>¥ 500<span class="hljs-tag">&lt;/<span class="hljs-name">b</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span></span><br><span class="xml">      <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="xml">      <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">className</span>=<span class="hljs-string">&#123;s.typeWrap&#125;</span>&gt;</span></span><br><span class="xml">        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">className</span>=<span class="hljs-string">&#123;s.left&#125;</span> <span class="hljs-attr">onClick</span>=<span class="hljs-string">&#123;toggle&#125;</span>&gt;</span></span><br><span class="xml">          <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">className</span>=<span class="hljs-string">&#123;s.title&#125;</span>&gt;</span>&#123; currentSelect.name || &#x27;全部类型&#x27; &#125; <span class="hljs-tag">&lt;<span class="hljs-name">Icon</span> <span class="hljs-attr">className</span>=<span class="hljs-string">&#123;s.arrow&#125;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;arrow-bottom&quot;</span> /&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span></span><br><span class="xml">        <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="xml">        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">className</span>=<span class="hljs-string">&#123;s.right&#125;</span>&gt;</span></span><br><span class="xml">          <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">className</span>=<span class="hljs-string">&#123;s.time&#125;</span>&gt;</span>2022-06<span class="hljs-tag">&lt;<span class="hljs-name">Icon</span> <span class="hljs-attr">className</span>=<span class="hljs-string">&#123;s.arrow&#125;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;arrow-bottom&quot;</span> /&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span></span><br><span class="xml">        <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="xml">      <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="xml">    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">className</span>=<span class="hljs-string">&#123;s.contentWrap&#125;</span>&gt;</span></span><br><span class="xml">      &#123;</span><br><span class="xml">        list.length ? <span class="hljs-tag">&lt;<span class="hljs-name">Pull</span></span></span><br><span class="hljs-tag"><span class="xml">          <span class="hljs-attr">animationDuration</span>=<span class="hljs-string">&#123;200&#125;</span></span></span><br><span class="hljs-tag"><span class="xml">          <span class="hljs-attr">stayTime</span>=<span class="hljs-string">&#123;400&#125;</span></span></span><br><span class="hljs-tag"><span class="xml">          <span class="hljs-attr">refresh</span>=<span class="hljs-string">&#123;&#123;</span></span></span><br><span class="hljs-tag"><span class="xml">            <span class="hljs-attr">state:</span> <span class="hljs-attr">refreshing</span>,</span></span><br><span class="hljs-tag"><span class="xml">            <span class="hljs-attr">handler:</span> <span class="hljs-attr">refreshData</span></span></span><br><span class="hljs-tag"><span class="xml">          &#125;&#125;</span></span><br><span class="hljs-tag"><span class="xml">          <span class="hljs-attr">load</span>=<span class="hljs-string">&#123;&#123;</span></span></span><br><span class="hljs-tag"><span class="xml">            <span class="hljs-attr">state:</span> <span class="hljs-attr">loading</span>,</span></span><br><span class="hljs-tag"><span class="xml">            <span class="hljs-attr">distance:</span> <span class="hljs-attr">200</span>,</span></span><br><span class="hljs-tag"><span class="xml">            <span class="hljs-attr">handler:</span> <span class="hljs-attr">loadData</span></span></span><br><span class="hljs-tag"><span class="xml">          &#125;&#125;</span></span><br><span class="hljs-tag"><span class="xml">        &gt;</span></span><br><span class="xml">          &#123;</span><br><span class="xml">            list.map((item, index) =&gt; <span class="hljs-tag">&lt;<span class="hljs-name">BillItem</span></span></span><br><span class="hljs-tag"><span class="xml">              <span class="hljs-attr">bill</span>=<span class="hljs-string">&#123;item&#125;</span></span></span><br><span class="hljs-tag"><span class="xml">              <span class="hljs-attr">key</span>=<span class="hljs-string">&#123;index&#125;</span></span></span><br><span class="hljs-tag"><span class="xml">            /&gt;</span>)</span><br><span class="xml">          &#125;</span><br><span class="xml">        <span class="hljs-tag">&lt;/<span class="hljs-name">Pull</span>&gt;</span> : null</span><br><span class="xml">      &#125;</span><br><span class="xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="xml">    <span class="hljs-tag">&lt;<span class="hljs-name">PopupType</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&#123;typeRef&#125;</span> <span class="hljs-attr">onSelect</span>=<span class="hljs-string">&#123;select&#125;</span> /&gt;</span></span><br><span class="xml">  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>&#125;<br></code></pre></td></tr></table></figure><p>添加类型选择弹窗注意几个点：</p><p>1、使用 <code>useState</code> 声明好类型字段。 2、通过 <code>useRef</code> 声明的 ref 给到 <code>PopupType</code> 组件，便于控制内部的方法。 3、传递 <code>onSelect</code> 方法，获取到弹窗内部选择的类型。 4、<code>useEffect</code> 第二个参数，添加一个 <code>currentSelect</code> 以来，便于修改的时候，触发列表的重新渲染。</p><p>有一个有趣的知识点，这里和大家分享一下，你尝试去打印 <code>typeRef</code> 变量，如下所示：</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/3c7b0f79094c436d8ee0d089b35acc46~tplv-k3u1fbpfcp-zoom-in-crop-mark:3024:0:0:0.awebp" alt="img"></p><p>可以看到，在 <code>PopupType</code> 组件内挂载的方法，可以在父组件内获取到，那么我们便可以直接把弹窗的显示隐藏参数放在子组件内维护，而不用每次都去在父组件声明 <code>show</code> 或 <code>hide</code>。</p><p>加完类型筛选之后，我们再将时间筛选加上，同样将时间筛选添加至 <code>components</code> 目录下，便于后续数据页面的时间筛选。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// PopupDate/index.jsx</span><br><span class="hljs-keyword">import</span> React, &#123; forwardRef, useState &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;react&quot;</span>;<br><span class="hljs-keyword">import</span> PropTypes <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;prop-types&quot;</span>;<br><span class="hljs-keyword">import</span> &#123; Popup, DatePicker &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;zarm&quot;</span>;<br><span class="hljs-keyword">import</span> dayjs <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;dayjs&quot;</span>;<br><br><span class="hljs-keyword">const</span> PopupDate = forwardRef(<span class="hljs-function">(<span class="hljs-params">&#123; onSelect, mode = <span class="hljs-string">&quot;date&quot;</span> &#125;, ref</span>) =&gt;</span> &#123;<br>  <span class="hljs-keyword">const</span> [show, setShow] = useState(<span class="hljs-literal">false</span>);<br>  <span class="hljs-keyword">const</span> [now, setNow] = useState(<span class="hljs-keyword">new</span> <span class="hljs-built_in">Date</span>());<br><br>  <span class="hljs-keyword">const</span> choseMonth = <span class="hljs-function">(<span class="hljs-params">item</span>) =&gt;</span> &#123;<br>    setNow(item);<br>    setShow(<span class="hljs-literal">false</span>);<br>    <span class="hljs-keyword">if</span> (mode == <span class="hljs-string">&quot;month&quot;</span>) &#123;<br>      onSelect(dayjs(item).format(<span class="hljs-string">&quot;YYYY-MM&quot;</span>));<br>    &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (mode == <span class="hljs-string">&quot;date&quot;</span>) &#123;<br>      onSelect(dayjs(item).format(<span class="hljs-string">&quot;YYYY-MM-DD&quot;</span>));<br>    &#125;<br>  &#125;;<br><br>  <span class="hljs-keyword">if</span> (ref) &#123;<br>    ref.current = &#123;<br>      <span class="hljs-attr">show</span>: <span class="hljs-function">() =&gt;</span> &#123;<br>        setShow(<span class="hljs-literal">true</span>);<br>      &#125;,<br>      <span class="hljs-attr">close</span>: <span class="hljs-function">() =&gt;</span> &#123;<br>        setShow(<span class="hljs-literal">false</span>);<br>      &#125;,<br>    &#125;;<br>  &#125;<br>  <span class="hljs-keyword">return</span> (<br>    <span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">Popup</span></span></span><br><span class="hljs-tag"><span class="xml">      <span class="hljs-attr">visible</span>=<span class="hljs-string">&#123;show&#125;</span></span></span><br><span class="hljs-tag"><span class="xml">      <span class="hljs-attr">direction</span>=<span class="hljs-string">&quot;bottom&quot;</span></span></span><br><span class="hljs-tag"><span class="xml">      <span class="hljs-attr">onMaskClick</span>=<span class="hljs-string">&#123;()</span> =&gt;</span> setShow(false)&#125;</span><br><span class="xml">      destroy=&#123;false&#125;</span><br><span class="xml">      mountContainer=&#123;() =&gt; document.body&#125;</span><br><span class="xml">    &gt;</span><br><span class="xml">      <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span></span><br><span class="xml">        <span class="hljs-tag">&lt;<span class="hljs-name">DatePicker</span></span></span><br><span class="hljs-tag"><span class="xml">          <span class="hljs-attr">visible</span>=<span class="hljs-string">&#123;show&#125;</span></span></span><br><span class="hljs-tag"><span class="xml">          <span class="hljs-attr">value</span>=<span class="hljs-string">&#123;now&#125;</span></span></span><br><span class="hljs-tag"><span class="xml">          <span class="hljs-attr">mode</span>=<span class="hljs-string">&#123;mode&#125;</span></span></span><br><span class="hljs-tag"><span class="xml">          <span class="hljs-attr">onOk</span>=<span class="hljs-string">&#123;choseMonth&#125;</span></span></span><br><span class="hljs-tag"><span class="xml">          <span class="hljs-attr">onCancel</span>=<span class="hljs-string">&#123;()</span> =&gt;</span> setShow(false)&#125;</span><br><span class="xml">        /&gt;</span><br><span class="xml">      <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">Popup</span>&gt;</span></span><br>  );<br>&#125;);<br><br>PopupDate.propTypes = &#123;<br>  <span class="hljs-attr">mode</span>: PropTypes.string, <span class="hljs-comment">// 日期模式</span><br>  <span class="hljs-attr">onSelect</span>: PropTypes.func, <span class="hljs-comment">// 选择后的回调</span><br>&#125;;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> PopupDate;<br></code></pre></td></tr></table></figure><p>底部时间弹窗逻辑和类型选择的逻辑相似，这里不做赘述，直接在 <code>Home/index.jsx</code> 中引入时间筛选框：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// Home/index.jsx</span><br>...<br><span class="hljs-keyword">import</span> PopupDate <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@/components/PopupDate&#x27;</span><br><br><span class="hljs-keyword">const</span> Home = <span class="hljs-function">() =&gt;</span> &#123;<br>  ...<br>  <span class="hljs-keyword">const</span> monthRef = useRef(); <span class="hljs-comment">// 月份筛选 ref</span><br><br>  useEffect(<span class="hljs-function">() =&gt;</span> &#123;<br>    getBillList() <span class="hljs-comment">// 初始化</span><br>  &#125;, [page, currentSelect, currentTime])<br><br>  ...<br><br>  <span class="hljs-comment">// 选择月份弹窗</span><br>  <span class="hljs-keyword">const</span> monthToggle = <span class="hljs-function">() =&gt;</span> &#123;<br>    monthRef.current &amp;&amp; monthRef.current.show()<br>  &#125;;<br><br>  <span class="hljs-comment">// 筛选月份</span><br>  <span class="hljs-keyword">const</span> selectMonth = <span class="hljs-function">(<span class="hljs-params">item</span>) =&gt;</span> &#123;<br>    setRefreshing(REFRESH_STATE.loading);<br>    setPage(<span class="hljs-number">1</span>);<br>    setCurrentTime(item)<br>  &#125;<br><br>  <span class="hljs-keyword">return</span> <span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">className</span>=<span class="hljs-string">&#123;s.home&#125;</span>&gt;</span></span><br><span class="xml">    ...</span><br><span class="xml">    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">className</span>=<span class="hljs-string">&#123;s.right&#125;</span>&gt;</span></span><br><span class="xml">      <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">className</span>=<span class="hljs-string">&#123;s.time&#125;</span> <span class="hljs-attr">onClick</span>=<span class="hljs-string">&#123;monthToggle&#125;</span>&gt;</span>&#123; currentTime &#125;<span class="hljs-tag">&lt;<span class="hljs-name">Icon</span> <span class="hljs-attr">className</span>=<span class="hljs-string">&#123;s.arrow&#125;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;arrow-bottom&quot;</span> /&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span></span><br><span class="xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="xml">    ...</span><br><span class="xml"></span><br><span class="xml">    <span class="hljs-tag">&lt;<span class="hljs-name">PopupDate</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&#123;monthRef&#125;</span> <span class="hljs-attr">mode</span>=<span class="hljs-string">&quot;month&quot;</span> <span class="hljs-attr">onSelect</span>=<span class="hljs-string">&#123;selectMonth&#125;</span> /&gt;</span></span><br><span class="xml">  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>&#125;<br></code></pre></td></tr></table></figure><p>刷新浏览器如下所示：</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/847ab58538134cdcb8d819d61823a5a7~tplv-k3u1fbpfcp-zoom-in-crop-mark:3024:0:0:0.awebp" alt="img"></p><p>最后不要忘记计算当前月份的收入和支出汇总数据，放置于头部，修改 <code>Home/index.jsx</code> 内的代码如下：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs js">...<br><span class="hljs-keyword">const</span> Home = <span class="hljs-function">() =&gt;</span> &#123;<br>  ...<br>  <span class="hljs-keyword">const</span> [totalExpense, setTotalExpense] = useState(<span class="hljs-number">0</span>); <span class="hljs-comment">// 总支出</span><br>  <span class="hljs-keyword">const</span> [totalIncome, setTotalIncome] = useState(<span class="hljs-number">0</span>); <span class="hljs-comment">// 总收入</span><br><br>  <span class="hljs-keyword">const</span> getBillList = <span class="hljs-keyword">async</span> () =&gt; &#123;<br>    <span class="hljs-keyword">const</span> &#123; data &#125; = <span class="hljs-keyword">await</span> get(<span class="hljs-string">`/api/bill/list?page=<span class="hljs-subst">$&#123;page&#125;</span>&amp;page_size=5&amp;date=<span class="hljs-subst">$&#123;currentTime&#125;</span>&amp;type_id=<span class="hljs-subst">$&#123;currentSelect.id || <span class="hljs-string">&#x27;all&#x27;</span>&#125;</span>`</span>);<br>    <span class="hljs-comment">// 下拉刷新，重制数据</span><br>    <span class="hljs-keyword">if</span> (page == <span class="hljs-number">1</span>) &#123;<br>      setList(data.list);<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>      setList(list.concat(data.list));<br>    &#125;<br>    setTotalExpense(data.totalExpense.toFixed(<span class="hljs-number">2</span>));<br>    setTotalIncome(data.totalIncome.toFixed(<span class="hljs-number">2</span>));<br>    setTotalPage(data.totalPage);<br>    <span class="hljs-comment">// 上滑加载状态</span><br>    setLoading(LOAD_STATE.success);<br>    setRefreshing(REFRESH_STATE.success);<br>  &#125;<br><br>  <span class="hljs-keyword">return</span> &lt;div className=&#123;s.home&#125;&gt;<br>    ...<br>    &lt;div className=&#123;s.dataWrap&#125;&gt;<br>      &lt;span className=&#123;s.expense&#125;&gt;总支出：&lt;b&gt;¥ &#123; totalExpense &#125;&lt;/b&gt;&lt;/span&gt;<br>      &lt;span className=&#123;s.income&#125;&gt;总收入：&lt;b&gt;¥ &#123; totalIncome &#125;&lt;/b&gt;&lt;/span&gt;<br>    &lt;/div&gt;<br>    ...<br>  &lt;div&gt;<br>&#125;<br></code></pre></td></tr></table></figure><p>最终展示效果如下所示：</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/17747f5d0d7b41eabcbe47e8dc633de7~tplv-k3u1fbpfcp-zoom-in-crop-mark:3024:0:0:0.awebp" alt="img"></p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>本章节的内容，偏向实战，而实战部分代码在文章的重复率不可避免，这里大家把握好本章节两个重要知识点：</p><p>1、无限加载、下拉刷新。</p><p>2、公用组件提取，如弹窗组件、账单组件。</p><p>这两个知识点在实战中，用到的非常多，希望同学们能重视。</p>]]></content>
      
      
      
        <tags>
            
            <tag> react </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>114、稀土掘金小册-记账本（五）登录注册</title>
      <link href="/2023/01/08/114-react/"/>
      <url>/2023/01/08/114-react/</url>
      
        <content type="html"><![CDATA[<span id="more"></span><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>上一章节我们实现了底部导航栏，并且创建了三个主页面，这三个页面是需要展示底部导航栏，而我们本章节要制作的「登录注册页面」便是不需要底部导航栏的单独页面。</p><blockquote><p>本教程已有线上地址<a href="https://link.juejin.cn/?target=http://cost.chennick.wang">在线地址</a>，同学们可以在实战部分，对照着线上页面进行学习。</p></blockquote><h3 id="知识点"><a href="#知识点" class="headerlink" title="知识点"></a>知识点</h3><p>组件：<code>Cell</code>、<code>Input</code>、<code>Button</code>、<code>CheckBox</code>。</p><h2 id="注册页面"><a href="#注册页面" class="headerlink" title="注册页面"></a>注册页面</h2><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/8ff7150ab666463faf49a280bded1d9b~tplv-k3u1fbpfcp-zoom-in-crop-mark:3024:0:0:0.awebp" alt="img"></p><p>我们的系统是面向多用户的，换句话说也就是一个纯正的 C 端项目，任何人都可以通过网站，注册一个新的账号。接下来开始注册页面的编写。</p><p>首先新建 <code>Login</code> 文件夹，在文件夹内添加两个文件 <code>index.jsx</code> 和 <code>style.module.less</code>，我们先把注册页面的静态页面切出来，首先给 <code>index.jsx</code> 添加如下代码：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">import</span> React <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;react&quot;</span>;<br><br><span class="hljs-keyword">import</span> s <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;./style.module.less&quot;</span>;<br><br><span class="hljs-keyword">const</span> Login = <span class="hljs-function">() =&gt;</span> &#123;<br>  <span class="hljs-keyword">return</span> <span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">className</span>=<span class="hljs-string">&#123;s.auth&#125;</span>&gt;</span>注册<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span>;<br>&#125;;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> Login;<br></code></pre></td></tr></table></figure><p>为它添加一个路由配置，打开 <code>router/index.js</code> 添加如下：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">import</span> Login <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@/container/Login&#x27;</span><br>...<br>&#123;<br>  <span class="hljs-attr">path</span>: <span class="hljs-string">&quot;/login&quot;</span>,<br>  <span class="hljs-attr">component</span>: Login<br>&#125;<br></code></pre></td></tr></table></figure><p>重启项目，如下所示代表登录注册页面创建成功了：</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/70072a5101314b52a83e7675deb6a205~tplv-k3u1fbpfcp-zoom-in-crop-mark:3024:0:0:0.awebp" alt="img"></p><p>接下来为 <code>Login/index.jsx</code> 添加静态页面代码：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">import</span> React <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;react&quot;</span>;<br><span class="hljs-keyword">import</span> &#123; Cell, Input, Button, Checkbox &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;zarm&quot;</span>;<br><span class="hljs-keyword">import</span> CustomIcon <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;@/components/CustomIcon&quot;</span>;<br><br><span class="hljs-keyword">import</span> s <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;./style.module.less&quot;</span>;<br><br><span class="hljs-keyword">const</span> Login = <span class="hljs-function">() =&gt;</span> &#123;<br>  <span class="hljs-keyword">return</span> (<br>    <span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">className</span>=<span class="hljs-string">&#123;s.auth&#125;</span>&gt;</span></span><br><span class="xml">      <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">className</span>=<span class="hljs-string">&#123;s.head&#125;</span> /&gt;</span></span><br><span class="xml">      <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">className</span>=<span class="hljs-string">&#123;s.tab&#125;</span>&gt;</span></span><br><span class="xml">        <span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>注册<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span></span><br><span class="xml">      <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="xml">      <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">className</span>=<span class="hljs-string">&#123;s.form&#125;</span>&gt;</span></span><br><span class="xml">        <span class="hljs-tag">&lt;<span class="hljs-name">Cell</span> <span class="hljs-attr">icon</span>=<span class="hljs-string">&#123;</span>&lt;<span class="hljs-attr">CustomIcon</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;zhanghao&quot;</span> /&gt;</span>&#125;&gt;</span><br><span class="xml">          <span class="hljs-tag">&lt;<span class="hljs-name">Input</span> <span class="hljs-attr">clearable</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">placeholder</span>=<span class="hljs-string">&quot;请输入账号&quot;</span> /&gt;</span></span><br><span class="xml">        <span class="hljs-tag">&lt;/<span class="hljs-name">Cell</span>&gt;</span></span><br><span class="xml">        <span class="hljs-tag">&lt;<span class="hljs-name">Cell</span> <span class="hljs-attr">icon</span>=<span class="hljs-string">&#123;</span>&lt;<span class="hljs-attr">CustomIcon</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;mima&quot;</span> /&gt;</span>&#125;&gt;</span><br><span class="xml">          <span class="hljs-tag">&lt;<span class="hljs-name">Input</span> <span class="hljs-attr">clearable</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;password&quot;</span> <span class="hljs-attr">placeholder</span>=<span class="hljs-string">&quot;请输入密码&quot;</span> /&gt;</span></span><br><span class="xml">        <span class="hljs-tag">&lt;/<span class="hljs-name">Cell</span>&gt;</span></span><br><span class="xml">        <span class="hljs-tag">&lt;<span class="hljs-name">Cell</span> <span class="hljs-attr">icon</span>=<span class="hljs-string">&#123;</span>&lt;<span class="hljs-attr">CustomIcon</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;mima&quot;</span> /&gt;</span>&#125;&gt;</span><br><span class="xml">          <span class="hljs-tag">&lt;<span class="hljs-name">Input</span> <span class="hljs-attr">clearable</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">placeholder</span>=<span class="hljs-string">&quot;请输入验证码&quot;</span> /&gt;</span></span><br><span class="xml">        <span class="hljs-tag">&lt;/<span class="hljs-name">Cell</span>&gt;</span></span><br><span class="xml">      <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="xml">      <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">className</span>=<span class="hljs-string">&#123;s.operation&#125;</span>&gt;</span></span><br><span class="xml">        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">className</span>=<span class="hljs-string">&#123;s.agree&#125;</span>&gt;</span></span><br><span class="xml">          <span class="hljs-tag">&lt;<span class="hljs-name">Checkbox</span> /&gt;</span></span><br><span class="xml">          <span class="hljs-tag">&lt;<span class="hljs-name">label</span> <span class="hljs-attr">className</span>=<span class="hljs-string">&quot;text-light&quot;</span>&gt;</span></span><br><span class="xml">            阅读并同意<span class="hljs-tag">&lt;<span class="hljs-name">a</span>&gt;</span>《掘掘手札条款》<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span></span><br><span class="xml">          <span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span></span><br><span class="xml">        <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="xml">        <span class="hljs-tag">&lt;<span class="hljs-name">Button</span> <span class="hljs-attr">block</span> <span class="hljs-attr">theme</span>=<span class="hljs-string">&quot;primary&quot;</span>&gt;</span></span><br><span class="xml">          注册</span><br><span class="xml">        <span class="hljs-tag">&lt;/<span class="hljs-name">Button</span>&gt;</span></span><br><span class="xml">      <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>  );<br>&#125;;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> Login;<br></code></pre></td></tr></table></figure><blockquote><p>文末已为同学们提供下本章节 demo 代码，样式部分不再详细说明。</p></blockquote><p>上述代码中，关键部分是账号输入、密码输入、验证码输入，这三个输入框是需要获取数据作为接口的参数提交上去的。</p><p>很多时候，服务端没有开发好接口的时候，我们前端要做的任务就是先还原 <code>UI</code> 稿，把该切的页面都切出来，并且预留好需要给接口提交的数据交互，比如上述三个输入框。</p><p>样式编写部分，要注意的一点是 <code>:global</code> 这个关键词。由于我们采用的是 <code>CSS Module</code> 的形式进行开发，也就是你在页面中声明的类名都会根据当前页面，打一个唯一的 <code>hash</code> 值，比如我们页面中声明的 <code>className=&#123;s.form&#125;</code>，最终在浏览器中显示的是这样的：</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/bab558e802d84ccd8c0b4273fe1e6174~tplv-k3u1fbpfcp-zoom-in-crop-mark:3024:0:0:0.awebp" alt="img"></p><p><code>_form_kpur3_30</code> 是已经被编译过的样式，这样做的目的是避免和别的页面的样式重名，这是目前样式管理的一个诟病，当多人参与项目开发的时候，很难做到不污染全局样式名称，除非很小心的命名样式名称。</p><p>所以经过编译之后，想要修改 <code>.form</code> 下的 <code>.za-cell</code>，如下写法，将无法修改成功：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-class">.form</span> &#123;<br>  <span class="hljs-selector-class">.za-cell</span> &#123;<br>    <span class="hljs-attribute">color</span>: red;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>原因是，上述写法，<code>.za-cell</code> 会被编译加上 <code>hash</code>，组件库 <code>Zarm</code> 内的 <code>dom</code> 类名还是叫 <code>za-cell</code>，如上图所示。所以为了不加 <code>hash</code>，就需要这样操作：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-class">.form</span> &#123;<br>  :global &#123;<br>    .za-cell &#123;<br>      color: red;<br>    &#125;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>这样 <code>.za-cell</code> 就不会被加上 <code>hash</code>，如下图所示：</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/580f03ce2daf4f4488edd73c9a1efae6~tplv-k3u1fbpfcp-zoom-in-crop-mark:3024:0:0:0.awebp" alt="img"></p><p>完成上述页面布局之后，你会看到这样一个效果：</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/2933714025354b66ac111139397aa2d0~tplv-k3u1fbpfcp-zoom-in-crop-mark:3024:0:0:0.awebp" alt="img"></p><p>少了一个验证码，我们使用插件 <code>react-captcha-code</code>，我们通过 <code>npm</code> 下载它：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">npm i react-captcha-code -S<br></code></pre></td></tr></table></figure><p>在代码中引入：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs js">...<br><span class="hljs-keyword">import</span> Captcha <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;react-captcha-code&quot;</span><br>...<br>&lt;Input<br>  clearable<br>  type=<span class="hljs-string">&quot;text&quot;</span><br>  placeholder=<span class="hljs-string">&quot;请输入验证码&quot;</span><br>  onChange=&#123;<span class="hljs-function">(<span class="hljs-params">value</span>) =&gt;</span> setVerify(value)&#125;<br>/&gt;<br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">Captcha</span> <span class="hljs-attr">charNum</span>=<span class="hljs-string">&#123;4&#125;</span> /&gt;</span></span><br></code></pre></td></tr></table></figure><p>浏览器展示如下所示：</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/aa07ed8b505a421bb3d9120ba8741cac~tplv-k3u1fbpfcp-zoom-in-crop-mark:3024:0:0:0.awebp" alt="img"></p><p>此时我们已经切完注册页面需要的内容。</p><p>我们给页面加上相应的逻辑，首先是账号、密码、验证码：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs js">...<br><span class="hljs-keyword">const</span> [username, setUsername] = useState(<span class="hljs-string">&#x27;&#x27;</span>); <span class="hljs-comment">// 账号</span><br><span class="hljs-keyword">const</span> [password, setPassword] = useState(<span class="hljs-string">&#x27;&#x27;</span>); <span class="hljs-comment">// 密码</span><br><span class="hljs-keyword">const</span> [verify, setVerify] = useState(<span class="hljs-string">&#x27;&#x27;</span>); <span class="hljs-comment">// 验证码</span><br>...<br>&lt;Input<br>  clearable<br>  type=<span class="hljs-string">&quot;text&quot;</span><br>  placeholder=<span class="hljs-string">&quot;请输入账号&quot;</span><br>  onChange=&#123;<span class="hljs-function">(<span class="hljs-params">value</span>) =&gt;</span> setUsername(value)&#125;<br>/&gt;<br>...<br>&lt;Input<br>  clearable<br>  type=<span class="hljs-string">&quot;password&quot;</span><br>  placeholder=<span class="hljs-string">&quot;请输入密码&quot;</span><br>  onChange=&#123;<span class="hljs-function">(<span class="hljs-params">value</span>) =&gt;</span> setPassword(value)&#125;<br>/&gt;<br>...<br>&lt;Input<br>  clearable<br>  type=<span class="hljs-string">&quot;text&quot;</span><br>  placeholder=<span class="hljs-string">&quot;请输入验证码&quot;</span><br>  onChange=&#123;<span class="hljs-function">(<span class="hljs-params">value</span>) =&gt;</span> setVerify(value)&#125;<br>/&gt;<br></code></pre></td></tr></table></figure><p>当输入框内容修改的时候，<code>onChange</code> 会被触发，接受的回调函数参数，便是变化的输入值，此时我们将其保存在声明的变量中。</p><p>我们输入的验证码是需要和验证码图片里的验证码匹配的，所以我们还需要拿到图片里的验证码，我们作如下操作：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">import</span> React, &#123; useCallback &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;react&#x27;</span><br>...<br><span class="hljs-keyword">const</span> [captcha, setCaptcha] = useState(<span class="hljs-string">&#x27;&#x27;</span>); <span class="hljs-comment">// 验证码变化后存储值</span><br><span class="hljs-comment">//  验证码变化，回调方法</span><br><span class="hljs-keyword">const</span> handleChange = useCallback(<span class="hljs-function">(<span class="hljs-params">captcha</span>) =&gt;</span> &#123;<br>  <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;captcha&#x27;</span>, captcha)<br>  setCaptcha(captcha)<br>&#125;, []);<br>...<br>&lt;Captcha charNum=&#123;<span class="hljs-number">4</span>&#125; onChange=&#123;handleChange&#125; /&gt;<br></code></pre></td></tr></table></figure><p>当验证码变化的时候，便能获取到相应的值。修改完上述代码，我们不妨测试一下：</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/68459ab851c941ee92f3fcdaf6f758a6~tplv-k3u1fbpfcp-zoom-in-crop-mark:3024:0:0:0.awebp" alt="img"></p><p>到此，注册需要的参数都有了，我们开始编写注册方法：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">import</span> &#123; Cell, Input, Button, Checkbox, Toast &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;zarm&#x27;</span><br><span class="hljs-keyword">import</span> &#123; post &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@/utils&#x27;</span><br>...<br><span class="hljs-keyword">const</span> onSubmit = <span class="hljs-keyword">async</span> () =&gt; &#123;<br>  <span class="hljs-keyword">if</span> (!username) &#123;<br>    Toast.show(<span class="hljs-string">&#x27;请输入账号&#x27;</span>)<br>    <span class="hljs-keyword">return</span><br>  &#125;<br>  <span class="hljs-keyword">if</span> (!password) &#123;<br>    Toast.show(<span class="hljs-string">&#x27;请输入密码&#x27;</span>)<br>    <span class="hljs-keyword">return</span><br>  &#125;<br>  <span class="hljs-keyword">if</span> (!verify) &#123;<br>    Toast.show(<span class="hljs-string">&#x27;请输入验证码&#x27;</span>)<br>    <span class="hljs-keyword">return</span><br>  &#125;;<br>  <span class="hljs-keyword">if</span> (verify != captcha) &#123;<br>    Toast.show(<span class="hljs-string">&#x27;验证码错误&#x27;</span>)<br>    <span class="hljs-keyword">return</span><br>  &#125;;<br>  <span class="hljs-keyword">try</span> &#123;<br>    <span class="hljs-keyword">const</span> &#123; data &#125; = <span class="hljs-keyword">await</span> post(<span class="hljs-string">&#x27;/api/user/register&#x27;</span>, &#123;<br>      username,<br>      password<br>    &#125;);<br>    Toast.show(<span class="hljs-string">&#x27;注册成功&#x27;</span>);<br>  &#125; <span class="hljs-keyword">catch</span> (error) &#123;<br>    Toast.show(<span class="hljs-string">&#x27;系统错误&#x27;</span>);<br>  &#125;<br>&#125;;<br>...<br>&lt;Button onClick=&#123;onSubmit&#125; block theme=<span class="hljs-string">&quot;primary&quot;</span>&gt;注册&lt;/Button&gt;<br></code></pre></td></tr></table></figure><p>上述代码中，因为我们使用的是 <code>async await</code> 做异步处理，所以需要通过 <code>try catch</code> 来捕获异步处理过程中出现的错误，如果使用 <code>Promise</code> 的回调函数，则无需使用 <code>try catch</code>，改动如下：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs js">post(<span class="hljs-string">&quot;/api/user/register&quot;</span>, &#123;<br>  username,<br>  password,<br>&#125;).then(<span class="hljs-function">(<span class="hljs-params">res</span>) =&gt;</span> &#123;<br>  <span class="hljs-comment">// do something</span><br>&#125;);<br></code></pre></td></tr></table></figure><p>尝试使用之前注册过的用户名，注册一个账号：</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/c4e36ba2f6724445a821b444dda9643f~tplv-k3u1fbpfcp-zoom-in-crop-mark:3024:0:0:0.awebp" alt="img"></p><p>服务端给出正确的报错，我们再用一个未注册过的用户名：</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/6eb9d6a0ade945589835a6add7c87e99~tplv-k3u1fbpfcp-zoom-in-crop-mark:3024:0:0:0.awebp" alt="img"></p><p>此时我们大致将注册功能实现了。这里我不再展开讲样式部分，因为这样会使得文章中出现过多的重复代码，不以阅读，大家尽量根据标签的类名去查找 <code>css</code> 样式部分。</p><h2 id="登录页面"><a href="#登录页面" class="headerlink" title="登录页面"></a>登录页面</h2><p>登录页面的逻辑我们直接做到同一个页面中，通过一个 <code>type</code> 参数作为判断条件，判断当前状态是登录页面或是注册页面。</p><p>话不多说我们添加代码如下：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs js">...<br><span class="hljs-keyword">import</span> cx <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;classnames&#x27;</span><br>...<br><br><span class="hljs-keyword">const</span> Login = <span class="hljs-function">() =&gt;</span> &#123;<br>  ...<br>  <span class="hljs-keyword">const</span> [type, setType] = useState(<span class="hljs-string">&#x27;login&#x27;</span>); <span class="hljs-comment">// 登录注册类型</span><br><br>  <span class="hljs-keyword">return</span> <span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">className</span>=<span class="hljs-string">&#123;s.auth&#125;</span>&gt;</span></span><br><span class="xml">    ...</span><br><span class="xml">    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">className</span>=<span class="hljs-string">&#123;s.tab&#125;</span>&gt;</span></span><br><span class="xml">      <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">className</span>=<span class="hljs-string">&#123;cx(&#123;</span> [<span class="hljs-attr">s.avtive</span>]<span class="hljs-attr">:</span> <span class="hljs-attr">type</span> == <span class="hljs-string">&#x27;login&#x27;</span> &#125;)&#125; <span class="hljs-attr">onClick</span>=<span class="hljs-string">&#123;()</span> =&gt;</span> setType(&#x27;login&#x27;)&#125;&gt;登录<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span></span><br><span class="xml">      <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">className</span>=<span class="hljs-string">&#123;cx(&#123;</span> [<span class="hljs-attr">s.avtive</span>]<span class="hljs-attr">:</span> <span class="hljs-attr">type</span> == <span class="hljs-string">&#x27;register&#x27;</span> &#125;)&#125; <span class="hljs-attr">onClick</span>=<span class="hljs-string">&#123;()</span> =&gt;</span> setType(&#x27;register&#x27;)&#125;&gt;注册<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span></span><br><span class="xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="xml">  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>  <span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">className</span>=<span class="hljs-string">&#123;s.form&#125;</span>&gt;</span></span><br><span class="xml">    ...</span><br><span class="xml">    &#123;</span><br><span class="xml">      type == &#x27;register&#x27; ? <span class="hljs-tag">&lt;<span class="hljs-name">Cell</span> <span class="hljs-attr">icon</span>=<span class="hljs-string">&#123;</span>&lt;<span class="hljs-attr">CustomIcon</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;mima&quot;</span> /&gt;</span>&#125;&gt;</span><br><span class="xml">        <span class="hljs-tag">&lt;<span class="hljs-name">Input</span></span></span><br><span class="hljs-tag"><span class="xml">          <span class="hljs-attr">clearable</span></span></span><br><span class="hljs-tag"><span class="xml">          <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span></span></span><br><span class="hljs-tag"><span class="xml">          <span class="hljs-attr">placeholder</span>=<span class="hljs-string">&quot;请输入验证码&quot;</span></span></span><br><span class="hljs-tag"><span class="xml">          <span class="hljs-attr">onChange</span>=<span class="hljs-string">&#123;(value)</span> =&gt;</span> setVerify(value)&#125;</span><br><span class="xml">        /&gt;</span><br><span class="xml">        <span class="hljs-tag">&lt;<span class="hljs-name">Captcha</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&#123;captchaRef&#125;</span> <span class="hljs-attr">charNum</span>=<span class="hljs-string">&#123;4&#125;</span> <span class="hljs-attr">onChange</span>=<span class="hljs-string">&#123;handleChange&#125;</span> /&gt;</span></span><br><span class="xml">      <span class="hljs-tag">&lt;/<span class="hljs-name">Cell</span>&gt;</span> : null</span><br><span class="xml">    &#125;</span><br><span class="xml">  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>  <span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">className</span>=<span class="hljs-string">&#123;s.operation&#125;</span>&gt;</span></span><br><span class="xml">    &#123;</span><br><span class="xml">      type == &#x27;register&#x27; ? <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">className</span>=<span class="hljs-string">&#123;s.agree&#125;</span>&gt;</span></span><br><span class="xml">        <span class="hljs-tag">&lt;<span class="hljs-name">Checkbox</span> /&gt;</span></span><br><span class="xml">        <span class="hljs-tag">&lt;<span class="hljs-name">label</span> <span class="hljs-attr">className</span>=<span class="hljs-string">&quot;text-light&quot;</span>&gt;</span>阅读并同意<span class="hljs-tag">&lt;<span class="hljs-name">a</span>&gt;</span>《掘掘手札条款》<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span></span><br><span class="xml">      <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span> : null</span><br><span class="xml">    &#125;</span><br><span class="xml">    <span class="hljs-tag">&lt;<span class="hljs-name">Button</span> <span class="hljs-attr">onClick</span>=<span class="hljs-string">&#123;onSubmit&#125;</span> <span class="hljs-attr">block</span> <span class="hljs-attr">theme</span>=<span class="hljs-string">&quot;primary&quot;</span>&gt;</span>&#123;type == &#x27;login&#x27; ? &#x27;登录&#x27; : &#x27;注册&#x27;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">Button</span>&gt;</span></span><br><span class="xml">  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>注意，如果引入了新的工具包，请自行安装，如上述代码就需要安装 classnames。可以通过 npm i classnames -S 指令</p></blockquote><p>代码分析：</p><p>上述代码中，通过 <code>type</code> 属性区分注册和登录。</p><p>首先是 <code>tab</code> 切换，通过 <code>classname</code> 来判断是否是当前高亮，用于样式控制。</p><p>其次，当 <code>type == &#39;register&#39;</code> 的时候，才把验证码展示出来，因为登录这边咱们就不设置验证码，只在注册的时候显示。</p><p>最后是事件的判断，如果 <code>type == &#39;login&#39;</code>，则按钮文案显示为 <code>登录</code>，否则为 <code>注册</code>。</p><p>此时点击触发的 <code>onSubmit</code> 事件也很关键，同样需要通过 <code>type</code> 判断是登录还是注册，修改代码如下：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> onSubmit = <span class="hljs-keyword">async</span> () =&gt; &#123;<br>  <span class="hljs-keyword">if</span> (!username) &#123;<br>    Toast.show(<span class="hljs-string">&quot;请输入账号&quot;</span>);<br>    <span class="hljs-keyword">return</span>;<br>  &#125;<br>  <span class="hljs-keyword">if</span> (!password) &#123;<br>    Toast.show(<span class="hljs-string">&quot;请输入密码&quot;</span>);<br>    <span class="hljs-keyword">return</span>;<br>  &#125;<br>  <span class="hljs-keyword">try</span> &#123;<br>    <span class="hljs-comment">// 判断是否是登录状态</span><br>    <span class="hljs-keyword">if</span> (type == <span class="hljs-string">&quot;login&quot;</span>) &#123;<br>      <span class="hljs-comment">// 执行登录接口，获取 token</span><br>      <span class="hljs-keyword">const</span> &#123; data &#125; = <span class="hljs-keyword">await</span> post(<span class="hljs-string">&quot;/api/user/login&quot;</span>, &#123;<br>        username,<br>        password,<br>      &#125;);<br>      <span class="hljs-comment">// 将 token 写入 localStorage</span><br>      <span class="hljs-built_in">localStorage</span>.setItem(<span class="hljs-string">&quot;token&quot;</span>, data.token);<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>      <span class="hljs-keyword">if</span> (!verify) &#123;<br>        Toast.show(<span class="hljs-string">&quot;请输入验证码&quot;</span>);<br>        <span class="hljs-keyword">return</span>;<br>      &#125;<br>      <span class="hljs-keyword">if</span> (verify != captcha) &#123;<br>        Toast.show(<span class="hljs-string">&quot;验证码错误&quot;</span>);<br>        <span class="hljs-keyword">return</span>;<br>      &#125;<br>      <span class="hljs-keyword">const</span> &#123; data &#125; = <span class="hljs-keyword">await</span> post(<span class="hljs-string">&quot;/api/user/register&quot;</span>, &#123;<br>        username,<br>        password,<br>      &#125;);<br>      Toast.show(<span class="hljs-string">&quot;注册成功&quot;</span>);<br>      <span class="hljs-comment">// 注册成功，自动将 tab 切换到 login 状态</span><br>      setType(<span class="hljs-string">&quot;login&quot;</span>);<br>    &#125;<br>  &#125; <span class="hljs-keyword">catch</span> (error) &#123;<br>    Toast.show(<span class="hljs-string">&quot;系统错误&quot;</span>);<br>  &#125;<br>&#125;;<br></code></pre></td></tr></table></figure><p>由于登录注册的账号和密码是同一参数，我们这边就直接复用了逻辑，并通过 <code>type</code> 判断调用哪一个接口。</p><p>重启项目，验证登录接口是否成功，如果成功则会返回 <code>token</code> 信息，如下图所示：</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/79260001863b4fcc9f9d52522a7732fb~tplv-k3u1fbpfcp-zoom-in-crop-mark:3024:0:0:0.awebp" alt="img"></p><p>此时，我们本地的 <code>localStorage</code> 里，已经存下了 <code>token</code>，如下图所示：</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/0cac2dd5459b4fab8ccb7bb476719944~tplv-k3u1fbpfcp-zoom-in-crop-mark:3024:0:0:0.awebp" alt="img"></p><p>保存 <code>token</code> 的形式有很多，你可以引入状态管理插件来对这些数据进行存储，但是这里我们对其进行简单处理，减少项目多余的负担，保证课程的完成度。有时候，成功的将课程完成，也是一种成就感。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>到此，我们的登录注册页面算是完成了，我们拿到的 <code>token</code> 是有时效性的，我在后台设置的是 24 小时的时效，如果过期了，请求其他接口时，就会报错，从而通过逻辑判断重新回到登录页面。下一章节，我会详细分析这块内容。</p>]]></content>
      
      
      
        <tags>
            
            <tag> react </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>113、稀土掘金小册-记账本（四）底部导航栏</title>
      <link href="/2023/01/05/113-react/"/>
      <url>/2023/01/05/113-react/</url>
      
        <content type="html"><![CDATA[<span id="more"></span><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>上一章节，我们从 0 开始搭建出一套以 <code>React</code> 技术栈为基础的前端开发环境，过程中肯定会遇到各种奇奇怪怪的问题，比如 <code>Node</code> 版本问题，工具包的版本问题，插件下载完之后，无法得到自己想要的效果等等，为了大家能顺畅地进行开发，请大家尽量将项目中用到的 <code>node_module</code> 包版本和我提供给大家的项目中的版本，保持一致。</p><p>倘若你学会了这一套搭建流程，我希望你能举一反三，根据项目需求，灵活的切换组件库、PC 版、甚至是主框架。这对提升自己的知识广度很有帮助，因为相比每次都看教程，自己手动实现一遍，印象会更深刻，遇到问题也能通过自己的认知，去解决它。</p><p>扯得有点远了，本章节我们将正式进入前端实战环节。</p><blockquote><p>本教程已有线上地址<a href="https://link.juejin.cn/?target=http://cost.chennick.wang">在线地址</a>，同学们可以在实战部分，对照着线上页面。</p></blockquote><h3 id="知识点"><a href="#知识点" class="headerlink" title="知识点"></a>知识点</h3><ul><li>编写底部导航栏</li><li>创建图标公用组件</li><li>路由控制底部导航栏的显隐</li></ul><h2 id="编写底部导航栏"><a href="#编写底部导航栏" class="headerlink" title="编写底部导航栏"></a>编写底部导航栏</h2><p>我们先观察我们今天要实现的底部导航长啥样，如下所示：</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/88b876655d1d4cc98bc64701893070f4~tplv-k3u1fbpfcp-zoom-in-crop-mark:3024:0:0:0.awebp" alt="img"></p><p>上图红框中的底部导航栏，在很多业务场景下都是需要的，三个导航栏对应着三个不同的三个页面组件，分别是「账单」、「统计」、「我的」。这三个页面组件是需要导航栏的。如果我们点击内页如账单详情页，则底部的导航栏会被隐藏，这就需要我们在导航栏的控制上，下一些功夫。</p><p>话不多说，我们在上一章的代码基础上添加导航栏组件，在 <code>src</code> 目录下新建 <code>components</code> 目录，专门用于放置一些公用组件，我们再在 <code>components</code> 目录下新建 <code>NavBar</code> 目录，用于编写底部导航栏，代码如下所示：</p><p><strong>Nav/index.jsx</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">import</span> React, &#123; useState &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;react&quot;</span>;<br><span class="hljs-keyword">import</span> PropTypes <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;prop-types&quot;</span>;<br><span class="hljs-keyword">import</span> &#123; TabBar &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;zarm&quot;</span>;<br><span class="hljs-keyword">import</span> &#123; useNavigate &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;react-router-dom&quot;</span>;<br><span class="hljs-keyword">import</span> s <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;./style.module.less&quot;</span>;<br><br><span class="hljs-keyword">const</span> NavBar = <span class="hljs-function">(<span class="hljs-params">&#123; showNav &#125;</span>) =&gt;</span> &#123;<br>  <span class="hljs-keyword">const</span> [activeKey, setActiveKey] = useState(<span class="hljs-string">&quot;/&quot;</span>);<br>  <span class="hljs-keyword">const</span> navigateTo = useNavigate();<br><br>  <span class="hljs-keyword">const</span> changeTab = <span class="hljs-function">(<span class="hljs-params">path</span>) =&gt;</span> &#123;<br>    setActiveKey(path);<br>    navigateTo(path);<br>  &#125;;<br><br>  <span class="hljs-keyword">return</span> (<br>    <span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">TabBar</span></span></span><br><span class="hljs-tag"><span class="xml">      <span class="hljs-attr">visible</span>=<span class="hljs-string">&#123;showNav&#125;</span></span></span><br><span class="hljs-tag"><span class="xml">      <span class="hljs-attr">className</span>=<span class="hljs-string">&#123;s.tab&#125;</span></span></span><br><span class="hljs-tag"><span class="xml">      <span class="hljs-attr">activeKey</span>=<span class="hljs-string">&#123;activeKey&#125;</span></span></span><br><span class="hljs-tag"><span class="xml">      <span class="hljs-attr">onChange</span>=<span class="hljs-string">&#123;changeTab&#125;</span></span></span><br><span class="hljs-tag"><span class="xml">    &gt;</span></span><br><span class="xml">      <span class="hljs-tag">&lt;<span class="hljs-name">TabBar.Item</span> <span class="hljs-attr">itemKey</span>=<span class="hljs-string">&quot;/&quot;</span> <span class="hljs-attr">title</span>=<span class="hljs-string">&quot;账单&quot;</span> /&gt;</span></span><br><span class="xml">      <span class="hljs-tag">&lt;<span class="hljs-name">TabBar.Item</span> <span class="hljs-attr">itemKey</span>=<span class="hljs-string">&quot;/data&quot;</span> <span class="hljs-attr">title</span>=<span class="hljs-string">&quot;统计&quot;</span> /&gt;</span></span><br><span class="xml">      <span class="hljs-tag">&lt;<span class="hljs-name">TabBar.Item</span> <span class="hljs-attr">itemKey</span>=<span class="hljs-string">&quot;/user&quot;</span> <span class="hljs-attr">title</span>=<span class="hljs-string">&quot;我的&quot;</span> /&gt;</span></span><br><span class="xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">TabBar</span>&gt;</span></span><br>  );<br>&#125;;<br><br>NavBar.propTypes = &#123;<br>  <span class="hljs-attr">showNav</span>: PropTypes.bool,<br>&#125;;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> NavBar;<br></code></pre></td></tr></table></figure><p>代码解析：</p><p>首先是声明 <code>NavBar</code> 函数组件，它接收一个外部传入的 <code>showNav</code> 属性，用于控制导航栏的显示隐藏。</p><p>通过 <code>useNavigate</code> 钩子方法，拿到路由实例 <code>navigateTo</code>，它内部含有很多路由的方法，在上述代码中，我们使用到的是 <code>navigateTo</code> 进行路由跳转。</p><p>在页面中，引入 <code>TabBar</code> 组件，它接受几个属性：</p><ul><li>visible：用于控制导航栏的显示隐藏。</li><li>activeKey：当前被点击的导航栏。</li><li>onChange：点击导航栏之后的回调方法，<code>path</code> 参数为 <code>TabBar.Item</code> 的 <code>itemKey</code> 属性。</li></ul><blockquote><p>TabBar 官方文档：<a href="https://link.juejin.cn/?target=https://zarm.gitee.io/%23/components/tab-bar">zarm.gitee.io/#/component…</a></p></blockquote><p>所以当你点击导航栏的时候，<code>changeTab</code> 方法便会被触发，执行内部的 <code>setActiveKey</code> 和 <code>navigateTo</code>，他们的作用分别是设置当前点击的高亮和让页面跳转到对应的页面组件。</p><p>说到跳转到对应的组件，’/‘、’/data’、’/user’ 这三个路由对应的三个组件我们还未编写，这里我们在 <code>container</code> 目录下新建这三个页面组件，作为占位。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// Home/index.jsx</span><br><span class="hljs-keyword">import</span> React <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;react&#x27;</span><br><br><span class="hljs-keyword">const</span> Home = <span class="hljs-function">() =&gt;</span> &#123;<br>  <span class="hljs-keyword">return</span> <span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>首页<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>&#125;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> Home<br><br><span class="hljs-comment">// Data/index.jsx</span><br><span class="hljs-keyword">import</span> React <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;react&#x27;</span><br><br><span class="hljs-keyword">const</span> Data = <span class="hljs-function">() =&gt;</span> &#123;<br>  <span class="hljs-keyword">return</span> <span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>数据<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>&#125;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> Data<br><br><span class="hljs-comment">// User/index.jsx</span><br><span class="hljs-keyword">import</span> React <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;react&#x27;</span><br><br><span class="hljs-keyword">const</span> User = <span class="hljs-function">() =&gt;</span> &#123;<br>  <span class="hljs-keyword">return</span> <span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>个人中心<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>&#125;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> User<br></code></pre></td></tr></table></figure><p>别忘了，前往 <code>router/index.js</code> 添加路由配置，如果不添加这个配置，调用 <code>navigateTo</code> 这个方法，就无法匹配到对应的页面组件，代码如下：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// router/index.js</span><br><span class="hljs-keyword">import</span> Home <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;@/container/Home&quot;</span>;<br><span class="hljs-keyword">import</span> Data <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;@/container/Data&quot;</span>;<br><span class="hljs-keyword">import</span> User <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;@/container/User&quot;</span>;<br><br><span class="hljs-keyword">const</span> routes = [<br>  &#123;<br>    <span class="hljs-attr">path</span>: <span class="hljs-string">&quot;/&quot;</span>,<br>    <span class="hljs-attr">component</span>: Home,<br>  &#125;,<br>  &#123;<br>    <span class="hljs-attr">path</span>: <span class="hljs-string">&quot;/data&quot;</span>,<br>    <span class="hljs-attr">component</span>: Data,<br>  &#125;,<br>  &#123;<br>    <span class="hljs-attr">path</span>: <span class="hljs-string">&quot;/user&quot;</span>,<br>    <span class="hljs-attr">component</span>: User,<br>  &#125;,<br>];<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> routes;<br></code></pre></td></tr></table></figure><p>这时，我们还缺少一步，将导航栏组件引入 <code>App.jsx</code> 入口页面，如下所示：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// App.jsx</span><br>...<br><span class="hljs-keyword">import</span> NavBar <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@/components/NavBar&#x27;</span>;<br>...<br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">App</span>(<span class="hljs-params"></span>) </span>&#123;<br>  <span class="hljs-keyword">return</span> <span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">Router</span>&gt;</span></span><br><span class="xml">    <span class="hljs-tag">&lt;<span class="hljs-name">ConfigProvider</span> <span class="hljs-attr">primaryColor</span>=<span class="hljs-string">&#123;</span>&#x27;#<span class="hljs-attr">007fff</span>&#x27;&#125;&gt;</span></span><br><span class="xml">      <span class="hljs-tag">&lt;&gt;</span></span><br><span class="xml">       <span class="hljs-tag">&lt;<span class="hljs-name">Routes</span>&gt;</span></span><br><span class="xml">        &#123;routes.map(route =&gt; <span class="hljs-tag">&lt;<span class="hljs-name">Route</span> <span class="hljs-attr">exact</span> <span class="hljs-attr">key</span>=<span class="hljs-string">&#123;route.path&#125;</span> <span class="hljs-attr">path</span>=<span class="hljs-string">&#123;route.path&#125;</span> <span class="hljs-attr">element</span>=<span class="hljs-string">&#123;</span>&lt;<span class="hljs-attr">route.component</span> /&gt;</span>&#125; /&gt;)&#125;</span><br><span class="xml">       <span class="hljs-tag">&lt;/<span class="hljs-name">Routes</span>&gt;</span></span><br><span class="xml">      <span class="hljs-tag">&lt;<span class="hljs-name">NavBar</span> <span class="hljs-attr">showNav</span>=<span class="hljs-string">&#123;showNav&#125;</span> /&gt;</span></span><br><span class="xml">     <span class="hljs-tag">&lt;/&gt;</span></span><br><span class="xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">ConfigProvider</span>&gt;</span></span><br>    <span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">NavBar</span> <span class="hljs-attr">showNav</span>=<span class="hljs-string">&#123;true&#125;</span> /&gt;</span></span><br>  &lt;/Router&gt;<br>&#125;<br></code></pre></td></tr></table></figure><p>通过 <code>npm run dev</code> 启动项目，浏览器展示效果如下所示：</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/39ce0d3387fd41df97db10b054a6ae0a~tplv-k3u1fbpfcp-zoom-in-crop-mark:3024:0:0:0.awebp" alt="img"></p><p>上图效果所示，注意地址栏的变化，点击相应的 <code>Tab</code>，调用的 <code>navigateTo</code> 方法，将地址栏的 <code>pathname</code> 改变，随之而来的是页面组件的改变。这个就应证了我们第 10 章给大家解释的单页面路由控制的原理。<code>navigateTo</code> 做的事情就是改变地址栏，地址栏一旦改变，就会触发地址所对应的组件渲染，如 <code>/data</code>，渲染的就是 <code>Data</code> 页面组件。</p><p>你会问为什么导航栏会一直显示在底部，我们来分析以下代码：</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/13d46f4c1f214b4bae40240bccff4fbe~tplv-k3u1fbpfcp-zoom-in-crop-mark:3024:0:0:0.awebp" alt="img"></p><p>红色框是组件展示的区域，每个路径对应着一个组件，这个在 <code>router/index.js</code> 文件中也有所体现。</p><p>绿色框则代表导航栏的位置，也就是说，无论上面的组件怎么变化，底部的导航栏一直都是存在的。</p><h3 id="添加底部导航图标"><a href="#添加底部导航图标" class="headerlink" title="添加底部导航图标"></a>添加底部导航图标</h3><p>我们将图标写成公共组件，这样便于后面各个页面方便引入，我们新建 <code>components/CustomIcon/index.jsx</code>，添加如下代码：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">import</span> &#123; Icon &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;zarm&quot;</span>;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> Icon.createFromIconfont(<br>  <span class="hljs-string">&quot;//at.alicdn.com/t/font_2236655_w1mpqp7n1ni.js&quot;</span><br>);<br></code></pre></td></tr></table></figure><p>上述代码，我们引入 <code>Icon</code>，执行它的自定义图标方法 <code>createFromIconfont</code>，它接收一个参数，为 <code>iconfont</code> 生产的静态脚本路径，你可以自己去 <a href="https://link.juejin.cn/?target=https://www.iconfont.cn/">官网</a> 配置，也可以直接用我提供的：</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/5fe4857973a74a78a2cc2d2110e49c34~tplv-k3u1fbpfcp-zoom-in-crop-mark:3024:0:0:0.awebp" alt="img"></p><p>这里我已经为大家添加好了各个图标，地址就是上述代码的地址。</p><p>接着我们将其引入到代码中使用，打开 <code>components/NavBar/index.jsx</code> ，添加如下属性：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">import</span> CustomIcon <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;../CustomIcon&#x27;</span>;<br>...<br>&lt;TabBar.Item<br>  itemKey=<span class="hljs-string">&quot;/&quot;</span><br>  title=<span class="hljs-string">&quot;账单&quot;</span><br>  icon=&#123;<span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">CustomIcon</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;zhangdan&quot;</span> /&gt;</span></span>&#125;<br>/&gt;<br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">TabBar.Item</span></span></span><br><span class="hljs-tag"><span class="xml">  <span class="hljs-attr">itemKey</span>=<span class="hljs-string">&quot;/data&quot;</span></span></span><br><span class="hljs-tag"><span class="xml">  <span class="hljs-attr">title</span>=<span class="hljs-string">&quot;统计&quot;</span></span></span><br><span class="hljs-tag"><span class="xml">  <span class="hljs-attr">icon</span>=<span class="hljs-string">&#123;</span>&lt;<span class="hljs-attr">CustomIcon</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;tongji&quot;</span> /&gt;</span>&#125;</span><br><span class="xml">/&gt;</span><br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">TabBar.Item</span></span></span><br><span class="hljs-tag"><span class="xml">  <span class="hljs-attr">itemKey</span>=<span class="hljs-string">&quot;/user&quot;</span></span></span><br><span class="hljs-tag"><span class="xml">  <span class="hljs-attr">title</span>=<span class="hljs-string">&quot;我的&quot;</span></span></span><br><span class="hljs-tag"><span class="xml">  <span class="hljs-attr">icon</span>=<span class="hljs-string">&#123;</span>&lt;<span class="hljs-attr">CustomIcon</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;wode&quot;</span> /&gt;</span>&#125;</span><br><span class="xml">/&gt;</span><br></code></pre></td></tr></table></figure><p>查看浏览器展示效果如下：</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/5f7b75bd787a402795887b4893924916~tplv-k3u1fbpfcp-zoom-in-crop-mark:3024:0:0:0.awebp" alt="img"></p><h2 id="底部导航栏的显示隐藏"><a href="#底部导航栏的显示隐藏" class="headerlink" title="底部导航栏的显示隐藏"></a>底部导航栏的显示隐藏</h2><p>我们在之前引入 <code>NavBar</code> 的代码中，将 <code>showNav</code> 属性写死为 <code>true</code>。此时，我们需要将其盘活，打开 <code>App.jsx</code>，添加如下代码：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">import</span> React, &#123; useEffect, useState &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;react&quot;</span>;<br><span class="hljs-keyword">import</span> &#123;<br>  BrowserRouter <span class="hljs-keyword">as</span> Router,<br>  Routes,<br>  Route,<br>  useLocation,<br>&#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;react-router-dom&quot;</span>;<br><br><span class="hljs-keyword">import</span> NavBar <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;@/components/NavBar&quot;</span>;<br><br><span class="hljs-keyword">import</span> &#123; ConfigProvider &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;zarm&quot;</span>;<br><br><span class="hljs-keyword">import</span> routes <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;@/router&quot;</span>;<br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">App</span>(<span class="hljs-params"></span>) </span>&#123;<br>  <span class="hljs-keyword">const</span> location = useLocation(); <span class="hljs-comment">// 拿到 location 实例</span><br>  <span class="hljs-keyword">const</span> &#123; pathname &#125; = location; <span class="hljs-comment">// 获取当前路径</span><br>  <span class="hljs-keyword">const</span> needNav = [<span class="hljs-string">&quot;/&quot;</span>, <span class="hljs-string">&quot;/data&quot;</span>, <span class="hljs-string">&quot;/user&quot;</span>]; <span class="hljs-comment">// 需要底部导航栏的路径</span><br>  <span class="hljs-keyword">const</span> [showNav, setShowNav] = useState(<span class="hljs-literal">false</span>); <span class="hljs-comment">// 是否展示 Nav</span><br>  useEffect(<span class="hljs-function">() =&gt;</span> &#123;<br>    setShowNav(needNav.includes(pathname));<br>  &#125;, [pathname]); <span class="hljs-comment">// [] 内的参数若是变化，便会执行上述回调函数=</span><br>  <span class="hljs-keyword">return</span> (<br>    <span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">Router</span>&gt;</span></span><br><span class="xml">      <span class="hljs-tag">&lt;<span class="hljs-name">ConfigProvider</span> <span class="hljs-attr">primaryColor</span>=<span class="hljs-string">&#123;</span>&quot;#<span class="hljs-attr">007fff</span>&quot;&#125;&gt;</span></span><br><span class="xml">        <span class="hljs-tag">&lt;<span class="hljs-name">Switch</span>&gt;</span></span><br><span class="xml">          &#123;routes.map((route) =&gt; (</span><br><span class="xml">            <span class="hljs-tag">&lt;<span class="hljs-name">Route</span> <span class="hljs-attr">exact</span> <span class="hljs-attr">key</span>=<span class="hljs-string">&#123;route.path&#125;</span> <span class="hljs-attr">path</span>=<span class="hljs-string">&#123;route.path&#125;</span>&gt;</span></span><br><span class="xml">              <span class="hljs-tag">&lt;<span class="hljs-name">route.component</span> /&gt;</span></span><br><span class="xml">            <span class="hljs-tag">&lt;/<span class="hljs-name">Route</span>&gt;</span></span><br><span class="xml">          ))&#125;</span><br><span class="xml">        <span class="hljs-tag">&lt;/<span class="hljs-name">Switch</span>&gt;</span></span><br><span class="xml">      <span class="hljs-tag">&lt;/<span class="hljs-name">ConfigProvider</span>&gt;</span></span><br><span class="xml">      <span class="hljs-tag">&lt;<span class="hljs-name">NavBar</span> <span class="hljs-attr">showNav</span>=<span class="hljs-string">&#123;true&#125;</span> /&gt;</span></span><br><span class="xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">Router</span>&gt;</span></span><br>  );<br>&#125;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> App;<br></code></pre></td></tr></table></figure><p>当你刷新浏览器，控制台应该会报下面的错误：</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/f3a8e99d9b4346ada136f513486912e6~tplv-k3u1fbpfcp-zoom-in-crop-mark:3024:0:0:0.awebp" alt="img"></p><p>执行 <code>useLocation</code> 时，报错 <code>location of undefined</code>。这是因为想要在函数组件内执行 <code>useLocation</code>，该组件必须被 <code>Router</code> 高阶组件包裹，我们做如下改动，将 <code>App.jsx</code> 的 <code>Router</code> 组件，前移到 <code>main.jsx</code> 内，如下：</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/b13889ca74b84460bb6205555cbc75fd~tplv-k3u1fbpfcp-zoom-in-crop-mark:3024:0:0:0.awebp" alt="img"></p><p>逻辑分析：</p><p>我们拿到 <code>pathname</code>，将其设置为 <code>useEffect</code> 钩子函数的第二个参数，监听它的变化，一旦 <code>pathname</code> 变化，便会触发回调函数执行 <code>setShowNav(needNav.includes(pathname))</code>，结果会传递给 <code>NavBar</code> 组件，从而控制组件的显示隐藏。<code>needNav</code> 为需要底部导航的路径值。</p><p>我们不妨做个测试，在 <code>container</code> 目录下新建一个测试页面组件 <code>Detail</code>，并且添加路由配置。</p><p>别忘记把组件属性修改成动态变量：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js">&lt;NavBar showNav=&#123;showNav&#125; /&gt;<br></code></pre></td></tr></table></figure><p>查看浏览器的展示效果：</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/c659b2430bab4985a86c2519eac7d62e~tplv-k3u1fbpfcp-zoom-in-crop-mark:3024:0:0:0.awebp" alt="img"></p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>导航栏可以用在很多地方，映射到 <code>PC</code> 网页就是左侧侧边导航，道理都是相通的。移动端放在下面控制，<code>PC</code> 端放在左边或者右边控制罢了。所以再次强调不要学完了一个知识点，就思维定势地认为只能用在某一个需求上，能做到融会贯通，才是判断一个好程序员的标准。</p>]]></content>
      
      
      
        <tags>
            
            <tag> react </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>112、稀土掘金小册-记账本（三）react vite2.0 ZarmUI搭建开发环境</title>
      <link href="/2023/01/04/112-react/"/>
      <url>/2023/01/04/112-react/</url>
      
        <content type="html"><![CDATA[<span id="more"></span><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p><code>React</code> 技术栈的 <code>UI</code> 组件库相比 <code>Vue</code>，会少一些。我们耳熟能详的便是 <code>Antd</code>，但是它针对的是 <code>PC</code> 端的，我们的项目目前是一个 <code>H5</code> 的网页（不排除后期做一个 PC 端）。所以我选择了 <a href="https://link.juejin.cn/?target=https:https://zarm.gitee.io/%23/">Zarm</a>。</p><p>这里再次强调，不是 <code>Zarm</code> 就比别的移动端组件库好，只是目前我开发的这款记账本项目，<code>Zarm</code> 比较适合。</p><h3 id="知识点"><a href="#知识点" class="headerlink" title="知识点"></a>知识点</h3><ul><li>构架工具 <code>Vite</code>。</li><li>前端框架 <code>React</code> 和路由 <code>react-router-dom</code>。</li><li><code>CSS</code> 预加载器 <code>Less</code>。</li><li><code>HTTP</code> 请求库 <code>axios</code>。</li><li>移动端分辨率适配 <code>flexible</code>。</li><li>跨域代理。</li></ul><h2 id="初始化-Vite-React-项目"><a href="#初始化-Vite-React-项目" class="headerlink" title="初始化 Vite + React 项目"></a>初始化 Vite + React 项目</h2><p><code>Vite</code> 官方提供两种初始化项目的方式，一种是如下所示，可以自由选择需要的前端框架。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">npm init @vitejs/app<br></code></pre></td></tr></table></figure><p>另一种则是直接用官方提供的模板，一键生成项目：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># npm 6.x</span><br>npm init @vitejs/app react-vite-h5 --template react<br><br><span class="hljs-comment"># npm 7+, 需要额外的双横线：</span><br>npm init @vitejs/app react-vite-h5 -- --template react<br></code></pre></td></tr></table></figure><p>我们使用第二种方式初始化项目，如下所示：</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/32661c92fce54016949d56b5a57399ba~tplv-k3u1fbpfcp-zoom-in-crop-mark:3024:0:0:0.awebp" alt="img"></p><p>安装完 <code>node_modules</code> 之后，通过 <code>npm run dev</code> 启动项目，如下所示代表成功了：</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/874d34fcf2394af585b2c42a11cef607~tplv-k3u1fbpfcp-zoom-in-crop-mark:3024:0:0:0.awebp" alt="img"></p><h2 id="引入路由插件-react-router-dom"><a href="#引入路由插件-react-router-dom" class="headerlink" title="引入路由插件 react-router-dom"></a>引入路由插件 react-router-dom</h2><p>没有路由的项目，那就不是一个完整项目，而是一个页面而已。真实项目都是存在各种模块之间的切换，各个模块的功能组合在一起才能叫做一个项目。</p><p>首选安装 <code>react-router-dom</code>，指令如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">npm i react-router-dom -S<br></code></pre></td></tr></table></figure><p>在项目 <code>src</code> 目录下新增 <code>container</code> 目录用于放置页面组件，再在 <code>container</code> 下新增两个目录分别是 <code>Index</code> 和 <code>About</code> ，添加如下内容：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// Index/index.jsx</span><br><span class="hljs-keyword">import</span> React <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;react&#x27;</span><br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">Index</span>(<span class="hljs-params"></span>) </span>&#123;<br>  <span class="hljs-keyword">return</span> <span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span></span><br><span class="xml">    Index</span><br><span class="xml">  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>&#125;<br><br><span class="hljs-comment">// About/index.jsx</span><br><span class="hljs-keyword">import</span> React <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;react&#x27;</span><br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">About</span>(<span class="hljs-params"></span>) </span>&#123;<br>  <span class="hljs-keyword">return</span> <span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span></span><br><span class="xml">    About</span><br><span class="xml">  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>&#125;<br></code></pre></td></tr></table></figure><p>再来新建 <code>src/router/index.js</code> 配置路由数组，添加如下内容：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// router/index.js</span><br><span class="hljs-keyword">import</span> Index <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;../container/Index&quot;</span>;<br><span class="hljs-keyword">import</span> About <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;../container/About&quot;</span>;<br><br><span class="hljs-keyword">const</span> routes = [<br>  &#123;<br>    <span class="hljs-attr">path</span>: <span class="hljs-string">&quot;/&quot;</span>,<br>    <span class="hljs-attr">component</span>: Index,<br>  &#125;,<br>  &#123;<br>    <span class="hljs-attr">path</span>: <span class="hljs-string">&quot;/about&quot;</span>,<br>    <span class="hljs-attr">component</span>: About,<br>  &#125;,<br>];<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> routes;<br></code></pre></td></tr></table></figure><p>在 <code>App.jsx</code> 引入路由配置，实现切换浏览器路径，显示相应的组件：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// App.jsx</span><br><span class="hljs-keyword">import</span> React, &#123; useState &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;react&quot;</span>;<br><span class="hljs-keyword">import</span> &#123; BrowserRouter <span class="hljs-keyword">as</span> Router, Routes, Route &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;react-router-dom&quot;</span>;<br><span class="hljs-keyword">import</span> routes <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;../src/router&quot;</span>;<br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">App</span>(<span class="hljs-params"></span>) </span>&#123;<br>  <span class="hljs-keyword">return</span> (<br>    <span class="xml"><span class="hljs-tag">&lt;&gt;</span></span><br><span class="xml">      <span class="hljs-tag">&lt;<span class="hljs-name">Routes</span>&gt;</span></span><br><span class="xml">        &#123;routes.map((route) =&gt; (</span><br><span class="xml">          <span class="hljs-tag">&lt;<span class="hljs-name">Route</span></span></span><br><span class="hljs-tag"><span class="xml">            <span class="hljs-attr">exact</span></span></span><br><span class="hljs-tag"><span class="xml">            <span class="hljs-attr">key</span>=<span class="hljs-string">&#123;route.path&#125;</span></span></span><br><span class="hljs-tag"><span class="xml">            <span class="hljs-attr">path</span>=<span class="hljs-string">&#123;route.path&#125;</span></span></span><br><span class="hljs-tag"><span class="xml">            <span class="hljs-attr">element</span>=<span class="hljs-string">&#123;</span>&lt;<span class="hljs-attr">route.component</span> /&gt;</span>&#125;</span><br><span class="xml">          /&gt;</span><br><span class="xml">        ))&#125;</span><br><span class="xml">      <span class="hljs-tag">&lt;/<span class="hljs-name">Routes</span>&gt;</span></span><br><span class="xml">    <span class="hljs-tag">&lt;/&gt;</span></span><br>  );<br>&#125;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> App;<br></code></pre></td></tr></table></figure><p>启动项目 <code>npm run dev</code>，如下图所示：</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/d67090d0f61641539e3fcd9061d27474~tplv-k3u1fbpfcp-zoom-in-crop-mark:3024:0:0:0.awebp" alt="img"></p><h2 id="引入-Zarm-UI-组件库"><a href="#引入-Zarm-UI-组件库" class="headerlink" title="引入 Zarm UI 组件库"></a>引入 Zarm UI 组件库</h2><p>首先通过如下指令安装它：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">npm install zarm -S<br></code></pre></td></tr></table></figure><p>修改 <code>App.jsx</code> 的代码，全局引入样式和中文包：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">import</span> React, &#123; useState &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;react&quot;</span>;<br><span class="hljs-keyword">import</span> &#123; BrowserRouter <span class="hljs-keyword">as</span> Router, Routes, Route &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;react-router-dom&quot;</span>;<br><br><span class="hljs-keyword">import</span> &#123; ConfigProvider &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;zarm&quot;</span>;<br><span class="hljs-keyword">import</span> zhCN <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;zarm/lib/config-provider/locale/zh_CN&quot;</span>;<br><span class="hljs-keyword">import</span> <span class="hljs-string">&quot;zarm/dist/zarm.css&quot;</span>;<br><br><span class="hljs-keyword">import</span> routes <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;../src/router&quot;</span>;<br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">App</span>(<span class="hljs-params"></span>) </span>&#123;<br>  <span class="hljs-keyword">return</span> (<br>    <span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">Router</span>&gt;</span></span><br><span class="xml">      <span class="hljs-tag">&lt;<span class="hljs-name">ConfigProvider</span> <span class="hljs-attr">primaryColor</span>=<span class="hljs-string">&#123;</span>&quot;#<span class="hljs-attr">007fff</span>&quot;&#125; <span class="hljs-attr">locale</span>=<span class="hljs-string">&#123;zhCN&#125;</span>&gt;</span></span><br><span class="xml">        <span class="hljs-tag">&lt;&gt;</span></span><br><span class="xml">          <span class="hljs-tag">&lt;<span class="hljs-name">Routes</span>&gt;</span></span><br><span class="xml">            &#123;routes.map((route) =&gt; (</span><br><span class="xml">              <span class="hljs-tag">&lt;<span class="hljs-name">Route</span></span></span><br><span class="hljs-tag"><span class="xml">                <span class="hljs-attr">exact</span></span></span><br><span class="hljs-tag"><span class="xml">                <span class="hljs-attr">key</span>=<span class="hljs-string">&#123;route.path&#125;</span></span></span><br><span class="hljs-tag"><span class="xml">                <span class="hljs-attr">path</span>=<span class="hljs-string">&#123;route.path&#125;</span></span></span><br><span class="hljs-tag"><span class="xml">                <span class="hljs-attr">element</span>=<span class="hljs-string">&#123;</span>&lt;<span class="hljs-attr">route.component</span> /&gt;</span>&#125;</span><br><span class="xml">              /&gt;</span><br><span class="xml">            ))&#125;</span><br><span class="xml">          <span class="hljs-tag">&lt;/<span class="hljs-name">Routes</span>&gt;</span></span><br><span class="xml">        <span class="hljs-tag">&lt;/&gt;</span></span><br><span class="xml">      <span class="hljs-tag">&lt;/<span class="hljs-name">ConfigProvider</span>&gt;</span></span><br>    &lt;/Router&gt;<br>  );<br>&#125;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> App;<br></code></pre></td></tr></table></figure><p>此时 <code>zarm</code> 的样式，已经全局引入了，我们先查看在 <code>/container/Index/index.jsx</code> 添加一个按钮是否生效：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// Index/index.jsx</span><br><span class="hljs-keyword">import</span> React <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;react&quot;</span>;<br><span class="hljs-keyword">import</span> &#123; Button &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;zarm&quot;</span>;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">Index</span>(<span class="hljs-params"></span>) </span>&#123;<br>  <span class="hljs-keyword">return</span> (<br>    <span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span></span><br><span class="xml">      Index</span><br><span class="xml">      <span class="hljs-tag">&lt;<span class="hljs-name">Button</span> <span class="hljs-attr">theme</span>=<span class="hljs-string">&quot;primary&quot;</span>&gt;</span>按钮<span class="hljs-tag">&lt;/<span class="hljs-name">Button</span>&gt;</span></span><br><span class="xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>  );<br>&#125;<br></code></pre></td></tr></table></figure><p>重启项目，如下所示：</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/5196fda769074ec387a085af87b6bb92~tplv-k3u1fbpfcp-zoom-in-crop-mark:3024:0:0:0.awebp" alt="img"></p><p>此时恭喜你 🎉，你已经成功将组件引入项目中。</p><h3 id="小优化"><a href="#小优化" class="headerlink" title="小优化"></a>小优化</h3><p>组件虽然引入成功了，但是有一个问题，我不希望所有的组件样式都被一次性的引入，因为这样代码会比较冗余，我只需要引入我使用到的组件样式，实现「按需引入」。</p><p>我们先看看，就目前现在这个情况，打完包之后，静态资源有多大。运行指令 <code>npm run build</code> ，如下所示：</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/ba361939748e48499cab35833093c012~tplv-k3u1fbpfcp-zoom-in-crop-mark:3024:0:0:0.awebp" alt="img"></p><p>腚眼一看，全局引入样式的形式，直接打完包， <code>css</code> 静态资源就 <code>168.22kb</code> 了，我们尝试配置「按需引入」。</p><p>首先我们安装一个插件：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">npm i vite-plugin-style-import -D<br></code></pre></td></tr></table></figure><p>然后在 <code>vite.config.js</code> 配置文件内添加如下内容：</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/cd0314c0446e4654bfcc73e3dee44291~tplv-k3u1fbpfcp-zoom-in-crop-mark:3024:0:0:0.awebp" alt="img"></p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/7bcf00b0cb0c4293a2daf92bef93f451~tplv-k3u1fbpfcp-zoom-in-crop-mark:3024:0:0:0.awebp" alt="img"></p><p>打完包之后，肉眼可见，<code>css</code> 提及从 <code>168.22kb</code> -&gt; <code>35.22kb</code>。这种方式也是前端性能优化的其中一种。</p><h2 id="配置-CSS-预处理器-Less"><a href="#配置-CSS-预处理器-Less" class="headerlink" title="配置 CSS 预处理器 Less"></a>配置 CSS 预处理器 Less</h2><p>项目中采用的 <code>Less</code> 作为 <code>CSS</code> 预处理器，它能设置变量以及一些嵌套逻辑，便于项目的样式编写。</p><p>安装 <code>less</code> 插件包，<code>npm i less -D</code>，因为上述配置我们使用的是 <code>less</code>，并且我们需要配置 <code>javascriptEnabled 为 true</code>，支持 <code>less</code> 内联 <code>JS</code>。</p><p>修改 <code>vite.config.js</code>，如下：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs js">&#123;<br>  <span class="hljs-attr">plugins</span>: [...]<br>  <span class="hljs-attr">css</span>: &#123;<br>    <span class="hljs-attr">modules</span>: &#123;<br>      <span class="hljs-attr">localsConvention</span>: <span class="hljs-string">&#x27;dashesOnly&#x27;</span><br>    &#125;,<br>    <span class="hljs-attr">preprocessorOptions</span>: &#123;<br>      <span class="hljs-attr">less</span>: &#123;<br>        <span class="hljs-comment">// 支持内联 JavaScript</span><br>        <span class="hljs-attr">javascriptEnabled</span>: <span class="hljs-literal">true</span>,<br>      &#125;<br>    &#125;<br>  &#125;,<br>&#125;<br></code></pre></td></tr></table></figure><p>并且添加了 <code>css modules</code> 配置，这样我们就不用担心在项目中，自定义的样式重名的风险，我们尝试在 <code>/container/Index</code> 目录下添加样式文件 <code>style.module.less</code>，并且在 <code>/container/Index/index.jsx</code> 中引入它，如下：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-class">.index</span> &#123;<br>  <span class="hljs-selector-tag">span</span> &#123;<br>    <span class="hljs-attribute">color</span>: red;<br>  &#125;<br>&#125;<br>// Index/index<span class="hljs-selector-class">.jsx</span><br>import React <span class="hljs-selector-tag">from</span> &#x27;react&#x27;<br>import &#123; <span class="hljs-selector-tag">Button</span> &#125; <span class="hljs-selector-tag">from</span> &#x27;zarm&#x27;<br><br>import s <span class="hljs-selector-tag">from</span> &#x27;./style<span class="hljs-selector-class">.module</span><span class="hljs-selector-class">.less</span>&#x27;<br><br>export default function Index() &#123;<br>  return &lt;<span class="hljs-selector-tag">div</span> className=&#123;s<span class="hljs-selector-class">.index</span>&#125;&gt;<br>    &lt;<span class="hljs-selector-tag">span</span>&gt;样式&lt;/<span class="hljs-selector-tag">span</span>&gt;<br>    &lt;<span class="hljs-selector-tag">Button</span> theme=&#x27;primary&#x27;&gt;按钮&lt;/<span class="hljs-selector-tag">Button</span>&gt;<br>  &lt;/<span class="hljs-selector-tag">div</span>&gt;<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/8866be0be4824492b94297eea2eb4ca3~tplv-k3u1fbpfcp-zoom-in-crop-mark:3024:0:0:0.awebp" alt="img"></p><p>此时我只能再次恭喜你，<code>Less</code> 成功被引入。</p><h2 id="移动端项目适配-rem"><a href="#移动端项目适配-rem" class="headerlink" title="移动端项目适配 rem"></a>移动端项目适配 rem</h2><p>移动端项目，肯定是需要适配各种分辨率屏幕的，就比如你 10px 的宽度，在每个屏幕上的占比都是不一样的，我们这里不对分辨率做深入的探讨，我们目前的首要目的是完成项目移动端的分辨率适配。</p><p>首先我们需要安装 <code>lib-flexible</code>：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">npm i lib-flexible -S<br></code></pre></td></tr></table></figure><p>并在 <code>main.jsx</code> 中引入它：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">import</span> React <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;react&quot;</span>;<br><span class="hljs-keyword">import</span> ReactDOM <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;react-dom&quot;</span>;<br><span class="hljs-keyword">import</span> <span class="hljs-string">&quot;lib-flexible/flexible&quot;</span>;<br><span class="hljs-keyword">import</span> <span class="hljs-string">&quot;./index.css&quot;</span>;<br><span class="hljs-keyword">import</span> App <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;./App&quot;</span>;<br><br>ReactDOM.render(<br>  <span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">React.StrictMode</span>&gt;</span></span><br><span class="xml">    <span class="hljs-tag">&lt;<span class="hljs-name">App</span> /&gt;</span></span><br><span class="xml">  <span class="hljs-tag">&lt;/<span class="hljs-name">React.StrictMode</span>&gt;</span></span>,<br>  <span class="hljs-built_in">document</span>.getElementById(<span class="hljs-string">&quot;root&quot;</span>)<br>);<br></code></pre></td></tr></table></figure><p>然后再安装一个 <code>postcss-pxtorem</code>，它的作用是在你编写完 <code>css</code> 后，将你的单位自动转化为 <code>rem</code> 单位。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">npm i postcss-pxtorem<br></code></pre></td></tr></table></figure><p>在项目根目录新建 <code>postcss.config.js</code>：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// postcss.config.js</span><br><span class="hljs-comment">// 用 vite 创建项目，配置 postcss 需要使用 post.config.js，之前使用的 .postcssrc.js 已经被抛弃</span><br><span class="hljs-comment">// 具体配置可以去 postcss-pxtorem 仓库看看文档</span><br><span class="hljs-built_in">module</span>.exports = &#123;<br>  <span class="hljs-attr">plugins</span>: [<br>    <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;postcss-pxtorem&quot;</span>)(&#123;<br>      <span class="hljs-attr">rootValue</span>: <span class="hljs-number">37.5</span>,<br>      <span class="hljs-attr">propList</span>: [<span class="hljs-string">&quot;*&quot;</span>],<br>      <span class="hljs-attr">selectorBlackList</span>: [<span class="hljs-string">&quot;.norem&quot;</span>], <span class="hljs-comment">// 过滤掉.norem-开头的class，不进行rem转换</span><br>    &#125;),<br>  ],<br>&#125;;<br></code></pre></td></tr></table></figure><p>修改 <code>Index/style.module.less</code>：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-class">.index</span> &#123;<br>  <span class="hljs-attribute">width</span>: <span class="hljs-number">200px</span>;<br>  <span class="hljs-attribute">height</span>: <span class="hljs-number">200px</span>;<br>  <span class="hljs-attribute">background</span>: green;<br>  <span class="hljs-selector-tag">span</span> &#123;<br>    <span class="hljs-attribute">color</span>: red;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>重启项目 <code>npm run dev</code>，如下所示：</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/28c6f12ba2c446ef9f374f878636c1f0~tplv-k3u1fbpfcp-zoom-in-crop-mark:3024:0:0:0.awebp" alt="img"></p><p>可以看到，<code>200px</code> 已经被转化为 <code>5.3333rem</code>，我们设置的 <code>rootValue</code> 是 <code>37.5</code>，你可以换算一下 <code>5.33333 * 37.5 = 200</code>。</p><p>我们目前把浏览器调整成的是 <code>iphone 6</code>，<code>html</code> 的 <code>font-size</code> 为 <code>37.5px</code>，当我们手机变成其他尺寸的时候，这个 <code>font-size</code> 的值也会变化，这是 <code>flexible</code> 起到的作用，动态的变化 <code>html</code> 的 <code>font-size</code> 的值，从而让 <code>1rem</code> 所对应的 <code>px</code> 值一直都是动态适应变化的。</p><p>当我切换成 <code>iphone 6 plus</code> 时：</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/b787a8e1e96d4db58622c23d89592954~tplv-k3u1fbpfcp-zoom-in-crop-mark:3024:0:0:0.awebp" alt="img"></p><p>变成了 <code>41.4px</code>，而相应的，我们 <code>div</code> 还是 <code>5.33333rem</code>，所以此时 <code>div</code> 宽度就变大了，但是手机的屏幕宽度也变大了，这就不会影响视觉上的比例误差太大。</p><h2 id="二次封装-axios"><a href="#二次封装-axios" class="headerlink" title="二次封装 axios"></a>二次封装 axios</h2><p>说到这里，那就要涉及到项目的服务端 <code>API</code> 接口，我们在前面的章节里，已经完成了服务端的代码编写，但是此时我们的服务端项目是跑在 <code>http://127.0.0.1/7001</code> 端口上的。</p><p>此时你是可以在后续的请求中，使用 <code>http://127.0.0.1/7001</code> 作为项目的 <code>baseURL</code>。但是照顾到有些同学没有启动服务端项目，直奔前端项目来的。这里我已经将接口提前部署到了线上环境，供大家使用。接口地址是 <code>http://api.chennick.wang</code>。</p><p>所以在后续的封装过程中，我会提醒大家两种使用。</p><p>首先我们安装 <code>npm i axios -S</code>，在 <code>src</code> 目录下新建 <code>utils</code> 目录，并新建 <code>axios.js</code> 脚本：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// src/utils/axios.js</span><br><span class="hljs-keyword">import</span> axios <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;axios&quot;</span>;<br><span class="hljs-keyword">import</span> &#123; Toast &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;zarm&quot;</span>;<br><br><span class="hljs-keyword">const</span> MODE = <span class="hljs-keyword">import</span>.meta.env.MODE; <span class="hljs-comment">// 环境变量</span><br><br>axios.defaults.baseURL =<br>  MODE == <span class="hljs-string">&quot;development&quot;</span> ? <span class="hljs-string">&quot;/api&quot;</span> : <span class="hljs-string">&quot;http://api.chennick.wang&quot;</span>;<br>axios.defaults.withCredentials = <span class="hljs-literal">true</span>;<br>axios.defaults.headers[<span class="hljs-string">&quot;X-Requested-With&quot;</span>] = <span class="hljs-string">&quot;XMLHttpRequest&quot;</span>;<br>axios.defaults.headers[<span class="hljs-string">&quot;Authorization&quot;</span>] = <span class="hljs-string">`<span class="hljs-subst">$&#123;</span></span><br><span class="hljs-subst"><span class="hljs-string">  <span class="hljs-built_in">localStorage</span>.getItem(<span class="hljs-string">&quot;token&quot;</span>) || <span class="hljs-literal">null</span></span></span><br><span class="hljs-subst"><span class="hljs-string">&#125;</span>`</span>;<br>axios.defaults.headers.post[<span class="hljs-string">&quot;Content-Type&quot;</span>] = <span class="hljs-string">&quot;application/json&quot;</span>;<br><br>axios.interceptors.response.use(<span class="hljs-function">(<span class="hljs-params">res</span>) =&gt;</span> &#123;<br>  <span class="hljs-keyword">if</span> (<span class="hljs-keyword">typeof</span> res.data !== <span class="hljs-string">&quot;object&quot;</span>) &#123;<br>    Toast.show(<span class="hljs-string">&quot;服务端异常！&quot;</span>);<br>    <span class="hljs-keyword">return</span> <span class="hljs-built_in">Promise</span>.reject(res);<br>  &#125;<br>  <span class="hljs-keyword">if</span> (res.data.code != <span class="hljs-number">200</span>) &#123;<br>    <span class="hljs-keyword">if</span> (res.data.msg) Toast.show(res.data.msg);<br>    <span class="hljs-keyword">if</span> (res.data.code == <span class="hljs-number">401</span>) &#123;<br>      <span class="hljs-built_in">window</span>.location.href = <span class="hljs-string">&quot;/login&quot;</span>;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-built_in">Promise</span>.reject(res.data);<br>  &#125;<br><br>  <span class="hljs-keyword">return</span> res.data;<br>&#125;);<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> axios;<br></code></pre></td></tr></table></figure><p>我逐行为大家分析上述代码的情况情况。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> MODE = <span class="hljs-keyword">import</span>.meta.env.MODE;<br></code></pre></td></tr></table></figure><p><code>MODE</code> 是一个环境变量，通过 <code>Vite</code> 构建的项目中，环境变量在项目中，可以通过 <code>import.meta.env.MODE</code> 获取，环境变量的作用就是判断当前代码运行在开发环境还是生产环境。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js">axios.defaults.baseURL = <span class="hljs-string">&quot;development&quot;</span> ? <span class="hljs-string">&quot;/api&quot;</span> : <span class="hljs-string">&quot;http://api.chennick.wang&quot;</span>;<br></code></pre></td></tr></table></figure><p><code>baseURL</code> 是 <code>axios</code> 的配置项，它的作用就是设置请求的基础路径，后续我们会在项目实战中有所体现。配置基础路径的好处就是，当请求地址修改的时候，可以在此统一配置。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs js">axios.defaults.headers[<span class="hljs-string">&quot;X-Requested-With&quot;</span>] = <span class="hljs-string">&quot;XMLHttpRequest&quot;</span>;<br>axios.defaults.headers[<span class="hljs-string">&quot;Authorization&quot;</span>] = <span class="hljs-string">`<span class="hljs-subst">$&#123;</span></span><br><span class="hljs-subst"><span class="hljs-string">  <span class="hljs-built_in">localStorage</span>.getItem(<span class="hljs-string">&quot;token&quot;</span>) || <span class="hljs-literal">null</span></span></span><br><span class="hljs-subst"><span class="hljs-string">&#125;</span>`</span>;<br>axios.defaults.headers.post[<span class="hljs-string">&quot;Content-Type&quot;</span>] = <span class="hljs-string">&quot;application/json&quot;</span>;<br></code></pre></td></tr></table></figure><p>上述三个配置是用于请求头的设置，<code>Authorization</code> 是我们在服务端鉴权的时候用到的，我们在前端设置好 <code>token</code>，服务端通过获取请求头中的 <code>token</code> 去验证每一次请求是否合法。</p><p>最后一行是配置 <code>post</code> 请求是，使用的请求体，这里默认设置成 <code>application/json</code> 的形式。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs js">axios.interceptors.response.use(<span class="hljs-function">(<span class="hljs-params">res</span>) =&gt;</span> &#123;<br>  <span class="hljs-keyword">if</span> (<span class="hljs-keyword">typeof</span> res.data !== <span class="hljs-string">&quot;object&quot;</span>) &#123;<br>    Toast.show(<span class="hljs-string">&quot;服务端异常！&quot;</span>);<br>    <span class="hljs-keyword">return</span> <span class="hljs-built_in">Promise</span>.reject(res);<br>  &#125;<br>  <span class="hljs-keyword">if</span> (res.data.code != <span class="hljs-number">200</span>) &#123;<br>    <span class="hljs-keyword">if</span> (res.data.msg) Toast.show(res.data.msg);<br>    <span class="hljs-keyword">if</span> (res.data.code == <span class="hljs-number">401</span>) &#123;<br>      <span class="hljs-built_in">window</span>.location.href = <span class="hljs-string">&quot;/login&quot;</span>;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-built_in">Promise</span>.reject(res.data);<br>  &#125;<br><br>  <span class="hljs-keyword">return</span> res.data;<br>&#125;);<br></code></pre></td></tr></table></figure><p><code>interceptors</code> 为拦截器，拦截器的作用是帮你拦截每一次请求，你可以在回调函数中做一些“手脚”，再将数据 <code>return</code> 回去。上述代码就是拦截了响应内容，统一判断请求内容，如果非 200，则提示错误信息，<code>401</code> 的话，就是没有登录的用户，默认跳到 <code>/login</code> 页面。如果是正常的响应，则 <code>retrun res.data</code>。</p><p>最后我们将这个 <code>axios</code> 抛出，供页面组件请求使用。</p><p>在 <code>utils</code> 下新建一个 <code>index.js</code>，内容如下：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">import</span> axios <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;./axios&quot;</span>;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">const</span> get = axios.get;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">const</span> post = axios.post;<br></code></pre></td></tr></table></figure><p>这样获取的时候，能少写几行代码，能少写点就少写点。</p><h2 id="代理配置"><a href="#代理配置" class="headerlink" title="代理配置"></a>代理配置</h2><p><code>baseURL</code> 为什么在 <code>development</code> 环境下，用 <code>/api</code> 这样的请求地址。其实它就是为了代理请求而配置的。</p><p>这样配置完后，在请求接口的时候，请求地址大概长这样：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js">/api/userInfo<br></code></pre></td></tr></table></figure><p>于是我们需要去配置代理，打开 <code>vite.config.js</code>，添加如下代码：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs js">server: &#123;<br>  <span class="hljs-attr">proxy</span>: &#123;<br>    <span class="hljs-string">&#x27;/api&#x27;</span>: &#123;<br>      <span class="hljs-comment">// 当遇到 /api 路径时，将其转换成 target 的值</span><br>      <span class="hljs-attr">target</span>: <span class="hljs-string">&#x27;http://api.chennick.wang/api/&#x27;</span>,<br>      <span class="hljs-attr">changeOrigin</span>: <span class="hljs-literal">true</span>,<br>      <span class="hljs-attr">rewrite</span>: <span class="hljs-function"><span class="hljs-params">path</span> =&gt;</span> path.replace(<span class="hljs-regexp">/^\/api/</span>, <span class="hljs-string">&#x27;&#x27;</span>) <span class="hljs-comment">// 将 /api 重写为空</span><br>    &#125;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>这样配置完之后，开发环境下，<code>/api/userInfo</code> -&gt; <code>http://api.chennick.wang/api/userInfo</code>。这样就解决了大家老大难的跨域问题。</p><p>但是其实服务端只要设置好白名单，就不会有这样那样的跨域问题。</p><h2 id="resolve-alias-别名设置"><a href="#resolve-alias-别名设置" class="headerlink" title="resolve.alias 别名设置"></a>resolve.alias 别名设置</h2><p>这里我们必须得设置好别名，否则在页面中，你会写出很长一串类似这样的代码 <code>../../../</code>。</p><p>打开 <code>vite.config.js</code>，添加配置如下：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs js">...<br><span class="hljs-keyword">import</span> path <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;path&#x27;</span><br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> defineConfig(&#123;<br>  ...<br>  <span class="hljs-attr">resolve</span>: &#123;<br>    <span class="hljs-attr">alias</span>: &#123;<br>      <span class="hljs-string">&#x27;@&#x27;</span>: path.resolve(__dirname, <span class="hljs-string">&#x27;src&#x27;</span>), <span class="hljs-comment">// src 路径</span><br>      <span class="hljs-string">&#x27;utils&#x27;</span>: path.resolve(__dirname, <span class="hljs-string">&#x27;src/utils&#x27;</span>) <span class="hljs-comment">// src 路径</span><br>    &#125;<br>  &#125;,<br>&#125;)<br></code></pre></td></tr></table></figure><p>此时我们便可以修改之前的代码如下：</p><p><strong>router/index.js</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">import</span> Index <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;@/container/Index&quot;</span>;<br><span class="hljs-keyword">import</span> About <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;@/container/About&quot;</span>;<br></code></pre></td></tr></table></figure><p><strong>App.jsx</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">import</span> routes <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;@/router&quot;</span>;<br></code></pre></td></tr></table></figure><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>行文至此，我们的基础开发环境已经搭建完毕，涉及构建工具、前端框架、<code>UI</code> 组件库、<code>HTTP</code> 请求库、<code>CSS</code> 预加载器、跨域代理、移动端分辨率适配，这些知识都是一个合格的前端工程师应该具备的，所以请大家加油，将他们都通通拿下。</p>]]></content>
      
      
      
        <tags>
            
            <tag> react </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>111、稀土掘金小册-记账本（二）react vite</title>
      <link href="/2023/01/03/111-react/"/>
      <url>/2023/01/03/111-react/</url>
      
        <content type="html"><![CDATA[<span id="more"></span><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>我还是那句话，工具永远是服务于需求的。纵观整个前端生态的项目构建工具，有服务于 <code>React</code> 生态的 <code>create-react-app</code>、<code>umi</code>、<code>Next.js</code> 等。服务于 <code>Vue</code> 生态的 <code>Vue CLI</code>、<code>Vite</code>、<code>Nuxt.js</code> 等。它们都是耳熟能详的团队和大佬，为了解决各自需求而研发出来的前端构建工具。而我们要做的其实就是根据项目的需求，进行合理的选择和学习。说白了，在你没有决定权的时候，公司用什么，你就学什么。在你有话语权，能自己抉择的时候，哪个让你开发起来比较舒服，就用哪个。</p><p>这些构建工具中，有一个比较特殊，那就是 <code>Vite</code>，它是尤雨溪在发布 <code>Vue 3.0</code> 时，同步推出的一款前端构建工具。它不光服务于 <code>Vue</code>，同时也对其他的框架如 <code>React</code>、<code>Svelte</code>、<code>Preact</code> 都有一定的支持，我们本着学新不学旧的理念，在项目中引进了 <code>Vite</code> 作为构建工具。</p><p>在开始使用 <code>Vite</code> 之前，我们来认识一下它。</p><h3 id="知识点"><a href="#知识点" class="headerlink" title="知识点"></a>知识点</h3><ul><li><code>Vite</code> 是什么。</li><li><code>Vite</code> 与 <code>Webpack</code> 相比优势在哪里。</li><li><code>Vite</code> 的构建原理。</li></ul><h2 id="Vite-是什么"><a href="#Vite-是什么" class="headerlink" title="Vite 是什么"></a>Vite 是什么</h2><p>我们引用官方的一句话来介绍它，“下一代前端开发与构建工具”。</p><p>它有以下几个特点：</p><p>1、 快速启动，<code>Vite</code> 会在本地启动一个开发服务器，来管理开发环境的资源请求。</p><p>2、相比 <code>Webpack</code> 的开发环境打包构建，它在开发环境下是无需打包的，热更新相比 <code>Webpack</code> 会快很多。</p><p>3、原生 <code>ES Module</code>，要什么就当场给你什么。而 <code>Webpack</code> 则是先将资源构建好之后，再根据你的需要，分配给你想要的资源。</p><p>尤雨溪在发布 <code>Vite</code> 前，发过这么一条微博。</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/5b6344806ae94c96b9060fb0a3b13381~tplv-k3u1fbpfcp-zoom-in-crop-mark:3024:0:0:0.awebp" alt="img"></p><p>从话语间可以看出，尤雨溪团队对该打包工具也是报以厚望，所以这里大家可以不必担心后续它们会放弃维护这个项目，当然也不能打包票。</p><h2 id="Vite-与-Webpack-相比优势在哪里"><a href="#Vite-与-Webpack-相比优势在哪里" class="headerlink" title="Vite 与 Webpack 相比优势在哪里"></a>Vite 与 Webpack 相比优势在哪里</h2><p>接下来我们来聊聊，为什么说它是下一代前端开发与构建工具。是不是当代构建工具出了什么问题？</p><p>我们知道当代的前端构建工具有很多，比较受欢迎的有 <code>Webpack</code>、<code>Rollup</code>、<code>Parcel</code>等，绝大多数脚手架工具都是使用 <code>Webpack</code> 作为构建工具，如 <code>Vue-CLI</code>。</p><p>在利用 <code>Webpack</code> 作为构建工具时，开发过程中，每次修改代码，都会导致重新编译，随着项目代码量的增多，热更新的速度也随之变慢，甚至要几秒钟才能看到视图的更新。</p><p>生产环境下，它将各个模块之间通过编码的方式联系在一起，最终生成一个庞大的 <code>bundle</code> 文件。</p><p>导致这些问题出现的原因，有以下几点：</p><p>1、<code>HTTP 1.1</code> 时代，各个浏览器资源请求并发是有上限的（如谷歌浏览器为 6 个，这导致你必须要减少资源请求数）。</p><p>2、浏览器并不支持 <code>CommonJS</code> 模块化系统（它不能直接运行在浏览器环境下，它是 <code>Node</code> 提出的模块化规范，所以需要经过 <code>Webpack</code> 的打包，编译成浏览器可识别的 JS 脚本）</p><p>3、模块与模块之间的依赖顺序和管理问题（文件依赖层级越多，静态资源也就变得越多，如果一个资源有 100 个依赖关系，可能需要加载 100 个网络请求，这对生产环境可能是灾难，所以在生产环境最终会打包成一个 <code>bundle</code> 脚本，会提前进行资源按需加载的配置。）</p><h3 id="那么为什么现在又出现了不打包的构建趋势？"><a href="#那么为什么现在又出现了不打包的构建趋势？" class="headerlink" title="那么为什么现在又出现了不打包的构建趋势？"></a>那么为什么现在又出现了不打包的构建趋势？</h3><p>1、工程越来越庞大，热更新变得缓慢，十分影响开发体验。推动着我们不断地去创新，不断地尝试着去突破瓶颈。</p><p>2、各大浏览器已经开始慢慢的支持原生 <code>ES Module</code> (谷歌、火狐、<code>Safari</code>、<code>Edge</code> 的最新版本，都已支持。这让我们看到了希望)。</p><p>3、<code>HTTP 2.0</code> 采用的多路复用。不用太担心请求并发量的问题。</p><p>4、越来越多的 <code>npm</code> 包开始采用了原生 <code>ESM</code> 的开发形式。虽然还有很多包不支持，但是我相信这将会是趋势。</p><p>我们通过表格的形式，对比一下 <code>bundle</code> 和 <code>bundleless</code> 的区别。</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/ff916f65816b469989198bdc2ec18fd1~tplv-k3u1fbpfcp-zoom-in-crop-mark:3024:0:0:0.awebp" alt="img"></p><h2 id="Vite-构建原理"><a href="#Vite-构建原理" class="headerlink" title="Vite 构建原理"></a>Vite 构建原理</h2><p>众所周知，<code>Vite</code> 的生产模式和开发模式是不同的概念。我们先聊聊，<code>Vite</code> 的开发模式。</p><p>首先要明确一点，<code>Vite</code> 在开发模式下，有一个 依赖预构建 的概念。</p><h3 id="什么是依赖预构建"><a href="#什么是依赖预构建" class="headerlink" title="什么是依赖预构建"></a>什么是依赖预构建</h3><p>在 <code>Vite</code> 启动开发服务器之后，它将第三方依赖的多个静态资源整合为一个，比如 <code>lodash</code>、<code>qs</code>、<code>axios</code> 等这类资源包，存入 ·node_modules/.vite 文件下。</p><h3 id="为什么需要依赖预构建"><a href="#为什么需要依赖预构建" class="headerlink" title="为什么需要依赖预构建"></a>为什么需要依赖预构建</h3><p>如果直接采用 <code>ES Module</code> 的形式开发代码，会产生一大串依赖，就好像俄罗斯套娃一样，一层一层的嵌套，在浏览器资源有限的情况下，同时请求大量的静态资源，会造成浏览器的卡顿，并且资源响应的时间也会变慢。</p><p>我们先不通过 <code>Vite</code>，而是手动搭建原生 <code>ES Module</code> 开发形式，通过引入 <code>lodash-es</code> 包，实现一个数组去重的小例子，来详细分析为什么需要依赖预构建。</p><p>新建 <code>test1</code> 文件夹，通过 <code>npm init -y</code> 初始化了一个前端工程：</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/eabc5b637e734347b8e7965496669fee~tplv-k3u1fbpfcp-zoom-in-crop-mark:3024:0:0:0.awebp" alt="img"></p><p>手动新建 <code>index.html</code>，通过 <code>script</code> 标签，引入 <code>main.js</code>。这里注意，需要将 <code>type</code> 属性设置为 <code>module</code>，这样才能支持 <code>ES Module</code> 模块化开发。</p><p>通过 <code>npm</code> 安装 <code>lodash-es</code>，这里我们之所以不使用 <code>lodash</code>，是因为 <code>lodash</code> 不是通过 <code>ES Module</code> 形式开发的，直接通过相对路径引入会报错，需要通过 <code>Webpack</code> 打包构建。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">npm i lodash-es<br></code></pre></td></tr></table></figure><p>新建 <code>main.js</code> 添加去重逻辑：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">import</span> uniq <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;./node_modules/lodash-es/uniq.js&quot;</span>;<br><br><span class="hljs-keyword">const</span> arr = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>];<br><br><span class="hljs-built_in">console</span>.log(uniq(arr));<br></code></pre></td></tr></table></figure><p>这里我们采用 <code>VSCode</code> 的插件，<code>Live Server</code>，来启动项目。</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/30054fefbeaf485a96db8d4a4d8f5aad~tplv-k3u1fbpfcp-zoom-in-crop-mark:3024:0:0:0.awebp" alt="img"></p><p>安装完之后，在项目中双击 <code>index.html</code>，找到右下角的 「Go Live」，如下所示：</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/64858bc1bd3e4206a4b996c8ba4f5d74~tplv-k3u1fbpfcp-zoom-in-crop-mark:3024:0:0:0.awebp" alt="img"></p><p>点击后，自动启动一个 <code>Web</code> 服务，浏览器自动打开，如下所示：</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/3858ec887f744781b6c45fadad638c2c~tplv-k3u1fbpfcp-zoom-in-crop-mark:3024:0:0:0.awebp" alt="img"></p><p>结果正确，数组中的 3 被去除了，接下来关键的一个点，我们点击 <code>Network</code> 查看，资源引入情况：</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/9b9e60c097184e20a78cb8198968b199~tplv-k3u1fbpfcp-zoom-in-crop-mark:3024:0:0:0.awebp" alt="img"></p><p>我们只是获取去重方法，却意外引入了 59 资源，这是为什么呢？</p><p>我们先查看 <code>main.js</code> 内的代码，如下所示：</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/f001d806817f4ed5a9ad521c9a91a6d5~tplv-k3u1fbpfcp-zoom-in-crop-mark:3024:0:0:0.awebp" alt="img"></p><p>代码中只有在首行通过 <code>import</code> 引入了 <code>./node_modules/lodash-es/uniq.js</code>，所以 <code>uniq.js</code> 被作为资源引入进来，我们再看 <code>uniq.js</code> 的情况：</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/7b21e238127c47ec8f69b16775b4bb08~tplv-k3u1fbpfcp-zoom-in-crop-mark:3024:0:0:0.awebp" alt="img"></p><p><code>uniq.js</code> 中，首行通过 <code>import</code> 引入了 <code>_baseUniq.js</code>，我们继续：</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/6392953fd6b043ea99355687a5569763~tplv-k3u1fbpfcp-zoom-in-crop-mark:3024:0:0:0.awebp" alt="img"></p><p><code>_baseUniq.js</code> 中，引入了上图箭头中的一些脚本，不用往下看，我盲猜这种俄罗斯套娃的模式，会一直引用到 <code>uniq.js</code> 相关的所有脚本代码。</p><p>这只是一个 <code>uniq</code> 方法，足足就引入了 59 个资源，这仿佛是在军训浏览器，也就是谷歌能跟它博弈几个回合，引入的包再多几个，我估计也是顶不住的。</p><p>所以这时候 <code>Vite</code> 便引入了「依赖预构建」的概念。</p><h3 id="依赖现预构建浅析"><a href="#依赖现预构建浅析" class="headerlink" title="依赖现预构建浅析"></a>依赖现预构建浅析</h3><p>同样的，再通过 <code>Vite</code> 构建出一个 <code>React</code> 项目，去实现上述逻辑，我们观察 <code>Vite</code> 是怎么作的。</p><p>首先通过 <code>Vite</code> 指令生成项目：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">npm init @vitejs/app test2 --template react<br></code></pre></td></tr></table></figure><p>并安装 <code>lodash-es</code>，修改入口脚本 <code>main.jsx</code>：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">import</span> uniq <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;lodash-es/uniq.js&quot;</span>;<br><br><span class="hljs-keyword">const</span> arr = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>];<br><br><span class="hljs-built_in">console</span>.log(uniq(arr));<br></code></pre></td></tr></table></figure><p>我们观察浏览器的 <code>Network</code>，如下所示：</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/dce2afc266e84fa79ee8c9a0c0266c85~tplv-k3u1fbpfcp-zoom-in-crop-mark:3024:0:0:0.awebp" alt="img"></p><p>注意上图，执行 <code>npm run dev</code> 后，脚本中引用 <code>lodash-es/uniq</code> 的路径是在 <code>/node_modules/.vite</code> 文件夹下，并且左下角的请求资源数，也没有我们之前原生 <code>ES Module</code> 时的多，少了足足 3/4 还多。</p><p>再观察文件目录：</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/715c51aaea93420dac55e3ccca003222~tplv-k3u1fbpfcp-zoom-in-crop-mark:3024:0:0:0.awebp" alt="img"></p><p><code>lodash-es/uniq</code> 已经被 <code>Vite</code> 提前预编译到了 <code>.vite</code> 文件夹下，这样代码中直接去这个文件夹拿现成的包，就不必再递归地去加载很多静态资源脚本。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>本章节，通过实例分析，对 <code>Vite</code> 有了初步的了解。那么下一章节，我将带大家通过 <code>Vite</code> 去搭建一个 <code>React</code> 的完整开发环境。</p>]]></content>
      
      
      
        <tags>
            
            <tag> react </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>110、稀土掘金小册-记账本（一） react hooks</title>
      <link href="/2022/12/30/110-react/"/>
      <url>/2022/12/30/110-react/</url>
      
        <content type="html"><![CDATA[<p><code>React</code> 早期的写法以 <code>Class</code> 类组件为主，附带一些纯用于展示的函数组件，但是函数组件是不能控制自身的状态的。</p><p>直到 16.8 版本出来之后，引入了全新的 <code>Hooks</code> 写法，这让之前的类写法就显得 比较累赘，函数组件的写法开始流行起来。函数组件引入了多种钩子函数如 <code>useEffect</code>、<code>useState</code>、<code>useRef</code>、<code>useCallback</code>、<code>useMemo</code>、<code>useReducer</code> 等等，通过这些钩子函数来管理函数组件的各自状态。</p><span id="more"></span><h2 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h2><p>本章节我会通过一个请求，带大家入门整个 <code>React Hook</code> 知识体系。首先我们需要创建一个空项目，由于本实验采用的是 <code>Vite 2.0</code> 作为脚手架工具，所以我们的 <code>Node</code> 版本必须要在 <code>12.0.0</code> 以上，目前我的版本是 <code>12.6.0</code>。</p><p>我们通过指令新建一个联手项目，如下所示：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># npm 6.x</span><br>npm init @vitejs/app hooks-demo --template react<br><br><span class="hljs-comment"># npm 7+, 需要额外的双横线：</span><br>npm init @vitejs/app hooks-demo -- --template react<br><br><span class="hljs-comment"># yarn</span><br>yarn create @vitejs/app hooks-demo --template react<br></code></pre></td></tr></table></figure><p>根据你的需求，选择上述三个其中一个。新建之后项目目录如下所示：</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/a994cd755bb34164ba5abff2c88af997~tplv-k3u1fbpfcp-zoom-in-crop-mark:3024:0:0:0.awebp" alt="img"></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">npm install<br>npm run dev<br></code></pre></td></tr></table></figure><p>如下所示：</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/7b82ef228cba417bb1f6f910c2406abf~tplv-k3u1fbpfcp-zoom-in-crop-mark:3024:0:0:0.awebp" alt="img"></p><p>看到如上述所示代表项目已经启动成功了。</p><h3 id="useState"><a href="#useState" class="headerlink" title="useState"></a>useState</h3><p>接下来我们清空 <code>App.jsx</code>，添加如下代码：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">import</span> React, &#123; useState &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;react&quot;</span>;<br><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">App</span>(<span class="hljs-params"></span>) </span>&#123;<br>  <span class="hljs-keyword">const</span> [data, setData] = useState([<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>]);<br>  <span class="hljs-keyword">return</span> (<br>    <span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">className</span>=<span class="hljs-string">&quot;App&quot;</span>&gt;</span></span><br><span class="xml">      &#123;data.map((item, index) =&gt; (</span><br><span class="xml">        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">key</span>=<span class="hljs-string">&#123;index&#125;</span>&gt;</span>&#123;item&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="xml">      ))&#125;</span><br><span class="xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>  );<br>&#125;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> App;<br></code></pre></td></tr></table></figure><p>函数内声明变量，可以通过 <code>useState</code> 方法，它接受一个参数，可以为默认值，也可以为一个函数。上述我们先分析默认值的情况，默认给一个数组 <code>[1, 2, 3, 4, 5]</code>，<code>data</code> 参数便可以直接在 <code>JSX</code> 模板中使用。</p><h3 id="useEffect"><a href="#useEffect" class="headerlink" title="useEffect"></a>useEffect</h3><p>此时，我们通过 <code>useEffect</code> 副作用，请求一个接口数据，如下所示：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">import</span> React, &#123; useEffect, useState &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;react&quot;</span>;<br><span class="hljs-comment">// 模拟数据接口，3 秒钟返回数据。</span><br><span class="hljs-keyword">const</span> getList = <span class="hljs-function">() =&gt;</span> &#123;<br>  <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-built_in">Promise</span>(<span class="hljs-function">(<span class="hljs-params">resolve, reject</span>) =&gt;</span> &#123;<br>    <span class="hljs-built_in">setTimeout</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>      resolve([<span class="hljs-number">6</span>, <span class="hljs-number">7</span>, <span class="hljs-number">8</span>, <span class="hljs-number">9</span>, <span class="hljs-number">10</span>]);<br>    &#125;, <span class="hljs-number">3000</span>);<br>  &#125;);<br>&#125;;<br><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">App</span>(<span class="hljs-params"></span>) </span>&#123;<br>  <span class="hljs-keyword">const</span> [data, setData] = useState([<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>]);<br><br>  useEffect(<span class="hljs-function">() =&gt;</span> &#123;<br>    (<span class="hljs-keyword">async</span> () =&gt; &#123;<br>      <span class="hljs-keyword">const</span> data = <span class="hljs-keyword">await</span> getList();<br>      <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;data&quot;</span>, data);<br>      setData(data);<br>    &#125;)();<br>  &#125;);<br>  <span class="hljs-keyword">return</span> (<br>    <span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">className</span>=<span class="hljs-string">&quot;App&quot;</span>&gt;</span></span><br><span class="xml">      &#123;data.map((item, index) =&gt; (</span><br><span class="xml">        <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">key</span>=<span class="hljs-string">&#123;index&#125;</span>&gt;</span>&#123;item&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span></span><br><span class="xml">      ))&#125;</span><br><span class="xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>  );<br>&#125;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> App;<br></code></pre></td></tr></table></figure><p>函数组件默认进来之后，会执行 <code>useEffect</code> 中的回调函数，但是当 <code>setData</code> 执行之后，<code>App</code> 组件再次刷新，刷新之后会再次执行 <code>useEffect</code> 的回调函数，这便会形成一个可怕的死循环，回调函数会一直被这样执行下去。</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/b3187ae7425542beb62f3b207e27acb0~tplv-k3u1fbpfcp-zoom-in-crop-mark:3024:0:0:0.awebp" alt="img"></p><p>所以这里引出 <code>useEffect</code> 的第二个参数。它是一个数组，数组内接收回调函数内使用到的状态参数，一旦在组件内改变了状态参数，则会触发副作用 <code>useEffect</code> 的回调函数执行。</p><p>所以我们如果传一个空数组 <code>[]</code>，则该副作用只会在组件渲染的时候，执行一次，如下所示：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs js">useEffect(<span class="hljs-function">() =&gt;</span> &#123;<br>  (<span class="hljs-keyword">async</span> () =&gt; &#123;<br>    <span class="hljs-keyword">const</span> data = <span class="hljs-keyword">await</span> getList();<br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;data&quot;</span>, data);<br>    setData(data);<br>  &#125;)();<br>&#125;, []);<br></code></pre></td></tr></table></figure><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/0f1c917ab81e41d19dbbf0ea5d31c4ed~tplv-k3u1fbpfcp-zoom-in-crop-mark:3024:0:0:0.awebp" alt="img"></p><p>执行一次之后，副作用不再被触发。</p><p>此时我们需要给请求一个 <code>query</code> 参数，如下所示：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">import</span> React, &#123; useEffect, useState &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;react&quot;</span>;<br><br><span class="hljs-keyword">const</span> getList = <span class="hljs-function">(<span class="hljs-params">query</span>) =&gt;</span> &#123;<br>  <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-built_in">Promise</span>(<span class="hljs-function">(<span class="hljs-params">resolve, reject</span>) =&gt;</span> &#123;<br>    <span class="hljs-built_in">setTimeout</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>      <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;query&quot;</span>, query);<br>      resolve([<span class="hljs-number">6</span>, <span class="hljs-number">7</span>, <span class="hljs-number">8</span>, <span class="hljs-number">9</span>, <span class="hljs-number">10</span>]);<br>    &#125;, <span class="hljs-number">3000</span>);<br>  &#125;);<br>&#125;;<br><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">App</span>(<span class="hljs-params"></span>) </span>&#123;<br>  <span class="hljs-keyword">const</span> [data, setData] = useState([<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>]);<br>  <span class="hljs-keyword">const</span> [query, setQuery] = useState(<span class="hljs-string">&quot;&quot;</span>);<br><br>  useEffect(<span class="hljs-function">() =&gt;</span> &#123;<br>    (<span class="hljs-keyword">async</span> () =&gt; &#123;<br>      <span class="hljs-keyword">const</span> data = <span class="hljs-keyword">await</span> getList(query);<br>      <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;data&quot;</span>, data);<br>      setData(data);<br>    &#125;)();<br>  &#125;, [query]);<br>  <span class="hljs-keyword">return</span> (<br>    <span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">className</span>=<span class="hljs-string">&quot;App&quot;</span>&gt;</span></span><br><span class="xml">      &#123;data.map((item, index) =&gt; (</span><br><span class="xml">        <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">key</span>=<span class="hljs-string">&#123;index&#125;</span>&gt;</span>&#123;item&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span></span><br><span class="xml">      ))&#125;</span><br><span class="xml">      <span class="hljs-tag">&lt;<span class="hljs-name">input</span></span></span><br><span class="hljs-tag"><span class="xml">        <span class="hljs-attr">onChange</span>=<span class="hljs-string">&#123;(e)</span> =&gt;</span> setQuery(e.target.value)&#125;</span><br><span class="xml">        type=&quot;text&quot;</span><br><span class="xml">        placeholder=&quot;请输入搜索值&quot;</span><br><span class="xml">      /&gt;</span><br><span class="xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>  );<br>&#125;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> App;<br></code></pre></td></tr></table></figure><p>此时我们改变 <code>query</code> 的值，副作用函数便会被执行，如下所示：</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/7ef93bf033594ba0b2272f59a99e2447~tplv-k3u1fbpfcp-zoom-in-crop-mark:3024:0:0:0.awebp" alt="img"></p><p>所以，如果你的接口有查询参数，可以将参数设置在 <code>useEffect</code> 的第二个参数的数组值中，这样改变查询变量的时候，副作用便会再次触发执行，相应的函数也会重新带着最新的参数，获取接口数据。</p><h3 id="自定义-Hook"><a href="#自定义-Hook" class="headerlink" title="自定义 Hook"></a>自定义 Hook</h3><p>我们可以将上述的请求，抽离成一个自定义 <code>hook</code>，方便在多个地方调用，新建 <code>useApi.js</code> 如下所示：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">import</span> React, &#123; useEffect, useState &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;react&quot;</span>;<br><span class="hljs-comment">// 模拟请求</span><br><span class="hljs-keyword">const</span> getList = <span class="hljs-function">(<span class="hljs-params">query</span>) =&gt;</span> &#123;<br>  <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-built_in">Promise</span>(<span class="hljs-function">(<span class="hljs-params">resolve, reject</span>) =&gt;</span> &#123;<br>    <span class="hljs-built_in">setTimeout</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>      <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;query&quot;</span>, query);<br>      resolve([<span class="hljs-number">6</span>, <span class="hljs-number">7</span>, <span class="hljs-number">8</span>, <span class="hljs-number">9</span>, <span class="hljs-number">10</span>]);<br>    &#125;, <span class="hljs-number">3000</span>);<br>  &#125;);<br>&#125;;<br><span class="hljs-comment">// 自定义 hook</span><br><span class="hljs-keyword">const</span> useApi = <span class="hljs-function">() =&gt;</span> &#123;<br>  <span class="hljs-keyword">const</span> [data, setData] = useState([<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>]);<br>  <span class="hljs-keyword">const</span> [query, setQuery] = useState(<span class="hljs-string">&quot;&quot;</span>);<br><br>  useEffect(<span class="hljs-function">() =&gt;</span> &#123;<br>    (<span class="hljs-keyword">async</span> () =&gt; &#123;<br>      <span class="hljs-keyword">const</span> data = <span class="hljs-keyword">await</span> getList();<br>      <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;data&quot;</span>, data);<br>      setData(data);<br>    &#125;)();<br>  &#125;, [query]);<br><br>  <span class="hljs-keyword">return</span> [&#123; data &#125;, setQuery];<br>&#125;;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> useApi;<br></code></pre></td></tr></table></figure><p>如上述所示，最终将 <code>data</code> 数据，和设置请求参数的方法抛出，在 <code>App.jsx</code> 中做如下改动：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">import</span> React <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;react&quot;</span>;<br><span class="hljs-keyword">import</span> useApi <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;./useApi&quot;</span>;<br><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">App</span>(<span class="hljs-params"></span>) </span>&#123;<br>  <span class="hljs-keyword">const</span> [&#123; data &#125;, setQuery] = useApi();<br>  <span class="hljs-keyword">return</span> (<br>    <span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">className</span>=<span class="hljs-string">&quot;App&quot;</span>&gt;</span></span><br><span class="xml">      &#123;data.map((item, index) =&gt; (</span><br><span class="xml">        <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">key</span>=<span class="hljs-string">&#123;index&#125;</span>&gt;</span>&#123;item&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span></span><br><span class="xml">      ))&#125;</span><br><span class="xml">      <span class="hljs-tag">&lt;<span class="hljs-name">input</span></span></span><br><span class="hljs-tag"><span class="xml">        <span class="hljs-attr">onChange</span>=<span class="hljs-string">&#123;(e)</span> =&gt;</span> setQuery(e.target.value)&#125;</span><br><span class="xml">        type=&quot;text&quot;</span><br><span class="xml">        placeholder=&quot;请输入搜索值&quot;</span><br><span class="xml">      /&gt;</span><br><span class="xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>  );<br>&#125;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> App;<br></code></pre></td></tr></table></figure><p>我们查看浏览器展示结果：</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/ae7372c75f23457eb8d114c2bb5d56a5~tplv-k3u1fbpfcp-zoom-in-crop-mark:3024:0:0:0.awebp" alt="img"></p><p>上述这类自定义 <code>Hook</code> 的使用，在开发中也非常常见，比如有一个请求公共数据的接口，在多个页面中被重复使用，你便可通过自定义 <code>Hook</code> 的形式，将请求逻辑提取出来公用，这也是之前 <code>Class</code> 类组件所不能做到的。</p><h3 id="useMemo"><a href="#useMemo" class="headerlink" title="useMemo"></a>useMemo</h3><p>我们修改 <code>App.jsx</code>，在内部新增一个子组件，子组件接收父组件传进来的一个对象，作为子组件的 <code>useEffect</code> 的第二个依赖参数。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">import</span> React, &#123; useEffect, useState &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;react&quot;</span>;<br><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">Child</span>(<span class="hljs-params">&#123; data &#125;</span>) </span>&#123;<br>  useEffect(<span class="hljs-function">() =&gt;</span> &#123;<br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;查询条件：&quot;</span>, data);<br>  &#125;, [data]);<br><br>  <span class="hljs-keyword">return</span> <span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>子组件<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span>;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">App</span>(<span class="hljs-params"></span>) </span>&#123;<br>  <span class="hljs-keyword">const</span> [name, setName] = useState(<span class="hljs-string">&quot;&quot;</span>);<br>  <span class="hljs-keyword">const</span> [phone, setPhone] = useState(<span class="hljs-string">&quot;&quot;</span>);<br>  <span class="hljs-keyword">const</span> [kw, setKw] = useState(<span class="hljs-string">&quot;&quot;</span>);<br><br>  <span class="hljs-keyword">const</span> data = &#123;<br>    name,<br>    phone,<br>  &#125;;<br><br>  <span class="hljs-keyword">return</span> (<br>    <span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">className</span>=<span class="hljs-string">&quot;App&quot;</span>&gt;</span></span><br><span class="xml">      <span class="hljs-tag">&lt;<span class="hljs-name">input</span></span></span><br><span class="hljs-tag"><span class="xml">        <span class="hljs-attr">onChange</span>=<span class="hljs-string">&#123;(e)</span> =&gt;</span> setName(e.target.value)&#125;</span><br><span class="xml">        type=&quot;text&quot;</span><br><span class="xml">        placeholder=&quot;请输入姓名&quot;</span><br><span class="xml">      /&gt;</span><br><span class="xml">      <span class="hljs-tag">&lt;<span class="hljs-name">input</span></span></span><br><span class="hljs-tag"><span class="xml">        <span class="hljs-attr">onChange</span>=<span class="hljs-string">&#123;(e)</span> =&gt;</span> setPhone(e.target.value)&#125;</span><br><span class="xml">        type=&quot;text&quot;</span><br><span class="xml">        placeholder=&quot;请输入电话&quot;</span><br><span class="xml">      /&gt;</span><br><span class="xml">      <span class="hljs-tag">&lt;<span class="hljs-name">input</span></span></span><br><span class="hljs-tag"><span class="xml">        <span class="hljs-attr">onChange</span>=<span class="hljs-string">&#123;(e)</span> =&gt;</span> setKw(e.target.value)&#125;</span><br><span class="xml">        type=&quot;text&quot;</span><br><span class="xml">        placeholder=&quot;请输入关键词&quot;</span><br><span class="xml">      /&gt;</span><br><span class="xml">      <span class="hljs-tag">&lt;<span class="hljs-name">Child</span> <span class="hljs-attr">data</span>=<span class="hljs-string">&#123;data&#125;</span> /&gt;</span></span><br><span class="xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>  );<br>&#125;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> App;<br></code></pre></td></tr></table></figure><p>当我们修改姓名和电话的时候，观察子组件是否监听到依赖的变化，执行 <code>useEffect</code> 内的回调函数。</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/97c533fa2d7a44f491734454089b3b84~tplv-k3u1fbpfcp-zoom-in-crop-mark:3024:0:0:0.awebp" alt="img"></p><p>此时，上述的结果是我们预期的，我们只监听了 <code>name</code> 和 <code>phone</code> 两个参数，但是我们修改关键词输入框，会得到下面的结果。</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/d40462facac94aea91209bb5cbc1cedc~tplv-k3u1fbpfcp-zoom-in-crop-mark:3024:0:0:0.awebp" alt="img"></p><p>子组件并没有监听 <code>kw</code> 的变化，但是结果却是子组件也被触发渲染了。原因其实是我们在父组件重新 <code>setKw</code> 之后，<code>data</code> 值和未作修改 <code>kw</code> 前的值已经不一样了。你可能会说，<code>data</code> 的值并没有变化，为什么说它已经不一样了呢？详细的分析我们放在后续部分，我们此时可以通过 <code>useMemo</code> 将 <code>data</code> 包装一下，告诉 <code>data</code> 它需要监听的值。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">import</span> React, &#123; useEffect, useState, useMemo &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;react&quot;</span>;<br><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">Child</span>(<span class="hljs-params">&#123; data &#125;</span>) </span>&#123;<br>  useEffect(<span class="hljs-function">() =&gt;</span> &#123;<br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;查询条件：&quot;</span>, data);<br>  &#125;, [data]);<br><br>  <span class="hljs-keyword">return</span> <span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>子组件<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span>;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">App</span>(<span class="hljs-params"></span>) </span>&#123;<br>  <span class="hljs-keyword">const</span> [name, setName] = useState(<span class="hljs-string">&quot;&quot;</span>);<br>  <span class="hljs-keyword">const</span> [phone, setPhone] = useState(<span class="hljs-string">&quot;&quot;</span>);<br>  <span class="hljs-keyword">const</span> [kw, setKw] = useState(<span class="hljs-string">&quot;&quot;</span>);<br><br>  <span class="hljs-keyword">const</span> data = useMemo(<br>    <span class="hljs-function">() =&gt;</span> (&#123;<br>      name,<br>      phone,<br>    &#125;),<br>    [name, phone]<br>  );<br><br>  <span class="hljs-keyword">return</span> (<br>    <span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">className</span>=<span class="hljs-string">&quot;App&quot;</span>&gt;</span></span><br><span class="xml">      <span class="hljs-tag">&lt;<span class="hljs-name">input</span></span></span><br><span class="hljs-tag"><span class="xml">        <span class="hljs-attr">onChange</span>=<span class="hljs-string">&#123;(e)</span> =&gt;</span> setName(e.target.value)&#125;</span><br><span class="xml">        type=&quot;text&quot;</span><br><span class="xml">        placeholder=&quot;请输入姓名&quot;</span><br><span class="xml">      /&gt;</span><br><span class="xml">      <span class="hljs-tag">&lt;<span class="hljs-name">input</span></span></span><br><span class="hljs-tag"><span class="xml">        <span class="hljs-attr">onChange</span>=<span class="hljs-string">&#123;(e)</span> =&gt;</span> setPhone(e.target.value)&#125;</span><br><span class="xml">        type=&quot;text&quot;</span><br><span class="xml">        placeholder=&quot;请输入电话&quot;</span><br><span class="xml">      /&gt;</span><br><span class="xml">      <span class="hljs-tag">&lt;<span class="hljs-name">input</span></span></span><br><span class="hljs-tag"><span class="xml">        <span class="hljs-attr">onChange</span>=<span class="hljs-string">&#123;(e)</span> =&gt;</span> setKw(e.target.value)&#125;</span><br><span class="xml">        type=&quot;text&quot;</span><br><span class="xml">        placeholder=&quot;请输入关键词&quot;</span><br><span class="xml">      /&gt;</span><br><span class="xml">      <span class="hljs-tag">&lt;<span class="hljs-name">Child</span> <span class="hljs-attr">data</span>=<span class="hljs-string">&#123;data&#125;</span> /&gt;</span></span><br><span class="xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>  );<br>&#125;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> App;<br></code></pre></td></tr></table></figure><p>效果如下：</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/0c6a5ab0f6784e8bb1d45a7d2b5eb883~tplv-k3u1fbpfcp-zoom-in-crop-mark:3024:0:0:0.awebp" alt="img"></p><p>这便是 <code>useMemo</code> 的作用，它相当于把父组件需要传递的参数做了一个标记，无论父组件其他状态更新任何值，都不会影响要传递给子组件的对象。</p><h3 id="useCallback"><a href="#useCallback" class="headerlink" title="useCallback"></a>useCallback</h3><p>同理，<code>useCallback</code> 也是和 <code>useMemo</code> 有类似的功能，比如我们传递一个函数给子组件，如下所示：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">import</span> React, &#123; useEffect, useState, useCallback &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;react&quot;</span>;<br><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">Child</span>(<span class="hljs-params">&#123; callback &#125;</span>) </span>&#123;<br>  useEffect(<span class="hljs-function">() =&gt;</span> &#123;<br>    callback();<br>  &#125;, [callback]);<br><br>  <span class="hljs-keyword">return</span> <span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>子组件<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span>;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">App</span>(<span class="hljs-params"></span>) </span>&#123;<br>  <span class="hljs-keyword">const</span> [name, setName] = useState(<span class="hljs-string">&quot;&quot;</span>);<br>  <span class="hljs-keyword">const</span> [phone, setPhone] = useState(<span class="hljs-string">&quot;&quot;</span>);<br>  <span class="hljs-keyword">const</span> [kw, setKw] = useState(<span class="hljs-string">&quot;&quot;</span>);<br><br>  <span class="hljs-keyword">const</span> callback = <span class="hljs-function">() =&gt;</span> &#123;<br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;我是callback&quot;</span>);<br>  &#125;;<br><br>  <span class="hljs-keyword">return</span> (<br>    <span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">className</span>=<span class="hljs-string">&quot;App&quot;</span>&gt;</span></span><br><span class="xml">      <span class="hljs-tag">&lt;<span class="hljs-name">input</span></span></span><br><span class="hljs-tag"><span class="xml">        <span class="hljs-attr">onChange</span>=<span class="hljs-string">&#123;(e)</span> =&gt;</span> setName(e.target.value)&#125;</span><br><span class="xml">        type=&quot;text&quot;</span><br><span class="xml">        placeholder=&quot;请输入姓名&quot;</span><br><span class="xml">      /&gt;</span><br><span class="xml">      <span class="hljs-tag">&lt;<span class="hljs-name">input</span></span></span><br><span class="hljs-tag"><span class="xml">        <span class="hljs-attr">onChange</span>=<span class="hljs-string">&#123;(e)</span> =&gt;</span> setPhone(e.target.value)&#125;</span><br><span class="xml">        type=&quot;text&quot;</span><br><span class="xml">        placeholder=&quot;请输入电话&quot;</span><br><span class="xml">      /&gt;</span><br><span class="xml">      <span class="hljs-tag">&lt;<span class="hljs-name">input</span></span></span><br><span class="hljs-tag"><span class="xml">        <span class="hljs-attr">onChange</span>=<span class="hljs-string">&#123;(e)</span> =&gt;</span> setKw(e.target.value)&#125;</span><br><span class="xml">        type=&quot;text&quot;</span><br><span class="xml">        placeholder=&quot;请输入关键词&quot;</span><br><span class="xml">      /&gt;</span><br><span class="xml">      <span class="hljs-tag">&lt;<span class="hljs-name">Child</span> <span class="hljs-attr">callback</span>=<span class="hljs-string">&#123;callback&#125;</span> /&gt;</span></span><br><span class="xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>  );<br>&#125;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> App;<br></code></pre></td></tr></table></figure><p>当我们修改任何状态值，都会触发子组件的回调函数执行，但是 <code>callback</code> 没有作任何变化。</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/e5a9b334d4514959aa7cebe0006257a8~tplv-k3u1fbpfcp-zoom-in-crop-mark:3024:0:0:0.awebp" alt="img"></p><p>此时，我们给要传递的函数，包裹一层 <code>useCallback</code>，如下所示：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> callback = useCallback(<span class="hljs-function">() =&gt;</span> &#123;<br>  <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;我是callback&quot;</span>);<br>&#125;, []);<br></code></pre></td></tr></table></figure><p>无论修改其他任何属性，都不会触发子组件的副作用：</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/1742b2a340c24cd4b439d17547265e48~tplv-k3u1fbpfcp-zoom-in-crop-mark:3024:0:0:0.awebp" alt="img"></p><blockquote><p>useCallback 的第二个参数同 <code>useEffect</code> 和 <code>useMemo</code> 的第二个参数，它是用于监听你需要监听的变量，如在数组内添加 <code>name</code>、<code>phone</code>、<code>kw</code> 等参数，当改变其中有个，都会触发子组件副作用的执行。</p></blockquote><p>所以，<code>useMemo</code> 和 <code>useCallback</code>，都能为「重复渲染」这个问题，提供很好的帮助。</p><h2 id="重新认识-useEffect"><a href="#重新认识-useEffect" class="headerlink" title="重新认识 useEffect"></a>重新认识 useEffect</h2><p>上述很多现象，都是因为你没有很好地去理解 <code>React Hooks</code> 函数组件写法的渲染机制。通过一个小例子，我们来重新认识 <code>useEffect</code>。</p><p>我们将上述 <code>App.jsx</code> 作如下修改：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">import</span> React, &#123; useEffect, useState &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;react&quot;</span>;<br><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">App</span>(<span class="hljs-params"></span>) </span>&#123;<br>  <span class="hljs-keyword">const</span> [count, setCount] = useState(<span class="hljs-number">0</span>);<br><br>  <span class="hljs-keyword">const</span> handleClick = <span class="hljs-function">() =&gt;</span> &#123;<br>    <span class="hljs-built_in">setTimeout</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>      <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;点击次数: &quot;</span> + count);<br>    &#125;, <span class="hljs-number">3000</span>);<br>  &#125;;<br><br>  <span class="hljs-keyword">return</span> (<br>    <span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">className</span>=<span class="hljs-string">&quot;App&quot;</span>&gt;</span></span><br><span class="xml">      <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">onClick</span>=<span class="hljs-string">&#123;()</span> =&gt;</span> setCount(count + 1)&#125;&gt;点击&#123;count&#125;次<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span><br><span class="xml">      <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">onClick</span>=<span class="hljs-string">&#123;handleClick&#125;</span>&gt;</span>展示点击次数<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span><br><span class="xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>  );<br>&#125;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> App;<br></code></pre></td></tr></table></figure><p>我们作下列几个动作：</p><p>1、点击增加按钮两次，将 <code>count</code> 增加到 2。</p><p>2、点击「展示点击次数」。</p><p>3、在 <code>console.log</code> 执行之前，也就是 3 秒内，再次点击新增按钮 2 次，将 <code>count</code> 增加到 4。</p><p>按照正常的思路，浏览器应该打印出 <code>点击次数: 4</code>，我们来查看浏览器的展示效果：</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/1975c7d4488e4c9a854606cb4dfa1009~tplv-k3u1fbpfcp-zoom-in-crop-mark:3024:0:0:0.awebp" alt="img"></p><p>点击「展示点击次数」按钮，3 秒后，我们看到的结果是 <code>点击次数: 2</code>，这与我们的预期有出入。</p><p>函数组件 <code>App</code>，在每一次渲染都会被调用，而每一次调用都会形成一个独立的上下文，可以理解成一个快照。每一次渲染形成的快照，都是互相独立的。</p><p>默认进来的时候，形成一个快照，此时 <code>count</code> 为 0；当我们点击新增按钮第一次，执行 <code>setCount</code>，函数组件被刷新一次，此时的快照中，<code>count</code> 为 1；再次点击按钮，再次生成快照，此时的 <code>count</code> 为 2，此时点击 「展示点击次数」按钮，在这份快照中，我们的 <code>count</code> 参数就是 2。所以我们后面无论怎么新增 <code>count</code>，最终输出的结果 <code>count</code> 就是 2。</p><p>我们用一份伪代码来解释，大致如下：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 默认初始化</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">App</span>(<span class="hljs-params"></span>) </span>&#123;<br>  <span class="hljs-keyword">const</span> count = <span class="hljs-number">0</span>; <span class="hljs-comment">// useState 返回默认值</span><br>  <span class="hljs-comment">// ...</span><br>  <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">handleClick</span>(<span class="hljs-params"></span>) </span>&#123;<br>    <span class="hljs-built_in">setTimeout</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>      <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;点击次数: &quot;</span> + count);<br>    &#125;, <span class="hljs-number">3000</span>);<br>  &#125;<br>  <span class="hljs-comment">// ...</span><br>&#125;<br><br><span class="hljs-comment">// 第一次点击</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">App</span>(<span class="hljs-params"></span>) </span>&#123;<br>  <span class="hljs-keyword">const</span> count = <span class="hljs-number">1</span>; <span class="hljs-comment">// useState 返回值</span><br>  <span class="hljs-comment">// ...</span><br>  <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">handleClick</span>(<span class="hljs-params"></span>) </span>&#123;<br>    <span class="hljs-built_in">setTimeout</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>      <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;点击次数: &quot;</span> + count);<br>    &#125;, <span class="hljs-number">3000</span>);<br>  &#125;<br>  <span class="hljs-comment">// ...</span><br>&#125;<br><br><span class="hljs-comment">// 第二次点击</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">App</span>(<span class="hljs-params"></span>) </span>&#123;<br>  <span class="hljs-keyword">const</span> count = <span class="hljs-number">2</span>; <span class="hljs-comment">// useState 返回值</span><br>  <span class="hljs-comment">// ...</span><br>  <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">handleAlertClick</span>(<span class="hljs-params"></span>) </span>&#123;<br>    <span class="hljs-built_in">setTimeout</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>      <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;点击次数: &quot;</span> + count);<br>    &#125;, <span class="hljs-number">3000</span>);<br>  &#125;<br>  <span class="hljs-comment">// ...</span><br>&#125;<br></code></pre></td></tr></table></figure><p>上述代码中，第二次点击的快照中，<code>console.log(&#39;点击次数: &#39; + count);</code> 取的便是 <code>const count = 2</code>。</p><p>同理，我们可以直到，每次渲染函数组件时，<code>useEffect</code> 都是新的，都是不一样的。我们对上面的写法稍作改动。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">import</span> React, &#123; useEffect, useState &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;react&quot;</span>;<br><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">App</span>(<span class="hljs-params"></span>) </span>&#123;<br>  <span class="hljs-keyword">const</span> [count, setCount] = useState(<span class="hljs-number">0</span>);<br><br>  useEffect(<span class="hljs-function">() =&gt;</span> &#123;<br>    <span class="hljs-built_in">setTimeout</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>      <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;点击次数: &quot;</span> + count);<br>    &#125;, <span class="hljs-number">3000</span>);<br>  &#125;);<br><br>  <span class="hljs-keyword">return</span> (<br>    <span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">className</span>=<span class="hljs-string">&quot;App&quot;</span>&gt;</span></span><br><span class="xml">      <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">onClick</span>=<span class="hljs-string">&#123;()</span> =&gt;</span> setCount(count + 1)&#125;&gt;点击&#123;count&#125;次<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span><br><span class="xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>  );<br>&#125;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> App;<br></code></pre></td></tr></table></figure><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/4bef605a7a9c45f19f950be4e94a0c31~tplv-k3u1fbpfcp-zoom-in-crop-mark:3024:0:0:0.awebp" alt="img"></p><p>每一次点击，都会重新执行 <code>useEffect</code> 内的回调，并且 <code>count</code> 值也是当时的快照的一个常量值。</p><p>这和之前的类组件是不同的，我们改成类组件的实现形式如下：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">import</span> React <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;react&quot;</span>;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">App</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">React</span>.<span class="hljs-title">Component</span> </span>&#123;<br>  <span class="hljs-function"><span class="hljs-title">constructor</span>(<span class="hljs-params">props</span>)</span> &#123;<br>    <span class="hljs-built_in">super</span>(props);<br>    <span class="hljs-built_in">this</span>.state = &#123;<br>      <span class="hljs-attr">count</span>: <span class="hljs-number">0</span>,<br>    &#125;;<br>  &#125;<br>  <span class="hljs-function"><span class="hljs-title">componentDidUpdate</span>(<span class="hljs-params"></span>)</span> &#123;<br>    <span class="hljs-built_in">setTimeout</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>      <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;点击次数: &quot;</span> + <span class="hljs-built_in">this</span>.state.count);<br>    &#125;, <span class="hljs-number">3000</span>);<br>  &#125;<br><br>  <span class="hljs-function"><span class="hljs-title">render</span>(<span class="hljs-params"></span>)</span> &#123;<br>    <span class="hljs-keyword">return</span> (<br>      <span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">onClick</span>=<span class="hljs-string">&#123;()</span> =&gt;</span> this.setState(&#123; count: this.state.count + 1 &#125;)&#125;&gt;</span><br><span class="xml">        点击&#123;this.state.count&#125;次</span><br><span class="xml">      <span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span><br>    );<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/c175d79f67284e59ad4e9794e2ff2355~tplv-k3u1fbpfcp-zoom-in-crop-mark:3024:0:0:0.awebp" alt="img"></p><p>类组件，声明之后，会在内部生成一个实例 <code>instance</code>，所有的数据都会存在类的上下文中，所以 <code>this.state.count</code> 会一直指向最新的 <code>count</code> 值。</p><p>说到这里，大家应该对 <code>React Hooks</code> 的函数组件写法有了新的认识。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>行文至此，希望让同学们能好好地阅读和学习本章节的内容，以及课后对 <code>React Hooks</code> 的拓展。更好的理解它，有助于写出可维护、可拓展的代码，技术本身是服务于业务需求的，但是你不能很好的利用技术的特点，那业务也很难达到做满意的效果。</p>]]></content>
      
      
      
        <tags>
            
            <tag> react </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>109、CSS代码片段：布局、视觉、动画</title>
      <link href="/2022/12/20/109-css/"/>
      <url>/2022/12/20/109-css/</url>
      
        <content type="html"><![CDATA[<p>css 代码片段</p><span id="more"></span><h2 id="一、清除浮动的更好方式-浏览器支持情况：100"><a href="#一、清除浮动的更好方式-浏览器支持情况：100" class="headerlink" title="一、清除浮动的更好方式(浏览器支持情况：100%)"></a>一、清除浮动的更好方式(浏览器支持情况：100%)</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;clearfix&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;floated&quot;</span>&gt;</span>float a<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;floated&quot;</span>&gt;</span>float b<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;floated&quot;</span>&gt;</span>float c<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-class">.clearfix</span> &#123;<br>  <span class="hljs-attribute">border</span>: solid <span class="hljs-number">1px</span> red;<br>&#125;<br><span class="hljs-selector-class">.clearfix</span><span class="hljs-selector-pseudo">::after</span> &#123;<br>  <span class="hljs-attribute">content</span>: <span class="hljs-string">&quot;&quot;</span>;<br>  <span class="hljs-attribute">display</span>: block;<br>  <span class="hljs-attribute">clear</span>: both;<br>&#125;<br><span class="hljs-selector-class">.floated</span> &#123;<br>  <span class="hljs-attribute">float</span>: left;<br>  <span class="hljs-attribute">margin-left</span>: <span class="hljs-number">20px</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="二、不变宽高比"><a href="#二、不变宽高比" class="headerlink" title="二、不变宽高比"></a>二、不变宽高比</h2><p>给定宽度可变的元素，它将确保其高度以响应方式保持成比例（即，其宽高比保持不变）。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;constant-width-to-height-ratio&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-class">.constant-width-to-height-ratio</span> &#123;<br>  <span class="hljs-attribute">background</span>: <span class="hljs-number">#333</span>;<br>  <span class="hljs-attribute">width</span>: <span class="hljs-number">50%</span>;<br>&#125;<br><span class="hljs-selector-class">.constant-width-to-height-ratio</span><span class="hljs-selector-pseudo">::before</span> &#123;<br>  <span class="hljs-attribute">content</span>: <span class="hljs-string">&quot;&quot;</span>;<br>  <span class="hljs-attribute">padding-top</span>: <span class="hljs-number">100%</span>;<br>  <span class="hljs-attribute">float</span>: left;<br>&#125;<br><span class="hljs-selector-class">.constant-width-to-height-ratio</span><span class="hljs-selector-pseudo">::after</span> &#123;<br>  <span class="hljs-attribute">content</span>: <span class="hljs-string">&quot;&quot;</span>;<br>  <span class="hljs-attribute">display</span>: block;<br>  <span class="hljs-attribute">clear</span>: both;<br>&#125;<br></code></pre></td></tr></table></figure><p>1、width:50% 只设置父级元素的宽度<br>2、::before 为父级元素定义一个伪元素<br>3、padding-top: 100%; 设置伪元素的内上边距，这里的百分比的值是按照宽度计算的，所以会呈现为一个响应式的元素块。<br>4、此方法还允许将内容正常放置在元素内。</p><h2 id="三、display-table-居中"><a href="#三、display-table-居中" class="headerlink" title="三、display:table 居中"></a>三、display:table 居中</h2><p>使用 display:table 替代 flexbox 使子元素在其父元素中水平垂直居中。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;container&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;center&quot;</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>Centered content<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-class">.container</span> &#123;<br>  <span class="hljs-attribute">border</span>: <span class="hljs-number">1px</span> solid <span class="hljs-number">#333</span>;<br>  <span class="hljs-attribute">height</span>: <span class="hljs-number">250px</span>;<br>  <span class="hljs-attribute">width</span>: <span class="hljs-number">250px</span>;<br>&#125;<br><span class="hljs-selector-class">.center</span> &#123;<br>  <span class="hljs-attribute">display</span>: table;<br>  <span class="hljs-attribute">height</span>: <span class="hljs-number">100%</span>;<br>  <span class="hljs-attribute">width</span>: <span class="hljs-number">100%</span>;<br>&#125;<br><span class="hljs-selector-class">.center</span> &gt; <span class="hljs-selector-tag">span</span> &#123;<br>  <span class="hljs-attribute">display</span>: table-cell;<br>  <span class="hljs-attribute">text-align</span>: center;<br>  <span class="hljs-attribute">vertical-align</span>: middle;<br>&#125;<br></code></pre></td></tr></table></figure><p>display：table 使.center 元素的行为类似于<code>&lt;table&gt;</code> HTML 元素;<br>设置.center 的宽高为 100%，使其填满父元素;<br>display：table-cell, 设置’.center &gt; span’的 table-cell 允许元素表现得像 HTML 元素;<br>text-align: center 使子元素水平居中;<br>vertical-align: middle 使子元素垂直居中;</p><p>外部父级必须有固定的宽高。</p><h2 id="四、子元素均匀分布"><a href="#四、子元素均匀分布" class="headerlink" title="四、子元素均匀分布"></a>四、子元素均匀分布</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;evenly-distributed-children&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>Item1<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>Item2<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>Item3<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-class">.evenly-distributed-children</span> &#123;<br>  <span class="hljs-attribute">display</span>: flex;<br>  <span class="hljs-attribute">justify-content</span>: space-between;<br>&#125;<br></code></pre></td></tr></table></figure><p>display: flex :启动 flex 布局</p><p>justify-content: space-between：</p><p>均匀地水平分配子元素。 第一个子元素位于左边缘，而最后一个子元素位于右边缘。 或者，使用 justify-content：space-around 来分配子节点周围的空间，而不是它们之间。</p><h2 id="五、图片在容器中显示的更舒适"><a href="#五、图片在容器中显示的更舒适" class="headerlink" title="五、图片在容器中显示的更舒适"></a>五、图片在容器中显示的更舒适</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;image image-contain&quot;</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;https://picsum.photos/600/200&quot;</span> /&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;image image-cover&quot;</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;https://picsum.photos/600/200&quot;</span> /&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-class">.image</span> &#123;<br>  <span class="hljs-attribute">background</span>: <span class="hljs-number">#34495e</span>;<br>  <span class="hljs-attribute">border</span>: <span class="hljs-number">1px</span> solid <span class="hljs-number">#34495e</span>;<br>  <span class="hljs-attribute">width</span>: <span class="hljs-number">200px</span>;<br>  <span class="hljs-attribute">height</span>: <span class="hljs-number">200px</span>;<br>&#125;<br><span class="hljs-selector-class">.image-contain</span> &#123;<br>  <span class="hljs-attribute">object-fit</span>: contain;<br>  <span class="hljs-attribute">object-position</span>: center;<br>&#125;<br><span class="hljs-selector-class">.image-cover</span> &#123;<br>  <span class="hljs-attribute">object-fit</span>: cover;<br>  <span class="hljs-attribute">object-position</span>: right top;<br>&#125;<br></code></pre></td></tr></table></figure><p>object-fit: contain 容器内显示整个图像，并且保持宽高比<br>object-fit: cover 用图像填充容器，并保持宽高比<br>object-position: [x] [y] 对图像的显示部位进行调整</p><h2 id="六、flexbox-居中-常用"><a href="#六、flexbox-居中-常用" class="headerlink" title="六、flexbox 居中(常用)"></a>六、flexbox 居中(常用)</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;flexbox-centering&quot;</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;child&quot;</span>&gt;</span>Centered content.<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-class">.flexbox-centering</span> &#123;<br>  <span class="hljs-attribute">display</span>: flex;<br>  <span class="hljs-attribute">justify-content</span>: center;<br>  <span class="hljs-attribute">align-items</span>: center;<br>  <span class="hljs-attribute">height</span>: <span class="hljs-number">100px</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>display: flex 启用 flex 局部<br>justify-content: center 子元素水平居中<br>align-items: center 子元素垂直居中</p><h2 id="七、将元素垂直居中于另一个元素"><a href="#七、将元素垂直居中于另一个元素" class="headerlink" title="七、将元素垂直居中于另一个元素"></a>七、将元素垂直居中于另一个元素</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;ghost-trick&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;ghosting&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>Vertically centered without changing the position property.<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-class">.ghosting</span> &#123;<br>  <span class="hljs-attribute">height</span>: <span class="hljs-number">300px</span>;<br>  <span class="hljs-attribute">background</span>: <span class="hljs-number">#0ff</span>;<br>&#125;<br><span class="hljs-selector-class">.ghosting</span>:before &#123;<br>  content: <span class="hljs-string">&quot;&quot;</span>;<br>  <span class="hljs-attribute">display</span>: inline-block;<br>  <span class="hljs-attribute">height</span>: <span class="hljs-number">100%</span>;<br>  <span class="hljs-attribute">vertical-align</span>: middle;<br>&#125;<br><span class="hljs-selector-tag">p</span> &#123;<br>  <span class="hljs-attribute">display</span>: inline-block;<br>  <span class="hljs-attribute">vertical-align</span>: middle;<br>&#125;<br></code></pre></td></tr></table></figure><p>使用 ：before 伪元素的样式垂直对齐内联元素而不更改其 position 属性。</p><h2 id="八、grid-居中"><a href="#八、grid-居中" class="headerlink" title="八、grid 居中"></a>八、grid 居中</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;grid-centering&quot;</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;child&quot;</span>&gt;</span>Centered content.<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-class">.grid-centering</span> &#123;<br>  <span class="hljs-attribute">display</span>: grid;<br>  <span class="hljs-attribute">justify-content</span>: center;<br>  <span class="hljs-attribute">align-items</span>: center;<br>  <span class="hljs-attribute">height</span>: <span class="hljs-number">100px</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>display: grid 启用网格布局<br>justify-content: center 使子元素水平居中<br>align-items: center 使子元素垂直居中</p><h2 id="九、使最后一项占满剩余高度"><a href="#九、使最后一项占满剩余高度" class="headerlink" title="九、使最后一项占满剩余高度"></a>九、使最后一项占满剩余高度</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;container&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>Div 1<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>Div 2<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>Div 3<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-tag">html</span>,<br><span class="hljs-selector-tag">body</span> &#123;<br>  <span class="hljs-attribute">height</span>: <span class="hljs-number">100%</span>;<br>  <span class="hljs-attribute">margin</span>: <span class="hljs-number">0</span>;<br>&#125;<br><span class="hljs-selector-class">.container</span> &#123;<br>  <span class="hljs-attribute">height</span>: <span class="hljs-number">100%</span>;<br>  <span class="hljs-attribute">display</span>: flex;<br>  <span class="hljs-attribute">flex-direction</span>: column;<br>&#125;<br><span class="hljs-selector-class">.container</span> &gt; <span class="hljs-selector-tag">div</span><span class="hljs-selector-pseudo">:last-child</span> &#123;<br>  <span class="hljs-attribute">background-color</span>: tomato;<br>  <span class="hljs-attribute">flex</span>: <span class="hljs-number">1</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>height: 100% 将容器的高度设为视口的高度<br>display: flex 启用 flex<br>flex-direction: column 将项目的顺序设置成从上到下<br>flex-grow: 1 flexbox 会将容器的剩余可用空间应用于最后一个子元素。 父级必须具有视口高度。 flex-grow：1 可以应用于第一个或第二个元素，它将具有所有可用空间。</p><h2 id="十、屏外隐藏元素"><a href="#十、屏外隐藏元素" class="headerlink" title="十、屏外隐藏元素"></a>十、屏外隐藏元素</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;button&quot;</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;https://www.baidu.com&quot;</span>&gt;</span><br>  Learn More <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;offscreen&quot;</span>&gt;</span> about baidu<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-class">.offscreen</span> &#123;<br>  <span class="hljs-attribute">border</span>: <span class="hljs-number">0</span>;<br>  <span class="hljs-attribute">clip</span>: <span class="hljs-built_in">rect</span>(<span class="hljs-number">0</span> <span class="hljs-number">0</span> <span class="hljs-number">0</span> <span class="hljs-number">0</span>);<br>  <span class="hljs-attribute">height</span>: <span class="hljs-number">1px</span>;<br>  <span class="hljs-attribute">margin</span>: -<span class="hljs-number">1px</span>;<br>  <span class="hljs-attribute">overflow</span>: hidden;<br>  <span class="hljs-attribute">padding</span>: <span class="hljs-number">0</span>;<br>  <span class="hljs-attribute">position</span>: absolute;<br>  <span class="hljs-attribute">width</span>: <span class="hljs-number">1px</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>删除所有边框<br>使用 clip 隐藏元素<br>设置宽高为 1px<br>使用 margin：-1px 取消元素的高度和宽度<br>隐藏元素的溢出<br>移除所有的 padding<br>绝对定位元素，使其不占用 DOM 中的空间</p><h2 id="十一、transform-居中子元素"><a href="#十一、transform-居中子元素" class="headerlink" title="十一、transform 居中子元素"></a>十一、transform 居中子元素</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;parent&quot;</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;child&quot;</span>&gt;</span>Centered content<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-class">.parent</span> &#123;<br>  <span class="hljs-attribute">border</span>: <span class="hljs-number">1px</span> solid <span class="hljs-number">#333</span>;<br>  <span class="hljs-attribute">height</span>: <span class="hljs-number">250px</span>;<br>  <span class="hljs-attribute">position</span>: relative;<br>  <span class="hljs-attribute">width</span>: <span class="hljs-number">250px</span>;<br>&#125;<br><span class="hljs-selector-class">.child</span> &#123;<br>  <span class="hljs-attribute">left</span>: <span class="hljs-number">50%</span>;<br>  <span class="hljs-attribute">position</span>: absolute;<br>  <span class="hljs-attribute">top</span>: <span class="hljs-number">50%</span>;<br>  <span class="hljs-attribute">transform</span>: <span class="hljs-built_in">translate</span>(-<span class="hljs-number">50%</span>, -<span class="hljs-number">50%</span>);<br>  <span class="hljs-attribute">text-align</span>: center;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="十二、多行文本截断显示"><a href="#十二、多行文本截断显示" class="headerlink" title="十二、多行文本截断显示"></a>十二、多行文本截断显示</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;truncate-text-multiline&quot;</span>&gt;</span><br>  Lorem ipsum dolor sit amet, consetetur sadipscing elitr, sed diam nonumy<br>  eirmod tempor invidunt ut labore et.<br><span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-class">.truncate-text-multiline</span> &#123;<br>  <span class="hljs-attribute">overflow</span>: hidden;<br>  <span class="hljs-attribute">display</span>: block;<br>  <span class="hljs-attribute">height</span>: <span class="hljs-number">109.2px</span>;<br>  <span class="hljs-attribute">margin</span>: <span class="hljs-number">0</span> auto;<br>  <span class="hljs-attribute">font-size</span>: <span class="hljs-number">26px</span>;<br>  <span class="hljs-attribute">line-height</span>: <span class="hljs-number">1.4</span>;<br>  <span class="hljs-attribute">width</span>: <span class="hljs-number">400px</span>;<br>  <span class="hljs-attribute">position</span>: relative;<br>&#125;<br><span class="hljs-selector-class">.truncate-text-multiline</span>:after &#123;<br>  content: <span class="hljs-string">&quot;&quot;</span>;<br>  <span class="hljs-attribute">position</span>: absolute;<br>  <span class="hljs-attribute">bottom</span>: <span class="hljs-number">0</span>;<br>  <span class="hljs-attribute">right</span>: <span class="hljs-number">0</span>;<br>  <span class="hljs-attribute">width</span>: <span class="hljs-number">150px</span>;<br>  <span class="hljs-attribute">height</span>: <span class="hljs-number">36.4px</span>;<br>  <span class="hljs-attribute">background</span>: <span class="hljs-built_in">linear-gradient</span>(to right, <span class="hljs-built_in">rgba</span>(<span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>), <span class="hljs-number">#f5f6f9</span> <span class="hljs-number">50%</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p>overflow: hidden 防止内容溢出<br>width: 400px 确保元素有尺寸<br>height: 109.2px 计算的高度值，它等于 font-size <em>line-height</em> numberOfLines（在这种情况下为 26 <em>1.4</em> 3 = 109.2）<br>height: 36.4px 渐变容器的计算值，它等于 font-size <em>line-height（在这种情况下为 26</em> 1.4 = 36.4）<br>background: linear-gradient(to right, rgba(0, 0, 0, 0), #f5f6f9 50% 渐变从 透明到渐变从透明到＃f5f6f9</p><h2 id="十三、CSS-列表计数器"><a href="#十三、CSS-列表计数器" class="headerlink" title="十三、CSS 列表计数器"></a>十三、CSS 列表计数器</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">ul</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>List item<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>List item<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span><br>    List item<br>    <span class="hljs-tag">&lt;<span class="hljs-name">ul</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>List item<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>List item<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>List item<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-tag">ul</span> &#123;<br>  <span class="hljs-attribute">counter-reset</span>: counter;<br>&#125;<br><span class="hljs-selector-tag">li</span><span class="hljs-selector-pseudo">::before</span> &#123;<br>  <span class="hljs-attribute">counter-increment</span>: counter;<br>  <span class="hljs-attribute">content</span>: <span class="hljs-built_in">counters</span>(counter, <span class="hljs-string">&quot;.&quot;</span>) <span class="hljs-string">&quot; &quot;</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>counter-reset 初始化计数器，该值是计数器的名称。默认情况下，计数器从 0 开始。此属性还可用于将其值更改为任何特定数字。<br>counter-increment 用于可数的元素。 一旦计数器重置初始化，计数器的值可以增加或减少。<br>counter(name, style)显示节计数器的值。通常用于内容属性。此函数可以接收两个参数，第一个作为计数器的名称，第二个参数表示占位内容，例如 3.1 的小数点。<br>CSS 计数器对于制作轮廓列表特别有用，因为计数器的新实例是在子元素中自动创建的。使用 counters（）函数，可以在不同级别的嵌套计数器之间插入分隔文本。</p><h2 id="十四、自定义滚动条"><a href="#十四、自定义滚动条" class="headerlink" title="十四、自定义滚动条"></a>十四、自定义滚动条</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;custom-scrollbar&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span><br>    Lorem ipsum dolor sit amet consectetur adipisicing elit.<span class="hljs-tag">&lt;<span class="hljs-name">br</span> /&gt;</span><br>    Iure id exercitationem nulla qui repellat laborum vitae, <span class="hljs-tag">&lt;<span class="hljs-name">br</span> /&gt;</span><br>    molestias tempora velit natus. Quas, assumenda nisi. <span class="hljs-tag">&lt;<span class="hljs-name">br</span> /&gt;</span><br>    Quisquam enim qui iure, consequatur velit sit?<br>  <span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-class">.custom-scrollbar</span> &#123;<br>  <span class="hljs-attribute">height</span>: <span class="hljs-number">70px</span>;<br>  <span class="hljs-attribute">overflow-y</span>: scroll;<br>&#125;<br><span class="hljs-comment">/* To style the document scrollbar, remove `.custom-scrollbar` */</span><br><span class="hljs-selector-class">.custom-scrollbar</span>::-webkit-scrollbar &#123;<br>  width: <span class="hljs-number">8px</span>;<br>&#125;<br><span class="hljs-selector-class">.custom-scrollbar</span>::-webkit-scrollbar-track &#123;<br>  box-shadow: inset <span class="hljs-number">0</span> <span class="hljs-number">0</span> <span class="hljs-number">6px</span> <span class="hljs-built_in">rgba</span>(<span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0.3</span>);<br>  <span class="hljs-attribute">border-radius</span>: <span class="hljs-number">10px</span>;<br>&#125;<br><span class="hljs-selector-class">.custom-scrollbar</span>::-webkit-scrollbar-thumb &#123;<br>  border-radius: <span class="hljs-number">10px</span>;<br>  <span class="hljs-attribute">box-shadow</span>: inset <span class="hljs-number">0</span> <span class="hljs-number">0</span> <span class="hljs-number">6px</span> <span class="hljs-built_in">rgba</span>(<span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0.5</span>);<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="十五、自定义文本选择的样式"><a href="#十五、自定义文本选择的样式" class="headerlink" title="十五、自定义文本选择的样式"></a>十五、自定义文本选择的样式</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;custom-text-selection&quot;</span>&gt;</span>Select some of this text.<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-pseudo">::selection</span> &#123;<br>  <span class="hljs-attribute">background</span>: aquamarine;<br>  <span class="hljs-attribute">color</span>: black;<br>&#125;<br><span class="hljs-selector-class">.custom-text-selection</span><span class="hljs-selector-pseudo">::selection</span> &#123;<br>  <span class="hljs-attribute">background</span>: deeppink;<br>  <span class="hljs-attribute">color</span>: white;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="十六、Focus-Within-伪类"><a href="#十六、Focus-Within-伪类" class="headerlink" title="十六、Focus Within 伪类"></a>十六、Focus Within 伪类</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;focus-within&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">form</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">label</span> <span class="hljs-attr">for</span>=<span class="hljs-string">&quot;given_name&quot;</span>&gt;</span>Given Name:<span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;given_name&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> /&gt;</span> <span class="hljs-tag">&lt;<span class="hljs-name">br</span> /&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">label</span> <span class="hljs-attr">for</span>=<span class="hljs-string">&quot;family_name&quot;</span>&gt;</span>Family Name:<span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;family_name&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> /&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">form</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-tag">form</span> &#123;<br>  <span class="hljs-attribute">border</span>: <span class="hljs-number">3px</span> solid <span class="hljs-number">#2d98da</span>;<br>  <span class="hljs-attribute">color</span>: <span class="hljs-number">#000000</span>;<br>  <span class="hljs-attribute">padding</span>: <span class="hljs-number">4px</span>;<br>&#125;<br><span class="hljs-selector-tag">form</span><span class="hljs-selector-pseudo">:focus</span>-within &#123;<br>  <span class="hljs-attribute">background</span>: <span class="hljs-number">#f7b731</span>;<br>  <span class="hljs-attribute">color</span>: <span class="hljs-number">#000000</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>伪类：：focus-within 将对应的样式应用于父元素（任何子元素被聚焦）。 例如，表单元素内的输入元素。</p><h2 id="十七、指定元素的全屏"><a href="#十七、指定元素的全屏" class="headerlink" title="十七、指定元素的全屏"></a>十七、指定元素的全屏</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;container&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">em</span>&gt;</span>Click the button below to enter the element into fullscreen mode. <span class="hljs-tag">&lt;/<span class="hljs-name">em</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;element&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;element&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>I change color in fullscreen mode!<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">br</span> /&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">button</span></span><br><span class="hljs-tag">    <span class="hljs-attr">onclick</span>=<span class="hljs-string">&quot;var el = document.getElementById(&#x27;element&#x27;); el.requestFullscreen();&quot;</span></span><br><span class="hljs-tag">  &gt;</span><br>    Go Full Screen!<br>  <span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-class">.container</span> &#123;<br>  <span class="hljs-attribute">margin</span>: <span class="hljs-number">40px</span> auto;<br>  <span class="hljs-attribute">max-width</span>: <span class="hljs-number">700px</span>;<br>&#125;<br><span class="hljs-selector-class">.element</span> &#123;<br>  <span class="hljs-attribute">padding</span>: <span class="hljs-number">20px</span>;<br>  <span class="hljs-attribute">height</span>: <span class="hljs-number">300px</span>;<br>  <span class="hljs-attribute">width</span>: <span class="hljs-number">100%</span>;<br>  <span class="hljs-attribute">background-color</span>: skyblue;<br>&#125;<br><span class="hljs-selector-class">.element</span> <span class="hljs-selector-tag">p</span> &#123;<br>  <span class="hljs-attribute">text-align</span>: center;<br>  <span class="hljs-attribute">color</span>: white;<br>  <span class="hljs-attribute">font-size</span>: <span class="hljs-number">3em</span>;<br>&#125;<br><span class="hljs-selector-class">.element</span>:-ms-fullscreen p &#123;<br>  visibility: visible;<br>&#125;<br><span class="hljs-selector-class">.element</span><span class="hljs-selector-pseudo">:fullscreen</span> &#123;<br>  <span class="hljs-attribute">background-color</span>: <span class="hljs-number">#e4708a</span>;<br>  <span class="hljs-attribute">width</span>: <span class="hljs-number">100vw</span>;<br>  <span class="hljs-attribute">height</span>: <span class="hljs-number">100vh</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>:fullscreen 伪类选择器用于选择和设置以全屏模式显示的元素。</p><h2 id="十八、：not-伪类选择器"><a href="#十八、：not-伪类选择器" class="headerlink" title="十八、：not 伪类选择器"></a>十八、：not 伪类选择器</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">ul</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;css-not-selector-shortcut&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>One<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>Two<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>Three<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>Four<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-class">.css-not-selector-shortcut</span> &#123;<br>  <span class="hljs-attribute">display</span>: flex;<br>&#125;<br><span class="hljs-selector-tag">ul</span> &#123;<br>  <span class="hljs-attribute">padding-left</span>: <span class="hljs-number">0</span>;<br>&#125;<br><span class="hljs-selector-tag">li</span> &#123;<br>  <span class="hljs-attribute">list-style-type</span>: none;<br>  <span class="hljs-attribute">margin</span>: <span class="hljs-number">0</span>;<br>  <span class="hljs-attribute">padding</span>: <span class="hljs-number">0</span> <span class="hljs-number">0.75rem</span>;<br>&#125;<br><span class="hljs-selector-tag">li</span><span class="hljs-selector-pseudo">:not</span>(<span class="hljs-selector-pseudo">:last-child</span>) &#123;<br>  <span class="hljs-attribute">border-right</span>: <span class="hljs-number">2px</span> solid <span class="hljs-number">#d2d5e4</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>li:not(:last-child) 设置除 last：child 之外的所有 li 元素的样式，所以最后一个元素右侧没有 border.</p><h2 id="十九、斑马条纹列表"><a href="#十九、斑马条纹列表" class="headerlink" title="十九、斑马条纹列表"></a>十九、斑马条纹列表</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">ul</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>Item 01<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>Item 02<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>Item 03<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>Item 04<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>Item 05<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-tag">li</span><span class="hljs-selector-pseudo">:nth-child</span>(odd) &#123;<br>  <span class="hljs-attribute">background-color</span>: <span class="hljs-number">#eee</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="二十、弹跳-loading-动画"><a href="#二十、弹跳-loading-动画" class="headerlink" title="二十、弹跳 loading 动画"></a>二十、弹跳 loading 动画</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;bouncing-loader&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-keyword">@keyframes</span> bouncing-loader &#123;<br>  <span class="hljs-selector-tag">to</span> &#123;<br>    <span class="hljs-attribute">opacity</span>: <span class="hljs-number">0.1</span>;<br>    <span class="hljs-attribute">transform</span>: <span class="hljs-built_in">translate3d</span>(<span class="hljs-number">0</span>, -<span class="hljs-number">1rem</span>, <span class="hljs-number">0</span>);<br>  &#125;<br>&#125;<br><span class="hljs-selector-class">.bouncing-loader</span> &#123;<br>  <span class="hljs-attribute">display</span>: flex;<br>  <span class="hljs-attribute">justify-content</span>: center;<br>&#125;<br><span class="hljs-selector-class">.bouncing-loader</span> &gt; <span class="hljs-selector-tag">div</span> &#123;<br>  <span class="hljs-attribute">width</span>: <span class="hljs-number">1rem</span>;<br>  <span class="hljs-attribute">height</span>: <span class="hljs-number">1rem</span>;<br>  <span class="hljs-attribute">margin</span>: <span class="hljs-number">3rem</span> <span class="hljs-number">0.2rem</span>;<br>  <span class="hljs-attribute">background</span>: <span class="hljs-number">#8385aa</span>;<br>  <span class="hljs-attribute">border-radius</span>: <span class="hljs-number">50%</span>;<br>  <span class="hljs-attribute">animation</span>: bouncing-loader <span class="hljs-number">0.6s</span> infinite alternate;<br>&#125;<br><span class="hljs-selector-class">.bouncing-loader</span> &gt; <span class="hljs-selector-tag">div</span><span class="hljs-selector-pseudo">:nth-child</span>(<span class="hljs-number">2</span>) &#123;<br>  <span class="hljs-attribute">animation-delay</span>: <span class="hljs-number">0.2s</span>;<br>&#125;<br><span class="hljs-selector-class">.bouncing-loader</span> &gt; <span class="hljs-selector-tag">div</span><span class="hljs-selector-pseudo">:nth-child</span>(<span class="hljs-number">3</span>) &#123;<br>  <span class="hljs-attribute">animation-delay</span>: <span class="hljs-number">0.4s</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="二十一、按钮边框动画"><a href="#二十一、按钮边框动画" class="headerlink" title="二十一、按钮边框动画"></a>二十一、按钮边框动画</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;button-border&quot;</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;button&quot;</span>&gt;</span>Submit<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-class">.button</span> &#123;<br>  <span class="hljs-attribute">background-color</span>: <span class="hljs-number">#c47135</span>;<br>  <span class="hljs-attribute">border</span>: none;<br>  <span class="hljs-attribute">color</span>: <span class="hljs-number">#ffffff</span>;<br>  <span class="hljs-attribute">outline</span>: none;<br>  <span class="hljs-attribute">padding</span>: <span class="hljs-number">12px</span> <span class="hljs-number">40px</span> <span class="hljs-number">10px</span>;<br>  <span class="hljs-attribute">position</span>: relative;<br>&#125;<br><span class="hljs-selector-class">.button</span>:before,<br>.button:after &#123;<br>  border: <span class="hljs-number">0</span> solid transparent;<br>  <span class="hljs-attribute">transition</span>: all <span class="hljs-number">0.25s</span>;<br>  <span class="hljs-attribute">content</span>: <span class="hljs-string">&quot;&quot;</span>;<br>  <span class="hljs-attribute">height</span>: <span class="hljs-number">24px</span>;<br>  <span class="hljs-attribute">position</span>: absolute;<br>  <span class="hljs-attribute">width</span>: <span class="hljs-number">24px</span>;<br>&#125;<br><span class="hljs-selector-class">.button</span>:before &#123;<br>  border-top: <span class="hljs-number">2px</span> solid <span class="hljs-number">#c47135</span>;<br>  <span class="hljs-attribute">left</span>: <span class="hljs-number">0px</span>;<br>  <span class="hljs-attribute">top</span>: -<span class="hljs-number">5px</span>;<br>&#125;<br><span class="hljs-selector-class">.button</span>:after &#123;<br>  border-bottom: <span class="hljs-number">2px</span> solid <span class="hljs-number">#c47135</span>;<br>  <span class="hljs-attribute">bottom</span>: -<span class="hljs-number">5px</span>;<br>  <span class="hljs-attribute">right</span>: <span class="hljs-number">0px</span>;<br>&#125;<br><span class="hljs-selector-class">.button</span><span class="hljs-selector-pseudo">:hover</span> &#123;<br>  <span class="hljs-attribute">background-color</span>: <span class="hljs-number">#c47135</span>;<br>&#125;<br><span class="hljs-selector-class">.button</span><span class="hljs-selector-pseudo">:hover</span>:before,<br>.button:hover:after &#123;<br>  height: <span class="hljs-number">100%</span>;<br>  <span class="hljs-attribute">width</span>: <span class="hljs-number">100%</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>before 和：after 伪元素作为在悬停时设置动画的边框。</p><h2 id="二十二、高度过度"><a href="#二十二、高度过度" class="headerlink" title="二十二、高度过度"></a>二十二、高度过度</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;trigger&quot;</span>&gt;</span><br>  Hover me to see a height transition.<br>  <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;el&quot;</span>&gt;</span>content<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-class">.el</span> &#123;<br>  <span class="hljs-attribute">transition</span>: max-height <span class="hljs-number">0.5s</span>;<br>  <span class="hljs-attribute">overflow</span>: hidden;<br>  <span class="hljs-attribute">max-height</span>: <span class="hljs-number">0</span>;<br>&#125;<br><span class="hljs-selector-class">.trigger</span><span class="hljs-selector-pseudo">:hover</span> &gt; <span class="hljs-selector-class">.el</span> &#123;<br>  <span class="hljs-attribute">max-height</span>: <span class="hljs-built_in">var</span>(--max-height);<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="二十三、悬停阴影动画"><a href="#二十三、悬停阴影动画" class="headerlink" title="二十三、悬停阴影动画"></a>二十三、悬停阴影动画</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;hover-shadow-box-animation&quot;</span>&gt;</span>Box it!<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-class">.hover-shadow-box-animation</span> &#123;<br>  <span class="hljs-attribute">display</span>: inline-block;<br>  <span class="hljs-attribute">vertical-align</span>: middle;<br>  <span class="hljs-attribute">transform</span>: <span class="hljs-built_in">perspective</span>(<span class="hljs-number">1px</span>) <span class="hljs-built_in">translateZ</span>(<span class="hljs-number">0</span>);<br>  <span class="hljs-attribute">box-shadow</span>: <span class="hljs-number">0</span> <span class="hljs-number">0</span> <span class="hljs-number">1px</span> transparent;<br>  <span class="hljs-attribute">margin</span>: <span class="hljs-number">10px</span>;<br>  <span class="hljs-attribute">transition-duration</span>: <span class="hljs-number">0.3s</span>;<br>  <span class="hljs-attribute">transition-property</span>: box-shadow, transform;<br>&#125;<br><span class="hljs-selector-class">.hover-shadow-box-animation</span><span class="hljs-selector-pseudo">:hover</span>,<br><span class="hljs-selector-class">.hover-shadow-box-animation</span><span class="hljs-selector-pseudo">:focus</span>,<br><span class="hljs-selector-class">.hover-shadow-box-animation</span><span class="hljs-selector-pseudo">:active</span> &#123;<br>  <span class="hljs-attribute">box-shadow</span>: <span class="hljs-number">1px</span> <span class="hljs-number">10px</span> <span class="hljs-number">10px</span> -<span class="hljs-number">10px</span> <span class="hljs-built_in">rgba</span>(<span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">24</span>, <span class="hljs-number">0.5</span>);<br>  <span class="hljs-attribute">transform</span>: <span class="hljs-built_in">scale</span>(<span class="hljs-number">1.2</span>);<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="二十四、悬停下划线动画"><a href="#二十四、悬停下划线动画" class="headerlink" title="二十四、悬停下划线动画"></a>二十四、悬停下划线动画</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;hover-underline-box-animation&quot;</span>&gt;</span>Box it!<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-class">.hover-underline-animation</span> &#123;<br>  <span class="hljs-attribute">display</span>: inline-block;<br>  <span class="hljs-attribute">position</span>: relative;<br>  <span class="hljs-attribute">color</span>: <span class="hljs-number">#0087ca</span>;<br>&#125;<br><span class="hljs-selector-class">.hover-underline-animation</span><span class="hljs-selector-pseudo">::after</span> &#123;<br>  <span class="hljs-attribute">content</span>: <span class="hljs-string">&quot;&quot;</span>;<br>  <span class="hljs-attribute">position</span>: absolute;<br>  <span class="hljs-attribute">width</span>: <span class="hljs-number">100%</span>;<br>  <span class="hljs-attribute">transform</span>: <span class="hljs-built_in">scaleX</span>(<span class="hljs-number">0</span>);<br>  <span class="hljs-attribute">height</span>: <span class="hljs-number">2px</span>;<br>  <span class="hljs-attribute">bottom</span>: <span class="hljs-number">0</span>;<br>  <span class="hljs-attribute">left</span>: <span class="hljs-number">0</span>;<br>  <span class="hljs-attribute">background-color</span>: <span class="hljs-number">#0087ca</span>;<br>  <span class="hljs-attribute">transform-origin</span>: bottom right;<br>  <span class="hljs-attribute">transition</span>: transform <span class="hljs-number">0.25s</span> ease-out;<br>&#125;<br><span class="hljs-selector-class">.hover-underline-animation</span><span class="hljs-selector-pseudo">:hover</span><span class="hljs-selector-pseudo">::after</span> &#123;<br>  <span class="hljs-attribute">transform</span>: <span class="hljs-built_in">scaleX</span>(<span class="hljs-number">1</span>);<br>  <span class="hljs-attribute">transform-origin</span>: bottom left;<br>&#125;<br></code></pre></td></tr></table></figure><p>display: inline-block 使 p 成为内联块，以防止下划线跨越整行宽度而不仅仅是文本内容。<br>position: relative 设置父元素为相对定位<br>::after 定义一个伪元素<br>position: absolute 将伪元素脱离文档六，并将其相对于父元素定位<br>width: 100% 确保伪元素和父元素的宽度一致。<br>transform: scaleX(0) 最初将伪元素缩放为 0，因此他是看不见的。<br>bottom: 0 and left: 0 将伪元素放在父元素的左下角。<br>transition: transform 0.25s ease-out 设置动画效果为 ease-out,并且在 0.25 秒内完成。<br>transform-origin: bottom right 变换中心点到父元素的右下角。<br>:hover::after 然后使用 scaleX（1）将宽度转换为 100％，然后将中心点更改为左下角，允许它在悬停时从另一个方向转换出来。</p><h2 id="二十五、弹出菜单"><a href="#二十五、弹出菜单" class="headerlink" title="二十五、弹出菜单"></a>二十五、弹出菜单</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;reference&quot;</span> <span class="hljs-attr">tabindex</span>=<span class="hljs-string">&quot;0&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;popout-menu&quot;</span>&gt;</span>Popout menu<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-class">.reference</span> &#123;<br>  <span class="hljs-attribute">position</span>: relative;<br>  <span class="hljs-attribute">background</span>: tomato;<br>  <span class="hljs-attribute">width</span>: <span class="hljs-number">100px</span>;<br>  <span class="hljs-attribute">height</span>: <span class="hljs-number">100px</span>;<br>&#125;<br><span class="hljs-selector-class">.popout-menu</span> &#123;<br>  <span class="hljs-attribute">position</span>: absolute;<br>  <span class="hljs-attribute">visibility</span>: hidden;<br>  <span class="hljs-attribute">left</span>: <span class="hljs-number">100%</span>;<br>  <span class="hljs-attribute">background</span>: <span class="hljs-number">#333</span>;<br>  <span class="hljs-attribute">color</span>: white;<br>  <span class="hljs-attribute">padding</span>: <span class="hljs-number">15px</span>;<br>&#125;<br><span class="hljs-selector-class">.reference</span><span class="hljs-selector-pseudo">:hover</span> &gt; <span class="hljs-selector-class">.popout-menu</span>,<br><span class="hljs-selector-class">.reference</span><span class="hljs-selector-pseudo">:focus</span> &gt; <span class="hljs-selector-class">.popout-menu</span>,<br><span class="hljs-selector-class">.reference</span><span class="hljs-selector-pseudo">:focus</span>-within &gt; <span class="hljs-selector-class">.popout-menu</span> &#123;<br>  <span class="hljs-attribute">visibility</span>: visible;<br>&#125;<br></code></pre></td></tr></table></figure><p>left: 100% 弹出菜单从左侧偏移其父级宽度的 100％。<br>visibility: hidden<br>.reference:hover &gt; .popout-menu 鼠标悬停时，.popout-menu 显示<br>.reference:focus &gt; .popout-menu 聚焦时，.popout-menu 显示<br>.reference:focus-within &gt; .popout-menu 确保在焦点位于参考范围内时显示弹出窗口。</p><h2 id="二十六、悬停时，兄弟元素淡化"><a href="#二十六、悬停时，兄弟元素淡化" class="headerlink" title="二十六、悬停时，兄弟元素淡化"></a>二十六、悬停时，兄弟元素淡化</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;sibling-fade&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>Item 1<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span> <span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>Item 2<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span> <span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>Item 3<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>Item 4<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span> <span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>Item 5<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span> <span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>Item 6<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-tag">span</span> &#123;<br>  <span class="hljs-attribute">padding</span>: <span class="hljs-number">0</span> <span class="hljs-number">1rem</span>;<br>  <span class="hljs-attribute">transition</span>: opacity <span class="hljs-number">0.2s</span>;<br>&#125;<br><span class="hljs-selector-class">.sibling-fade</span><span class="hljs-selector-pseudo">:hover</span> <span class="hljs-selector-tag">span</span><span class="hljs-selector-pseudo">:not</span>(<span class="hljs-selector-pseudo">:hover</span>) &#123;<br>  <span class="hljs-attribute">opacity</span>: <span class="hljs-number">0.5</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>transition: opacity 0.2s 设置 0.2 秒的淡化动画。<br>.sibling-fade:hover span:not(:hover)当父级悬停时，选择当前未悬停的 span 子项并将其透明度更改为 0.5。</p>]]></content>
      
      
      
        <tags>
            
            <tag> css </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>108、web components和vue+web components</title>
      <link href="/2022/12/15/108-vue3/"/>
      <url>/2022/12/15/108-vue3/</url>
      
        <content type="html"><![CDATA[<p>Web Components 提供了基于原生支持的、对视图层的封装能力，可以让单个组件相关的 javaScript、css、html 模板运行在以 html 标签为界限的局部环境中，不会影响到全局，组件间也不会相互影响 。 再简单来说：就是提供了我们自定义标签的能力，并且提供了标签内完整的生命周期 。</p><span id="more"></span><p>Custom elements（自定义元素）：JavaScript API，允许定义 custom elements 及其行为，然后可以在我们的用户界面中按照需要使用它们。</p><p>Shadow DOM（影子 DOM）：JavaScript API，用于将封装的“影子”DOM 树附加到元素（与主文档 DOM 分开呈现）并控制其关联的功能。通过这种方式，开发者可以保持元素的功能私有，这样它们就可以被脚本化和样式化，而不用担心与文档的其他部分发生冲突。</p><p>HTML templates（HTML 模板）：和元素使开发者可以编写与 HTML 结构类似的组件和样式。然后它们可以作为自定义元素结构的基础被多次重用。</p><h2 id="一、web-components-示例："><a href="#一、web-components-示例：" class="headerlink" title="一、web components 示例："></a>一、web components 示例：</h2><p>btn.js</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Btn</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">HTMLElement</span> </span>&#123;<br>  <span class="hljs-function"><span class="hljs-title">constructor</span>(<span class="hljs-params"></span>)</span> &#123;<br>    <span class="hljs-built_in">super</span>();<br>    <span class="hljs-keyword">const</span> shadowDom = <span class="hljs-built_in">this</span>.attachShadow(&#123; <span class="hljs-attr">mode</span>: <span class="hljs-string">&quot;open&quot;</span> &#125;);<br>    <span class="hljs-built_in">this</span>.p = <span class="hljs-built_in">this</span>.h(<span class="hljs-string">&quot;p&quot;</span>);<br>    <span class="hljs-built_in">this</span>.p.innerText = <span class="hljs-string">&quot;jude&quot;</span>;<br>    <span class="hljs-built_in">this</span>.p.setAttribute(<br>      <span class="hljs-string">&quot;style&quot;</span>,<br>      <span class="hljs-string">&quot;width:100px;height:100px;border:1px solid #999;background:yellowgreen&quot;</span><br>    );<br>    shadowDom.appendChild(<span class="hljs-built_in">this</span>.p);<br><br>    <span class="hljs-comment">// tempalte</span><br>    <span class="hljs-built_in">this</span>.template = <span class="hljs-built_in">this</span>.h(<span class="hljs-string">&quot;template&quot;</span>);<br>    <span class="hljs-built_in">this</span>.template.innerHTML = <span class="hljs-string">`</span><br><span class="hljs-string">      &lt;style&gt;</span><br><span class="hljs-string">        div&#123;</span><br><span class="hljs-string">          width:50px;</span><br><span class="hljs-string">          height:50px;</span><br><span class="hljs-string">          background:green;</span><br><span class="hljs-string">        &#125;</span><br><span class="hljs-string">      &lt;/style&gt;</span><br><span class="hljs-string">      &lt;div&gt;</span><br><span class="hljs-string">      我是template,上面的样式会被隔离</span><br><span class="hljs-string">      &lt;/div&gt;</span><br><span class="hljs-string">`</span>;<br>    shadowDom.appendChild(<span class="hljs-built_in">this</span>.template.content.cloneNode(<span class="hljs-literal">true</span>));<br>  &#125;<br>  <span class="hljs-function"><span class="hljs-title">h</span>(<span class="hljs-params">el</span>)</span> &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-built_in">document</span>.createElement(el);<br>  &#125;<br>  <span class="hljs-comment">// 生命周期</span><br>  <span class="hljs-comment">// 当自定义元素第一次被连接到文档DOM时被调用</span><br>  <span class="hljs-function"><span class="hljs-title">connectedCallback</span>(<span class="hljs-params"></span>)</span> &#123;<br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;连接调用&quot;</span>);<br>  &#125;<br>  <span class="hljs-comment">// 当自定义元素与文档DOM断开连接时被调用</span><br>  <span class="hljs-function"><span class="hljs-title">disconnectedCallback</span>(<span class="hljs-params"></span>)</span> &#123;<br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;断开调用&quot;</span>);<br>  &#125;<br>  <span class="hljs-comment">// 当自定义元素被移动到新文档时被调用</span><br>  <span class="hljs-function"><span class="hljs-title">adoptedCallback</span>(<span class="hljs-params"></span>)</span> &#123;<br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;移动时调用&quot;</span>);<br>  &#125;<br>  <span class="hljs-comment">// 当自定义元素的第一个属性被增加、移除或者更改时被调用</span><br>  <span class="hljs-function"><span class="hljs-title">attributeChangedCallback</span>(<span class="hljs-params">attrName, oldVal, newVal</span>)</span> &#123;<br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;改变调用&quot;</span>, attrName, oldVal, newVal);<br>  &#125;<br>&#125;<br><br><span class="hljs-built_in">window</span>.customElements.define(<span class="hljs-string">&quot;yu-btn&quot;</span>, Btn);<br></code></pre></td></tr></table></figure><blockquote><p>这里存在一个问题，如果使用 window.customElements.define(“btn”, Btn)，会报错：Uncaught DOMException: Failed to execute ‘define’ on ‘CustomElementRegistry’: “btn” is not a valid custom element name,修改一下 name 即可</p></blockquote><p>index.html</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span> /&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">http-equiv</span>=<span class="hljs-string">&quot;X-UA-Compatible&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;IE=edge&quot;</span> /&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;viewport&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;width=device-width, initial-scale=1.0&quot;</span> /&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Document<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;./btn.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">yu-btn</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">yu-btn</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="二、vue-使用自定义组件"><a href="#二、vue-使用自定义组件" class="headerlink" title="二、vue 使用自定义组件"></a>二、vue 使用自定义组件</h2><p>defineCustomElement</p><p>首先需要告知 vue 这是一个自定义组件，跳过组件检查</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs ts"><span class="hljs-comment">/*vite config ts 配置*/</span><br>vue(&#123;<br>  <span class="hljs-attr">template</span>: &#123;<br>    <span class="hljs-attr">compilerOptions</span>: &#123;<br>      <span class="hljs-attr">isCustomElement</span>: <span class="hljs-function">(<span class="hljs-params">tag</span>) =&gt;</span> tag.includes(<span class="hljs-string">&quot;yu-&quot;</span>),<br>    &#125;,<br>  &#125;,<br>&#125;);<br></code></pre></td></tr></table></figure><p>父组件：</p><blockquote><p>这里需要注意，传递参数 如果是对象需要序列化 他是作用于 标签上的</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;template&gt;<br>  &lt;div&gt;<br>    &lt;yu-btn :title=&quot;JSON.stringify(name)&quot;&gt;&lt;/yu-btn&gt;<br>  &lt;/div&gt;<br>&lt;/template&gt;<br><br>&lt;script setup lang=&quot;ts&quot;&gt;<br>import &#123; ref, reactive, defineCustomElement &#125; from &quot;vue&quot;;<br>//自定义元素模式  要开启这个模式，只需要将你的组件文件以 .ce.vue 结尾即可<br>import customVueVue from &quot;./components/custom-vue.ce.vue&quot;;<br>const Btn = defineCustomElement(customVueVue);<br>customElements.define(&quot;yu-btn&quot;, Btn);<br><br>const name = ref(&#123; a: 1 &#125;);<br>&lt;/script&gt;<br><br>&lt;style scoped lang=&quot;less&quot;&gt;&lt;/style&gt;<br></code></pre></td></tr></table></figure><p>子组件：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;template&gt;<br>  &lt;div&gt;title: &#123;&#123; title &#125;&#125;&lt;/div&gt;<br>&lt;/template&gt;<br><br>&lt;script setup lang=&quot;ts&quot;&gt;<br>import &#123; ref, reactive &#125; from &quot;vue&quot;;<br><br>defineProps&lt;&#123;<br>  title: string;<br>&#125;&gt;();<br>&lt;/script&gt;<br><br>&lt;style scoped lang=&quot;less&quot;&gt;&lt;/style&gt;<br></code></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>107、Mac的MySQL无法启动</title>
      <link href="/2022/12/13/107-mysql/"/>
      <url>/2022/12/13/107-mysql/</url>
      
        <content type="html"><![CDATA[<p>安装好 MySQL 之后，在 Mac 的系统设置 最下方会新增一个 MySQL,点击之后，会出现 MySQL 的版本号:MySQL 8.0.32,点击 start MySQL Server,仍然无法启动。</p><span id="more"></span><p>解决方法：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs shell">sudo chown -R mysql /usr/local/mysql/data<br><br>sudo /usr/local/mysql/support-files/mysql.server start<br>// 会出现success  MySQL启动成功<br></code></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> mysql </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>106、ref小技巧</title>
      <link href="/2022/12/12/106.ref/"/>
      <url>/2022/12/12/106.ref/</url>
      
        <content type="html"><![CDATA[<p>使用 console.log 输出一个 ref 对象时，控制台查看结果时很不方便，Chrome 浏览器对此有一个格式化的处理。</p><span id="more"></span><h2 id="示例："><a href="#示例：" class="headerlink" title="示例："></a>示例：</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs js">&lt;script setup lang=<span class="hljs-string">&quot;ts&quot;</span>&gt;<br><span class="hljs-keyword">import</span> &#123; ref &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;vue&#x27;</span><br><span class="hljs-keyword">const</span> str = ref&lt;string&gt;(<span class="hljs-string">&#x27;jude&#x27;</span>)<br><span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;str&#x27;</span>,str)<br>&lt;/script&gt;<br></code></pre></td></tr></table></figure><p>控制台打印结果为</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">RefImp&#123;<br>  dep:undefined<br>  __v_isRef:true<br>  __v_isShallow:false<br>  _rawValue:&#x27;jude&#x27;<br>  _value:&#x27;jude&#x27;<br>  value:&#x27;jude&#x27;<br>&#125;<br></code></pre></td></tr></table></figure><p>点击控制台右上角设置按钮 — 偏好设置 — 启动自定义格式设置工具，此时控制台的打印结果就很明显了。</p>]]></content>
      
      
      
        <tags>
            
            <tag> vue3 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>105、typescript函数Class类型：函数重载和面向对象(三)</title>
      <link href="/2022/12/10/105-ts/"/>
      <url>/2022/12/10/105-ts/</url>
      
        <content type="html"><![CDATA[<span id="more"></span><p>日常开发中最常用的、基础的变量类型标注，包括原始类型、对象类型、字面量类型与枚举类型。而实际开发中还有一个重要的朋友：<strong>函数</strong>。函数能够帮助我们进一步抽离与封装代码逻辑，所以掌握函数类型必不可少。如果说函数代表着面向过程的编程，那么 Class 则代表着面向对象的编程，而它也是 ES6 新特性的重要一部分———我们终于可以和各种花式继承告别了。</p><p>介绍函数与 Class 的类型标注，以及一些在 TypeScript 中独有或相比 JavaScript 更加完全的概念，如<strong>重载</strong>与<strong>面向对象的编程</strong>等。函数部分，我们主要关注其参数类型、返回值类型以及重载的应用。 Class 部分，除了类型以外，我们还会学习访问性修饰符、继承、抽象类等来自于面向对象理念的实际使用。</p><h2 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h2><h3 id="函数的类型签名"><a href="#函数的类型签名" class="headerlink" title="函数的类型签名"></a>函数的类型签名</h3><p>如果说变量的类型是描述了这个变量的值类型，那么函数的类型就是描述了<strong>函数入参类型与函数返回值类型</strong>，它们同样使用<code>:</code>的语法进行类型标注。我们直接看最简单的例子：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">foo</span>(<span class="hljs-params">name: <span class="hljs-built_in">string</span></span>): <span class="hljs-title">number</span> </span>&#123;<br>  <span class="hljs-keyword">return</span> name.length;<br>&#125;<br></code></pre></td></tr></table></figure><p>在函数类型中同样存在着类型推导。比如在这个例子中，你可以不写返回值处的类型，它也能被正确推导为 number 类型。</p><p>在 JavaScript 中，我们称 <code>function name () &#123;&#125;</code> 这一声明函数的方式为<strong>函数声明（*Function Declaration*）</strong>。除了函数声明以外，我们还可以通过<strong>函数表达式（*Function Expression*）</strong>，即 <code>const foo = function()&#123;&#125;</code> 的形式声明一个函数。在表达式中进行类型声明的方式是这样的：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-keyword">const</span> foo = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">name: <span class="hljs-built_in">string</span></span>): <span class="hljs-title">number</span> </span>&#123;<br>  <span class="hljs-keyword">return</span> name.length;<br>&#125;;<br></code></pre></td></tr></table></figure><p>我们也可以像对变量进行类型标注那样，对 <code>foo</code> 这个变量进行类型声明：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-keyword">const</span> foo: <span class="hljs-function">(<span class="hljs-params">name: <span class="hljs-built_in">string</span></span>) =&gt;</span> <span class="hljs-built_in">number</span> = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">name</span>) </span>&#123;<br>  <span class="hljs-keyword">return</span> name.length;<br>&#125;;<br></code></pre></td></tr></table></figure><p>这里的 <code>(name: string) =&gt; number</code> 看起来很眼熟，对吧？它是 ES6 的重要特性之一：箭头函数。但在这里，它其实是 TypeScript 中的<strong>函数类型签名</strong>。而实际的箭头函数，我们的类型标注也是类似的：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-comment">// 方式一</span><br><span class="hljs-keyword">const</span> foo = (name: <span class="hljs-built_in">string</span>): <span class="hljs-function"><span class="hljs-params">number</span> =&gt;</span> &#123;<br>  <span class="hljs-keyword">return</span> name.length;<br>&#125;;<br><br><span class="hljs-comment">// 方式二</span><br><span class="hljs-keyword">const</span> foo: <span class="hljs-function">(<span class="hljs-params">name: <span class="hljs-built_in">string</span></span>) =&gt;</span> <span class="hljs-built_in">number</span> = <span class="hljs-function">(<span class="hljs-params">name</span>) =&gt;</span> &#123;<br>  <span class="hljs-keyword">return</span> name.length;<br>&#125;;<br></code></pre></td></tr></table></figure><p>在方式二的声明方式中，你会发现函数类型声明混合箭头函数声明时，代码的可读性会非常差。因此，一般不推荐这么使用，要么<strong>直接在函数中进行参数和返回值的类型声明</strong>，要么<strong>使用类型别名将函数声明抽离出来</strong>：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-keyword">type</span> FuncFoo = <span class="hljs-function">(<span class="hljs-params">name: <span class="hljs-built_in">string</span></span>) =&gt;</span> <span class="hljs-built_in">number</span>;<br><br><span class="hljs-keyword">const</span> foo: FuncFoo = <span class="hljs-function">(<span class="hljs-params">name</span>) =&gt;</span> &#123;<br>  <span class="hljs-keyword">return</span> name.length;<br>&#125;;<br></code></pre></td></tr></table></figure><p>如果只是为了描述这个函数的类型结构，我们甚至可以使用 interface 来进行函数声明：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-keyword">interface</span> FuncFooStruct &#123;<br>  (name: <span class="hljs-built_in">string</span>): <span class="hljs-built_in">number</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>这时的 interface 被称为 <strong>Callable Interface</strong>，看起来可能很奇怪，但我们可以这么认为，interface 就是用来描述一个类型结构的，而函数类型本质上也是一个结构固定的类型罢了。</p><h3 id="void-类型"><a href="#void-类型" class="headerlink" title="void 类型"></a>void 类型</h3><p>在 TypeScript 中，一个没有返回值（即没有调用 return 语句）的函数，其返回类型应当被标记为 void 而不是 undefined，即使它实际的值是 undefined。</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-comment">// 没有调用 return 语句</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">foo</span>(<span class="hljs-params"></span>): <span class="hljs-title">void</span> </span>&#123;&#125;<br><br><span class="hljs-comment">// 调用了 return 语句，但没有返回值</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">bar</span>(<span class="hljs-params"></span>): <span class="hljs-title">void</span> </span>&#123;<br>  <span class="hljs-keyword">return</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>原因和我们在原始类型与对象类型一节中讲到的：<strong>在 TypeScript 中，undefined 类型是一个实际的、有意义的类型值，而 void 才代表着空的、没有意义的类型值。</strong> 相比之下，void 类型就像是 JavaScript 中的 null 一样。因此在我们没有实际返回值时，使用 void 类型能更好地说明这个函数<strong>没有进行返回操作</strong>。但在上面的第二个例子中，其实更好的方式是使用 undefined ：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">bar</span>(<span class="hljs-params"></span>): <span class="hljs-title">undefined</span> </span>&#123;<br>  <span class="hljs-keyword">return</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>此时我们想表达的则是，这个函数<strong>进行了返回操作，但没有返回实际的值</strong>。</p><h3 id="可选参数与-rest-参数"><a href="#可选参数与-rest-参数" class="headerlink" title="可选参数与 rest 参数"></a>可选参数与 rest 参数</h3><p>在很多时候，我们会希望函数的参数可以更灵活，比如它不一定全都必传，当你不传入参数时函数会使用此参数的默认值。正如在对象类型中我们使用 <code>?</code> 描述一个可选属性一样，在函数类型中我们也使用 <code>?</code> 描述一个可选参数：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-comment">// 在函数逻辑中注入可选参数默认值</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">foo1</span>(<span class="hljs-params">name: <span class="hljs-built_in">string</span>, age?: <span class="hljs-built_in">number</span></span>): <span class="hljs-title">number</span> </span>&#123;<br>  <span class="hljs-keyword">const</span> inputAge = age || <span class="hljs-number">18</span>; <span class="hljs-comment">// 或使用 age ?? 18</span><br>  <span class="hljs-keyword">return</span> name.length + inputAge;<br>&#125;<br><br><span class="hljs-comment">// 直接为可选参数声明默认值</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">foo2</span>(<span class="hljs-params">name: <span class="hljs-built_in">string</span>, age: <span class="hljs-built_in">number</span> = <span class="hljs-number">18</span></span>): <span class="hljs-title">number</span> </span>&#123;<br>  <span class="hljs-keyword">const</span> inputAge = age;<br>  <span class="hljs-keyword">return</span> name.length + inputAge;<br>&#125;<br></code></pre></td></tr></table></figure><p>需要注意的是，<strong>可选参数必须位于必选参数之后</strong>。毕竟在 JavaScript 中函数的入参是按照位置（形参），而不是按照参数名（名参）进行传递。当然，我们也可以直接将可选参数与默认值合并，但此时就不能够使用 <code>?</code> 了，因为既然都有默认值，那肯定是可选参数啦。</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">foo</span>(<span class="hljs-params">name: <span class="hljs-built_in">string</span>, age: <span class="hljs-built_in">number</span> = <span class="hljs-number">18</span></span>): <span class="hljs-title">number</span> </span>&#123;<br>  <span class="hljs-keyword">const</span> inputAge = age || <span class="hljs-number">18</span>;<br>  <span class="hljs-keyword">return</span> name.length + inputAge;<br>&#125;<br></code></pre></td></tr></table></figure><p>在某些情况下，这里的可选参数类型也可以省略，如这里原始类型的情况可以直接从提供的默认值类型推导出来。但对于联合类型或对象类型的复杂情况，还是需要老老实实地进行标注。</p><p>对于 rest 参数的类型标注也比较简单，由于其实际上是一个数组，这里我们也应当使用数组类型进行标注：</p><blockquote><p>对于 any 类型，你可以简单理解为它包含了一切可能的类型，我们会在下一节详细介绍。</p></blockquote><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">foo</span>(<span class="hljs-params">arg1: <span class="hljs-built_in">string</span>, ...rest: <span class="hljs-built_in">any</span>[]</span>) </span>&#123;&#125;<br></code></pre></td></tr></table></figure><p>当然，你也可以使用我们前面学习的元祖类型进行标注：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">foo</span>(<span class="hljs-params">arg1: <span class="hljs-built_in">string</span>, ...rest: [<span class="hljs-built_in">number</span>, <span class="hljs-built_in">boolean</span>]</span>) </span>&#123;&#125;<br><br>foo(<span class="hljs-string">&quot;linbudu&quot;</span>, <span class="hljs-number">18</span>, <span class="hljs-literal">true</span>);<br></code></pre></td></tr></table></figure><h3 id="重载"><a href="#重载" class="headerlink" title="重载"></a>重载</h3><p>在某些逻辑较复杂的情况下，函数可能有多组入参类型和返回值类型：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">func</span>(<span class="hljs-params">foo: <span class="hljs-built_in">number</span>, bar?: <span class="hljs-built_in">boolean</span></span>): <span class="hljs-title">string</span> | <span class="hljs-title">number</span> </span>&#123;<br>  <span class="hljs-keyword">if</span> (bar) &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-built_in">String</span>(foo);<br>  &#125; <span class="hljs-keyword">else</span> &#123;<br>    <span class="hljs-keyword">return</span> foo * <span class="hljs-number">599</span>;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>在这个实例中，函数的返回类型基于其入参 <code>bar</code> 的值，并且从其内部逻辑中我们知道，当 <code>bar</code> 为 true，返回值为 string 类型，否则为 number 类型。而这里的类型签名完全没有体现这一点，我们只知道它的返回值是这么个联合类型。</p><p>要想实现与入参关联的返回值类型，我们可以使用 TypeScript 提供的<strong>函数重载签名（*Overload Signature*）</strong>，将以上的例子使用重载改写：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">func</span>(<span class="hljs-params">foo: <span class="hljs-built_in">number</span>, bar: <span class="hljs-literal">true</span></span>): <span class="hljs-title">string</span></span>;<br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">func</span>(<span class="hljs-params">foo: <span class="hljs-built_in">number</span>, bar?: <span class="hljs-literal">false</span></span>): <span class="hljs-title">number</span></span>;<br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">func</span>(<span class="hljs-params">foo: <span class="hljs-built_in">number</span>, bar?: <span class="hljs-built_in">boolean</span></span>): <span class="hljs-title">string</span> | <span class="hljs-title">number</span> </span>&#123;<br>  <span class="hljs-keyword">if</span> (bar) &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-built_in">String</span>(foo);<br>  &#125; <span class="hljs-keyword">else</span> &#123;<br>    <span class="hljs-keyword">return</span> foo * <span class="hljs-number">599</span>;<br>  &#125;<br>&#125;<br><br><span class="hljs-keyword">const</span> res1 = func(<span class="hljs-number">599</span>); <span class="hljs-comment">// number</span><br><span class="hljs-keyword">const</span> res2 = func(<span class="hljs-number">599</span>, <span class="hljs-literal">true</span>); <span class="hljs-comment">// string</span><br><span class="hljs-keyword">const</span> res3 = func(<span class="hljs-number">599</span>, <span class="hljs-literal">false</span>); <span class="hljs-comment">// number</span><br></code></pre></td></tr></table></figure><p>这里我们的三个 <code>function func</code> 其实具有不同的意义：</p><ul><li><code>function func(foo: number, bar: true): string</code>，重载签名一，传入 bar 的值为 true 时，函数返回值为 string 类型。</li><li><code>function func(foo: number, bar?: false): number</code>，重载签名二，不传入 bar，或传入 bar 的值为 false 时，函数返回值为 number 类型。</li><li><code>function func(foo: number, bar?: boolean): string | number</code>，函数的实现签名，会包含重载签名的所有可能情况。</li></ul><p>基于重载签名，我们就实现了将入参类型和返回值类型的可能情况进行关联，获得了更精确的类型标注能力。</p><p>这里有一个需要注意的地方，拥有多个重载声明的函数在被调用时，是按照重载的声明顺序往下查找的。因此在第一个重载声明中，为了与逻辑中保持一致，即在 bar 为 true 时返回 string 类型，这里我们需要将第一个重载声明的 bar 声明为必选的字面量类型。</p><blockquote><p>你可以试着为第一个重载声明的 bar 参数也加上可选符号，然后就会发现第一个函数调用错误地匹配到了第一个重载声明。</p></blockquote><p>实际上，TypeScript 中的重载更像是伪重载，<strong>它只有一个具体实现，其重载体现在方法调用的签名上而非具体实现上</strong>。而在如 C++ 等语言中，重载体现在多个<strong>名称一致但入参不同的函数实现上</strong>，这才是更广义上的函数重载。</p><h3 id="异步函数、Generator-函数等类型签名"><a href="#异步函数、Generator-函数等类型签名" class="headerlink" title="异步函数、Generator 函数等类型签名"></a>异步函数、Generator 函数等类型签名</h3><p>对于异步函数、Generator 函数、异步 Generator 函数的类型签名，其参数签名基本一致，而返回值类型则稍微有些区别：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-keyword">async</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">asyncFunc</span>(<span class="hljs-params"></span>): <span class="hljs-title">Promise</span>&lt;<span class="hljs-title">void</span>&gt; </span>&#123;&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">function</span>* <span class="hljs-title">genFunc</span>(<span class="hljs-params"></span>): <span class="hljs-title">Iterable</span>&lt;<span class="hljs-title">void</span>&gt; </span>&#123;&#125;<br><br><span class="hljs-keyword">async</span> <span class="hljs-function"><span class="hljs-keyword">function</span>* <span class="hljs-title">asyncGenFunc</span>(<span class="hljs-params"></span>): <span class="hljs-title">AsyncIterable</span>&lt;<span class="hljs-title">void</span>&gt; </span>&#123;&#125;<br></code></pre></td></tr></table></figure><p>其中，Generator 函数与异步 Generator 函数现在已经基本不再使用，这里仅做了解即可。而对于异步函数（即标记为 async 的函数），其返回值必定为一个 Promise 类型，而 Promise 内部包含的类型则通过泛型的形式书写，即 <code>Promise&lt;T&gt;</code>（关于泛型我们会在后面进行详细了解）。</p><p>在函数这一节中，我们主要关注函数的类型标注。因为 TypeScript 中的函数实际上相比 JavaScript 也只是多在重载这一点上，我们需要着重掌握的仍然是类型标注。但在 Class 中，我们的学习重点其实更侧重于其语法与面向对象的编程理念。</p><h2 id="Class"><a href="#Class" class="headerlink" title="Class"></a>Class</h2><h3 id="类与类成员的类型签名"><a href="#类与类成员的类型签名" class="headerlink" title="类与类成员的类型签名"></a>类与类成员的类型签名</h3><p>一个函数的主要结构即是参数、逻辑和返回值，对于逻辑的类型标注其实就是对普通代码的标注，所以我们只介绍了对参数以及返回值地类型标注。而到了 Class 中其实也一样，它的主要结构只有<strong>构造函数</strong>、<strong>属性</strong>、<strong>方法</strong>和<strong>访问符（*Accessor*）</strong>，我们也只需要关注这三个部分即可。这里我要说明一点，有的同学可能认为装饰器也是 Class 的结构，但我个人认为它并不是 Class 携带的逻辑，不应该被归类在这里。</p><blockquote><p>而对于这些结构的具体意义以及 Class 的入门语法，你可以阅读阮一峰老师的 ES6 标准入门。</p></blockquote><p>属性的类型标注类似于变量，而构造函数、方法、存取器的类型编标注类似于函数：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Foo</span> </span>&#123;<br>  <span class="hljs-attr">prop</span>: <span class="hljs-built_in">string</span>;<br><br>  <span class="hljs-function"><span class="hljs-title">constructor</span>(<span class="hljs-params">inputProp: <span class="hljs-built_in">string</span></span>)</span> &#123;<br>    <span class="hljs-built_in">this</span>.prop = inputProp;<br>  &#125;<br><br>  print(addon: <span class="hljs-built_in">string</span>): <span class="hljs-built_in">void</span> &#123;<br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">`<span class="hljs-subst">$&#123;<span class="hljs-built_in">this</span>.prop&#125;</span> and <span class="hljs-subst">$&#123;addon&#125;</span>`</span>);<br>  &#125;<br><br>  <span class="hljs-keyword">get</span> <span class="hljs-title">propA</span>(): <span class="hljs-title">string</span> &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">`<span class="hljs-subst">$&#123;<span class="hljs-built_in">this</span>.prop&#125;</span>+A`</span>;<br>  &#125;<br><br>  <span class="hljs-keyword">set</span> <span class="hljs-title">propA</span>(<span class="hljs-params">value: <span class="hljs-built_in">string</span></span>) &#123;<br>    <span class="hljs-built_in">this</span>.prop = <span class="hljs-string">`<span class="hljs-subst">$&#123;value&#125;</span>+A`</span>;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>唯一需要注意的是，setter 方法<strong>不允许进行返回值的类型标注</strong>，你可以理解为 setter 的返回值并不会被消费，它是一个只关注过程的函数。类的方法同样可以进行函数那样的重载，且语法基本一致，这里我们不再赘述。</p><p>就像函数可以通过<strong>函数声明</strong>与<strong>函数表达式</strong>创建一样，类也可以通过<strong>类声明</strong>和<strong>类表达式</strong>的方式创建。很明显上面的写法即是类声明，而使用类表达式的语法则是这样的：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-keyword">const</span> Foo = <span class="hljs-class"><span class="hljs-keyword">class</span> </span>&#123;<br>  <span class="hljs-attr">prop</span>: <span class="hljs-built_in">string</span>;<br><br>  <span class="hljs-function"><span class="hljs-title">constructor</span>(<span class="hljs-params">inputProp: <span class="hljs-built_in">string</span></span>)</span> &#123;<br>    <span class="hljs-built_in">this</span>.prop = inputProp;<br>  &#125;<br><br>  print(addon: <span class="hljs-built_in">string</span>): <span class="hljs-built_in">void</span> &#123;<br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">`<span class="hljs-subst">$&#123;<span class="hljs-built_in">this</span>.prop&#125;</span> and <span class="hljs-subst">$&#123;addon&#125;</span>`</span>);<br>  &#125;<br><br>  <span class="hljs-comment">// ...</span><br>&#125;;<br></code></pre></td></tr></table></figure><h3 id="修饰符"><a href="#修饰符" class="headerlink" title="修饰符"></a>修饰符</h3><p>在 TypeScript 中我们能够为 Class 成员添加这些修饰符：<code>public</code> / <code>private</code> / <code>protected</code> / <code>readonly</code>。除 readonly 以外，其他三位都属于访问性修饰符，而 readonly 属于操作性修饰符（就和 interface 中的 readonly 意义一致）。</p><p>这些修饰符应用的位置在成员命名前：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Foo</span> </span>&#123;<br>  <span class="hljs-keyword">private</span> prop: <span class="hljs-built_in">string</span>;<br><br>  <span class="hljs-function"><span class="hljs-title">constructor</span>(<span class="hljs-params">inputProp: <span class="hljs-built_in">string</span></span>)</span> &#123;<br>    <span class="hljs-built_in">this</span>.prop = inputProp;<br>  &#125;<br><br>  <span class="hljs-keyword">protected</span> print(addon: <span class="hljs-built_in">string</span>): <span class="hljs-built_in">void</span> &#123;<br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">`<span class="hljs-subst">$&#123;<span class="hljs-built_in">this</span>.prop&#125;</span> and <span class="hljs-subst">$&#123;addon&#125;</span>`</span>);<br>  &#125;<br><br>  <span class="hljs-keyword">public</span> <span class="hljs-keyword">get</span> <span class="hljs-title">propA</span>(): <span class="hljs-title">string</span> &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">`<span class="hljs-subst">$&#123;<span class="hljs-built_in">this</span>.prop&#125;</span>+A`</span>;<br>  &#125;<br><br>  <span class="hljs-keyword">public</span> <span class="hljs-keyword">set</span> <span class="hljs-title">propA</span>(<span class="hljs-params">value: <span class="hljs-built_in">string</span></span>) &#123;<br>    <span class="hljs-built_in">this</span>.propA = <span class="hljs-string">`<span class="hljs-subst">$&#123;value&#125;</span>+A`</span>;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>我们通常不会为构造函数添加修饰符，而是让它保持默认的 public。在扩展阅读中我们会讲到 private 修饰构造函数的场景。</p></blockquote><p>如果没有其他语言学习经验，你可能不太理解 public / private / protected 的意义，我们简单做个解释。</p><ul><li>public：此类成员在<strong>类、类的实例、子类</strong>中都能被访问。</li><li>private：此类成员仅能在<strong>类的内部</strong>被访问。</li><li>protected：此类成员仅能在<strong>类与子类中</strong>被访问，你可以将类和类的实例当成两种概念，即一旦实例化完毕（出厂零件），那就和类（工厂）没关系了，即<strong>不允许再访问受保护的成员</strong>。</li></ul><p>当你不显式使用访问性修饰符，成员的访问性默认会被标记为 public。实际上，在上面的例子中，我们通过构造函数为类成员赋值的方式还是略显麻烦，需要声明类属性以及在构造函数中进行赋值。简单起见，我们可以<strong>在构造函数中对参数应用访问性修饰符</strong>：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Foo</span> </span>&#123;<br>  <span class="hljs-function"><span class="hljs-title">constructor</span>(<span class="hljs-params"><span class="hljs-keyword">public</span> arg1: <span class="hljs-built_in">string</span>, <span class="hljs-keyword">private</span> arg2: <span class="hljs-built_in">boolean</span></span>)</span> &#123;&#125;<br>&#125;<br><br><span class="hljs-keyword">new</span> Foo(<span class="hljs-string">&quot;linbudu&quot;</span>, <span class="hljs-literal">true</span>);<br></code></pre></td></tr></table></figure><p>此时，参数会被直接作为类的成员（即实例的属性），免去后续的手动赋值。</p><h3 id="静态成员"><a href="#静态成员" class="headerlink" title="静态成员"></a>静态成员</h3><p>在 TypeScript 中，你可以使用 static 关键字来标识一个成员为静态成员：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Foo</span> </span>&#123;<br>  <span class="hljs-keyword">static</span> <span class="hljs-function"><span class="hljs-title">staticHandler</span>(<span class="hljs-params"></span>)</span> &#123;&#125;<br><br>  <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-title">instanceHandler</span>(<span class="hljs-params"></span>)</span> &#123;&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>不同于实例成员，在类的内部静态成员无法通过 this 来访问，需要通过 <code>Foo.staticHandler</code> 这种形式进行访问。我们可以查看编译到 ES5 及以下 target 的 JavaScript 代码（ES6 以上就原生支持静态成员了），来进一步了解它们的区别：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> Foo = <span class="hljs-comment">/** <span class="hljs-doctag">@class </span>*/</span> (<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<br>  <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">Foo</span>(<span class="hljs-params"></span>) </span>&#123;&#125;<br>  Foo.staticHandler = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;&#125;;<br>  Foo.prototype.instanceHandler = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;&#125;;<br>  <span class="hljs-keyword">return</span> Foo;<br>&#125;)();<br></code></pre></td></tr></table></figure><p>从中我们可以看到，<strong>静态成员直接被挂载在函数体上</strong>，而<strong>实例成员挂载在原型上</strong>，这就是二者的最重要差异：<strong>静态成员不会被实例继承，它始终只属于当前定义的这个类（以及其子类）</strong>。而原型对象上的实例成员则会<strong>沿着原型链进行传递</strong>，也就是能够被继承。</p><p>而对于静态成员和实例成员的使用时机，其实并不需要非常刻意地划分。比如我会用<strong>类 + 静态成员</strong>来收敛变量与 utils 方法：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Utils</span> </span>&#123;<br>  <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> identifier = <span class="hljs-string">&quot;linbudu&quot;</span>;<br><br>  <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-function"><span class="hljs-title">makeUHappy</span>(<span class="hljs-params"></span>)</span> &#123;<br>    Utils.studyWithU();<br>    <span class="hljs-comment">// ...</span><br>  &#125;<br><br>  <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-function"><span class="hljs-title">studyWithU</span>(<span class="hljs-params"></span>)</span> &#123;&#125;<br>&#125;<br><br>Utils.makeUHappy();<br></code></pre></td></tr></table></figure><h3 id="继承、实现、抽象类"><a href="#继承、实现、抽象类" class="headerlink" title="继承、实现、抽象类"></a>继承、实现、抽象类</h3><p>既然说到 Class，那就一定离不开继承。与 JavaScript 一样，TypeScript 中也使用 extends 关键字来实现继承：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Base</span> </span>&#123;&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Derived</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Base</span> </span>&#123;&#125;<br></code></pre></td></tr></table></figure><p>对于这里的两个类，比较严谨的称呼是 <strong>基类（*Base*）</strong> 与 <strong>派生类（*Derived*）</strong>。当然，如果你觉得叫父类与子类更容易理解也没问题。关于基类与派生类，我们需要了解的主要是<strong>派生类对基类成员的访问与覆盖操作</strong>。</p><p>基类中的哪些成员能够被派生类访问，完全是由其访问性修饰符决定的。我们在上面其实已经介绍过，派生类中可以访问到使用 <code>public</code> 或 <code>protected</code> 修饰符的基类成员。除了访问以外，基类中的方法也可以在派生类中被覆盖，但我们仍然可以通过 super 访问到基类中的方法：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Base</span> </span>&#123;<br>  <span class="hljs-function"><span class="hljs-title">print</span>(<span class="hljs-params"></span>)</span> &#123;&#125;<br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Derived</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Base</span> </span>&#123;<br>  <span class="hljs-function"><span class="hljs-title">print</span>(<span class="hljs-params"></span>)</span> &#123;<br>    <span class="hljs-built_in">super</span>.print();<br>    <span class="hljs-comment">// ...</span><br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>在派生类中覆盖基类方法时，我们并不能确保派生类的这一方法能覆盖基类方法，万一基类中不存在这个方法呢？所以，TypeScript 4.3 新增了 <code>override</code> 关键字，来确保派生类尝试覆盖的方法一定在基类中存在定义：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Base</span> </span>&#123;<br>  <span class="hljs-function"><span class="hljs-title">printWithLove</span>(<span class="hljs-params"></span>)</span> &#123;&#125;<br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Derived</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Base</span> </span>&#123;<br>  override <span class="hljs-function"><span class="hljs-title">print</span>(<span class="hljs-params"></span>)</span> &#123;<br>    <span class="hljs-comment">// ...</span><br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>在这里 TS 将会给出错误，因为<strong>尝试覆盖的方法并未在基类中声明</strong>。通过这一关键字我们就能确保首先这个方法在基类中存在，同时标识这个方法在派生类中被覆盖了。</p><p>除了基类与派生类以外，还有一个比较重要的概念：<strong>抽象类</strong>。抽象类是对类结构与方法的抽象，简单来说，<strong>一个抽象类描述了一个类中应当有哪些成员（属性、方法等）</strong>，<strong>一个抽象方法描述了这一方法在实际实现中的结构</strong>。我们知道类的方法和函数非常相似，包括结构，因此抽象方法其实描述的就是这个方法的<strong>入参类型</strong>与<strong>返回值类型</strong>。</p><p>抽象类使用 abstract 关键字声明：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-keyword">abstract</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">AbsFoo</span> </span>&#123;<br>  <span class="hljs-keyword">abstract</span> absProp: <span class="hljs-built_in">string</span>;<br>  <span class="hljs-keyword">abstract</span> <span class="hljs-keyword">get</span> <span class="hljs-title">absGetter</span>(): <span class="hljs-title">string</span>;<br>  <span class="hljs-title">abstract</span> <span class="hljs-title">absMethod</span>(<span class="hljs-params">name: <span class="hljs-built_in">string</span></span>): <span class="hljs-title">string</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>注意，抽象类中的成员也需要使用 abstract 关键字才能被视为抽象类成员，如这里的抽象方法。我们可以实现（implements）一个抽象类：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Foo</span> <span class="hljs-title">implements</span> <span class="hljs-title">AbsFoo</span> </span>&#123;<br>  <span class="hljs-attr">absProp</span>: <span class="hljs-built_in">string</span> = <span class="hljs-string">&quot;linbudu&quot;</span>;<br><br>  <span class="hljs-keyword">get</span> <span class="hljs-title">absGetter</span>() &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;linbudu&quot;</span>;<br>  &#125;<br><br>  <span class="hljs-function"><span class="hljs-title">absMethod</span>(<span class="hljs-params">name: <span class="hljs-built_in">string</span></span>)</span> &#123;<br>    <span class="hljs-keyword">return</span> name;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>此时，我们必须完全实现这个抽象类的每一个抽象成员。需要注意的是，在 TypeScript 中<strong>无法声明静态的抽象成员</strong>。</p><p>对于抽象类，它的本质就是描述类的结构。看到结构，你是否又想到了 interface？是的。interface 不仅可以声明函数结构，也可以声明类的结构：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-keyword">interface</span> FooStruct &#123;<br>  <span class="hljs-attr">absProp</span>: <span class="hljs-built_in">string</span>;<br>  <span class="hljs-keyword">get</span> <span class="hljs-title">absGetter</span>(): <span class="hljs-title">string</span>;<br>  <span class="hljs-title">absMethod</span>(<span class="hljs-params">input: <span class="hljs-built_in">string</span></span>): <span class="hljs-title">string</span>;<br>&#125;<br><br><span class="hljs-title">class</span> <span class="hljs-title">Foo</span> <span class="hljs-title">implements</span> <span class="hljs-title">FooStruct</span> &#123;<br>  <span class="hljs-attr">absProp</span>: <span class="hljs-built_in">string</span> = <span class="hljs-string">&quot;linbudu&quot;</span>;<br><br>  <span class="hljs-keyword">get</span> <span class="hljs-title">absGetter</span>() &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;linbudu&quot;</span>;<br>  &#125;<br><br>  <span class="hljs-function"><span class="hljs-title">absMethod</span>(<span class="hljs-params">name: <span class="hljs-built_in">string</span></span>)</span> &#123;<br>    <span class="hljs-keyword">return</span> name;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>在这里，我们让类去实现了一个接口。这里接口的作用和抽象类一样，都是<strong>描述这个类的结构</strong>。除此以外，我们还可以使用 <strong>Newable Interface</strong> 来描述一个类的结构（类似于描述函数结构的 <strong>Callable Interface</strong>）：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Foo</span> </span>&#123;&#125;<br><br><span class="hljs-keyword">interface</span> FooStruct &#123;<br>  <span class="hljs-keyword">new</span> (): Foo;<br>&#125;<br><br><span class="hljs-keyword">declare</span> <span class="hljs-keyword">const</span> NewableFoo: FooStruct;<br><br><span class="hljs-keyword">const</span> foo = <span class="hljs-keyword">new</span> NewableFoo();<br></code></pre></td></tr></table></figure><h2 id="总结与预告"><a href="#总结与预告" class="headerlink" title="总结与预告"></a>总结与预告</h2><p>在这一节，我们了解了 TypeScript 中的函数与类，它们分别代表了面向过程与面向对象的编程理念。对于函数，我们着重了解其结构体的类型，即参数类型（可选参数与剩余参数）与返回值类型的标注。而对于类，实际上我们了解的更多是新的语法，如访问性修饰符 <code>public</code> / <code>private</code> / <code>protected</code> ，操作修饰符 <code>readonly</code> ，静态成员 static ，抽象类 abstract ，以及 override 等在 JavaScript（ECMAScript）中不存在或实现并不完全的能力。</p><p>对于函数与类，你需要更多地实际使用才能掌握得更好。不妨继续对你手上的 JavaScript 进行改造，让函数与类都能披上类型的铠甲，获得完整的类型能力。</p><p>在下一节，我们将要接触的就是 JavaScript 中完全没有类似概念的新朋友了，它们是 TypeScript 类型编程最基础的一部分，包括了 any 、 unknown 、never 内置类型，以及类型断言等概念，这些类型工具会是你以后玩转类型编程时最常打交道的一部分。</p><h2 id="扩展阅读"><a href="#扩展阅读" class="headerlink" title="扩展阅读"></a>扩展阅读</h2><h3 id="私有构造函数"><a href="#私有构造函数" class="headerlink" title="私有构造函数"></a>私有构造函数</h3><p>上面说到，我们通常不会对类的构造函数进行访问性修饰，如果我们一定要试试呢？</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Foo</span> </span>&#123;<br>  <span class="hljs-keyword">private</span> <span class="hljs-function"><span class="hljs-title">constructor</span>(<span class="hljs-params"></span>)</span> &#123;&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>看起来好像没什么问题，但是当你想要实例化这个类时，一行美丽的操作就会出现：<strong>类的构造函数被标记为私有，且只允许在类内部访问</strong>。</p><p>那这就很奇怪了，我们要一个不能实例化的类有啥用？摆设吗？</p><p>还真不是，有些场景下私有构造函数确实有奇妙的用法，比如像我一样把类作为 utils 方法时，此时 Utils 类内部全部都是静态成员，我们也并不希望真的有人去实例化这个类。此时就可以使用私有构造函数来阻止它被错误地实例化：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Utils</span> </span>&#123;<br>  <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> identifier = <span class="hljs-string">&quot;linbudu&quot;</span>;<br><br>  <span class="hljs-keyword">private</span> <span class="hljs-function"><span class="hljs-title">constructor</span>(<span class="hljs-params"></span>)</span> &#123;&#125;<br><br>  <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-function"><span class="hljs-title">makeUHappy</span>(<span class="hljs-params"></span>)</span> &#123;&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>或者在一个类希望把实例化逻辑通过方法来实现，而不是通过 new 的形式时，也可以使用私有构造函数来达成目的。</p><p>你可能会想到，既然有私有构造函数，那没道理没有受保护的构造函数（<code>protected</code>）啊？还真有。但这里我想留给你自己去探寻，你可以先查找下这么做的意义，再想想，什么场景下我们非用它不可？</p><h3 id="SOLID-原则"><a href="#SOLID-原则" class="headerlink" title="SOLID 原则"></a>SOLID 原则</h3><p>SOLID 原则是面向对象编程中的基本原则，它包括以下这些五项基本原则。</p><p>S，<strong>单一功能原则</strong>，<strong>一个类应该仅具有一种职责</strong>，这也意味着只存在一种原因使得需要修改类的代码。如对于一个数据实体的操作，其读操作和写操作也应当被视为两种不同的职责，并被分配到两个类中。更进一步，对实体的业务逻辑和对实体的入库逻辑也都应该被拆分开来。</p><p>O，<strong>开放封闭原则</strong>，<strong>一个类应该是可扩展但不可修改的</strong>。即假设我们的业务中支持通过微信、支付宝登录，原本在一个 login 方法中进行 if else 判断，假设后面又新增了抖音登录、美团登录，难道要再加 else if 分支（或 switch case）吗？</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-built_in">enum</span> LoginType &#123;<br>  WeChat,<br>  TaoBao,<br>  TikTok,<br>  <span class="hljs-comment">// ...</span><br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Login</span> </span>&#123;<br>  <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-function"><span class="hljs-title">handler</span>(<span class="hljs-params"><span class="hljs-keyword">type</span>: LoginType</span>)</span> &#123;<br>    <span class="hljs-keyword">if</span> (<span class="hljs-keyword">type</span> === LoginType.WeChat) &#123;<br>    &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (<span class="hljs-keyword">type</span> === LoginType.TikTok) &#123;<br>    &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (<span class="hljs-keyword">type</span> === LoginType.TaoBao) &#123;<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>      <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-built_in">Error</span>(<span class="hljs-string">&quot;Invalid Login Type!&quot;</span>);<br>    &#125;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>当然不，基于开放封闭原则，我们应当将登录的基础逻辑抽离出来，不同的登录方式通过扩展这个基础类来实现自己的特殊逻辑。</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-keyword">abstract</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">LoginHandler</span> </span>&#123;<br>  <span class="hljs-keyword">abstract</span> handler(): <span class="hljs-built_in">void</span>;<br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">WeChatLoginHandler</span> <span class="hljs-title">implements</span> <span class="hljs-title">LoginHandler</span> </span>&#123;<br>  <span class="hljs-function"><span class="hljs-title">handler</span>(<span class="hljs-params"></span>)</span> &#123;&#125;<br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">TaoBaoLoginHandler</span> <span class="hljs-title">implements</span> <span class="hljs-title">LoginHandler</span> </span>&#123;<br>  <span class="hljs-function"><span class="hljs-title">handler</span>(<span class="hljs-params"></span>)</span> &#123;&#125;<br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">TikTokLoginHandler</span> <span class="hljs-title">implements</span> <span class="hljs-title">LoginHandler</span> </span>&#123;<br>  <span class="hljs-function"><span class="hljs-title">handler</span>(<span class="hljs-params"></span>)</span> &#123;&#125;<br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Login</span> </span>&#123;<br>  <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> handlerMap: Record&lt;LoginType, LoginHandler&gt; = &#123;<br>    [LoginType.TaoBao]: <span class="hljs-keyword">new</span> TaoBaoLoginHandler(),<br>    [LoginType.TikTok]: <span class="hljs-keyword">new</span> TikTokLoginHandler(),<br>    [LoginType.WeChat]: <span class="hljs-keyword">new</span> WeChatLoginHandler(),<br>  &#125;;<br>  <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-function"><span class="hljs-title">handler</span>(<span class="hljs-params"><span class="hljs-keyword">type</span>: LoginType</span>)</span> &#123;<br>    Login.handlerMap[<span class="hljs-keyword">type</span>].handler();<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>L，<strong>里式替换原则</strong>，<strong>一个派生类可以在程序的任何一处对其基类进行替换</strong>。这也就意味着，子类完全继承了父类的一切，对父类进行了功能地扩展（而非收窄）。</p><p>I，<strong>接口分离原则</strong>，<strong>类的实现方应当只需要实现自己需要的那部分接口</strong>。比如微信登录支持指纹识别，支付宝支持指纹识别和人脸识别，这个时候微信登录的实现类应该不需要实现人脸识别方法才对。这也就意味着我们提供的抽象类应当按照功能维度拆分成粒度更小的组成才对。</p><p>D，<strong>依赖倒置原则</strong>，这是实现开闭原则的基础，它的核心思想即是<strong>对功能的实现应该依赖于抽象层</strong>，即不同的逻辑通过实现不同的抽象类。还是登录的例子，我们的登录提供方法应该基于共同的登录抽象类实现（LoginHandler），最终调用方法也基于这个抽象类，而不是在一个高阶登录方法中去依赖多个低阶登录提供方。</p>]]></content>
      
      
      
        <tags>
            
            <tag> ts </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>104、typescript字面量类型和枚举(二)</title>
      <link href="/2022/12/07/104-ts/"/>
      <url>/2022/12/07/104-ts/</url>
      
        <content type="html"><![CDATA[<span id="more"></span><p>了解了原始类型与对象类型以后，我们已经能完成简单场景的类型标注了。但这还远远不够，我们还可以让这些类型标注更精确一些。比如，有一个接口结构，它描述了响应的消息结构：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-keyword">interface</span> IRes &#123;<br>  <span class="hljs-attr">code</span>: <span class="hljs-built_in">number</span>;<br>  status: <span class="hljs-built_in">string</span>;<br>  data: <span class="hljs-built_in">any</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>在大多数情况下，这里的 code 与 status 实际值会来自于一组确定值的集合，比如 code 可能是 10000 / 10001 / 50000，status 可能是 <code>&quot;success&quot;</code> / <code>&quot;failure&quot;</code>。而上面的类型只给出了一个宽泛的 number（string），此时我们既不能在访问 code 时获得精确的提示，也失去了 TypeScript 类型即文档的功能。</p><p>这个时候要怎么做？</p><h2 id="字面量类型与联合类型"><a href="#字面量类型与联合类型" class="headerlink" title="字面量类型与联合类型"></a>字面量类型与联合类型</h2><p>我们可以使用联合类型加上字面量类型，把上面的例子改写成这样：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-keyword">interface</span> Res &#123;<br>  <span class="hljs-attr">code</span>: <span class="hljs-number">10000</span> | <span class="hljs-number">10001</span> | <span class="hljs-number">50000</span>;<br>  status: <span class="hljs-string">&quot;success&quot;</span> | <span class="hljs-string">&quot;failure&quot;</span>;<br>  data: <span class="hljs-built_in">any</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>这个时候，我们就能在访问时获得精确地类型推导了。</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/a428d95d0eee4c269302df47bf45e7b3~tplv-k3u1fbpfcp-zoom-in-crop-mark:3024:0:0:0.awebp" alt="image.png"></p><p>对于 <code>declare var res: Res</code>，你可以认为它其实就是快速生成一个符合指定类型，但没有实际值的变量，同时它也不存在于运行时中。上面引入了一些新的概念，我们来一个一个了解。</p><h2 id="字面量类型"><a href="#字面量类型" class="headerlink" title="字面量类型"></a>字面量类型</h2><p>最开始你可能觉得很神奇，<code>&quot;success&quot;</code> 不是一个值吗？为什么它也可以作为类型？在 TypeScript 中，这叫做<strong>字面量类型（Literal Types）</strong>，它代表着比原始类型更精确的类型，同时也是原始类型的子类型（关于类型层级，我们会在后面详细了解）。</p><p>字面量类型主要包括<strong>字符串字面量类型</strong>、<strong>数字字面量类型</strong>、<strong>布尔字面量类型</strong>和<strong>对象字面量类型</strong>，它们可以直接作为类型标注：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-keyword">const</span> str: <span class="hljs-string">&quot;linbudu&quot;</span> = <span class="hljs-string">&quot;linbudu&quot;</span>;<br><span class="hljs-keyword">const</span> num: <span class="hljs-number">599</span> = <span class="hljs-number">599</span>;<br><span class="hljs-keyword">const</span> bool: <span class="hljs-literal">true</span> = <span class="hljs-literal">true</span>;<br></code></pre></td></tr></table></figure><p>为什么说字面量类型比原始类型更精确？我们可以看这么个例子：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-comment">// 报错！不能将类型“&quot;linbudu599&quot;”分配给类型“&quot;linbudu&quot;”。</span><br><span class="hljs-keyword">const</span> str1: <span class="hljs-string">&quot;linbudu&quot;</span> = <span class="hljs-string">&quot;linbudu599&quot;</span>;<br><br><span class="hljs-keyword">const</span> str2: <span class="hljs-built_in">string</span> = <span class="hljs-string">&quot;linbudu&quot;</span>;<br><span class="hljs-keyword">const</span> str3: <span class="hljs-built_in">string</span> = <span class="hljs-string">&quot;linbudu599&quot;</span>;<br></code></pre></td></tr></table></figure><p>上面的代码，原始类型的值可以包括任意的同类型值，而字面量类型要求的是<strong>值级别的字面量一致</strong>。</p><p>单独使用字面量类型比较少见，因为单个字面量类型并没有什么实际意义。它通常和联合类型（即这里的 <code>|</code>）一起使用，表达一组字面量类型：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-keyword">interface</span> Tmp &#123;<br>  <span class="hljs-attr">bool</span>: <span class="hljs-literal">true</span> | <span class="hljs-literal">false</span>;<br>  num: <span class="hljs-number">1</span> | <span class="hljs-number">2</span> | <span class="hljs-number">3</span>;<br>  str: <span class="hljs-string">&quot;lin&quot;</span> | <span class="hljs-string">&quot;bu&quot;</span> | <span class="hljs-string">&quot;du&quot;</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="联合类型"><a href="#联合类型" class="headerlink" title="联合类型"></a>联合类型</h3><p>而联合类型你可以理解为，它代表了<strong>一组类型的可用集合</strong>，只要最终赋值的类型属于联合类型的成员之一，就可以认为符合这个联合类型。联合类型对其成员并没有任何限制，除了上面这样对同一类型字面量的联合，我们还可以将各种类型混合到一起：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-keyword">interface</span> Tmp &#123;<br>  <span class="hljs-attr">mixed</span>: <span class="hljs-literal">true</span> | <span class="hljs-built_in">string</span> | <span class="hljs-number">599</span> | &#123;&#125; | (<span class="hljs-function">() =&gt;</span> &#123;&#125;) | (<span class="hljs-number">1</span> | <span class="hljs-number">2</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p>这里有几点需要注意的：</p><ul><li>对于联合类型中的函数类型，需要使用括号<code>()</code>包裹起来</li><li>函数类型并不存在字面量类型，因此这里的 <code>(() =&gt; &#123;&#125;)</code> 就是一个合法的函数类型</li><li>你可以在联合类型中进一步嵌套联合类型，但这些嵌套的联合类型最终都会被展平到第一级中</li></ul><p>联合类型的常用场景之一是通过多个对象类型的联合，来实现手动的互斥属性，即这一属性如果有字段 1，那就没有字段 2：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-keyword">interface</span> Tmp &#123;<br>  <span class="hljs-attr">user</span>:<br>    | &#123;<br>        <span class="hljs-attr">vip</span>: <span class="hljs-literal">true</span>;<br>        expires: <span class="hljs-built_in">string</span>;<br>      &#125;<br>    | &#123;<br>        <span class="hljs-attr">vip</span>: <span class="hljs-literal">false</span>;<br>        promotion: <span class="hljs-built_in">string</span>;<br>      &#125;;<br>&#125;<br><br><span class="hljs-keyword">declare</span> <span class="hljs-keyword">var</span> tmp: Tmp;<br><br><span class="hljs-keyword">if</span> (tmp.user.vip) &#123;<br>  <span class="hljs-built_in">console</span>.log(tmp.user.expires);<br>&#125;<br></code></pre></td></tr></table></figure><p>在这个例子中，user 属性会满足普通用户与 VIP 用户两种类型，这里 vip 属性的类型基于布尔字面量类型声明。我们在实际使用时可以通过判断此属性为 true ，确保接下来的类型推导都会将其类型收窄到 VIP 用户的类型（即联合类型的第一个分支）。这一能力的使用涉及类型守卫与类型控制流分析，我们会在后面的章节详细来说。</p><p>我们也可以通过类型别名来复用一组字面量联合类型：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-keyword">type</span> Code = <span class="hljs-number">10000</span> | <span class="hljs-number">10001</span> | <span class="hljs-number">50000</span>;<br><br><span class="hljs-keyword">type</span> Status = <span class="hljs-string">&quot;success&quot;</span> | <span class="hljs-string">&quot;failure&quot;</span>;<br></code></pre></td></tr></table></figure><p>除了原始类型的字面量类型以外，对象类型也有着对应的字面量类型。</p><h3 id="对象字面量类型"><a href="#对象字面量类型" class="headerlink" title="对象字面量类型"></a>对象字面量类型</h3><p>类似的，对象字面量类型就是一个对象类型的值。当然，这也就意味着这个对象的值全都为字面量值：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-keyword">interface</span> Tmp &#123;<br>  <span class="hljs-attr">obj</span>: &#123;<br>    <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;linbudu&quot;</span>;<br>    age: <span class="hljs-number">18</span>;<br>  &#125;;<br>&#125;<br><br><span class="hljs-keyword">const</span> tmp: Tmp = &#123;<br>  <span class="hljs-attr">obj</span>: &#123;<br>    <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;linbudu&quot;</span>,<br>    <span class="hljs-attr">age</span>: <span class="hljs-number">18</span>,<br>  &#125;,<br>&#125;;<br></code></pre></td></tr></table></figure><p>如果要实现一个对象字面量类型，意味着完全的实现这个类型每一个属性的每一个值。对象字面量类型在实际开发中的使用较少，我们只需要了解。</p><p>总的来说，在需要更精确类型的情况下，我们可以使用字面量类型加上联合类型的方式，将类型从 string 这种宽泛的原始类型直接收窄到 <code>&quot;resolved&quot; | &quot;pending&quot; | &quot;rejected&quot;</code> 这种精确的字面量类型集合。</p><p>需要注意的是，<strong>无论是原始类型还是对象类型的字面量类型，它们的本质都是类型而不是值</strong>。它们在编译时同样会被擦除，同时也是被存储在内存中的类型空间而非值空间。</p><p>如果说字面量类型是对原始类型的进一步扩展（对象字面量类型的使用较少），那么枚举在某些方面则可以理解为是对对象类型的扩展。</p><h2 id="枚举"><a href="#枚举" class="headerlink" title="枚举"></a>枚举</h2><p>枚举并不是 JavaScript 中原生的概念，在其他语言中它都是老朋友了（Java、C#、Swift 等）。目前也已经存在给 JavaScript（ECMAScript）引入枚举支持的 <a href="https://link.juejin.cn/?target=https://github.com/rbuckton/proposal-enum">proposal-enum</a> 提案，但还未被提交给 TC39 ，仍处于 Stage 0 阶段。</p><p>如果要和 JavaScript 中现有的概念对比，我想最贴切的可能就是你曾经写过的 constants 文件了：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> &#123;<br>  <span class="hljs-attr">Home_Page_Url</span>: <span class="hljs-string">&quot;url1&quot;</span>,<br>  <span class="hljs-attr">Setting_Page_Url</span>: <span class="hljs-string">&quot;url2&quot;</span>,<br>  <span class="hljs-attr">Share_Page_Url</span>: <span class="hljs-string">&quot;url3&quot;</span>,<br>&#125;;<br><br><span class="hljs-comment">// 或是这样：</span><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">const</span> PageUrl = &#123;<br>  <span class="hljs-attr">Home_Page_Url</span>: <span class="hljs-string">&quot;url1&quot;</span>,<br>  <span class="hljs-attr">Setting_Page_Url</span>: <span class="hljs-string">&quot;url2&quot;</span>,<br>  <span class="hljs-attr">Share_Page_Url</span>: <span class="hljs-string">&quot;url3&quot;</span>,<br>&#125;;<br></code></pre></td></tr></table></figure><p>如果把这段代码替换为枚举，会是如下的形式：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-built_in">enum</span> PageUrl &#123;<br>  Home_Page_Url = <span class="hljs-string">&quot;url1&quot;</span>,<br>  Setting_Page_Url = <span class="hljs-string">&quot;url2&quot;</span>,<br>  Share_Page_Url = <span class="hljs-string">&quot;url3&quot;</span>,<br>&#125;<br><br><span class="hljs-keyword">const</span> home = PageUrl.Home_Page_Url;<br></code></pre></td></tr></table></figure><p>这么做的好处非常明显。首先，你拥有了更好的类型提示。其次，这些常量被真正地<strong>约束在一个命名空间</strong>下（上面的对象声明总是差点意思）。如果你没有声明枚举的值，它会默认使用数字枚举，并且从 0 开始，以 1 递增：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-built_in">enum</span> Items &#123;<br>  Foo,<br>  Bar,<br>  Baz,<br>&#125;<br></code></pre></td></tr></table></figure><p>在这个例子中，<code>Items.Foo</code> , <code>Items.Bar</code> , <code>Items.Baz</code>的值依次是 0，1，2 。</p><p>如果你只为某一个成员指定了枚举值，那么之前未赋值成员仍然会使用从 0 递增的方式，之后的成员则会开始从枚举值递增。</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-built_in">enum</span> Items &#123;<br>  <span class="hljs-comment">// 0</span><br>  Foo,<br>  Bar = <span class="hljs-number">599</span>,<br>  <span class="hljs-comment">// 600</span><br>  Baz,<br>&#125;<br></code></pre></td></tr></table></figure><p>在数字型枚举中，你可以使用延迟求值的枚举值，比如函数：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-keyword">const</span> returnNum = <span class="hljs-function">() =&gt;</span> <span class="hljs-number">100</span> + <span class="hljs-number">499</span>;<br><br><span class="hljs-built_in">enum</span> Items &#123;<br>  Foo = returnNum(),<br>  Bar = <span class="hljs-number">599</span>,<br>  Baz,<br>&#125;<br></code></pre></td></tr></table></figure><p>但要注意，延迟求值的枚举值是有条件的。<strong>如果你使用了延迟求值，那么没有使用延迟求值的枚举成员必须放在使用常量枚举值声明的成员之后（如上例），或者放在第一位</strong>：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-built_in">enum</span> Items &#123;<br>  Baz,<br>  Foo = returnNum(),<br>  Bar = <span class="hljs-number">599</span>,<br>&#125;<br></code></pre></td></tr></table></figure><p>TypeScript 中也可以同时使用字符串枚举值和数字枚举值：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-built_in">enum</span> Mixed &#123;<br>  Num = <span class="hljs-number">599</span>,<br>  Str = <span class="hljs-string">&quot;linbudu&quot;</span>,<br>&#125;<br></code></pre></td></tr></table></figure><p>枚举和对象的重要差异在于，<strong>对象是单向映射的</strong>，我们只能从键映射到键值。而<strong>枚举是双向映射的</strong>，即你可以从枚举成员映射到枚举值，也可以从枚举值映射到枚举成员：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-built_in">enum</span> Items &#123;<br>  Foo,<br>  Bar,<br>  Baz,<br>&#125;<br><br><span class="hljs-keyword">const</span> fooValue = Items.Foo; <span class="hljs-comment">// 0</span><br><span class="hljs-keyword">const</span> fooKey = Items[<span class="hljs-number">0</span>]; <span class="hljs-comment">// &quot;Foo&quot;</span><br></code></pre></td></tr></table></figure><p>要了解这一现象的本质，我们需要来看一看枚举的编译产物，如以上的枚举会被编译为以下 JavaScript 代码：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-meta">&quot;use strict&quot;</span>;<br><span class="hljs-keyword">var</span> Items;<br>(<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">Items</span>) </span>&#123;<br>  Items[(Items[<span class="hljs-string">&quot;Foo&quot;</span>] = <span class="hljs-number">0</span>)] = <span class="hljs-string">&quot;Foo&quot;</span>;<br>  Items[(Items[<span class="hljs-string">&quot;Bar&quot;</span>] = <span class="hljs-number">1</span>)] = <span class="hljs-string">&quot;Bar&quot;</span>;<br>  Items[(Items[<span class="hljs-string">&quot;Baz&quot;</span>] = <span class="hljs-number">2</span>)] = <span class="hljs-string">&quot;Baz&quot;</span>;<br>&#125;)(Items || (Items = &#123;&#125;));<br></code></pre></td></tr></table></figure><p><code>obj[k] = v</code> 的返回值即是 v，因此这里的 <code>obj[obj[k] = v] = k</code> 本质上就是进行了 <code>obj[k] = v</code> 与 <code>obj[v] = k</code> 这样两次赋值。</p><p>但需要注意的是，仅有值为数字的枚举成员才能够进行这样的双向枚举，<strong>字符串枚举成员仍然只会进行单次映射</strong>：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-built_in">enum</span> Items &#123;<br>  Foo,<br>  Bar = <span class="hljs-string">&quot;BarValue&quot;</span>,<br>  Baz = <span class="hljs-string">&quot;BazValue&quot;</span>,<br>&#125;<br><br><span class="hljs-comment">// 编译结果，只会进行 键-值 的单向映射</span><br>(<span class="hljs-string">&quot;use strict&quot;</span>);<br><span class="hljs-keyword">var</span> Items;<br>(<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">Items</span>) </span>&#123;<br>  Items[(Items[<span class="hljs-string">&quot;Foo&quot;</span>] = <span class="hljs-number">0</span>)] = <span class="hljs-string">&quot;Foo&quot;</span>;<br>  Items[<span class="hljs-string">&quot;Bar&quot;</span>] = <span class="hljs-string">&quot;BarValue&quot;</span>;<br>  Items[<span class="hljs-string">&quot;Baz&quot;</span>] = <span class="hljs-string">&quot;BazValue&quot;</span>;<br>&#125;)(Items || (Items = &#123;&#125;));<br></code></pre></td></tr></table></figure><p>除了数字枚举与字符串枚举这种分类以外，其实还存在着普通枚举与常量枚举这种分类方式。</p><h3 id="常量枚举"><a href="#常量枚举" class="headerlink" title="常量枚举"></a>常量枚举</h3><p>常量枚举和枚举相似，只是其声明多了一个 const：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-keyword">const</span> <span class="hljs-built_in">enum</span> Items &#123;<br>  Foo,<br>  Bar,<br>  Baz,<br>&#125;<br><br><span class="hljs-keyword">const</span> fooValue = Items.Foo; <span class="hljs-comment">// 0</span><br></code></pre></td></tr></table></figure><p>它和普通枚举的差异主要在访问性与编译产物。对于常量枚举，你<strong>只能通过枚举成员访问枚举值</strong>（而不能通过值访问成员）。同时，在编译产物中并不会存在一个额外的辅助对象（如上面的 Items 对象），对枚举成员的访问会被<strong>直接内联替换为枚举的值</strong>。以上的代码会被编译为如下形式：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> fooValue = <span class="hljs-number">0</span>; <span class="hljs-comment">/* Foo */</span> <span class="hljs-comment">// 0</span><br></code></pre></td></tr></table></figure><blockquote><p>实际上，常量枚举的表现、编译产物还受到配置项 <code>--isolatedModules</code> 以及 <code>--preserveConstEnums</code> 等的影响，我们会在后面的 TSConfig 详解中了解更多。</p></blockquote><h2 id="总结与预告"><a href="#总结与预告" class="headerlink" title="总结与预告"></a>总结与预告</h2><p>在这一节中，我们了解了字面量类型和枚举的使用，包括字面量类型的分类，与联合类型的结合使用，以及枚举与其编译产物等等。</p><p>对于字面量类型，我们可以使用它来提供更精确的类型标注。比如，你可以将如用户类型与请求状态码这一类属性的类型，都使用<strong>字面量类型＋联合类型</strong>的形式改写，获得更详细的类型信息与更严格的类型约束。</p><p>而对于枚举，我们可以使用它来替换掉之前使用对象进行常量收敛的代码，而如果你希望减少编译后的代码，可以进一步地使用在编译后会被完全抹除的常量枚举。</p><h2 id="扩展阅读"><a href="#扩展阅读" class="headerlink" title="扩展阅读"></a>扩展阅读</h2><h3 id="类型控制流分析中的字面量类型"><a href="#类型控制流分析中的字面量类型" class="headerlink" title="类型控制流分析中的字面量类型"></a>类型控制流分析中的字面量类型</h3><p>除了手动声明字面量类型以外，实际上 TypeScript 也会在某些情况下将变量类型推导为字面量类型，看这个例子：</p><p><img src="https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/eecde2e8de214264a42dd74da8c8e17b~tplv-k3u1fbpfcp-zoom-in-crop-mark:3024:0:0:0.awebp" alt="image.png"></p><p><img src="https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/6931f3897d674a8d9803164e5f4d7f2f~tplv-k3u1fbpfcp-zoom-in-crop-mark:3024:0:0:0.awebp" alt="image.png"></p><p>你会发现，使用 const 声明的变量，其类型会从值推导出最精确的字面量类型。而对象类型则只会推导至符合其属性结构的接口，不会使用字面量类型：</p><p><img src="https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/742ad435155e41e293abedf0fe8d053e~tplv-k3u1fbpfcp-zoom-in-crop-mark:3024:0:0:0.awebp" alt="image.png"></p><p>要解答这个现象，需要你回想 let 和 const 声明的意义。我们知道，使用 let 声明的变量是可以再次赋值的，在 TypeScript 中要求赋值类型始终与原类型一致（如果声明了的话）。因此对于 let 声明，<strong>只需要推导至这个值从属的类型即可</strong>。而 const 声明的原始类型变量将不再可变，因此类型可以直接一步到位收窄到最精确的字面量类型，但对象类型变量仍可变（但同样会要求其属性值类型保持一致）。</p>]]></content>
      
      
      
        <tags>
            
            <tag> ts </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>103、typescript理解原始类型和对象类型(一)</title>
      <link href="/2022/12/06/103-ts/"/>
      <url>/2022/12/06/103-ts/</url>
      
        <content type="html"><![CDATA[<span id="more"></span><h2 id="原始类型的类型标注"><a href="#原始类型的类型标注" class="headerlink" title="原始类型的类型标注"></a>原始类型的类型标注</h2><p><a href="https://link.juejin.cn/?target=https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Data_structures%23%E5%8E%9F%E5%A7%8B%E5%80%BC_primitive_values">JavaScript 的内置原始类型</a>,除了最常见的 number / string / boolean / null / undefined， ECMAScript 2015（ES6）、2020 (ES11) 又分别引入了 2 个新的原始类型：symbol 与 bigint 。在 TypeScript 中它们都有对应的类型注解：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-keyword">const</span> name: <span class="hljs-built_in">string</span> = <span class="hljs-string">&quot;linbudu&quot;</span>;<br><span class="hljs-keyword">const</span> age: <span class="hljs-built_in">number</span> = <span class="hljs-number">24</span>;<br><span class="hljs-keyword">const</span> male: <span class="hljs-built_in">boolean</span> = <span class="hljs-literal">false</span>;<br><span class="hljs-keyword">const</span> undef: <span class="hljs-literal">undefined</span> = <span class="hljs-literal">undefined</span>;<br><span class="hljs-keyword">const</span> nul: <span class="hljs-literal">null</span> = <span class="hljs-literal">null</span>;<br><span class="hljs-keyword">const</span> obj: <span class="hljs-built_in">object</span> = &#123; name, age, male &#125;;<br><span class="hljs-keyword">const</span> bigintVar1: bigint = <span class="hljs-number">9007199254740991n</span>;<br><span class="hljs-keyword">const</span> bigintVar2: bigint = <span class="hljs-built_in">BigInt</span>(<span class="hljs-number">9007199254740991</span>);<br><span class="hljs-keyword">const</span> symbolVar: symbol = <span class="hljs-built_in">Symbol</span>(<span class="hljs-string">&quot;unique&quot;</span>);<br></code></pre></td></tr></table></figure><p>其中，除了 null 与 undefined 以外，余下的类型基本上可以完全对应到 JavaScript 中的数据类型概念，因此这里我们只对 null 与 undefined 展开介绍。</p><h3 id="null-与-undefined"><a href="#null-与-undefined" class="headerlink" title="null 与 undefined"></a>null 与 undefined</h3><p>在 JavaScript 中，null 与 undefined 分别表示“<strong>这里有值，但是个空值</strong>”和“<strong>这里没有值</strong>”。而在 TypeScript 中，null 与 undefined 类型都是<strong>有具体意义的类型</strong>。也就是说，它们作为类型时，表示的是一个有意义的具体类型值。这两者在没有开启 <code>strictNullChecks</code> 检查的情况下，会<strong>被视作其他类型的子类型</strong>，比如 string 类型会被认为包含了 null 与 undefined 类型：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-keyword">const</span> tmp1: <span class="hljs-literal">null</span> = <span class="hljs-literal">null</span>;<br><span class="hljs-keyword">const</span> tmp2: <span class="hljs-literal">undefined</span> = <span class="hljs-literal">undefined</span>;<br><br><span class="hljs-keyword">const</span> tmp3: <span class="hljs-built_in">string</span> = <span class="hljs-literal">null</span>; <span class="hljs-comment">// 仅在关闭 strictNullChecks 时成立，下同</span><br><span class="hljs-keyword">const</span> tmp4: <span class="hljs-built_in">string</span> = <span class="hljs-literal">undefined</span>;<br></code></pre></td></tr></table></figure><p>除了上面介绍的原始类型以及 null、undefined 类型以外，在 TypeScript 中还存在着一个特殊的类型：void，它和 JavaScript 中的 void 同样不是一回事，我们接着往下看。</p><h3 id="void"><a href="#void" class="headerlink" title="void"></a>void</h3><p>你是否看到过以下的 JavaScript 代码呢？</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs typescript">&lt;a href=<span class="hljs-string">&quot;javascript:void(0)&quot;</span>&gt;清除缓存&lt;/a&gt;<br></code></pre></td></tr></table></figure><p>这里的 <code>void(0)</code> 等价于 <code>void 0</code>，即 <code>void expression</code> 的语法。void 操作符会执行后面跟着的表达式并返回一个 undefined，如你可以使用它来执行一个立即执行函数（IIFE）：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-built_in">void</span> (<span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">iife</span>(<span class="hljs-params"></span>) </span>&#123;<br>  <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;Invoked!&quot;</span>);<br>&#125;)();<br></code></pre></td></tr></table></figure><p>能这么做是因为，void 操作符强制<strong>将后面的函数声明转化为了表达式</strong>，因此整体其实相当于：<code>void((function iife()&#123;&#125;)())</code>。</p><p>事实上，TypeScript 的原始类型标注中也有 void，但与 JavaScript 中不同的是，这里的 void 用于描述一个内部没有 return 语句，或者没有显式 return 一个值的函数的返回值，如：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">func1</span>(<span class="hljs-params"></span>) </span>&#123;&#125;<br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">func2</span>(<span class="hljs-params"></span>) </span>&#123;<br>  <span class="hljs-keyword">return</span>;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">func3</span>(<span class="hljs-params"></span>) </span>&#123;<br>  <span class="hljs-keyword">return</span> <span class="hljs-literal">undefined</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>在这里，func1 与 func2 的返回值类型都会被隐式推导为 void，只有显式返回了 undefined 值的 func3 其返回值类型才被推导为了 undefined。但在实际的代码执行中，func1 与 func2 的返回值均是 undefined。</p><blockquote><p>虽然 func3 的返回值类型会被推导为 undefined，但是你仍然可以使用 void 类型进行标注，因为在类型层面 func1、func2、func3 都表示“没有返回一个有意义的值”。</p></blockquote><p>这里可能有点绕，你可以认为 void 表示一个空类型，而 null 与 undefined 都是一个具有意义的实际类型（注意与它们在 JavaScript 中的意义区分）。而 undefined 能够被赋值给 void 类型的变量，就像在 JavaScript 中一个没有返回值的函数会默认返回一个 undefined 。null 类型也可以，但需要在关闭 <code>strictNullChecks</code> 配置的情况下才能成立。</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-keyword">const</span> voidVar1: <span class="hljs-built_in">void</span> = <span class="hljs-literal">undefined</span>;<br><br><span class="hljs-keyword">const</span> voidVar2: <span class="hljs-built_in">void</span> = <span class="hljs-literal">null</span>; <span class="hljs-comment">// 需要关闭 strictNullChecks</span><br></code></pre></td></tr></table></figure><p>到这里，我们了解了 JavaScript 中原始数据类型到 TypeScript 原始类型概念地映射，你应当能感觉到 TypeScript 对 JavaScript 开发者的友好，大部分概念都能比较自然地过渡，下面的数组与对象的类型标注同样如此。</p><h2 id="数组的类型标注"><a href="#数组的类型标注" class="headerlink" title="数组的类型标注"></a>数组的类型标注</h2><p>数组同样是我们最常用的类型之一，在 TypeScript 中有两种方式来声明一个数组类型：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-keyword">const</span> arr1: <span class="hljs-built_in">string</span>[] = [];<br><br><span class="hljs-keyword">const</span> arr2: <span class="hljs-built_in">Array</span>&lt;<span class="hljs-built_in">string</span>&gt; = [];<br></code></pre></td></tr></table></figure><p>这两种方式是完全等价的，但其实更多是以前者为主，如果你将鼠标悬浮在 <code>arr2</code> 上，会发现它显示的类型签名是 <code>string[]</code>。数组是我们在日常开发大量使用的数据结构，但在某些情况下，使用 <strong>元组（Tuple）</strong> 来代替数组要更加妥当，比如一个数组中只存放固定长度的变量，但我们进行了超出长度地访问：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-keyword">const</span> arr3: <span class="hljs-built_in">string</span>[] = [<span class="hljs-string">&quot;lin&quot;</span>, <span class="hljs-string">&quot;bu&quot;</span>, <span class="hljs-string">&quot;du&quot;</span>];<br><br><span class="hljs-built_in">console</span>.log(arr3[<span class="hljs-number">599</span>]);<br></code></pre></td></tr></table></figure><p>这种情况肯定是不符合预期的，因为我们能确定这个数组中只有三个成员，并希望在越界访问时给出类型报错。这时我们可以使用元组类型进行类型标注：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-keyword">const</span> arr4: [<span class="hljs-built_in">string</span>, <span class="hljs-built_in">string</span>, <span class="hljs-built_in">string</span>] = [<span class="hljs-string">&quot;lin&quot;</span>, <span class="hljs-string">&quot;bu&quot;</span>, <span class="hljs-string">&quot;du&quot;</span>];<br><br><span class="hljs-built_in">console</span>.log(arr4[<span class="hljs-number">599</span>]);<br></code></pre></td></tr></table></figure><p>此时将会产生一个类型错误：**<em>长度为“3”的元组类型“[string, string, string]”在索引“599“处没有元素</em>**。除了同类型的元素以外，元组内部也可以声明多个与其位置强绑定的，不同类型的元素：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-keyword">const</span> arr5: [<span class="hljs-built_in">string</span>, <span class="hljs-built_in">number</span>, <span class="hljs-built_in">boolean</span>] = [<span class="hljs-string">&quot;linbudu&quot;</span>, <span class="hljs-number">599</span>, <span class="hljs-literal">true</span>];<br></code></pre></td></tr></table></figure><p>在这种情况下，对数组合法边界内的索引访问（即 0、1、2）将精确地获得对应位置上的类型。同时元组也支持了在某一个位置上的可选成员：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-keyword">const</span> arr6: [<span class="hljs-built_in">string</span>, <span class="hljs-built_in">number</span>?, <span class="hljs-built_in">boolean</span>?] = [<span class="hljs-string">&quot;linbudu&quot;</span>];<br><span class="hljs-comment">// 下面这么写也可以</span><br><span class="hljs-comment">// const arr6: [string, number?, boolean?] = [&#x27;linbudu&#x27;, , ,];</span><br></code></pre></td></tr></table></figure><p>对于标记为可选的成员，在 <code>--strictNullCheckes</code> 配置下会被视为一个 <code>string | undefined</code> 的类型。此时元组的长度属性也会发生变化，比如上面的元组 arr6 ，其长度的类型为 <code>1 | 2 | 3</code>：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-keyword">type</span> TupleLength = <span class="hljs-keyword">typeof</span> arr6.length; <span class="hljs-comment">// 1 | 2 | 3</span><br></code></pre></td></tr></table></figure><p>也就是说，这个元组的长度可能为 1、2、3。</p><blockquote><p>关于类型别名（type）、类型查询（typeof）以及联合类型，我们会在后面讲到，这里你只需要简单了解即可。</p></blockquote><p>你可能会觉得，元组的可读性实际上并不好。比如对于 <code>[string, number, boolean]</code>来说，你并不能直接知道这三个元素都代表什么，还不如使用对象的形式。而在 TypeScript 4.0 中，有了具名元组（<a href="https://link.juejin.cn/?target=https://github.com/Microsoft/TypeScript/issues/28259">Labeled Tuple Elements</a>）的支持，使得我们可以为元组中的元素打上类似属性的标记：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-keyword">const</span> arr7: [name: <span class="hljs-built_in">string</span>, <span class="hljs-attr">age</span>: <span class="hljs-built_in">number</span>, <span class="hljs-attr">male</span>: <span class="hljs-built_in">boolean</span>] = [<span class="hljs-string">&quot;linbudu&quot;</span>, <span class="hljs-number">599</span>, <span class="hljs-literal">true</span>];<br></code></pre></td></tr></table></figure><p>有没有很酷？考虑到某些拼装对象太麻烦，我们完全可以使用具名元组来做简单替换。具名元组可选元素的修饰符将成为以下形式：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-keyword">const</span> arr7: [name: <span class="hljs-built_in">string</span>, <span class="hljs-attr">age</span>: <span class="hljs-built_in">number</span>, male?: <span class="hljs-built_in">boolean</span>] = [<br>  <span class="hljs-string">&quot;linbudu&quot;</span>,<br>  <span class="hljs-number">599</span>,<br>  <span class="hljs-literal">true</span>,<br>];<br></code></pre></td></tr></table></figure><p>实际上除了显式地越界访问，还可能存在隐式地越界访问，如通过解构赋值的形式：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-keyword">const</span> arr1: <span class="hljs-built_in">string</span>[] = [];<br><br><span class="hljs-keyword">const</span> [ele1, ele2, ...rest] = arr1;<br></code></pre></td></tr></table></figure><p>对于数组，此时仍然无法检查出是否存在隐式访问，因为类型层面并不知道它到底有多少个元素。但对于元组，隐式的越界访问也能够被揪出来给一个警告：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-keyword">const</span> arr5: [<span class="hljs-built_in">string</span>, <span class="hljs-built_in">number</span>, <span class="hljs-built_in">boolean</span>] = [<span class="hljs-string">&quot;linbudu&quot;</span>, <span class="hljs-number">599</span>, <span class="hljs-literal">true</span>];<br><br><span class="hljs-comment">// 长度为 &quot;3&quot; 的元组类型 &quot;[string, number, boolean]&quot; 在索引 &quot;3&quot; 处没有元素。</span><br><span class="hljs-keyword">const</span> [name, age, male, other] = arr5;<br></code></pre></td></tr></table></figure><p>JavaScript 的开发者对元组 Tuple 的概念可能比较陌生，毕竟在 JavaScript 中我们很少声明定长的数组。但使用元组确实能帮助我们进一步提升<strong>数组结构的严谨性</strong>，包括基于位置的类型标注、避免出现越界访问等等。除了通过数组类型提升数组结构的严谨性，TypeScript 中的对象类型也能帮助我们提升对象结构的严谨性。接下来我们就一起来看看。</p><h2 id="对象的类型标注"><a href="#对象的类型标注" class="headerlink" title="对象的类型标注"></a>对象的类型标注</h2><p>作为 JavaScript 中使用最频繁的数据结构，对象的类型标注是我们本节要重点关注的部分。接下来我们会学习如何在 TypeScript 中声明对象、修饰对象属性，以及了解可能存在的使用误区。这些内容能够帮助你建立起对 TypeScript 中立体类型（我们可以理解为前面的原始类型是“<strong>平面类型</strong>”）的了解，正式入门 TypeScript 。</p><p>类似于数组类型，在 TypeScript 中我们也需要特殊的类型标注来描述对象类型，即 interface ，你可以理解为它代表了这个对象对外提供的接口结构。</p><p>首先我们使用 interface 声明一个结构，然后使用这个结构来作为一个对象的类型标注即可：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-keyword">interface</span> IDescription &#123;<br>  <span class="hljs-attr">name</span>: <span class="hljs-built_in">string</span>;<br>  age: <span class="hljs-built_in">number</span>;<br>  male: <span class="hljs-built_in">boolean</span>;<br>&#125;<br><br><span class="hljs-keyword">const</span> obj1: IDescription = &#123;<br>  <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;linbudu&quot;</span>,<br>  <span class="hljs-attr">age</span>: <span class="hljs-number">599</span>,<br>  <span class="hljs-attr">male</span>: <span class="hljs-literal">true</span>,<br>&#125;;<br></code></pre></td></tr></table></figure><p>这里的“描述”指：</p><ul><li>每一个属性的值必须<strong>一一对应</strong>到接口的属性类型</li><li>不能有多的属性，也不能有少的属性，包括直接在对象内部声明，或是 <code>obj1.other = &#39;xxx&#39;</code> 这样属性访问赋值的形式</li></ul><p>除了声明属性以及属性的类型以外，我们还可以对属性进行修饰，常见的修饰包括<strong>可选（Optional）</strong> 与 <strong>只读（Readonly）</strong> 这两种。</p><h3 id="修饰接口属性"><a href="#修饰接口属性" class="headerlink" title="修饰接口属性"></a>修饰接口属性</h3><p>类似于上面的元组可选，在接口结构中同样通过 <code>?</code> 来标记一个属性为可选：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-keyword">interface</span> IDescription &#123;<br>  <span class="hljs-attr">name</span>: <span class="hljs-built_in">string</span>;<br>  age: <span class="hljs-built_in">number</span>;<br>  male?: <span class="hljs-built_in">boolean</span>;<br>  func?: <span class="hljs-built_in">Function</span>;<br>&#125;<br><br><span class="hljs-keyword">const</span> obj2: IDescription = &#123;<br>  <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;linbudu&quot;</span>,<br>  <span class="hljs-attr">age</span>: <span class="hljs-number">599</span>,<br>  <span class="hljs-attr">male</span>: <span class="hljs-literal">true</span>,<br>  <span class="hljs-comment">// 无需实现 func 也是合法的</span><br>&#125;;<br></code></pre></td></tr></table></figure><p>在这种情况下，即使你在 obj2 中定义了 male 属性，但当你访问 <code>obj2.male</code> 时，它的类型仍然会是 <code>boolean | undefined</code>，因为毕竟这是我们自己定义的类型嘛。</p><p>假设新增一个可选的函数类型属性，然后进行调用：<code>obj2.func()</code> ，此时将会产生一个类型报错：**<em>不能调用可能是未定义的方法</em>**。但可选属性标记不会影响你对这个属性进行赋值，如：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs typescript">obj2.male = <span class="hljs-literal">false</span>;<br>obj2.func = <span class="hljs-function">() =&gt;</span> &#123;&#125;;<br></code></pre></td></tr></table></figure><p>即使你对可选属性进行了赋值，TypeScript 仍然会使用<strong>接口的描述为准</strong>进行类型检查，你可以使用类型断言、非空断言或可选链解决（别急，我们在后面会讲到）。</p><p>除了标记一个属性为可选以外，你还可以标记这个属性为只读：<code>readonly</code>。很多同学对这一关键字比较陌生，因为以往 JavaScript 中并没有这一类概念，它的作用是<strong>防止对象的属性被再次赋值</strong>。</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-keyword">interface</span> IDescription &#123;<br>  <span class="hljs-keyword">readonly</span> name: <span class="hljs-built_in">string</span>;<br>  age: <span class="hljs-built_in">number</span>;<br>&#125;<br><br><span class="hljs-keyword">const</span> obj3: IDescription = &#123;<br>  <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;linbudu&quot;</span>,<br>  <span class="hljs-attr">age</span>: <span class="hljs-number">599</span>,<br>&#125;;<br><br><span class="hljs-comment">// 无法分配到 &quot;name&quot; ，因为它是只读属性</span><br>obj3.name = <span class="hljs-string">&quot;林不渡&quot;</span>;<br></code></pre></td></tr></table></figure><p>其实在数组与元组层面也有着只读的修饰，但与对象类型有着两处不同。</p><ul><li>你只能将整个数组/元组标记为只读，而不能像对象那样标记某个属性为只读。</li><li>一旦被标记为只读，那这个只读数组/元组的类型上，将不再具有 push、pop 等方法（即会修改原数组的方法），因此报错信息也将是<strong>类型 xxx 上不存在属性“push”这种</strong>。这一实现的本质是<strong>只读数组与只读元组的类型实际上变成了 ReadonlyArray，而不再是 Array。</strong></li></ul><h3 id="type-与-interface"><a href="#type-与-interface" class="headerlink" title="type 与 interface"></a>type 与 interface</h3><p>我也知道，很多同学更喜欢用 type（Type Alias，类型别名）来代替接口结构描述对象，而我更推荐的方式是，interface 用来描述<strong>对象、类的结构</strong>，而类型别名用来<strong>将一个函数签名、一组联合类型、一个工具类型等等抽离成一个完整独立的类型</strong>。但大部分场景下接口结构都可以被类型别名所取代，因此，只要你觉得统一使用类型别名让你觉得更整齐，也没什么问题。</p><h3 id="object、Object-以及"><a href="#object、Object-以及" class="headerlink" title="object、Object 以及 { }"></a>object、Object 以及 { }</h3><p><code>object</code>、<code>Object</code> 以及<code>&#123;&#125;</code>（一个空对象）这三者的使用可能也会让部分同学感到困惑，所以我也专门解释下。</p><p>首先是 Object 的使用。被 JavaScript 原型链折磨过的同学应该记得，原型链的顶端是 Object 以及 Function，这也就意味着所有的原始类型与对象类型最终都指向 Object，在 TypeScript 中就表现为 Object 包含了所有的类型：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-comment">// 对于 undefined、null、void 0 ，需要关闭 strictNullChecks</span><br><span class="hljs-keyword">const</span> tmp1: <span class="hljs-built_in">Object</span> = <span class="hljs-literal">undefined</span>;<br><span class="hljs-keyword">const</span> tmp2: <span class="hljs-built_in">Object</span> = <span class="hljs-literal">null</span>;<br><span class="hljs-keyword">const</span> tmp3: <span class="hljs-built_in">Object</span> = <span class="hljs-built_in">void</span> <span class="hljs-number">0</span>;<br><br><span class="hljs-keyword">const</span> tmp4: <span class="hljs-built_in">Object</span> = <span class="hljs-string">&quot;linbudu&quot;</span>;<br><span class="hljs-keyword">const</span> tmp5: <span class="hljs-built_in">Object</span> = <span class="hljs-number">599</span>;<br><span class="hljs-keyword">const</span> tmp6: <span class="hljs-built_in">Object</span> = &#123; <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;linbudu&quot;</span> &#125;;<br><span class="hljs-keyword">const</span> tmp7: <span class="hljs-built_in">Object</span> = <span class="hljs-function">() =&gt;</span> &#123;&#125;;<br><span class="hljs-keyword">const</span> tmp8: <span class="hljs-built_in">Object</span> = [];<br></code></pre></td></tr></table></figure><p>和 Object 类似的还有 Boolean、Number、String、Symbol，这几个<strong>装箱类型（Boxed Types）</strong> 同样包含了一些超出预期的类型。以 String 为例，它同样包括 undefined、null、void，以及代表的 <strong>拆箱类型（Unboxed Types）</strong> string，但并不包括其他装箱类型对应的拆箱类型，如 boolean 与 基本对象类型，我们看以下的代码：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-keyword">const</span> tmp9: <span class="hljs-built_in">String</span> = <span class="hljs-literal">undefined</span>;<br><span class="hljs-keyword">const</span> tmp10: <span class="hljs-built_in">String</span> = <span class="hljs-literal">null</span>;<br><span class="hljs-keyword">const</span> tmp11: <span class="hljs-built_in">String</span> = <span class="hljs-built_in">void</span> <span class="hljs-number">0</span>;<br><span class="hljs-keyword">const</span> tmp12: <span class="hljs-built_in">String</span> = <span class="hljs-string">&quot;linbudu&quot;</span>;<br><br><span class="hljs-comment">// 以下不成立，因为不是字符串类型的拆箱类型</span><br><span class="hljs-keyword">const</span> tmp13: <span class="hljs-built_in">String</span> = <span class="hljs-number">599</span>; <span class="hljs-comment">// X</span><br><span class="hljs-keyword">const</span> tmp14: <span class="hljs-built_in">String</span> = &#123; <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;linbudu&quot;</span> &#125;; <span class="hljs-comment">// X</span><br><span class="hljs-keyword">const</span> tmp15: <span class="hljs-built_in">String</span> = <span class="hljs-function">() =&gt;</span> &#123;&#125;; <span class="hljs-comment">// X</span><br><span class="hljs-keyword">const</span> tmp16: <span class="hljs-built_in">String</span> = []; <span class="hljs-comment">// X</span><br></code></pre></td></tr></table></figure><p><strong>在任何情况下，你都不应该使用这些装箱类型。</strong></p><p>object 的引入就是为了解决对 Object 类型的错误使用，它代表<strong>所有非原始类型的类型，即数组、对象与函数类型这些</strong>：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-keyword">const</span> tmp17: <span class="hljs-built_in">object</span> = <span class="hljs-literal">undefined</span>;<br><span class="hljs-keyword">const</span> tmp18: <span class="hljs-built_in">object</span> = <span class="hljs-literal">null</span>;<br><span class="hljs-keyword">const</span> tmp19: <span class="hljs-built_in">object</span> = <span class="hljs-built_in">void</span> <span class="hljs-number">0</span>;<br><br><span class="hljs-keyword">const</span> tmp20: <span class="hljs-built_in">object</span> = <span class="hljs-string">&quot;linbudu&quot;</span>; <span class="hljs-comment">// X 不成立，值为原始类型</span><br><span class="hljs-keyword">const</span> tmp21: <span class="hljs-built_in">object</span> = <span class="hljs-number">599</span>; <span class="hljs-comment">// X 不成立，值为原始类型</span><br><br><span class="hljs-keyword">const</span> tmp22: <span class="hljs-built_in">object</span> = &#123; <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;linbudu&quot;</span> &#125;;<br><span class="hljs-keyword">const</span> tmp23: <span class="hljs-built_in">object</span> = <span class="hljs-function">() =&gt;</span> &#123;&#125;;<br><span class="hljs-keyword">const</span> tmp24: <span class="hljs-built_in">object</span> = [];<br></code></pre></td></tr></table></figure><p>最后是<code>&#123;&#125;</code>，一个奇奇怪怪的空对象，如果你了解过字面量类型，可以认为<code>&#123;&#125;</code>就是一个对象字面量类型（对应到字符串字面量类型这样）。否则，你可以认为使用<code>&#123;&#125;</code>作为类型签名就是一个合法的，但<strong>内部无属性定义的空对象</strong>，这类似于 Object（想想 <code>new Object()</code>），它意味着任何非 null / undefined 的值：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-keyword">const</span> tmp25: &#123;&#125; = <span class="hljs-literal">undefined</span>; <span class="hljs-comment">// 仅在关闭 strictNullChecks 时成立，下同</span><br><span class="hljs-keyword">const</span> tmp26: &#123;&#125; = <span class="hljs-literal">null</span>;<br><span class="hljs-keyword">const</span> tmp27: &#123;&#125; = <span class="hljs-built_in">void</span> <span class="hljs-number">0</span>; <span class="hljs-comment">// void 0 等价于 undefined</span><br><br><span class="hljs-keyword">const</span> tmp28: &#123;&#125; = <span class="hljs-string">&quot;linbudu&quot;</span>;<br><span class="hljs-keyword">const</span> tmp29: &#123;&#125; = <span class="hljs-number">599</span>;<br><span class="hljs-keyword">const</span> tmp30: &#123;&#125; = &#123; <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;linbudu&quot;</span> &#125;;<br><span class="hljs-keyword">const</span> tmp31: &#123;&#125; = <span class="hljs-function">() =&gt;</span> &#123;&#125;;<br><span class="hljs-keyword">const</span> tmp32: &#123;&#125; = [];<br></code></pre></td></tr></table></figure><p>虽然能够将其作为变量的类型，但你实际上<strong>无法对这个变量进行任何赋值操作</strong>：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-keyword">const</span> tmp30: &#123;&#125; = &#123; <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;linbudu&quot;</span> &#125;;<br><br>tmp30.age = <span class="hljs-number">18</span>; <span class="hljs-comment">// X 类型“&#123;&#125;”上不存在属性“age”。</span><br></code></pre></td></tr></table></figure><p>这是因为它就是纯洁的像一张白纸一样的空对象，上面没有任何的属性（除了 toString 这种与生俱来的）。在类型层级一节我们还会再次见到它，不过那个时候它已经被称为“万物的起源”了。</p><p>最后，为了更好地区分 <code>Object</code>、<code>object</code> 以及<code>&#123;&#125;</code>这三个具有迷惑性的类型，我们再做下总结：</p><ul><li>在任何时候都<strong>不要，不要，不要使用</strong> Object 以及类似的装箱类型。</li><li>当你不确定某个变量的具体类型，但能确定它不是原始类型，可以使用 object。但我更推荐进一步区分，也就是使用 <code>Record&lt;string, unknown&gt;</code> 或 <code>Record&lt;string, any&gt;</code> 表示对象，<code>unknown[]</code> 或 <code>any[]</code> 表示数组，<code>(...args: any[]) =&gt; any</code>表示函数这样。</li><li>我们同样要避免使用<code>&#123;&#125;</code>。<code>&#123;&#125;</code>意味着任何非 <code>null / undefined</code> 的值，从这个层面上看，使用它和使用 <code>any</code> 一样恶劣。</li></ul><h2 id="总结与预告"><a href="#总结与预告" class="headerlink" title="总结与预告"></a>总结与预告</h2><p>这一节，我们一起学习了 TypeScript 中原始类型、对象类型、数组（元组）的类型标注，以及对数组的只读、对象类型属性的访问性修饰。这里的知识其实可以分为两类：</p><ul><li>与 JavaScript 概念基本一致的部分，如原始类型与数组类型需要重点掌握，但因为思维方式基本没有变化，所以你可以认为你就是在写<strong>更严格一些的 JavaScript</strong>。</li><li>一些全新的概念，比如元组与 readonly 修饰等，这一部分你可能不会很快适应，需要稍微转换一下思维方式。我建议你可以从现在开始，有意识地在日常开发中去多多使用它们。</li></ul><p>另外，对于 readonly 这一修饰符，JavaScript 开发者可能需要一定的时间来理解和习惯，但它在工程层面确实是非常推荐的一种实践，可以使用只读标记来避免数组和对象被错误修改。当然，TypeScript 目前只能够帮助你在编译时做检查，类型信息在编译后都会被擦除，所以 readonly 并不会在实际运行时报错。</p><p>学习完这一小节后，不妨找出你曾经的 JavaScript 项目，试试用本章学到的知识为这些 JavaScript 代码添加一些类型，再把某些场景下的数组换成元组，为部分对象类型的属性添加 readonly，来感受 TypeScript 代码的严格之美。</p><p>在下一节我们要介绍的字面量类型以及枚举，在某些方面其实可以理解为是原始类型与对象类型的进一步延伸，也同样是日常会被重度使用的语法。在完成下一节的学习后，你就可以开始进一步地改造你的 JavaScript 项目，让那些类型变得更精确一些！</p><h2 id="扩展阅读"><a href="#扩展阅读" class="headerlink" title="扩展阅读"></a>扩展阅读</h2><h3 id="unique-symbol"><a href="#unique-symbol" class="headerlink" title="unique symbol"></a>unique symbol</h3><p>Symbol 在 JavaScript 中代表着一个唯一的值类型，它类似于字符串类型，可以作为对象的属性名，并用于避免错误修改 对象 / Class 内部属性的情况。而在 TypeScript 中，symbol 类型并不具有这一特性，一百个具有 symbol 类型的对象，它们的 symbol 类型指的都是 TypeScript 中的同一个类型。为了实现“独一无二”这个特性，TypeScript 中支持了 unique symbol 这一类型声明，它是 symbol 类型的子类型，每一个 unique symbol 类型都是独一无二的。</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-keyword">const</span> uniqueSymbolFoo: unique symbol = <span class="hljs-built_in">Symbol</span>(<span class="hljs-string">&quot;linbudu&quot;</span>);<br><br><span class="hljs-comment">// 类型不兼容</span><br><span class="hljs-keyword">const</span> uniqueSymbolBar: unique symbol = uniqueSymbolFoo;<br></code></pre></td></tr></table></figure><p>在 JavaScript 中，我们可以用 <code>Symbol.for</code> 方法来复用已创建的 Symbol，如 <code>Symbol.for(&quot;linbudu&quot;)</code> 会首先查找全局是否已经有使用 <code>linbudu</code> 作为 key 的 Symbol 注册，如果有，则返回这个 Symbol，否则才会创建新的 Symbol 。</p><p>在 TypeScript 中，如果要引用已创建的 unique symbol 类型，则需要使用类型查询操作符 typeof ：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-keyword">declare</span> <span class="hljs-keyword">const</span> uniqueSymbolFoo: unique symbol;<br><br><span class="hljs-keyword">const</span> uniqueSymbolBaz: <span class="hljs-keyword">typeof</span> uniqueSymbolFoo = uniqueSymbolFoo;<br></code></pre></td></tr></table></figure><blockquote><p>以上代码实际执行时会报错，这是因为 uniqueSymbolFoo 是一个仅存在于类型空间的值，这里只是为了进行示例~</p></blockquote><blockquote><p>这里的 declare、typeof 等使用，都会在后面有详细地讲解。同时 unique symbol 在日常开发的使用非常少见，这里做了解就好~</p></blockquote>]]></content>
      
      
      
        <tags>
            
            <tag> ts </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>102、项目部署通用方案</title>
      <link href="/2022/12/03/102-deploy/"/>
      <url>/2022/12/03/102-deploy/</url>
      
        <content type="html"><![CDATA[<p>之前用过阿里巴巴的云效（codeup）管理代码及部署，通过搭建流水线的方式，前端提交完代码之后(前端提交代码时不用 npm run build)，可以按照简单的步骤将前端代码打包、发布(包括开发环境、测试环境)。</p><span id="more"></span><h2 id="一、为什么需要打包项目？"><a href="#一、为什么需要打包项目？" class="headerlink" title="一、为什么需要打包项目？"></a>一、为什么需要打包项目？</h2><p>浏览器只能识别并运行 <strong><code>html、css、js</code> 文件</strong> 。</p><p>那么换句话而言，项目中的 <code>.vue</code> 文件，浏览器是不认识的。</p><p>而打包的过程就是把 <code>.vue</code> 的 <strong>单文件组件</strong> 打包成 <code>html、css、js</code> 的文件，让浏览器进行识别，并展示我们的项目</p><h2 id="二、打包后的项目可以直接使用浏览器访问吗？"><a href="#二、打包后的项目可以直接使用浏览器访问吗？" class="headerlink" title="二、打包后的项目可以直接使用浏览器访问吗？"></a>二、打包后的项目可以直接使用浏览器访问吗？</h2><p>通过 <code>npm run build</code> 打包项目之后，打包的文件会被放入到 <code>dist</code> 文件夹中，其实我们可以直接双击 <code>index.html</code> 文件，可以发现，浏览器是 <strong>无法</strong> 显示项目的。</p><p>F12 查看控制台，发现抛出了很多错误。根据错误可以知道，无法显示项目的原因是一些文件找不到。</p><p>文件找不到的原因是我们打开 dist 下的 index.html 文件，在浏览器的 URL 其实是一个 file 协议，对应着的文件路径就会变成盘符下的 xxx,在我们当前的盘符下没有对应的文件，项目自然是无法访问的。</p><h2 id="三、为什么需要服务？"><a href="#三、为什么需要服务？" class="headerlink" title="三、为什么需要服务？"></a>三、为什么需要服务？</h2><p>项目需要通过一个服务托管，从而避免出现模块无法被找到等原因。</p><h2 id="四、明确域名、DNS、公网-IP、服务器、Nginx-之间的关系"><a href="#四、明确域名、DNS、公网-IP、服务器、Nginx-之间的关系" class="headerlink" title="四、明确域名、DNS、公网 IP、服务器、Nginx 之间的关系"></a>四、明确域名、DNS、公网 IP、服务器、Nginx 之间的关系</h2><ol><li>域名：<code>https://.baidu.com</code></li><li>DNS：域名解析服务器</li><li>公网 IP：服务器在网络中的唯一地址</li><li>服务器：服务部署的电脑</li><li>Nginx：网页服务</li></ol><h2 id="五、服务器的连接方式"><a href="#五、服务器的连接方式" class="headerlink" title="五、服务器的连接方式"></a>五、服务器的连接方式</h2><p>常见的连接服务器方式：<br>1、云商控制台中进行远程链接<br>2、SSH 工具（XShell）<br>3、SSH 指令远程登录</p><blockquote><p>SSH 工具-XShell</p></blockquote><p>1、新建会话<br>2、确定会话信息，协议为 SSH、主机为服务器 IP、端口号为 22<br>3、双击会话进行连接<br>4、输入用户名（默认为 root）<br>5、输入密码</p><blockquote><p>Nginx 环境处理</p></blockquote><ol><li><p><code>nginx</code> 编译时依赖 <code>gcc</code> 环境</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">yum -y install gcc gcc-c++<br></code></pre></td></tr></table></figure></li><li><p>安装 <code>prce</code>，让 <code>nginx</code> 支持重写功能</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">yum -y install pcre*<br></code></pre></td></tr></table></figure></li><li><p>安装 <code>zlib</code>，<code>nginx</code> 使用 <code>zlib</code> 对 <code>http</code> 包内容进行 <code>gzip</code> 压缩</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">yum -y install zlib zlib-devel<br></code></pre></td></tr></table></figure></li><li><p>安装 <code>openssl</code>，用于通讯加密</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">yum -y install openssl openssl-devel<br></code></pre></td></tr></table></figure></li><li><p>进行 <code>nginx</code> 安装</p></li><li><p>创建 <code>nginx</code> 文件夹</p></li><li><p>下载 <code>nginx</code> 压缩包</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">wget https://nginx.org/download/nginx-1.11.5.tar.gz<br></code></pre></td></tr></table></figure></li><li><p>解压 <code>nginx</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">tar -zxvf  nginx-1.11.5.tar.gz<br></code></pre></td></tr></table></figure></li><li><p>进入 <code>nginx-1.11.5</code> 目录</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">cd nginx-1.11.5<br></code></pre></td></tr></table></figure></li><li><p>检查平台安装环境</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">./configure --prefix=/usr/local/nginx<br></code></pre></td></tr></table></figure></li><li><p>进行源码编译</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">make<br></code></pre></td></tr></table></figure></li><li><p>安装 <code>nginx</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">make install<br></code></pre></td></tr></table></figure></li><li><p>查看 <code>nginx</code> 配置</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">/usr/local/nginx/sbin/nginx -t<br></code></pre></td></tr></table></figure></li><li><p>制作 <code>nginx</code> 软连接</p></li><li><p>进入 <code>usr/bin</code> 目录</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">cd /usr/bin<br></code></pre></td></tr></table></figure></li><li><p>制作软连接</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">ln -s /usr/local/nginx/sbin/nginx nginx<br></code></pre></td></tr></table></figure></li><li><p>接下来制作配置文件</p></li><li><p>首先进入到 <code>nginx</code> 的默认配置文件中</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">vim /usr/local/nginx/conf/nginx.conf<br></code></pre></td></tr></table></figure></li><li><p>在最底部增加配置项（按下 <code>i</code> 进入 输入模式）</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">include /nginx/*.conf;<br></code></pre></td></tr></table></figure></li><li><p>按下 <code>esc</code> 键，通过 <code>:wq!</code> 保存并退出</p></li><li><p>创建新的配置文件</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">touch /nginx/nginx.conf<br></code></pre></td></tr></table></figure></li><li><p>进入到 <code>/root/nginx/nginx.conf</code> 文件</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">vim /nginx/nginx.conf<br></code></pre></td></tr></table></figure></li><li><p>写入如下配置</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs js">server &#123;<br>    # 端口<br>    listen       <span class="hljs-number">80</span>;<br>    # 域名<br>    server_name  localhost;<br>    # 资源地址<br>    root   /nginx/dist/;<br>    # 目录浏览<br>    autoindex on;<br>    # 缓存处理<br>    add_header Cache-Control <span class="hljs-string">&quot;no-cache, must-revalidate&quot;</span>;<br>    # 请求配置<br>    location / &#123;<br>        # 跨域<br>        add_header Access-Control-Allow-Origin *;<br>        # 返回 index.html<br>        try_files $uri $uri/ /index.html;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>通过 <code>:wq!</code> 保存退出</p></li><li><p>在 <code>root/nginx</code> 中创建 <code>dist</code> 文件夹</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">mkdir /nginx/dist<br></code></pre></td></tr></table></figure></li><li><p>在 <code>nginx/dist</code> 中写入 <code>index.html</code> 进行测试</p></li><li><p>通过 <code>nginx -s reload</code> 重启服务</p></li><li><p>在 浏览器中通过，<code>IP</code> 测试访问</p></li></ol>]]></content>
      
      
      
        <tags>
            
            <tag> vue3 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>101、富文本与markdown对文本的处理</title>
      <link href="/2022/12/01/101-markdown/"/>
      <url>/2022/12/01/101-markdown/</url>
      
        <content type="html"><![CDATA[<span id="more"></span><p>编辑文本的 2 种方式：1、富文本; 2、markdown。这 2 种编辑形式在前端中有很多第 3 方库。</p><h2 id="一、创建文本基本结构"><a href="#一、创建文本基本结构" class="headerlink" title="一、创建文本基本结构"></a>一、创建文本基本结构</h2><h2 id="1-1-创建文本基本结构，主要分为三部分："><a href="#1-1-创建文本基本结构，主要分为三部分：" class="headerlink" title="1-1 创建文本基本结构，主要分为三部分："></a>1-1 创建文本基本结构，主要分为三部分：</h2><p>1、article-create 页面：基本结构</p><p>2、Editor 组件：富文本编辑器</p><p>3、Markdown 组件： markdown 编辑器</p><p>src 目录下的项目结构：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">views / article - create / components / Editor.vue;<br><br>views / article - create / components / Markdown.vue;<br><br>views / article - create / index.vue;<br></code></pre></td></tr></table></figure><h2 id="1-2-创建文本父组件"><a href="#1-2-创建文本父组件" class="headerlink" title="1-2 创建文本父组件"></a>1-2 创建文本父组件</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;template&gt;<br>  &lt;div class=&quot;article-create&quot;&gt;<br>    &lt;el-card&gt;<br>      &lt;el-input<br>        class=&quot;title-input&quot;<br>        placeholder=&quot;请输入标题&quot;<br>        v-model=&quot;title&quot;<br>        maxlength=&quot;20&quot;<br>        clearable<br>      &gt;<br>      &lt;/el-input&gt;<br>      &lt;el-tabs v-model=&quot;activeName&quot;&gt;<br>        &lt;el-tab-pane label=&quot;markdown&quot; name=&quot;markdown&quot;&gt;<br>          &lt;markdown&gt;&lt;/markdown&gt;<br>        &lt;/el-tab-pane&gt;<br>        &lt;el-tab-pane label=&quot;富文本&quot; name=&quot;editor&quot;&gt;<br>          &lt;editor&gt;&lt;/editor&gt;<br>        &lt;/el-tab-pane&gt;<br>      &lt;/el-tabs&gt;<br>    &lt;/el-card&gt;<br>  &lt;/div&gt;<br>&lt;/template&gt;<br><br>&lt;script setup&gt;<br>import Editor from &quot;./components/Editor.vue&quot;;<br>import Markdown from &quot;./components/Markdown.vue&quot;;<br>import &#123; ref &#125; from &quot;vue&quot;;<br><br>const activeName = ref(&quot;markdown&quot;);<br>const title = ref(&quot;&quot;);<br>&lt;/script&gt;<br><br>&lt;style lang=&quot;scss&quot; scoped&gt;<br>.title-input &#123;<br>  margin-bottom: 20px;<br>&#125;<br>&lt;/style&gt;<br></code></pre></td></tr></table></figure><h2 id="1-3-markdown-编辑器：tui-editor"><a href="#1-3-markdown-编辑器：tui-editor" class="headerlink" title="1-3 markdown 编辑器：tui.editor"></a>1-3 markdown 编辑器：tui.editor</h2><blockquote><p>安装 plugin：</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">npm i @toast-ui/editor@3.0.2<br></code></pre></td></tr></table></figure><blockquote><p>渲染 markdown 基本结构</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;template&gt;<br>  &lt;div class=&quot;markdown-container&quot;&gt;<br>    &lt;!-- 渲染区 --&gt;<br>    &lt;div id=&quot;markdown-box&quot;&gt;&lt;/div&gt;<br>    &lt;div class=&quot;bottom&quot;&gt;<br>      &lt;el-button type=&quot;primary&quot; @click=&quot;onSubmitClick&quot;&gt;提交&lt;/el-button&gt;<br>    &lt;/div&gt;<br>  &lt;/div&gt;<br>&lt;/template&gt;<br><br>&lt;script setup&gt;<br>import &#123;&#125; from &quot;vue&quot;;<br>&lt;/script&gt;<br><br>&lt;style lang=&quot;scss&quot; scoped&gt;<br>.markdown-container &#123;<br>  .bottom &#123;<br>    margin-top: 20px;<br>    text-align: right;<br>  &#125;<br>&#125;<br>&lt;/style&gt;<br></code></pre></td></tr></table></figure><blockquote><p>初始化 editor</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs js">&lt;script setup&gt;<br><span class="hljs-keyword">import</span> MkEditor <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@toast-ui/editor&#x27;</span><br><span class="hljs-keyword">import</span> <span class="hljs-string">&#x27;@toast-ui/editor/dist/toastui-editor.css&#x27;</span><br><span class="hljs-comment">// 国际化部分</span><br><span class="hljs-comment">// import &#x27;@toast-ui/editor/dist/i18n/zh-cn&#x27;</span><br><span class="hljs-keyword">import</span> &#123; onMounted &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;vue&#x27;</span><br><span class="hljs-keyword">import</span> &#123; useStore &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;vuex&#x27;</span><br><br><span class="hljs-comment">// Editor实例</span><br><span class="hljs-keyword">let</span> mkEditor<br><span class="hljs-comment">// 处理离开页面切换语言导致 dom 无法被获取</span><br><span class="hljs-keyword">let</span> el<br>onMounted(<span class="hljs-function">() =&gt;</span> &#123;<br>  el = <span class="hljs-built_in">document</span>.querySelector(<span class="hljs-string">&#x27;#markdown-box&#x27;</span>)<br>  initEditor()<br>&#125;)<br><br><span class="hljs-keyword">const</span> store = useStore()<br><span class="hljs-keyword">const</span> initEditor = <span class="hljs-function">() =&gt;</span> &#123;<br>  mkEditor = <span class="hljs-keyword">new</span> MkEditor(&#123;<br>    el,<br>    <span class="hljs-attr">height</span>: <span class="hljs-string">&#x27;500px&#x27;</span>,<br>    <span class="hljs-attr">previewStyle</span>: <span class="hljs-string">&#x27;vertical&#x27;</span><br>  &#125;)<br><br>  mkEditor.getMarkdown()<br>&#125;<br>&lt;/script&gt;<br></code></pre></td></tr></table></figure><blockquote><p>新建文本及新建文本的提交</p></blockquote><p>接口定义：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// src/api/article.js</span><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 创建文章</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">const</span> createArticle = <span class="hljs-function">(<span class="hljs-params">data</span>) =&gt;</span> &#123;<br>  <span class="hljs-keyword">return</span> request(&#123;<br>    <span class="hljs-attr">url</span>: <span class="hljs-string">&quot;/article/create&quot;</span>,<br>    <span class="hljs-attr">method</span>: <span class="hljs-string">&quot;POST&quot;</span>,<br>    data,<br>  &#125;);<br>&#125;;<br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 编辑文章详情</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">const</span> articleEdit = <span class="hljs-function">(<span class="hljs-params">data</span>) =&gt;</span> &#123;<br>  <span class="hljs-keyword">return</span> request(&#123;<br>    <span class="hljs-attr">url</span>: <span class="hljs-string">&quot;/article/edit&quot;</span>,<br>    <span class="hljs-attr">method</span>: <span class="hljs-string">&quot;POST&quot;</span>,<br>    data,<br>  &#125;);<br>&#125;;<br></code></pre></td></tr></table></figure><blockquote><blockquote><p>注意：markwodn 和富文本最终都会处理提交事件，将提交合并到一个模块实现</p></blockquote></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// src/views/article-create/components/commit.js</span><br><span class="hljs-keyword">import</span> &#123; createArticle, articleEdit &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;@/api/article&quot;</span>;<br><span class="hljs-keyword">import</span> &#123; ElMessage &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;element-plus&quot;</span>;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">const</span> commitArticle = <span class="hljs-keyword">async</span> (data) =&gt; &#123;<br>  <span class="hljs-keyword">const</span> res = <span class="hljs-keyword">await</span> createArticle(data);<br>  ElMessage.success(<span class="hljs-string">&quot;创建成功！&quot;</span>);<br>  <span class="hljs-keyword">return</span> res;<br>&#125;;<br><span class="hljs-keyword">export</span> <span class="hljs-keyword">const</span> editArticle = <span class="hljs-keyword">async</span> (data) =&gt; &#123;<br>  <span class="hljs-keyword">const</span> res = <span class="hljs-keyword">await</span> articleEdit(data);<br>  ElMessage.success(<span class="hljs-string">&quot;编辑成功！&quot;</span>);<br>  <span class="hljs-keyword">return</span> res;<br>&#125;;<br><br><span class="hljs-comment">// 将此方法导入到markdown.vue中</span><br><span class="hljs-keyword">import</span> &#123; commitArticle &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;./commit&quot;</span>;<br></code></pre></td></tr></table></figure><blockquote><p>提交文本事件的触发</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// markdown.vue</span><br><span class="hljs-keyword">const</span> props = defineProps(&#123;<br>  <span class="hljs-attr">title</span>: &#123;<br>    <span class="hljs-attr">required</span>: <span class="hljs-literal">true</span>,<br>    <span class="hljs-attr">type</span>: <span class="hljs-built_in">String</span><br>  &#125;<br>&#125;)<br><br><span class="hljs-keyword">const</span> emits = defineEmits([<span class="hljs-string">&#x27;onSuccess&#x27;</span>])<br>...<br><span class="hljs-comment">// 处理提交</span><br><span class="hljs-keyword">const</span> onSubmitClick = <span class="hljs-keyword">async</span> () =&gt; &#123;<br>  <span class="hljs-comment">// 创建文章</span><br>  <span class="hljs-keyword">await</span> commitArticle(&#123;<br>    <span class="hljs-attr">title</span>: props.title,<br>    <span class="hljs-attr">content</span>: mkEditor.getHTML()<br>  &#125;)<br>  <span class="hljs-comment">// 重置一下</span><br>  mkEditor.reset()<br>  emits(<span class="hljs-string">&#x27;onSuccess&#x27;</span>)<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>父组件中处理传递的 title，处理 onSuccess 事件</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 创建成功</span><br><span class="hljs-keyword">const</span> onSuccess = <span class="hljs-function">() =&gt;</span> &#123;<br>  title.value = <span class="hljs-string">&quot;&quot;</span>;<br>&#125;;<br></code></pre></td></tr></table></figure><blockquote><p>markdown 文本编辑</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 路径为src/views/article-detail/index.vue</span><br>&lt;template&gt;<br>  <span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;article-detail-container&quot;</span>&gt;</span></span><br><span class="xml">    <span class="hljs-tag">&lt;<span class="hljs-name">h2</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;title&quot;</span>&gt;</span>&#123;&#123; detail.title &#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span></span><br><span class="xml">    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;header&quot;</span>&gt;</span></span><br><span class="xml">      <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;author&quot;</span>&gt;</span></span><br><span class="xml">        作者：&#123;&#123; detail.author &#125;&#125;</span><br><span class="xml">      <span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span></span><br><span class="xml">      <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;time&quot;</span>&gt;</span></span><br><span class="xml">        时间: &#123;&#123; $filters.relativeTime(detail.publicDate) &#125;&#125;</span><br><span class="xml">      <span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span></span><br><span class="xml">      <span class="hljs-tag">&lt;<span class="hljs-name">el-button</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;edit&quot;</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">&quot;onEditClick&quot;</span>&gt;</span>编辑<span class="hljs-tag">&lt;/<span class="hljs-name">el-button</span>&gt;</span></span><br><span class="xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="xml">    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;content&quot;</span> <span class="hljs-attr">v-html</span>=<span class="hljs-string">&quot;detail.content&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="xml">  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>&lt;/template&gt;<br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">setup</span>&gt;</span><span class="javascript"></span></span><br><span class="javascript"><span class="xml"><span class="hljs-keyword">import</span> &#123; ref &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;vue&#x27;</span></span></span><br><span class="javascript"><span class="xml"><span class="hljs-keyword">import</span> &#123; useRoute, useRouter &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;vue-router&#x27;</span></span></span><br><span class="javascript"><span class="xml"><span class="hljs-keyword">import</span> &#123; articleDetail &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@/api/article&#x27;</span></span></span><br><span class="javascript"><span class="xml"></span></span><br><span class="javascript"><span class="xml"><span class="hljs-comment">// 获取数据</span></span></span><br><span class="javascript"><span class="xml"><span class="hljs-keyword">const</span> route = useRoute()</span></span><br><span class="javascript"><span class="xml"><span class="hljs-keyword">const</span> articleId = route.params.id</span></span><br><span class="javascript"><span class="xml"><span class="hljs-keyword">const</span> detail = ref(&#123;&#125;)</span></span><br><span class="javascript"><span class="xml"><span class="hljs-keyword">const</span> getArticleDetail = <span class="hljs-keyword">async</span> () =&gt; &#123;</span></span><br><span class="javascript"><span class="xml">  detail.value = <span class="hljs-keyword">await</span> articleDetail(articleId)</span></span><br><span class="javascript"><span class="xml">&#125;</span></span><br><span class="javascript"><span class="xml">getArticleDetail()</span></span><br><span class="javascript"><span class="xml"><span class="hljs-comment">// 编辑</span></span></span><br><span class="javascript"><span class="xml"><span class="hljs-keyword">const</span> router = useRouter()</span></span><br><span class="javascript"><span class="xml"><span class="hljs-keyword">const</span> onEditClick = <span class="hljs-function">() =&gt;</span> &#123;</span></span><br><span class="javascript"><span class="xml">  router.push(<span class="hljs-string">`/article/editor/<span class="hljs-subst">$&#123;articleId&#125;</span>`</span>)</span></span><br><span class="javascript"><span class="xml">&#125;</span></span><br><span class="javascript"><span class="xml"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br><br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">style</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;scss&quot;</span> <span class="hljs-attr">scoped</span>&gt;</span><span class="css"></span></span><br><span class="css"><span class="xml"><span class="hljs-selector-class">.article-detail-container</span> &#123;</span></span><br><span class="css"><span class="xml">  <span class="hljs-selector-class">.title</span> &#123;</span></span><br><span class="css"><span class="xml">    <span class="hljs-attribute">font-size</span>: <span class="hljs-number">22px</span>;</span></span><br><span class="css"><span class="xml">    <span class="hljs-attribute">text-align</span>: center;</span></span><br><span class="css"><span class="xml">    <span class="hljs-attribute">padding</span>: <span class="hljs-number">12px</span> <span class="hljs-number">0</span>;</span></span><br><span class="css"><span class="xml">  &#125;</span></span><br><span class="css"><span class="xml"></span></span><br><span class="css"><span class="xml">  <span class="hljs-selector-class">.header</span> &#123;</span></span><br><span class="css"><span class="xml">    <span class="hljs-attribute">padding</span>: <span class="hljs-number">26px</span> <span class="hljs-number">0</span>;</span></span><br><span class="css"><span class="xml"></span></span><br><span class="css"><span class="xml">    <span class="hljs-selector-class">.author</span> &#123;</span></span><br><span class="css"><span class="xml">      <span class="hljs-attribute">font-size</span>: <span class="hljs-number">14px</span>;</span></span><br><span class="css"><span class="xml">      <span class="hljs-attribute">color</span>: <span class="hljs-number">#555666</span>;</span></span><br><span class="css"><span class="xml">      <span class="hljs-attribute">margin-right</span>: <span class="hljs-number">20px</span>;</span></span><br><span class="css"><span class="xml">    &#125;</span></span><br><span class="css"><span class="xml"></span></span><br><span class="css"><span class="xml">    <span class="hljs-selector-class">.time</span> &#123;</span></span><br><span class="css"><span class="xml">      <span class="hljs-attribute">font-size</span>: <span class="hljs-number">14px</span>;</span></span><br><span class="css"><span class="xml">      <span class="hljs-attribute">color</span>: <span class="hljs-number">#999aaa</span>;</span></span><br><span class="css"><span class="xml">      <span class="hljs-attribute">margin-right</span>: <span class="hljs-number">20px</span>;</span></span><br><span class="css"><span class="xml">    &#125;</span></span><br><span class="css"><span class="xml"></span></span><br><span class="css"><span class="xml">    <span class="hljs-selector-class">.edit</span> &#123;</span></span><br><span class="css"><span class="xml">      <span class="hljs-attribute">float</span>: right;</span></span><br><span class="css"><span class="xml">    &#125;</span></span><br><span class="css"><span class="xml">  &#125;</span></span><br><span class="css"><span class="xml"></span></span><br><span class="css"><span class="xml">  <span class="hljs-selector-class">.content</span> &#123;</span></span><br><span class="css"><span class="xml">    <span class="hljs-attribute">font-size</span>: <span class="hljs-number">14px</span>;</span></span><br><span class="css"><span class="xml">    <span class="hljs-attribute">padding</span>: <span class="hljs-number">20px</span> <span class="hljs-number">0</span>;</span></span><br><span class="css"><span class="xml">    <span class="hljs-attribute">border-top</span>: <span class="hljs-number">1px</span> solid <span class="hljs-number">#d4d4d4</span>;</span></span><br><span class="css"><span class="xml">    ;</span></span><br><span class="css"><span class="xml">  &#125;</span></span><br><span class="css"><span class="xml">&#125;</span></span><br><span class="css"><span class="xml"></span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span></span><br><br></code></pre></td></tr></table></figure><blockquote><p>将数据传递给 markdown 组件</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs js">&lt;markdown :title=<span class="hljs-string">&quot;title&quot;</span> :detail=<span class="hljs-string">&quot;detail&quot;</span> @onSuccess=<span class="hljs-string">&quot;onSuccess&quot;</span>&gt;&lt;/markdown&gt;<br><br><span class="hljs-comment">// 数据接收</span><br><span class="hljs-keyword">const</span> props = defineProps(&#123;<br>  <span class="hljs-attr">title</span>: &#123;<br>    <span class="hljs-attr">required</span>: <span class="hljs-literal">true</span>,<br>    <span class="hljs-attr">type</span>: <span class="hljs-built_in">String</span><br>  &#125;,<br>  <span class="hljs-attr">detail</span>: &#123;<br>    <span class="hljs-attr">type</span>: <span class="hljs-built_in">Object</span><br>  &#125;<br>&#125;)<br></code></pre></td></tr></table></figure><blockquote><p>使用 watch 检测数据变化，存在 detail 时，将 detail 赋值给 mkEditor</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 编辑相关</span><br>watch(<br>  <span class="hljs-function">() =&gt;</span> props.detail,<br>  <span class="hljs-function">(<span class="hljs-params">val</span>) =&gt;</span> &#123;<br>    <span class="hljs-keyword">if</span> (val &amp;&amp; val.content) &#123;<br>      mkEditor.setHTML(val.content);<br>    &#125;<br>  &#125;,<br>  &#123;<br>    <span class="hljs-attr">immediate</span>: <span class="hljs-literal">true</span>,<br>  &#125;<br>);<br></code></pre></td></tr></table></figure><blockquote><p>markdown 组件中处理提交事件</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 处理提交</span><br><span class="hljs-keyword">const</span> onSubmitClick = <span class="hljs-keyword">async</span> () =&gt; &#123;<br>  <span class="hljs-keyword">if</span> (props.detail &amp;&amp; props.detail._id) &#123;<br>    <span class="hljs-comment">// 编辑文章</span><br>    <span class="hljs-keyword">await</span> editArticle(&#123;<br>      <span class="hljs-attr">id</span>: props.detail._id,<br>      <span class="hljs-attr">title</span>: props.title,<br>      <span class="hljs-attr">content</span>: mkEditor.getHTML(),<br>    &#125;);<br>  &#125; <span class="hljs-keyword">else</span> &#123;<br>    <span class="hljs-comment">// 创建文章</span><br>    <span class="hljs-keyword">await</span> commitArticle(&#123;<br>      <span class="hljs-attr">title</span>: props.title,<br>      <span class="hljs-attr">content</span>: mkEditor.getHTML(),<br>    &#125;);<br>  &#125;<br><br>  mkEditor.reset();<br>  emits(<span class="hljs-string">&quot;onSuccess&quot;</span>);<br>&#125;;<br></code></pre></td></tr></table></figure><h2 id="1-4-富文本编辑器：wangEditor"><a href="#1-4-富文本编辑器：wangEditor" class="headerlink" title="1-4 富文本编辑器：wangEditor"></a>1-4 富文本编辑器：wangEditor</h2><blockquote><p>安装 plugin</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">npm i wangeditor@4.7.6<br></code></pre></td></tr></table></figure><blockquote><p>富文本的基本组件结构和 markdown 组件基本一致</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br></pre></td><td class="code"><pre><code class="hljs js">&lt;template&gt;<br>  <span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;editor-container&quot;</span>&gt;</span></span><br><span class="xml">    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;editor-box&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="xml">    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;bottom&quot;</span>&gt;</span></span><br><span class="xml">      <span class="hljs-tag">&lt;<span class="hljs-name">el-button</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;primary&quot;</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">&quot;onSubmitClick&quot;</span>&gt;</span>提交<span class="hljs-tag">&lt;/<span class="hljs-name">el-button</span>&gt;</span></span><br><span class="xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="xml">  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>&lt;/template&gt;<br><br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">setup</span>&gt;</span><span class="javascript"></span></span><br><span class="javascript"><span class="xml"><span class="hljs-keyword">import</span> E <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;wangeditor&#x27;</span></span></span><br><span class="javascript"><span class="xml"><span class="hljs-keyword">import</span> &#123; onMounted, defineProps, defineEmits, watch &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;vue&#x27;</span></span></span><br><span class="javascript"><span class="xml"><span class="hljs-keyword">import</span> &#123; useStore &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;vuex&#x27;</span></span></span><br><span class="javascript"><span class="xml"><span class="hljs-keyword">import</span> &#123; commitArticle, editArticle &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./commit&#x27;</span></span></span><br><span class="javascript"><span class="xml"></span></span><br><span class="javascript"><span class="xml"><span class="hljs-keyword">const</span> props = defineProps(&#123;</span></span><br><span class="javascript"><span class="xml">  <span class="hljs-attr">title</span>: &#123;</span></span><br><span class="javascript"><span class="xml">    <span class="hljs-attr">required</span>: <span class="hljs-literal">true</span>,</span></span><br><span class="javascript"><span class="xml">    <span class="hljs-attr">type</span>: <span class="hljs-built_in">String</span></span></span><br><span class="javascript"><span class="xml">  &#125;,</span></span><br><span class="javascript"><span class="xml">  <span class="hljs-attr">detail</span>: &#123;</span></span><br><span class="javascript"><span class="xml">    <span class="hljs-attr">type</span>: <span class="hljs-built_in">Object</span></span></span><br><span class="javascript"><span class="xml">  &#125;</span></span><br><span class="javascript"><span class="xml">&#125;)</span></span><br><span class="javascript"><span class="xml"></span></span><br><span class="javascript"><span class="xml"><span class="hljs-keyword">const</span> emits = defineEmits([<span class="hljs-string">&#x27;onSuccess&#x27;</span>])</span></span><br><span class="javascript"><span class="xml"></span></span><br><span class="javascript"><span class="xml"><span class="hljs-keyword">const</span> store = useStore()</span></span><br><span class="javascript"><span class="xml"></span></span><br><span class="javascript"><span class="xml"><span class="hljs-comment">// Editor实例</span></span></span><br><span class="javascript"><span class="xml"><span class="hljs-keyword">let</span> editor</span></span><br><span class="javascript"><span class="xml"><span class="hljs-comment">// 处理离开页面切换语言导致 dom 无法被获取</span></span></span><br><span class="javascript"><span class="xml"><span class="hljs-keyword">let</span> el</span></span><br><span class="javascript"><span class="xml">onMounted(<span class="hljs-function">() =&gt;</span> &#123;</span></span><br><span class="javascript"><span class="xml">  el = <span class="hljs-built_in">document</span>.querySelector(<span class="hljs-string">&#x27;#editor-box&#x27;</span>)</span></span><br><span class="javascript"><span class="xml">  initEditor()</span></span><br><span class="javascript"><span class="xml">&#125;)</span></span><br><span class="javascript"><span class="xml"></span></span><br><span class="javascript"><span class="xml"><span class="hljs-keyword">const</span> initEditor = <span class="hljs-function">() =&gt;</span> &#123;</span></span><br><span class="javascript"><span class="xml">  editor = <span class="hljs-keyword">new</span> E(el)</span></span><br><span class="javascript"><span class="xml">  editor.config.zIndex = <span class="hljs-number">1</span></span></span><br><span class="javascript"><span class="xml">  <span class="hljs-comment">// 菜单栏提示</span></span></span><br><span class="javascript"><span class="xml">  editor.config.showMenuTooltips = <span class="hljs-literal">true</span></span></span><br><span class="javascript"><span class="xml">  editor.config.menuTooltipPosition = <span class="hljs-string">&#x27;down&#x27;</span></span></span><br><span class="javascript"><span class="xml"></span></span><br><span class="javascript"><span class="xml">  editor.create()</span></span><br><span class="javascript"><span class="xml">&#125;</span></span><br><span class="javascript"><span class="xml"></span></span><br><span class="javascript"><span class="xml"><span class="hljs-comment">// 编辑相关</span></span></span><br><span class="javascript"><span class="xml">watch(</span></span><br><span class="javascript"><span class="xml">  <span class="hljs-function">() =&gt;</span> props.detail,</span></span><br><span class="javascript"><span class="xml">  <span class="hljs-function"><span class="hljs-params">val</span> =&gt;</span> &#123;</span></span><br><span class="javascript"><span class="xml">    <span class="hljs-keyword">if</span> (val &amp;&amp; val.content) &#123;</span></span><br><span class="javascript"><span class="xml">      editor.txt.html(val.content)</span></span><br><span class="javascript"><span class="xml">    &#125;</span></span><br><span class="javascript"><span class="xml">  &#125;,</span></span><br><span class="javascript"><span class="xml">  &#123;</span></span><br><span class="javascript"><span class="xml">    <span class="hljs-attr">immediate</span>: <span class="hljs-literal">true</span></span></span><br><span class="javascript"><span class="xml">  &#125;</span></span><br><span class="javascript"><span class="xml">)</span></span><br><span class="javascript"><span class="xml"></span></span><br><span class="javascript"><span class="xml"><span class="hljs-comment">// 处理文本提交的事件</span></span></span><br><span class="javascript"><span class="xml"><span class="hljs-keyword">const</span> onSubmitClick = <span class="hljs-keyword">async</span> () =&gt; &#123;</span></span><br><span class="javascript"><span class="xml">  <span class="hljs-keyword">if</span> (props.detail &amp;&amp; props.detail._id) &#123;</span></span><br><span class="javascript"><span class="xml">    <span class="hljs-comment">// 编辑文章</span></span></span><br><span class="javascript"><span class="xml">    <span class="hljs-keyword">await</span> editArticle(&#123;</span></span><br><span class="javascript"><span class="xml">      <span class="hljs-attr">id</span>: props.detail._id,</span></span><br><span class="javascript"><span class="xml">      <span class="hljs-attr">title</span>: props.title,</span></span><br><span class="javascript"><span class="xml">      <span class="hljs-attr">content</span>: editor.txt.html()</span></span><br><span class="javascript"><span class="xml">    &#125;)</span></span><br><span class="javascript"><span class="xml">  &#125; <span class="hljs-keyword">else</span> &#123;</span></span><br><span class="javascript"><span class="xml">    <span class="hljs-comment">// 创建文章</span></span></span><br><span class="javascript"><span class="xml">    <span class="hljs-keyword">await</span> commitArticle(&#123;</span></span><br><span class="javascript"><span class="xml">      <span class="hljs-attr">title</span>: props.title,</span></span><br><span class="javascript"><span class="xml">      <span class="hljs-attr">content</span>: editor.txt.html()</span></span><br><span class="javascript"><span class="xml">    &#125;)</span></span><br><span class="javascript"><span class="xml">  &#125;</span></span><br><span class="javascript"><span class="xml"></span></span><br><span class="javascript"><span class="xml">  editor.txt.html(<span class="hljs-string">&#x27;&#x27;</span>)</span></span><br><span class="javascript"><span class="xml">  emits(<span class="hljs-string">&#x27;onSuccess&#x27;</span>)</span></span><br><span class="javascript"><span class="xml">&#125;</span></span><br><span class="javascript"><span class="xml"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br><br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">style</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;scss&quot;</span> <span class="hljs-attr">scoped</span>&gt;</span><span class="css"></span></span><br><span class="css"><span class="xml"><span class="hljs-selector-class">.editor-container</span> &#123;</span></span><br><span class="css"><span class="xml">  <span class="hljs-selector-class">.bottom</span> &#123;</span></span><br><span class="css"><span class="xml">    <span class="hljs-attribute">margin-top</span>: <span class="hljs-number">20px</span>;</span></span><br><span class="css"><span class="xml">    <span class="hljs-attribute">text-align</span>: right;</span></span><br><span class="css"><span class="xml">  &#125;</span></span><br><span class="css"><span class="xml">&#125;</span></span><br><span class="css"><span class="xml"></span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span></span><br><br></code></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> vue3 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>100、vuex的缺点及从0写一个vuex的思路</title>
      <link href="/2022/11/29/100-vuex/"/>
      <url>/2022/11/29/100-vuex/</url>
      
        <content type="html"><![CDATA[<span id="more"></span><p>1、用过 module，项目规模变大之后，单独一个 store 对象会过于庞大臃肿，通过模块方式可以拆分开来便于维护</p><p>2、可以按之前规则单独编写子模块代码，然后在主文件中通过<code>modules</code>选项组织起来：<code>createStore(&#123;modules:&#123;...&#125;&#125;)</code>。</p><p>3、不过使用时要注意访问子模块状态时需要加上注册时模块名：<code>store.state.a.xxx</code>，但同时<code>getters</code>、<code>mutations</code>和<code>actions</code>又在全局空间中，使用方式和之前一样。如果要做到完全拆分，需要在子模块加上<code>namespace</code>选项，此时再访问它们就要加上命名空间前缀。</p><p>很显然，模块的方式可以拆分代码，但是缺点也很明显，就是使用起来比较繁琐复杂，容易出错。而且类型系统支持很差，不能给我们带来帮助。pinia 显然在这方面有了很大改进，是时候切换过去了。</p><p>修改状态只能是<code>mutations</code>，<code>actions</code>只能通过提交<code>mutation</code>修改状态即可</p><p>官方文档说：更改 Vuex 的 store 中的状态的唯一方法是提交 <code>mutation</code>，<code>mutation</code> 非常类似于事件：每个 <code>mutation</code> 都有一个字符串的<strong>类型 (type)**和一个** 回调函数 (handler)</strong> 。<code>Action</code> 类似于 <code>mutation</code>，不同在于：<code>Action</code>可以包含任意异步操作，但它不能修改状态， 需要提交<code>mutation</code>才能变更状态。</p><p>因此，开发时，包含异步操作或者复杂业务组合时使用 action；需要直接修改状态则提交 mutation。但由于 dispatch 和 commit 是两个 API，容易引起混淆，实践中也会采用统一使用 dispatch action 的方式。</p><p>调用 dispatch 和 commit 两个 API 时几乎完全一样，但是定义两者时却不甚相同，mutation 的回调函数接收参数是 state 对象。action 则是与 Store 实例具有相同方法和属性的上下文 context 对象，因此一般会解构它为<code>&#123;commit, dispatch, state&#125;</code>，从而方便编码。另外 dispatch 会返回 Promise 实例便于处理内部异步结果。</p><p>实现上 commit(type)方法相当于调用<code>options.mutations[type](state)</code>；<code>dispatch(type)</code>方法相当于调用<code>options.actions[type](store)</code>，这样就很容易理解两者使用上的不同了。</p><blockquote><p>如何从零写一个 vuex？思路是什么？</p></blockquote><ol><li>官方说<code>vuex</code>是一个状态管理模式和库，并确保这些状态以可预期的方式变更。可见要实现一个<code>vuex</code>：<ul><li>要实现一个<code>Store</code>存储全局状态</li><li>要提供修改状态所需 API：<code>commit(type, payload)</code>, <code>dispatch(type, payload)</code></li></ul></li><li>实现<code>Store</code>时，可以定义 Store 类，构造函数接收选项 options，设置属性 state 对外暴露状态，提供 commit 和 dispatch 修改属性 state。这里需要设置 state 为响应式对象，同时将 Store 定义为一个 Vue 插件。</li><li><code>commit(type, payload)</code>方法中可以获取用户传入<code>mutations</code>并执行它，这样可以按用户提供的方法修改状态。 <code>dispatch(type, payload)</code>类似，但需要注意它可能是异步的，需要返回一个 Promise 给用户以处理异步结果。</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Store</span> </span>&#123;<br>  <span class="hljs-function"><span class="hljs-title">constructor</span>(<span class="hljs-params">options</span>)</span> &#123;<br>    <span class="hljs-built_in">this</span>.state = reactive(options.state);<br>    <span class="hljs-built_in">this</span>.options = options;<br>  &#125;<br>  <span class="hljs-function"><span class="hljs-title">commit</span>(<span class="hljs-params">type, payload</span>)</span> &#123;<br>    <span class="hljs-built_in">this</span>.options.mutations[type].call(<span class="hljs-built_in">this</span>, <span class="hljs-built_in">this</span>.state, payload);<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>vuex 如何监听数据的变化？</p><blockquote><p>可以通过 watch 选项或者 watch 方法监听状态</p><p>可以使用 vuex 提供的 API：store.subscribe()</p></blockquote><p>watch 选项方式，可以以字符串形式监听<code>$store.state.xx</code>；subscribe 方式，可以调用 store.subscribe(cb),回调函数接收 mutation 对象和 state 对象，这样可以进一步判断 mutation.type 是否是期待的那个，从而进一步做后续处理。</p><p>watch 方式简单好用，且能获取变化前后值，首选；subscribe 方法会被所有 commit 行为触发，因此还需要判断 mutation.type，用起来略繁琐，一般用于 vuex 插件中。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// watch</span><br><span class="hljs-keyword">const</span> app = createApp(&#123;<br>  <span class="hljs-attr">watch</span>: &#123;<br>    <span class="hljs-string">&quot;$store.state.counter&quot;</span>() &#123;<br>      <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;counter change!&quot;</span>);<br>    &#125;,<br>  &#125;,<br>&#125;);<br><span class="hljs-comment">// subscrible</span><br>store.subscribe(<span class="hljs-function">(<span class="hljs-params">mutation, state</span>) =&gt;</span> &#123;<br>  <span class="hljs-keyword">if</span> (mutation.type === <span class="hljs-string">&quot;add&quot;</span>) &#123;<br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;counter change in subscribe()!&quot;</span>);<br>  &#125;<br>&#125;);<br></code></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> vuex </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>99、script标签写export为什么会报错?</title>
      <link href="/2022/11/27/99-script%E6%A0%87%E7%AD%BE%E5%86%99%E4%B8%8Aexport/"/>
      <url>/2022/11/27/99-script%E6%A0%87%E7%AD%BE%E5%86%99%E4%B8%8Aexport/</url>
      
        <content type="html"><![CDATA[<span id="more"></span><h4 id="一、脚本和模块"><a href="#一、脚本和模块" class="headerlink" title="一、脚本和模块"></a>一、脚本和模块</h4><p>​ JavaScript 有 2 种源文件，一种叫做脚本，一种叫做模块。这个区分是在 ES6 引入了模块机制开始的，在 ES5 和之前版本中，就只有一种源文件格式，即脚本。</p><p>​ 脚本是可以由浏览器或者 node 环境引入执行的，而模块智能有 JavaScript 代码用 import 引入执行。</p><p>​ 脚本具有主动性的 JavaScript 代码段，是控制宿主完成一定任务的代码；而模块是被动行的 JavaScript 代码段，是等待被调用的库。</p><p>​ 实际上，<code>模块和脚本之间的区别仅仅在于是否包含import和export</code>。</p><p>​ 脚本是一种兼容之前的版本的定义，在这个模式下，没有 import 就不需要处理加载.js 文件问题。</p><p>​ 现代浏览器可以支持用 script 标签引入模块或者脚本，如果需要引入模块，必须给 script 标签添加 type=”module”。如果引入脚本，则不需要 type。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js">&lt;script type=<span class="hljs-string">&quot;module&quot;</span> scr=<span class="hljs-string">&quot;XXX.js&quot;</span>&gt;&lt;/script&gt;<br></code></pre></td></tr></table></figure><p>​ script 标签如果不加 type=“module”，默认认为我们加载的文件是脚本而非模块，如果我们在脚本中写了 export，当然会抛错。</p><p>​ 脚本可以包含语句。模块包含 3 中内容：import 声明、export 声明、语句。</p><p>​ <code>import声明</code>用法有 2 种：一个是<code>直接import一个模块</code>、另一个是``带from的import`（能引入模块里的一些信息）</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">import</span> <span class="hljs-string">&quot;module&quot;</span>; <span class="hljs-comment">// 引入一个模块</span><br><span class="hljs-keyword">import</span> m <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;module&quot;</span>; <span class="hljs-comment">// 把模块默认的导出值放入变量m</span><br></code></pre></td></tr></table></figure><p>​ 用法 1 直接 import 一个模块，只是保证了这个模块代码被执行，引用它的模块是无法获得它的任何信息的。</p><p>​ 用法 2 带 from 的 import 意思是引入模块中的一部分信息，可以把他们变成本地的变量。</p><p>​ 带 from 的 import 又分为 3 种用法：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">import</span> x <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;./a.js&quot;</span>; <span class="hljs-comment">// 引入模块中导出的默认值</span><br><span class="hljs-keyword">import</span> &#123; a <span class="hljs-keyword">as</span> x, modify &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;./a.js&quot;</span>; <span class="hljs-comment">// 引入模块中的变量</span><br><span class="hljs-keyword">import</span> * <span class="hljs-keyword">as</span> x <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;./a.js&quot;</span>; <span class="hljs-comment">// 把模块中所有的变量以类型对象属性的方式引入</span><br><br><span class="hljs-comment">// 第一种方式还可以跟后两种组合使用</span><br><span class="hljs-keyword">import</span> d, &#123; a <span class="hljs-keyword">as</span> x, modify &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;./a.js&quot;</span>;<br><span class="hljs-keyword">import</span> d, * <span class="hljs-keyword">as</span> x <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;./a.js&quot;</span>;<br></code></pre></td></tr></table></figure><p>​ 语法要求不带 as 的默认值永远在最前。注意，这里的变量实际上仍然可以受到原来模块的控制。</p><p>示例代码：</p><p><code>模块a</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">export</span> <span class="hljs-keyword">var</span> a = <span class="hljs-number">1</span>;<br><span class="hljs-keyword">export</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">modify</span>(<span class="hljs-params"></span>) </span>&#123;<br>  a = <span class="hljs-number">2</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p><code>模块b</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">import</span> &#123; a, modify &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;./a.js&quot;</span>;<br><span class="hljs-built_in">console</span>.log(a);<br>modify();<br><span class="hljs-built_in">console</span>.log(a);<br></code></pre></td></tr></table></figure><p>​ 当我们调用修改变量的函数后，b 模块变量也跟着发生了改变。这说明导入与一般的赋值不同，导入后的变量只是改变了名字，它仍然与原来的变量是同一个。</p><p><code>export声明</code>：承担的是导出的任务。</p><p>​ 模块中导出变量的方式有两种，一种是独立使用 export 声明，一种是直接在声明型语句前添加 export 关键字。</p><p>​ 独立使用 export 声明就是一个 export 关键字加上变量名列表。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">export</span> &#123; a, b, c &#125;;<br></code></pre></td></tr></table></figure><p>​ 我们也可以直接在声明型语句前添加 export 关键字，这里的 export 可以加在任何声明性质的语句之前</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span><br><span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">含<span class="hljs-keyword">async</span> 和generator</span>)</span><br><span class="hljs-function"><span class="hljs-title">class</span></span><br><span class="hljs-function"><span class="hljs-title">let</span></span><br><span class="hljs-function"><span class="hljs-title">const</span></span><br></code></pre></td></tr></table></figure><p>​ export 还有一种特殊的用法，就是跟 default 联合使用。export default 表示到处一个默认变量值，它可以用于 function 和 class。这里导出的变量是没有名称的，可以使用 import x from ‘./a.js’ 这样的语法，在模块中引入。</p><p>​ export default 还支持一种语法，后面跟一个表达式</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> a = &#123;&#125;;<br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> a;<br></code></pre></td></tr></table></figure><p>​ 但是，这里的行为跟导出变量是不一致，这里导出的是值，<code>导出的就是普通变量a的值，以后a的变化与导出的值就无关了</code>，修改变量 a，不会使得其他模块中引入的 default 值发生改变。</p><p>​ 在 import 语句前无法加入 export，但是我们可以直接使用 export from 语法</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">export</span> a <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;a.js&quot;</span>;<br></code></pre></td></tr></table></figure><p>​ JavaScript 引擎除了执行脚本和模块之外，还可以执行函数。而函数体跟脚本和模块有一定的相似之处。</p><h4 id="二、函数体"><a href="#二、函数体" class="headerlink" title="二、函数体"></a>二、函数体</h4><blockquote><p>执行函数的行为通常是在 JavaScript 代码执行时，注册宿主环境的某些事件触发的，而执行的过程，就是执行函数体（函数的花括号中间的部分）。</p></blockquote><p>下面的 setTimeout 函数注册了一个函数给宿主，当一定时间之后，宿主就会执行这个函数。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-built_in">setTimeout</span>(<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<br>  <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;go&quot;</span>);<br>&#125;, <span class="hljs-number">10000</span>);<br></code></pre></td></tr></table></figure><p>宿主会为这样的函数创建宏任务。宏任务中可能会执行的代码包括脚本、模块、函数体。</p><p>函数体其实也是一个语句的列表。跟脚本和模块比起来，函数体中的语句列表中多了 return 语句可以用。</p><p><code>普通函数体</code>：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">foo</span>(<span class="hljs-params"></span>) </span>&#123;<br>  <span class="hljs-comment">//function body</span><br>&#125;<br></code></pre></td></tr></table></figure><p><code>异步函数体</code>：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">async</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">foo</span>(<span class="hljs-params"></span>) </span>&#123;<br>  <span class="hljs-comment">// function body</span><br>&#125;<br></code></pre></td></tr></table></figure><p><code>生成器函数体</code>：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-function"><span class="hljs-keyword">function</span>* <span class="hljs-title">foo</span>(<span class="hljs-params"></span>) </span>&#123;<br>  <span class="hljs-comment">// function body</span><br>&#125;<br></code></pre></td></tr></table></figure><p><code>异步生成器函数体</code>：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">async</span> <span class="hljs-function"><span class="hljs-keyword">function</span>* <span class="hljs-title">foo</span>(<span class="hljs-params"></span>) </span>&#123;<br>  <span class="hljs-comment">// function body</span><br>&#125;<br></code></pre></td></tr></table></figure><p>上面的 4 种函数体的区别在于：能否使用 await 或者 yield</p><p>类型 yield await return import&amp;export</p><p>普通函数体 X X √ X</p><p>异步函数体 X √ √ X</p><p>生成器函数体 √ X √ X</p><p>异步生成器函数体 √ √ √ X</p><p>脚本 X X X X</p><p>模块 X X X √</p><h4 id="三、预处理机制"><a href="#三、预处理机制" class="headerlink" title="三、预处理机制"></a>三、预处理机制</h4><p>JavaScript 语法的全局机制：预处理和指令序言。这 2 个机制对于我们解释一些 JavaScript 的语法现象非常重要。预处理机制可以理解 var 等声明类语句行为，指令序言可以解释严格模式。</p><p><code>预处理</code>：JavaScript 执行前，会对脚本、模块和函数体中的语句进行预处理。预处理过程将会提前处理 var、函数声明、class、const 和 let 这些语句，以确定其中变量的意义。</p><p><code>var声明</code>：var 声明永远作用于脚本、模块和函数体，在预处理阶段，不关心赋值的部分，只管在当前作用域声明这个变量。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> a = <span class="hljs-number">1</span>;<br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">foo</span>(<span class="hljs-params"></span>) </span>&#123;<br>  <span class="hljs-built_in">console</span>.log(a); <span class="hljs-comment">// undefined</span><br>  <span class="hljs-keyword">var</span> a = <span class="hljs-number">2</span>;<br>&#125;<br>foo();<br></code></pre></td></tr></table></figure><p>上面的代码声明了一个脚本级别的 a，又声明了 foo 函数体级别的 a，函数体级的 var 出现在 console.log 语句之后。</p><p>预处理过程在执行前，所以有函数体级的变量 a，就不会去访问外层作用域中的变量 a 了，而函数体级的变量 a 此时还没有复制，所以是 undefined。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> a = <span class="hljs-number">1</span>;<br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">foo</span>(<span class="hljs-params"></span>) </span>&#123;<br>  <span class="hljs-built_in">console</span>.log(a);<br>  <span class="hljs-keyword">if</span> (<span class="hljs-literal">false</span>) &#123;<br>    <span class="hljs-keyword">var</span> a = <span class="hljs-number">2</span>;<br>  &#125;<br>&#125;<br>foo();<br></code></pre></td></tr></table></figure><p>这段代码比上一段代码在 var a = 2 之外多了一段 if，我们知道 if(false) 中的代码永远不会被执行，但是预处理阶段并不管这个，var 的作用能够穿透一切语句结构，它只认脚本、模块和函数体三种语法结构。所以这里结果跟前一段代码完全一样，我们会得到 undefined。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> a = <span class="hljs-number">1</span>;<br><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">foo</span>(<span class="hljs-params"></span>) </span>&#123;<br>  <span class="hljs-keyword">var</span> o = &#123; <span class="hljs-attr">a</span>: <span class="hljs-number">3</span> &#125;;<br>  <span class="hljs-keyword">with</span> (o) &#123;<br>    <span class="hljs-keyword">var</span> a = <span class="hljs-number">2</span>;<br>  &#125;<br>  <span class="hljs-built_in">console</span>.log(o.a);<br>  <span class="hljs-built_in">console</span>.log(a);<br>&#125;<br><br>foo();<br></code></pre></td></tr></table></figure><p>引入 with 语句，with(o)创建了一个作用域，并把 o 对象加入词法环境，在其中使用了 var a = 2 语句。</p><p>在预处理阶段，只认 var 中声明的变量，所以同样为 foo 的作用域创建了 a 这个变量，但是没有赋值。在执行阶段，当执行到 var a = 2 时，作用域变成了 with 语句内，这时候的 a 被认为访问到了对象 o 的属性 a，所以最终执行的结果，我们得到了 2 和 undefined。</p><p><code>function声明</code>：function 声明的行为，在全局（脚本、模块和函数体），function 声明表现跟 var 相似，不同之处在于，function 声明不但在作用域中加入变量，还会给它赋值。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-built_in">console</span>.log(foo);<br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">foo</span>(<span class="hljs-params"></span>) </span>&#123;&#125;<br></code></pre></td></tr></table></figure><p>在声明函数 foo 之前，打印函数 foo,我们可以发现，已经是函数 foo 的值了。</p><p>下面示例不再被提前赋值：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-built_in">console</span>.log(foo); <span class="hljs-comment">// undefined</span><br><span class="hljs-keyword">if</span> (<span class="hljs-literal">true</span>) &#123;<br>  <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">foo</span>(<span class="hljs-params"></span>) </span>&#123;&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>function 声明出现在 if 等语句中，它仍然作用于脚本、模块和函数体级别，在预处理阶段，仍然会产生变量，它不再被提前赋值。</p><p>上述打印结果为 undefined，声明 function 在预处理阶段仍然发生了作用，在作用域中产生了变量，没有产生赋值，赋值行为发生在了执行阶段。</p><p>出现在 if 等语句中的 function，在 if 创建的作用域中仍然会被提前，产生赋值效果。</p><p><code>class声明</code>：在全局的行为跟 function 和 var 都不一样。</p><p>在 class 声明前使用 class 类名，会抛出错误：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-built_in">console</span>.log(c); <span class="hljs-comment">// c is not defined</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">c</span> </span>&#123;&#125;<br></code></pre></td></tr></table></figure><p>这个抛错很像是 class 没有预处理，但实际上并非如此。</p><p>复杂一点的例子：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> c = <span class="hljs-number">1</span>;<br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">foo</span>(<span class="hljs-params"></span>) </span>&#123;<br>  <span class="hljs-built_in">console</span>.log(c);<br>  <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">c</span> </span>&#123;&#125;<br>&#125;<br>foo();<br></code></pre></td></tr></table></figure><p>上面的代码，把 class 放进了一个函数体中，在外层作用域中有变量 c。</p><p>执行后，我们看到，仍然抛出了错误，如果去掉 class 声明，则会正常打印出 1，也就是说，出现在后面的 class 声明影响了前面语句的结果。这说明，class 声明也是会被预处理的，它会在作用域中创建变量，并且要求访问它时抛出错误。</p><p>class 的声明作用不会穿透 if 等语句结构，所以只有写在全局环境才会有声明作用。这样的 class 设计比 function 和 var 更符合直觉，而且在遇到一些比较奇怪的用法时，倾向于抛出错误。</p><h4 id="四、指令序言机制"><a href="#四、指令序言机制" class="headerlink" title="四、指令序言机制"></a>四、指令序言机制</h4><blockquote><p>脚本和模块都支持一种特别的语法，指令序言最早是为了 use strict 设计的，它规定了一种给 JavaScript 代码添加元信息的方式。</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-meta">&quot;use strict&quot;</span>;<br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">f</span>(<span class="hljs-params"></span>) </span>&#123;<br>  <span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">this</span>);<br>&#125;<br>f.call(<span class="hljs-literal">null</span>);<br></code></pre></td></tr></table></figure><p>null 原封不动地被当做 this 值打印了出来，这是严格模式的特征。</p><p>去掉严格模式，打印结果会变成 global。</p><p>‘use strict’是 JavaScript 标准中规定的唯一一种指令序言，但是设计指令序言的目的是留给 JavaScript 的引擎和实现者一些统一的表达式，在静态规定扫描时指定 JavaScript 代码的一些特性。</p><p>JavaScript 的指令序言是只有一个字符串直接量的表达式语句，它只能出现在脚本、模块和函数体的最前面。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">doSth</span>(<span class="hljs-params"></span>) </span>&#123;<br>  <span class="hljs-comment">//</span><br>&#125;<br>(<span class="hljs-string">&quot;use strict&quot;</span>);<br><span class="hljs-keyword">var</span> a = <span class="hljs-number">1</span>;<br><span class="hljs-comment">// .....</span><br></code></pre></td></tr></table></figure><p>‘use strct’没有出现在最前，所以不是指令序言。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-meta">&quot;use strict&quot;</span>; <span class="hljs-comment">// 单引号也是指令序言</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">doSth</span>(<span class="hljs-params"></span>) </span>&#123;<br>  <span class="hljs-comment">// ....</span><br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> js </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>98、基于JavaScript开发灵活的数据应用--基本数据处理(一)</title>
      <link href="/2022/11/26/98-js-string-number-array/"/>
      <url>/2022/11/26/98-js-string-number-array/</url>
      
        <content type="html"><![CDATA[<p>现代编程语言中，最基本的数据格式都会是字符串和数字。字符串用于表达人类文明的自然语言，数字用于表达量化世界的各种数值。</p><span id="more"></span><h2 id="一、字符串"><a href="#一、字符串" class="headerlink" title="一、字符串"></a>一、字符串</h2><p>字符串的运用包括，字符串的创建、分割、大小写转换、拼接等</p><h4 id="1-1-创建字符串"><a href="#1-1-创建字符串" class="headerlink" title="1-1 创建字符串"></a>1-1 创建字符串</h4><p>在 JavaScript 中创建一个字符串跟其他语言并没有较大的区别，可以分别使用 ‘、” 和 ` 作为边界标识。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> str1 = <span class="hljs-string">&quot;string 1&quot;</span>;<br><span class="hljs-keyword">const</span> str2 = <span class="hljs-string">&quot;string 2&quot;</span>;<br><span class="hljs-keyword">const</span> str3 = <span class="hljs-string">`string 3`</span>;<br></code></pre></td></tr></table></figure><p>从 JavaScript 的语法定义上 ‘ 和 “ 并没有太大的差别，但是 ` 的用途较为特殊。 同样可以以与 ‘ 和 “ 一样的使用方式使用，但也可以有更高级的用法。</p><p>例如：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> target = <span class="hljs-string">&quot;world&quot;</span>;<br><span class="hljs-keyword">const</span> word = <span class="hljs-string">`hello <span class="hljs-subst">$&#123;target&#125;</span>`</span>; <span class="hljs-comment">// =&gt; hello world</span><br></code></pre></td></tr></table></figure><p>同时 ` 也可以用于创建一个“多行字符串”，即字符串内容中包含多行文本。</p><h4 id="1-2-分割字符串"><a href="#1-2-分割字符串" class="headerlink" title="1-2 分割字符串"></a>1-2 分割字符串</h4><p>例如：如何将 “Hey jude,how is it going?” 转换为“hey jude how is it going”</p><p>二者不同之处在于，去除了文本中的标点符号、数字、大写字母转换为小写字母。</p><p>任务理解：去除标点符号、数字可以说是只保留英文字母，只需筛选出英文字母和空格即可，需要使用 ASCII 码进行甄别，大写字母的 ASCII 码范围为 65 到 90（即：A-Z），小写字母则为 97 到 122，空格的 ASCII 码为 32，换行符的 ASCII 码为 10。JS 中可以用 string.charCodeAt()方法获取字符串的 ASCII 码。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> originalText = <span class="hljs-string">&quot;Hey jude,how is it going?&quot;</span>;<br><span class="hljs-keyword">let</span> wordOnlyText = <span class="hljs-string">&quot;&quot;</span>;<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> i = <span class="hljs-number">0</span>; i &lt; originalText.length; i++) &#123;<br>  <span class="hljs-keyword">const</span> letter = originalText[i];<br>  <span class="hljs-keyword">const</span> asciiCode = letter.charCodeAt();<br>  <span class="hljs-keyword">if</span> (<br>    (asciiCode &gt;= <span class="hljs-number">65</span> &amp;&amp; asciiCode &lt;= <span class="hljs-number">90</span>) ||<br>    (asciiCode &gt;= <span class="hljs-number">97</span> &amp;&amp; asciiCode &lt;= <span class="hljs-number">122</span>) ||<br>    asciiCode === <span class="hljs-number">32</span><br>  ) &#123;<br>    wordOnlyText += letter;<br>  &#125;<br>&#125;<br><br><span class="hljs-built_in">console</span>.log(wordOnlyText); <span class="hljs-comment">// =&gt; Hey judehow is it going</span><br></code></pre></td></tr></table></figure><p>将大写字母转换为小写字母</p><p>string.charCodeAt() 方法来获取字符的 ASCII 码，那么自然也有对应的方法用于将 ASCII 码转换为对应字符 String.fromCharCode(code)。</p><p>而从字母的 ASCII 码范围可以看到，将大写字母的 ASCII 码数值加上 32 便是其对应小写字母的 ASCII 码数值。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">let</span> lowerCaseText = <span class="hljs-string">&quot;&quot;</span>;<br><br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> i = <span class="hljs-number">0</span>; i &lt; wordOnlyText.length; ++i) &#123;<br>  <span class="hljs-keyword">const</span> letter = wordOnlyText[i];<br>  <span class="hljs-keyword">const</span> asciiCode = letter.charCodeAt();<br><br>  <span class="hljs-keyword">if</span> (asciiCode &gt;= <span class="hljs-number">65</span> &amp;&amp; asciiCode &lt;= <span class="hljs-number">90</span>) &#123;<br>    lowerCaseText += <span class="hljs-built_in">String</span>.fromCharCode(asciiCode + <span class="hljs-number">32</span>);<br>  &#125; <span class="hljs-keyword">else</span> &#123;<br>    lowerCaseText += letter;<br>  &#125;<br>&#125;<br><br><span class="hljs-built_in">console</span>.log(lowerCaseText); <span class="hljs-comment">// =&gt; hey judehow is it going</span><br></code></pre></td></tr></table></figure><p>在 JavaScript 中早就已经内置了将文本中的大写字母转换为小写字母的 API 了 —— string.toLowerCase()。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> lowerCaseText = wordOnlyText.toLowerCase();<br></code></pre></td></tr></table></figure><h4 id="1-3-字符串的分割"><a href="#1-3-字符串的分割" class="headerlink" title="1-3 字符串的分割"></a>1-3 字符串的分割</h4><p>最主要用到的方法便是 string.split(separator)，其中这个 separator 则是定义了用于分割字符串内容的“分割符”。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> originalText = <span class="hljs-string">`</span><br><span class="hljs-string">Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the &quot;Software&quot;), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:</span><br><span class="hljs-string">The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.</span><br><span class="hljs-string">THE SOFTWARE IS PROVIDED &quot;AS IS&quot;, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.</span><br><span class="hljs-string">`</span>;<br><br><span class="hljs-keyword">let</span> wordOnlyText = <span class="hljs-string">&quot;&quot;</span>;<br><br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> i = <span class="hljs-number">0</span>; i &lt; originalText.length; ++i) &#123;<br>  <span class="hljs-keyword">const</span> letter = originalText[i];<br>  <span class="hljs-keyword">const</span> asciiCode = letter.charCodeAt();<br><br>  <span class="hljs-keyword">if</span> (<br>    (asciiCode &gt;= <span class="hljs-number">65</span> &amp;&amp; asciiCode &lt;= <span class="hljs-number">90</span>) ||<br>    (asciiCode &gt;= <span class="hljs-number">97</span> &amp;&amp; asciiCode &lt;= <span class="hljs-number">122</span>) ||<br>    asciiCode === <span class="hljs-number">32</span><br>  ) &#123;<br>    wordOnlyText += letter;<br>  &#125;<br>&#125;<br><br><span class="hljs-keyword">const</span> lowerCaseText = wordOnlyText.toLowerCase();<br><br><span class="hljs-keyword">const</span> words = lowerCaseText.split(<span class="hljs-string">&quot; &quot;</span>);<br><br><span class="hljs-built_in">console</span>.log(words.length); <span class="hljs-comment">//=&gt; 160</span><br></code></pre></td></tr></table></figure><h4 id="1-4-字符串的拼接"><a href="#1-4-字符串的拼接" class="headerlink" title="1-4 字符串的拼接"></a>1-4 字符串的拼接</h4><p>除了对字符串进行拆分以外，我们也常常需要将不同的信息通过各种方式拼装成一个完整的字符串信息。最常见的例子便是我们几乎每天都能遇见的，由程序自动发送的自动短信、自动邮件等。</p><p>字符串之间的连接可以直接使用 + 运算符完成。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> str1 = <span class="hljs-string">&quot;hello&quot;</span>;<br><span class="hljs-keyword">const</span> str2 = <span class="hljs-string">&quot;world&quot;</span>;<br><span class="hljs-built_in">console</span>.log(str1 + <span class="hljs-string">&quot; &quot;</span> + str2); <span class="hljs-comment">// =&gt; &#x27;hello world&#x27;</span><br></code></pre></td></tr></table></figure><p>使用 + 运算符是最基本的字符串拼接方式，适用于数据量较小的字符串拼接。数据量大时，我们需要将多个数据量‘嵌入’到文本模板中，这种情况通常可以使用模板引擎来实现这个功能。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> name = <span class="hljs-string">&quot;jude&quot;</span>;<br><span class="hljs-keyword">const</span> level = <span class="hljs-string">&quot;Gold&quot;</span>;<br><br><span class="hljs-keyword">const</span> message = <span class="hljs-string">`</span><br><span class="hljs-string">Hello,<span class="hljs-subst">$&#123;name&#125;</span>.</span><br><span class="hljs-string">Here is LOL account,you are the <span class="hljs-subst">$&#123;level&#125;</span> of our games.</span><br><span class="hljs-string">`</span>;<br><span class="hljs-built_in">console</span>.log(message);<br><span class="hljs-comment">// =&gt; Hello,jude.</span><br><span class="hljs-comment">// Here is LOL account,you are the Gold of our games.</span><br></code></pre></td></tr></table></figure><p>loading…</p><h2 id="二、对象字面量"><a href="#二、对象字面量" class="headerlink" title="二、对象字面量"></a>二、对象字面量</h2><h4 id="2-1-对象的内容读取"><a href="#2-1-对象的内容读取" class="headerlink" title="2-1 对象的内容读取"></a>2-1 对象的内容读取</h4><p>JavaScript 中对象内容读取十分的简单，如果属性键为字符串，且该字符串中只包含英文字母和下划线的话，可以直接用 <obj>.<key> 来读取属性值。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> person = &#123;<br>  <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;jude&quot;</span>,<br>  <span class="hljs-attr">age</span>: <span class="hljs-string">&quot;18&quot;</span>,<br>  <span class="hljs-attr">skills</span>: &#123;<br>    <span class="hljs-attr">title</span>: <span class="hljs-string">&quot;vue&quot;</span>,<br>    <span class="hljs-attr">desc</span>: <span class="hljs-string">&quot;mvvm&quot;</span>,<br>    <span class="hljs-attr">author</span>: <span class="hljs-string">&quot;Evan You&quot;</span>,<br>  &#125;,<br>  <span class="hljs-attr">others</span>: <span class="hljs-string">&quot;....&quot;</span>,<br>&#125;;<br><br><span class="hljs-built_in">console</span>.log(person.name); <span class="hljs-comment">// =&gt; jude</span><br><span class="hljs-built_in">console</span>.log(person.skills.title); <span class="hljs-comment">// =&gt; vue</span><br></code></pre></td></tr></table></figure><p>而当对象中所需要读取的目标属性键为数字、包含英文字母和下划线以外的字符串甚至是 Symbol 对象的时候，就需要使用 obj[key] 的形式来读取属性值了。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> obj = &#123;<br>  <span class="hljs-number">1</span>: <span class="hljs-number">2</span>,<br>  <span class="hljs-string">&quot;a b c&quot;</span>: <span class="hljs-string">&quot;d e f&quot;</span>,<br>  [<span class="hljs-built_in">Symbol</span>.for(<span class="hljs-string">&quot;foo&quot;</span>)]: <span class="hljs-string">&quot;bar&quot;</span>,<br>&#125;;<br><span class="hljs-built_in">console</span>.log(obj[<span class="hljs-number">1</span>]); <span class="hljs-comment">// =&gt; 2</span><br><span class="hljs-built_in">console</span>.log(obj[<span class="hljs-string">&quot;a b c&quot;</span>]); <span class="hljs-comment">// =&gt; d e f</span><br><span class="hljs-built_in">console</span>.log(obj[<span class="hljs-built_in">Symbol</span>.for(<span class="hljs-string">&quot;foo&quot;</span>)]); <span class="hljs-comment">// =&gt; bar</span><br></code></pre></td></tr></table></figure><h4 id="2-2-修改对象内容"><a href="#2-2-修改对象内容" class="headerlink" title="2-2 修改对象内容"></a>2-2 修改对象内容</h4><p>const 语句定义的对象是不能直接被替换，但是其中的内容依然是能被修改的。<br>在 JavaScript 中存在着“引用”和“值”的概念区别，对对象内容进行修改跟进行读取类似，只是在读取语句后面加上 = <new value> 即可。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> obj = &#123;<br>  <span class="hljs-attr">foo</span>: <span class="hljs-string">&quot;bar&quot;</span>,<br>  <span class="hljs-number">1</span>: <span class="hljs-number">2</span>,<br>  <span class="hljs-string">&quot;a b c&quot;</span>: <span class="hljs-string">&quot;d e f&quot;</span>,<br>  [<span class="hljs-built_in">Symbol</span>.for(<span class="hljs-string">&quot;foo&quot;</span>)]: <span class="hljs-string">&quot;bar&quot;</span>,<br>&#125;;<br>obj.foo = <span class="hljs-string">&quot;read&quot;</span>;<br>obj[<span class="hljs-number">1</span>] = <span class="hljs-number">3</span>;<br><span class="hljs-built_in">console</span>.log(obj.foo); <span class="hljs-comment">// =&gt; read</span><br><span class="hljs-built_in">console</span>.log(obj[<span class="hljs-number">1</span>]); <span class="hljs-comment">// =&gt; 3</span><br></code></pre></td></tr></table></figure><p>当你需要为一个对象添加新的属性时，也是通过同样的方式添加属性。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> obj = &#123;&#125;;<br>obj.foo = <span class="hljs-string">&quot;bar&quot;</span>;<br>obj[<span class="hljs-number">1</span>] = <span class="hljs-number">2</span>;<br></code></pre></td></tr></table></figure><p>在一般情况下，无论是对对象进行添加、读取还是修改属性，都遵循着嵌套链完整的原则</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> outer = &#123;<br>  <span class="hljs-attr">inner</span>: &#123;&#125;,<br>&#125;;<br>outer.inner.foo = <span class="hljs-string">&quot;bar&quot;</span>; <span class="hljs-comment">// success</span><br>outer.something.bar = <span class="hljs-number">1</span>; <span class="hljs-comment">// error</span><br></code></pre></td></tr></table></figure><h2 id="三、数组"><a href="#三、数组" class="headerlink" title="三、数组"></a>三、数组</h2><h4 id="3-1-数组增加内容"><a href="#3-1-数组增加内容" class="headerlink" title="3-1 数组增加内容"></a>3-1 数组增加内容</h4><p>向数组内增加内容包括向数组首端、末尾、中间添加新内容</p><blockquote><p>添加到末端：array.push()</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> array = [];<br>array.push(<span class="hljs-number">1</span>);<br><span class="hljs-built_in">console</span>.log(array); <span class="hljs-comment">// =&gt; [1]</span><br><br>array.push(<span class="hljs-number">2</span>, <span class="hljs-number">3</span>);<br><span class="hljs-built_in">console</span>.log(array); <span class="hljs-comment">// =&gt; [1,2,3]</span><br><span class="hljs-built_in">console</span>.log(array.length); <span class="hljs-comment">// 3</span><br></code></pre></td></tr></table></figure><blockquote><p>添加到首端: array.unshift()</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> array = [<span class="hljs-number">4</span>, <span class="hljs-number">5</span>];<br>array.unshift(<span class="hljs-number">3</span>);<br><span class="hljs-built_in">console</span>.log(array); <span class="hljs-comment">// =&gt; [3,4,5]</span><br><br>array.unshift(<span class="hljs-number">1</span>, <span class="hljs-number">2</span>);<br><span class="hljs-built_in">console</span>.log(array); <span class="hljs-comment">// =&gt; [1,2,3,4,5]</span><br></code></pre></td></tr></table></figure><blockquote><p>添加到数组中间某一位置：array.splice(start,deleteCount,element,….)</p></blockquote><p>该方法第二个参数是 deleteCount，因为这个方法也可以用来删除数组中某一个位置开始的若干个元素，而当我们将这个参数设置为 0 的时候，该方法第三个以及后面的参数便会插入到下标为 start 的位置，后面的元素自动往后推导。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> array = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">6</span>, <span class="hljs-number">7</span>];<br>array.splice(<span class="hljs-number">2</span>, <span class="hljs-number">0</span>, <span class="hljs-number">3</span>);<br><span class="hljs-built_in">console</span>.log(array); <span class="hljs-comment">// =&gt; [1,2,3,6,7]</span><br><br>array.splice(<span class="hljs-number">3</span>, <span class="hljs-number">0</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>);<br><span class="hljs-built_in">console</span>.log(array); <span class="hljs-comment">// =&gt; [1,2,3,4,5,6,7]</span><br></code></pre></td></tr></table></figure><blockquote><p>查找内容：filter</p></blockquote><p>filter 过滤器的逻辑便是定义一个过滤函数，该函数会有序地被传入数组中当前下标的元素，而它则需要返回该函数是否符合其过滤要求，即结果为 true 或 false。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> array = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>, <span class="hljs-number">6</span>, <span class="hljs-number">7</span>, <span class="hljs-number">8</span>];<br><span class="hljs-keyword">const</span> evenNumbers = array.filter(<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">x</span>) </span>&#123;<br>  <span class="hljs-keyword">return</span> x % <span class="hljs-number">2</span> == <span class="hljs-number">0</span>;<br>&#125;);<br><br><span class="hljs-built_in">console</span>.log(evenNumbers); <span class="hljs-comment">// =&gt; [2,4,6,8]</span><br></code></pre></td></tr></table></figure><blockquote><p>删除内容：array.splice(start,deleteCount)</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> array = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">10</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>];<br>array.splice(<span class="hljs-number">3</span>, <span class="hljs-number">1</span>);<br><span class="hljs-built_in">console</span>.log(array); <span class="hljs-comment">// =&gt; [1,2,3,4,5]</span><br></code></pre></td></tr></table></figure><blockquote><p>更新内容</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> array = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>];<br>array[<span class="hljs-number">0</span>] = <span class="hljs-number">10</span>;<br><span class="hljs-built_in">console</span>.log(array); <span class="hljs-comment">// =&gt; [10,2,3,4,5]</span><br></code></pre></td></tr></table></figure><blockquote><p>封装数组操作工具</p></blockquote><p>虽然绝大多数操作都可以直接使用 JavaScript 中自带的 API 来实现，但是如 array.splice() 这种方法看上去就很容易产生操作错误。那么为了避免开发中的失误，我们可以通过定义一个抽象对象来封装一个用于操作数组的工具库。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> arrayUtils = &#123;<br>  <span class="hljs-comment">// 末端添加</span><br>  <span class="hljs-function"><span class="hljs-title">append</span>(<span class="hljs-params">array,...elements</span>)</span>&#123;<br>    array.push(...elements)<br>    <span class="hljs-keyword">return</span> array<br>  &#125;,<br>  <span class="hljs-comment">// 首端添加</span><br>  <span class="hljs-function"><span class="hljs-title">prepend</span>(<span class="hljs-params">array,...elements</span>)</span>&#123;<br>    array.unshift(...elements)<br>    <span class="hljs-keyword">return</span> array<br>  &#125;<br>  <span class="hljs-comment">// 中间插入</span><br>  <span class="hljs-function"><span class="hljs-title">insert</span>(<span class="hljs-params">array,index,...elements</span>)</span>&#123;<br>    array.splice(index,<span class="hljs-number">0</span>,...elements)<br>    <span class="hljs-keyword">return</span> array<br>  &#125;<br>  <span class="hljs-comment">// 删除内容</span><br>  <span class="hljs-function"><span class="hljs-title">remove</span>(<span class="hljs-params">array,index</span>)</span>&#123;<br>    array.splice(index,<span class="hljs-number">1</span>)<br>    <span class="hljs-keyword">return</span> array<br>  &#125;<br>&#125;<br><span class="hljs-comment">// 使用</span><br><span class="hljs-keyword">const</span> array = []<br>arrayUtils.append(array,<span class="hljs-number">3</span>)<br>arrayUtils.prepend(array,<span class="hljs-number">1</span>)<br>arrayUtils.insert(array,<span class="hljs-number">1</span>,<span class="hljs-number">2</span>)<br><span class="hljs-built_in">console</span>.log(array) <span class="hljs-comment">// =&gt; [1,2,3]</span><br><br>arrayUtils.remove(array,<span class="hljs-number">1</span>)<br><span class="hljs-built_in">console</span>.log(array) <span class="hljs-comment">// =&gt; [1,3]</span><br></code></pre></td></tr></table></figure><h4 id="3-2-数组转换-聚合"><a href="#3-2-数组转换-聚合" class="headerlink" title="3-2 数组转换/聚合"></a>3-2 数组转换/聚合</h4><blockquote><p>map</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> array = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>];<br><span class="hljs-keyword">const</span> addedArray = array.map(<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">x</span>) </span>&#123;<br>  <span class="hljs-keyword">return</span> x + <span class="hljs-number">2</span>;<br>&#125;);<br><br><span class="hljs-built_in">console</span>.log(addedArray); <span class="hljs-comment">// =&gt; [3,4,5,6,7]</span><br></code></pre></td></tr></table></figure><blockquote><p>reduce</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> array = [<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>]<br><span class="hljs-keyword">const</span> sumResult = array.reduce(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">a,b</span>)</span>&#123;<br>  <span class="hljs-keyword">return</span> a + b<br>&#125;)<br><span class="hljs-built_in">console</span>.log(sumResult) <span class="hljs-comment">// =&gt; 10</span><br><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">multi</span>(<span class="hljs-params">array</span>)</span>&#123;<br>  <span class="hljs-keyword">return</span> array.reduce(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">a,b</span>)</span>&#123;<br>    <span class="hljs-keyword">return</span> a * b<br>  &#125;)<br>&#125;<br><span class="hljs-built_in">console</span>.log(multi(array))<br><br><span class="hljs-comment">// 函数式编程，进一步抽象封装</span><br><span class="hljs-keyword">const</span> array = [<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>]<br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">reduceFn</span>(<span class="hljs-params">callback</span>)</span>&#123;<br>  <span class="hljs-keyword">return</span> <span class="hljs-function"><span class="hljs-title">funtion</span>(<span class="hljs-params">array</span>)</span>&#123;<br>    <span class="hljs-keyword">return</span> array.reduce(callback)<br>  &#125;<br>&#125;<br><br><span class="hljs-keyword">const</span> sum = reduceFn(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">a,b</span>)</span>&#123;<br>  <span class="hljs-keyword">return</span> a + b<br>&#125;)<br><span class="hljs-keyword">const</span> multi = reduceFn(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">a,b</span>)</span>&#123;<br>  <span class="hljs-keyword">return</span> a + b<br>&#125;)<br><span class="hljs-built_in">console</span>.log(sum(array)) <span class="hljs-comment">// =&gt; 10</span><br><span class="hljs-built_in">console</span>.log(multi(array)) <span class="hljs-comment">// =&gt; 24</span><br></code></pre></td></tr></table></figure><blockquote><p>1、将数组[1,2,3,4,5] 转换为 [‘a1’,’a2’,’a3’,’a4’,’a5’]</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> array = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>];<br><span class="hljs-keyword">const</span> result = array.map(<span class="hljs-function">(<span class="hljs-params">item</span>) =&gt;</span> &#123;<br>  <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;a&quot;</span> + item;<br>&#125;);<br></code></pre></td></tr></table></figure><blockquote><p>将数组 [ 1, 2, 3, 4, 5 ] 转换为 [ ‘a1’, ‘b2’, ‘c3’, ‘d4’, ‘e5’ ]</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> array = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>];<br><span class="hljs-keyword">const</span> result = array.map(<span class="hljs-function">(<span class="hljs-params">item</span>) =&gt;</span> &#123;<br>  <span class="hljs-keyword">return</span> <span class="hljs-built_in">String</span>.fromCharCode(<span class="hljs-number">96</span> + item) + item;<br>&#125;);<br><span class="hljs-built_in">console</span>.log(result);<br></code></pre></td></tr></table></figure><blockquote><p>将数组 [ 1, 2, 3, 4, 5 ] 转换为 [ 1, 4, 9, 16, 25 ]</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> array = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>];<br><span class="hljs-keyword">const</span> result = array.map(<span class="hljs-function">(<span class="hljs-params">item</span>) =&gt;</span> &#123;<br>  <span class="hljs-keyword">return</span> <span class="hljs-built_in">Math</span>.pow(item, <span class="hljs-number">2</span>);<br>&#125;);<br><span class="hljs-built_in">console</span>.log(result);<br></code></pre></td></tr></table></figure><blockquote><p>查询 JavaScript 中 Array.prototype.map 方法的详细文档，并将数组 [ 0, 0, 0, 0, 0 ] 转换为 [ ‘A’, ‘B’, ‘C’, ‘D’, ‘E’ ]</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> array = [<span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>];<br><span class="hljs-keyword">const</span> result = array.map(<span class="hljs-function">(<span class="hljs-params">item, index</span>) =&gt;</span> &#123;<br>  <span class="hljs-keyword">return</span> <span class="hljs-built_in">String</span>.fromCharCode(<span class="hljs-number">65</span> + index);<br>&#125;);<br><span class="hljs-built_in">console</span>.log(result);<br></code></pre></td></tr></table></figure><blockquote><p>提取数组 [ 1, 2, 3, 4, 5 ] 中的 [ 2, 3, 4 ]</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> array = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>];<br><span class="hljs-keyword">const</span> result = array.filter(<span class="hljs-function">(<span class="hljs-params">item</span>) =&gt;</span> &#123;<br>  <span class="hljs-keyword">return</span> item &gt; <span class="hljs-number">1</span> &amp;&amp; item &lt; <span class="hljs-number">5</span>;<br>&#125;);<br><span class="hljs-built_in">console</span>.log(result);<br></code></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> js </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>97、promise代码为什么比setTimeout先执行？</title>
      <link href="/2022/11/23/97-promise/"/>
      <url>/2022/11/23/97-promise/</url>
      
        <content type="html"><![CDATA[<p>​ 当拿到一段 JavaScript 代码时，浏览器或者 Node 环境首先要做的就是；传递给 JavaScript 引擎，并且要求它去执行。然而，执行 JavaScript 并非一锤子买卖，宿主环境当遇到一些事件时，会继续把一段代码传递给 JavaScript 引擎去执行，此外，我们可能还会提供 API 给 JavaScript 引擎，比如 setTimeout 这样的 API，它会允许 JavaScript 在特定的时机执行。所以，我们首先应该形成一个感性的认知：一个 JavaScript 引擎会常驻于内存中，它等待着我们（宿主）把 JavaScript 代码或者函数传递给它执行。</p><span id="more"></span><h4 id="一、JavaScript-的执行"><a href="#一、JavaScript-的执行" class="headerlink" title="一、JavaScript 的执行"></a>一、JavaScript 的执行</h4><p>​ 在 ES3 和更早的版本中，JavaScript 本身还没有异步执行代码的能力，这也就意味着，宿主环境传递给 JavaScript 引擎一段代码，引擎就把代码直接顺次执行了，这个任务也就是宿主发起的任务。</p><p>​ 但是，在 ES5 之后，JavaScript 引入了 Promise，这样，不需要浏览器的安排，JavaScript 引擎本身也可以发起任务了。</p><p>​ JavaScript 语言，我们把宿主发起的任务称为宏观任务，把 JavaScript 引擎发起的任务称为微观任务。</p><h4 id="二、宏观任务与微观任务"><a href="#二、宏观任务与微观任务" class="headerlink" title="二、宏观任务与微观任务"></a>二、宏观任务与微观任务</h4><p>​ JavaScript 引擎等待宿主环境分配宏观任务，在操作系统中，通常等待的行为都是一个事件循环，所以在 Node 术语中，也会把这个部分称为事件循环。</p><blockquote><p>宏观任务的队列就相当于事件循环</p></blockquote><p>​ 在宏观任务中，JavaScript 的 promise 还会产生异步代码，JavaScript 必须保证这些异步代码在一个宏观任务中完成，因此每个宏观任务中又包含一个微观任务队列。</p><p>MacroTask</p><p>​ microTask microTask microTask</p><p>MacroTask</p><p>​ microTask microTask microTask</p><p>MacroTask</p><p>​ 有了宏观任务和微观任务机制，我们就可以实现 JavaScript 引擎级和宿主级的任务了，例如：<code>Promise 永远在队列尾部添加微观任务</code>。setTimeout 等宿主 API，则会添加宏观任务。</p><h4 id="三、Promise"><a href="#三、Promise" class="headerlink" title="三、Promise"></a>三、Promise</h4><p>​ Promise 是 JavaScript 语言提供的一种标准化的异步管理方式。promise 总体思想是，需要进行 IO、等待或者其它异步操作的函数，不返回真实结果，而返回一个“承诺”，函数的调用方可以在合适的时机，选择等待这个承诺兑现（promise 的 then 方法回调）</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">sleep</span>(<span class="hljs-params">duration</span>) </span>&#123;<br>  <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-built_in">Promise</span>(<span class="hljs-function">(<span class="hljs-params">resolve, reject</span>) =&gt;</span> &#123;<br>    <span class="hljs-built_in">setTimeout</span>(resolve, duration);<br>  &#125;);<br>&#125;<br>sleep(<span class="hljs-number">1000</span>).then(<span class="hljs-function">() =&gt;</span> <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;finished&quot;</span>));<br></code></pre></td></tr></table></figure><p>sleep 函数的作用：等候传入参数指定的时长。</p><p>Promise 的 then 回调是一个异步的执行过程。示例代码：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> test = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Promise</span>(<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">resolve, reject</span>) </span>&#123;<br>  <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;a&quot;</span>);<br>  resolve();<br>&#125;);<br>test.then(<span class="hljs-function">() =&gt;</span> <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;c&quot;</span>));<br><span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;b&quot;</span>);<br></code></pre></td></tr></table></figure><blockquote><p>打印顺序：a &gt; b &gt; c</p></blockquote><p>​ 在进入 console.log(‘b’)之前，毫无疑问 test 已经得到了 resolve，但是 Promise 的 resolve 始终是异步操作，所以 c 无法出现在 b 之前。</p><p>当 setTimeout 和 Promise 混用，设置两段互不相干的异步操作：通过 setTimeout 执行 console.log(‘d’)，通过 Promise 执行 console.log(‘c’)</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> test = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Promise</span>(<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">resolve, reject</span>) </span>&#123;<br>  <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;a&quot;</span>);<br>  resolve();<br>&#125;);<br><span class="hljs-built_in">setTimeout</span>(<span class="hljs-function">() =&gt;</span> <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;d&quot;</span>), <span class="hljs-number">0</span>);<br>test.then(<span class="hljs-function">() =&gt;</span> <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;c&quot;</span>));<br><span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;b&quot;</span>);<br></code></pre></td></tr></table></figure><p>我们发现，不论代码顺序如何，d 必定发生在 c 之后，因为 Promise 产生的是 JavaScript 引擎内部的微任务，而 setTimeout 是浏览器 API，它产生宏任务。</p><p>理解<code>微任务始终先于宏任务</code>，示例：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 执行一个耗时1秒的Promise</span><br><span class="hljs-built_in">setTimeout</span>(<span class="hljs-function">() =&gt;</span> <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;d&quot;</span>), <span class="hljs-number">0</span>);<br><span class="hljs-keyword">var</span> r = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Promise</span>(<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">resolve, reject</span>) </span>&#123;<br>  resolve();<br>&#125;);<br>r.then(<span class="hljs-function">() =&gt;</span> &#123;<br>  <span class="hljs-keyword">var</span> begin = <span class="hljs-built_in">Date</span>.now();<br>  <span class="hljs-keyword">while</span> (<span class="hljs-built_in">Date</span>.now() - begin &lt; <span class="hljs-number">1000</span>);<br>  <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;c1&quot;</span>);<br>  <span class="hljs-keyword">new</span> <span class="hljs-built_in">Promise</span>(<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">resolve, reject</span>) </span>&#123;<br>    resolve();<br>  &#125;).then(<span class="hljs-function">() =&gt;</span> <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;c2&quot;</span>));<br>&#125;);<br></code></pre></td></tr></table></figure><p>执行顺序：c1 &gt; c2 &gt; d 。 即使耗时 1 秒的 c1 执行完毕，再 enque 的 c2，仍然先于 d 执行，这可以很好的解释了<code>微任务优先</code>的原理。</p><p>异步执行的顺序：</p><blockquote><p>1、分析有多少个宏任务</p><p>2、在每个宏任务中，分析有多少个微任务</p><p>3、根据调用次序，确定宏任务中的微任务执行次序</p><p>4、根据宏任务的触发规则和调用次序，确定宏任务的执行次序</p><p>5、确定整个顺序</p></blockquote><p>复杂的例子：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">sleep</span>(<span class="hljs-params">duration</span>) </span>&#123;<br>  <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-built_in">Promise</span>(<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">resolve, reject</span>) </span>&#123;<br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;b&quot;</span>);<br>    <span class="hljs-built_in">setTimeout</span>(resolve, duration);<br>  &#125;);<br>&#125;<br><span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;a&quot;</span>);<br>sleep(<span class="hljs-number">5000</span>).then(<span class="hljs-function">() =&gt;</span> <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;c&quot;</span>));<br></code></pre></td></tr></table></figure><p>执行顺序：a &gt; b &gt; c 。setTimeout 把整个代码分割成了 2 个宏观任务，，不论是 5 秒还是 0 秒，都是一样。</p><p>第一个宏观任务中，包含了先后同步执行的 console.log(‘a’)和 console.log(‘b’)</p><p>setTimeout 后，第二个宏观任务执行调用了 resolve，然后 then 中的代码异步得到执行，所以调用了 console.log(‘c’),最终输出的顺序为： a b c 。</p><p>​ Promise 是 JavaScript 中的一个定义，但是实际编写代码时，我们可以发现，它似乎并不比回调的方式书写更简单，但是从 ES6 开始，我们有了 async/await，这个语法改进跟 Promise 配合，能够有效地改善代码结构。</p><h4 id="四、async-await"><a href="#四、async-await" class="headerlink" title="四、async/await"></a>四、async/await</h4><p>​ async/await 是 ES2016 新加入的特性，它提供了用 for、if 等结构来编写异步的方式。</p><p>它的运行时基础是 Promise。</p><p>​ async 函数必定返回 Promise，我们把所有返回 Promise 的函数都可以认为是异步函数。</p><p>async 函数是一种特殊语法，特征是在 function 关键字之前加上一个 async 关键字，这样就定义了一个 async 函数，我们可以在其中使用 await 来等待一个 Promise。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">sleep</span>(<span class="hljs-params">duration</span>) </span>&#123;<br>  <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-built_in">Promise</span>(<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">resolve, reject</span>) </span>&#123;<br>    <span class="hljs-built_in">setTimeout</span>(resolve, duration);<br>  &#125;);<br>&#125;<br><span class="hljs-keyword">async</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">foo</span>(<span class="hljs-params"></span>) </span>&#123;<br>  <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;a&quot;</span>);<br>  <span class="hljs-keyword">await</span> sleep(<span class="hljs-number">2000</span>);<br>  <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;b&quot;</span>);<br>&#125;<br>foo();<br></code></pre></td></tr></table></figure><p>​ async 函数强大之处在于，它是可以嵌套的。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">sleep</span>(<span class="hljs-params">duration</span>) </span>&#123;<br>  <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-built_in">Promise</span>(<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">resolve, reject</span>) </span>&#123;<br>    <span class="hljs-built_in">setTimeout</span>(resolve, duration);<br>  &#125;);<br>&#125;<br><span class="hljs-keyword">async</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">foo</span>(<span class="hljs-params">name</span>) </span>&#123;<br>  <span class="hljs-keyword">await</span> sleep(<span class="hljs-number">2000</span>);<br>  <span class="hljs-built_in">console</span>.log(name);<br>&#125;<br><span class="hljs-keyword">async</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">foo2</span>(<span class="hljs-params"></span>) </span>&#123;<br>  <span class="hljs-keyword">await</span> foo(<span class="hljs-string">&quot;a&quot;</span>);<br>  <span class="hljs-keyword">await</span> foo(<span class="hljs-string">&quot;b&quot;</span>);<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> promise </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>96、vue3的使用transition时，不写根标签的警告</title>
      <link href="/2022/11/22/96-transition/"/>
      <url>/2022/11/22/96-transition/</url>
      
        <content type="html"><![CDATA[<p>terminal 中的警告：[Vue warn]: Component inside <Transition> renders non-element root node that cannot be animated.</p><span id="more"></span><p>Vue3 支持 template 可以不写根标签，transition 使用组件动画必须含根标签</p><blockquote><p>解决方法：组件加回根标签 div</p></blockquote>]]></content>
      
      
      
        <tags>
            
            <tag> vue3 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>95、vue3.0使用sass预处理器使用::v-deep深度选择器抛出警告</title>
      <link href="/2022/11/21/95-v-deep/"/>
      <url>/2022/11/21/95-v-deep/</url>
      
        <content type="html"><![CDATA[<p>terminal 中的警告：::v-deep usage as a combinator has been deprecated. Use :deep(＜ inner-selector ＞)警告解决</p><span id="more"></span><p>警告的写法为：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-class">.redirect</span><span class="hljs-selector-pseudo">:hover</span> &#123;<br>  <span class="hljs-attribute">color</span>: <span class="hljs-built_in">v-bind</span>(linkHoverColor);<br>&#125;<br><br>::v-deep .no-redirect &#123;<br>  color: <span class="hljs-number">#97a8be</span>;<br>  <span class="hljs-attribute">cursor</span>: text;<br>&#125;<br></code></pre></td></tr></table></figure><p>正确写法：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-class">.redirect</span><span class="hljs-selector-pseudo">:hover</span> &#123;<br>  <span class="hljs-attribute">color</span>: <span class="hljs-built_in">v-bind</span>(linkHoverColor);<br>&#125;<br><br>::<span class="hljs-built_in">v-deep</span>(.no-redirect) &#123;<br>  color: <span class="hljs-number">#97a8be</span>;<br>  <span class="hljs-attribute">cursor</span>: text;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> vue3 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>94、使用vue3+element-plus写后台管理系统：（四）</title>
      <link href="/2022/11/19/94-vue3-ele-plus-admin/"/>
      <url>/2022/11/19/94-vue3-ele-plus-admin/</url>
      
        <content type="html"><![CDATA[<p>包括后台项目 layout 基础架构、用户主动和被动退出、动态 menu 菜单、结构路由表、侧边菜单栏的收缩、组件状态驱动的动态 CSS 值</p><span id="more"></span><p>layout 基础架构布局</p><p>layout 基本布局结构包括：Menu 菜单栏、NavBar 顶部导航栏（包含个人信息）、Main（页面主要展示区域）</p><h4 id="1、登录成功进入首页之后，整个首页也就是上面说的分为三个部分"><a href="#1、登录成功进入首页之后，整个首页也就是上面说的分为三个部分" class="headerlink" title="1、登录成功进入首页之后，整个首页也就是上面说的分为三个部分"></a>1、登录成功进入首页之后，整个首页也就是上面说的分为三个部分</h4><p>创建三个对应的组件</p><blockquote><p>layout/components/Sidebar/index.vue<br>layout/components/Navbar.vue<br>layout/components/AppMain.vue</p></blockquote><h4 id="2、在layout-index引入创建的三个组件"><a href="#2、在layout-index引入创建的三个组件" class="headerlink" title="2、在layout/index引入创建的三个组件"></a>2、在<code>layout/index</code>引入创建的三个组件</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">import</span> Navbar <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;./components/Navbar.vue&quot;</span>;<br><span class="hljs-keyword">import</span> Sidebar <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;./components/Sidebar/index.vue&quot;</span>;<br><span class="hljs-keyword">import</span> AppMain <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;./components/AppMain&quot;</span>;<br></code></pre></td></tr></table></figure><h4 id="3、layout-index对应的布局"><a href="#3、layout-index对应的布局" class="headerlink" title="3、layout/index对应的布局"></a>3、<code>layout/index</code>对应的布局</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">template</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;app-wrapper&quot;</span>&gt;</span><br>    <span class="hljs-comment">&lt;!-- 左侧 menu --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">sidebar</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;sidebar-container&quot;</span> /&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;main-container&quot;</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;fixed-header&quot;</span>&gt;</span><br>        <span class="hljs-comment">&lt;!-- 顶部的 navbar --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">navbar</span> /&gt;</span><br>      <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>      <span class="hljs-comment">&lt;!-- 内容区 --&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">app-main</span> /&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span><br></code></pre></td></tr></table></figure><h4 id="4、在-styles-文件夹下定义-3-个-scss-文件"><a href="#4、在-styles-文件夹下定义-3-个-scss-文件" class="headerlink" title="4、在 styles 文件夹下定义 3 个 scss 文件"></a>4、在 styles 文件夹下定义 3 个 scss 文件</h4><blockquote><p>variables.scss 定义常量<br>mixin.scss 定义通用的 css<br>sidebar.scss 处理 menu 菜单的样式</p></blockquote><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs css">// variables<span class="hljs-selector-class">.scss</span><br>// sidebar的样式  定义如下常量将其导出<br>$menuText: <span class="hljs-number">#bfcbd9</span>;<br>$menuActiveText: <span class="hljs-number">#ffffff</span>;<br>$subMenuActiveText: <span class="hljs-number">#f4f4f5</span>;<br><br>$menuBg: <span class="hljs-number">#304156</span>;<br>$menuHover: <span class="hljs-number">#263445</span>;<br><br>$subMenuBg: <span class="hljs-number">#1f2d3d</span>;<br>$subMenuHover: <span class="hljs-number">#001528</span>;<br><br>$sideBarWidth: <span class="hljs-number">210px</span>;<br><br>// JS 与 scss 共享变量，在 scss 中通过 :export 进行导出，在 js 中可通过 ESM 进行导入<br>:export &#123;<br>  menuText: $menuText;<br>  menuActiveText: $menuActiveText;<br>  subMenuActiveText: $subMenuActiveText;<br>  menuBg: $menuBg;<br>  menuHover: $menuHover;<br>  subMenuBg: $subMenuBg;<br>  subMenuHover: $subMenuHover;<br>  sideBarWidth: $sideBarWidth;<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p><code>注意</code>:这里是使用 :export{ } 方法将 css 常量导出</p></blockquote><p><code>mixin.scss</code></p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs css">// mixin<span class="hljs-selector-class">.scss</span><br><span class="hljs-keyword">@mixin</span> clearfix &#123;<br>  &amp;:after &#123;<br>    content: <span class="hljs-string">&quot;&quot;</span>;<br>    <span class="hljs-attribute">display</span>: table;<br>    <span class="hljs-attribute">clear</span>: both;<br>  &#125;<br>&#125;<br><br><span class="hljs-keyword">@mixin</span> scrollBar &#123;<br>  &amp;::-webkit-scrollbar-track-piece &#123;<br>    background: <span class="hljs-number">#d3dce6</span>;<br>  &#125;<br><br>  &amp;::-webkit-scrollbar &#123;<br>    width: <span class="hljs-number">6px</span>;<br>  &#125;<br><br>  &amp;::-webkit-scrollbar-thumb &#123;<br>    background: <span class="hljs-number">#99a9bf</span>;<br>    <span class="hljs-attribute">border-radius</span>: <span class="hljs-number">20px</span>;<br>  &#125;<br>&#125;<br><br><span class="hljs-keyword">@mixin</span> relative &#123;<br>  <span class="hljs-attribute">position</span>: relative;<br>  <span class="hljs-attribute">width</span>: <span class="hljs-number">100%</span>;<br>  <span class="hljs-attribute">height</span>: <span class="hljs-number">100%</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p><code>sidebar.scss</code></p><details><summary>点我展示代码</summary><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br></pre></td><td class="code"><pre><code class="hljs css">// sidebar<span class="hljs-selector-class">.scss</span><br><span class="hljs-selector-id">#app</span> &#123;<br>  <span class="hljs-selector-class">.main-container</span> &#123;<br>    <span class="hljs-attribute">min-height</span>: <span class="hljs-number">100%</span>;<br>    <span class="hljs-attribute">transition</span>: margin-left <span class="hljs-number">0.28s</span>;<br>    <span class="hljs-attribute">margin-left</span>: $sideBarWidth;<br>    <span class="hljs-attribute">position</span>: relative;<br>  &#125;<br><br>  <span class="hljs-selector-class">.sidebar-container</span> &#123;<br>    <span class="hljs-attribute">transition</span>: width <span class="hljs-number">0.28s</span>;<br>    <span class="hljs-attribute">width</span>: $sideBarWidth <span class="hljs-meta">!important</span>;<br>    <span class="hljs-attribute">height</span>: <span class="hljs-number">100%</span>;<br>    <span class="hljs-attribute">position</span>: fixed;<br>    <span class="hljs-attribute">top</span>: <span class="hljs-number">0</span>;<br>    <span class="hljs-attribute">bottom</span>: <span class="hljs-number">0</span>;<br>    <span class="hljs-attribute">left</span>: <span class="hljs-number">0</span>;<br>    <span class="hljs-attribute">z-index</span>: <span class="hljs-number">1001</span>;<br>    <span class="hljs-attribute">overflow</span>: hidden;<br><br>    // 重置 element-plus 的css<br>    <span class="hljs-selector-class">.horizontal-collapse-transition</span> &#123;<br>      <span class="hljs-attribute">transition</span>: <span class="hljs-number">0s</span> width ease-in-out, <span class="hljs-number">0s</span> padding-left ease-in-out,<br>        <span class="hljs-number">0s</span> padding-right ease-in-out;<br>    &#125;<br><br>    <span class="hljs-selector-class">.scrollbar-wrapper</span> &#123;<br>      <span class="hljs-attribute">overflow-x</span>: hidden <span class="hljs-meta">!important</span>;<br>    &#125;<br><br>    <span class="hljs-selector-class">.el-scrollbar__bar</span><span class="hljs-selector-class">.is-vertical</span> &#123;<br>      <span class="hljs-attribute">right</span>: <span class="hljs-number">0px</span>;<br>    &#125;<br><br>    <span class="hljs-selector-class">.el-scrollbar</span> &#123;<br>      <span class="hljs-attribute">height</span>: <span class="hljs-number">100%</span>;<br>    &#125;<br><br>    &amp;<span class="hljs-selector-class">.has-logo</span> &#123;<br>      <span class="hljs-selector-class">.el-scrollbar</span> &#123;<br>        <span class="hljs-attribute">height</span>: <span class="hljs-built_in">calc</span>(<span class="hljs-number">100%</span> - <span class="hljs-number">50px</span>);<br>      &#125;<br>    &#125;<br><br>    <span class="hljs-selector-class">.is-horizontal</span> &#123;<br>      <span class="hljs-attribute">display</span>: none;<br>    &#125;<br><br>    <span class="hljs-selector-tag">a</span> &#123;<br>      <span class="hljs-attribute">display</span>: inline-block;<br>      <span class="hljs-attribute">width</span>: <span class="hljs-number">100%</span>;<br>      <span class="hljs-attribute">overflow</span>: hidden;<br>    &#125;<br><br>    <span class="hljs-selector-class">.svg-icon</span> &#123;<br>      <span class="hljs-attribute">margin-right</span>: <span class="hljs-number">16px</span>;<br>    &#125;<br><br>    <span class="hljs-selector-class">.sub-el-icon</span> &#123;<br>      <span class="hljs-attribute">margin-right</span>: <span class="hljs-number">12px</span>;<br>      <span class="hljs-attribute">margin-left</span>: -<span class="hljs-number">2px</span>;<br>    &#125;<br><br>    <span class="hljs-selector-class">.el-menu</span> &#123;<br>      <span class="hljs-attribute">border</span>: none;<br>      <span class="hljs-attribute">height</span>: <span class="hljs-number">100%</span>;<br>      <span class="hljs-attribute">width</span>: <span class="hljs-number">100%</span> <span class="hljs-meta">!important</span>;<br>    &#125;<br><br>    <span class="hljs-selector-class">.is-active</span> &gt; <span class="hljs-selector-class">.el-submenu__title</span> &#123;<br>      <span class="hljs-attribute">color</span>: $subMenuActiveText <span class="hljs-meta">!important</span>;<br>    &#125;<br><br>    &amp; <span class="hljs-selector-class">.nest-menu</span> <span class="hljs-selector-class">.el-submenu</span> &gt; <span class="hljs-selector-class">.el-submenu__title</span>,<br>    &amp; <span class="hljs-selector-class">.el-submenu</span> <span class="hljs-selector-class">.el-menu-item</span> &#123;<br>      <span class="hljs-attribute">min-width</span>: $sideBarWidth <span class="hljs-meta">!important</span>;<br>    &#125;<br>  &#125;<br><br>  <span class="hljs-selector-class">.hideSidebar</span> &#123;<br>    <span class="hljs-selector-class">.sidebar-container</span> &#123;<br>      <span class="hljs-attribute">width</span>: <span class="hljs-number">54px</span> <span class="hljs-meta">!important</span>;<br>    &#125;<br><br>    <span class="hljs-selector-class">.main-container</span> &#123;<br>      <span class="hljs-attribute">margin-left</span>: <span class="hljs-number">54px</span>;<br>    &#125;<br><br>    <span class="hljs-selector-class">.submenu-title-noDropdown</span> &#123;<br>      <span class="hljs-attribute">padding</span>: <span class="hljs-number">0</span> <span class="hljs-meta">!important</span>;<br>      <span class="hljs-attribute">position</span>: relative;<br><br>      <span class="hljs-selector-class">.el-tooltip</span> &#123;<br>        <span class="hljs-attribute">padding</span>: <span class="hljs-number">0</span> <span class="hljs-meta">!important</span>;<br><br>        <span class="hljs-selector-class">.svg-icon</span> &#123;<br>          <span class="hljs-attribute">margin-left</span>: <span class="hljs-number">20px</span>;<br>        &#125;<br><br>        <span class="hljs-selector-class">.sub-el-icon</span> &#123;<br>          <span class="hljs-attribute">margin-left</span>: <span class="hljs-number">19px</span>;<br>        &#125;<br>      &#125;<br>    &#125;<br><br>    <span class="hljs-selector-class">.el-submenu</span> &#123;<br>      <span class="hljs-attribute">overflow</span>: hidden;<br><br>      &amp; &gt; <span class="hljs-selector-class">.el-submenu__title</span> &#123;<br>        <span class="hljs-attribute">padding</span>: <span class="hljs-number">0</span> <span class="hljs-meta">!important</span>;<br><br>        <span class="hljs-selector-class">.svg-icon</span> &#123;<br>          <span class="hljs-attribute">margin-left</span>: <span class="hljs-number">20px</span>;<br>        &#125;<br><br>        <span class="hljs-selector-class">.sub-el-icon</span> &#123;<br>          <span class="hljs-attribute">margin-left</span>: <span class="hljs-number">19px</span>;<br>        &#125;<br><br>        <span class="hljs-selector-class">.el-submenu__icon-arrow</span> &#123;<br>          <span class="hljs-attribute">display</span>: none;<br>        &#125;<br>      &#125;<br>    &#125;<br><br>    <span class="hljs-selector-class">.el-menu--collapse</span> &#123;<br>      <span class="hljs-selector-class">.el-submenu</span> &#123;<br>        &amp; &gt; <span class="hljs-selector-class">.el-submenu__title</span> &#123;<br>          &amp; &gt; <span class="hljs-selector-tag">span</span> &#123;<br>            <span class="hljs-attribute">height</span>: <span class="hljs-number">0</span>;<br>            <span class="hljs-attribute">width</span>: <span class="hljs-number">0</span>;<br>            <span class="hljs-attribute">overflow</span>: hidden;<br>            <span class="hljs-attribute">visibility</span>: hidden;<br>            <span class="hljs-attribute">display</span>: inline-block;<br>          &#125;<br>        &#125;<br>      &#125;<br>    &#125;<br>  &#125;<br><br>  <span class="hljs-selector-class">.el-menu--collapse</span> <span class="hljs-selector-class">.el-menu</span> <span class="hljs-selector-class">.el-submenu</span> &#123;<br>    <span class="hljs-attribute">min-width</span>: $sideBarWidth <span class="hljs-meta">!important</span>;<br>  &#125;<br><br>  <span class="hljs-selector-class">.withoutAnimation</span> &#123;<br>    <span class="hljs-selector-class">.main-container</span>,<br>    <span class="hljs-selector-class">.sidebar-container</span> &#123;<br>      <span class="hljs-attribute">transition</span>: none;<br>    &#125;<br>  &#125;<br>&#125;<br><br><span class="hljs-selector-class">.el-menu--vertical</span> &#123;<br>  &amp; &gt; <span class="hljs-selector-class">.el-menu</span> &#123;<br>    <span class="hljs-selector-class">.svg-icon</span> &#123;<br>      <span class="hljs-attribute">margin-right</span>: <span class="hljs-number">16px</span>;<br>    &#125;<br>    <span class="hljs-selector-class">.sub-el-icon</span> &#123;<br>      <span class="hljs-attribute">margin-right</span>: <span class="hljs-number">12px</span>;<br>      <span class="hljs-attribute">margin-left</span>: -<span class="hljs-number">2px</span>;<br>    &#125;<br>  &#125;<br><br>  // 菜单项过长时<br><br>  &gt; <span class="hljs-selector-class">.el-menu--popup</span> &#123;<br>    <span class="hljs-attribute">max-height</span>: <span class="hljs-number">100vh</span>;<br>    <span class="hljs-attribute">overflow-y</span>: auto;<br><br>    &amp;::-webkit-scrollbar-track-piece &#123;<br>      background: <span class="hljs-number">#d3dce6</span>;<br>    &#125;<br><br>    &amp;::-webkit-scrollbar &#123;<br>      width: <span class="hljs-number">6px</span>;<br>    &#125;<br><br>    &amp;::-webkit-scrollbar-thumb &#123;<br>      background: <span class="hljs-number">#99a9bf</span>;<br>      <span class="hljs-attribute">border-radius</span>: <span class="hljs-number">20px</span>;<br>    &#125;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure></details><h4 id="5、创建的三个-scss-文件导入到-styles-index-scss"><a href="#5、创建的三个-scss-文件导入到-styles-index-scss" class="headerlink" title="5、创建的三个 scss 文件导入到 styles/index.scss"></a>5、创建的三个 scss 文件导入到 styles/index.scss</h4><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs css">// index<span class="hljs-selector-class">.scss</span><br><span class="hljs-keyword">@import</span> <span class="hljs-string">&quot;./variables.scss&quot;</span>;<br><span class="hljs-keyword">@import</span> <span class="hljs-string">&quot;./mixin.scss&quot;</span>;<br><span class="hljs-keyword">@import</span> <span class="hljs-string">&quot;./sidebar.scss&quot;</span>;<br></code></pre></td></tr></table></figure><p><code>layout/index.vue</code>写入样式</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs css">&lt;style lang=&quot;scss&quot; scoped&gt;<br><span class="hljs-keyword">@import</span> <span class="hljs-string">&#x27;@/styles/mixin.scss&#x27;</span>;<br><span class="hljs-keyword">@import</span> <span class="hljs-string">&#x27;@/styles/variables.scss&#x27;</span>;<br><br><span class="hljs-selector-class">.app-wrapper</span> &#123;<br>  <span class="hljs-keyword">@include</span> clearfix;<br>  <span class="hljs-attribute">position</span>: relative;<br>  <span class="hljs-attribute">height</span>: <span class="hljs-number">100%</span>;<br>  <span class="hljs-attribute">width</span>: <span class="hljs-number">100%</span>;<br>&#125;<br><br><span class="hljs-selector-class">.fixed-header</span> &#123;<br>  <span class="hljs-attribute">position</span>: fixed;<br>  <span class="hljs-attribute">top</span>: <span class="hljs-number">0</span>;<br>  <span class="hljs-attribute">right</span>: <span class="hljs-number">0</span>;<br>  <span class="hljs-attribute">z-index</span>: <span class="hljs-number">9</span>;<br>  <span class="hljs-attribute">width</span>: <span class="hljs-built_in">calc</span>(<span class="hljs-number">100%</span> - #&#123;$sideBarWidth&#125;);<br>&#125;<br>&lt;/style&gt;<br></code></pre></td></tr></table></figure><h4 id="6、侧边栏要实现主题更换功能，sidebar-赋值动态背景颜色"><a href="#6、侧边栏要实现主题更换功能，sidebar-赋值动态背景颜色" class="headerlink" title="6、侧边栏要实现主题更换功能，sidebar 赋值动态背景颜色"></a>6、<code>侧边栏</code>要实现<code>主题更换</code>功能，sidebar 赋值动态背景颜色</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">template</span>&gt;</span><br>  ...<br>  <span class="hljs-comment">&lt;!-- 左侧 menu --&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">sidebar</span></span><br><span class="hljs-tag">    <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;sidebar-container&quot;</span></span><br><span class="hljs-tag">    <span class="hljs-attr">:style</span>=<span class="hljs-string">&quot;&#123; backgroundColor: variables.menuBg &#125;&quot;</span></span><br><span class="hljs-tag">  /&gt;</span><br>  ...<br><span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">setup</span>&gt;</span><span class="javascript"></span><br><span class="javascript">  <span class="hljs-keyword">import</span> variables <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;@/styles/variables.scss&quot;</span>;</span><br><span class="javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><h4 id="7、Navbar、Sidebar、AppMain-组件初始化代码占位及样式修改"><a href="#7、Navbar、Sidebar、AppMain-组件初始化代码占位及样式修改" class="headerlink" title="7、Navbar、Sidebar、AppMain 组件初始化代码占位及样式修改"></a>7、Navbar、Sidebar、AppMain 组件初始化代码占位及样式修改</h4><p>需要处理 AppMain 组件和 Navbar 组件重叠问题</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">template</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;app-main&quot;</span>&gt;</span>AppMain<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">style</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;scss&quot;</span> <span class="hljs-attr">scoped</span>&gt;</span><span class="css"></span><br><span class="css">  <span class="hljs-selector-class">.app-main</span> &#123;</span><br><span class="css">    <span class="hljs-attribute">min-height</span>: <span class="hljs-built_in">calc</span>(<span class="hljs-number">100vh</span> - <span class="hljs-number">50px</span>);</span><br><span class="css">    <span class="hljs-attribute">width</span>: <span class="hljs-number">100%</span>;</span><br><span class="css">    <span class="hljs-attribute">position</span>: relative;</span><br><span class="css">    <span class="hljs-attribute">overflow</span>: hidden;</span><br><span class="css">    <span class="hljs-attribute">padding</span>: <span class="hljs-number">61px</span> <span class="hljs-number">20px</span> <span class="hljs-number">20px</span> <span class="hljs-number">20px</span>;</span><br><span class="css">    <span class="hljs-attribute">box-sizing</span>: border-box;</span><br><span class="css">  &#125;</span><br><span class="css"></span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br></code></pre></td></tr></table></figure><h4 id="8、用户个人信息"><a href="#8、用户个人信息" class="headerlink" title="8、用户个人信息"></a>8、用户个人信息</h4><p>这里需要处理一下用户个人信息展示</p><p><code>api/sys.js</code>文件定义方法、axios 请求拦截器对 token 进行 header 注入</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 获取用户信息</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">const</span> getUserInfo = <span class="hljs-function">() =&gt;</span> &#123;<br>  <span class="hljs-keyword">return</span> request(&#123;<br>    <span class="hljs-attr">url</span>: <span class="hljs-string">&quot;/sys/profile&quot;</span>,<br>  &#125;);<br>&#125;;<br><br><span class="hljs-comment">// utils/request.js</span><br><span class="hljs-keyword">import</span> store <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;@/store&quot;</span>;<br><span class="hljs-comment">// 请求拦截器</span><br>service.interceptors.request.use(<br>  <span class="hljs-function">(<span class="hljs-params">config</span>) =&gt;</span> &#123;<br>    <span class="hljs-comment">// 在这个位置需要统一的去注入token</span><br>    <span class="hljs-keyword">if</span> (store.getters.token) &#123;<br>      <span class="hljs-comment">// 如果token存在 注入token</span><br>      config.headers.Authorization = <span class="hljs-string">`Bearer <span class="hljs-subst">$&#123;store.getters.token&#125;</span>`</span>;<br>    &#125;<br>    <span class="hljs-keyword">return</span> config; <span class="hljs-comment">// 必须返回配置</span><br>  &#125;,<br>  <span class="hljs-function">(<span class="hljs-params">error</span>) =&gt;</span> &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-built_in">Promise</span>.reject(error);<br>  &#125;<br>);<br></code></pre></td></tr></table></figure><p>定义调用接口的动作<code>store/modules/user.js</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">import</span> &#123; login, getUserInfo &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@/api/sys&#x27;</span><br>...<br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> &#123;<br>  <span class="hljs-attr">namespaced</span>: <span class="hljs-literal">true</span>,<br>  <span class="hljs-attr">state</span>: <span class="hljs-function">() =&gt;</span> (&#123;<br>    ...<br>    <span class="hljs-attr">userInfo</span>: &#123;&#125;<br>  &#125;),<br>  <span class="hljs-attr">mutations</span>: &#123;<br>    ...<br>    <span class="hljs-function"><span class="hljs-title">setUserInfo</span>(<span class="hljs-params">state, userInfo</span>)</span> &#123;<br>      state.userInfo = userInfo<br>    &#125;<br>  &#125;,<br>  <span class="hljs-attr">actions</span>: &#123;<br>    ...<br>    <span class="hljs-keyword">async</span> <span class="hljs-function"><span class="hljs-title">getUserInfo</span>(<span class="hljs-params">context</span>)</span> &#123;<br>      <span class="hljs-keyword">const</span> res = <span class="hljs-keyword">await</span> getUserInfo()<br>      <span class="hljs-built_in">this</span>.commit(<span class="hljs-string">&#x27;user/setUserInfo&#x27;</span>, res)<br>      <span class="hljs-keyword">return</span> res<br>    &#125;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>在权限拦截时触发的动作<code>permission.js</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs js">  <span class="hljs-keyword">if</span> (to.path === <span class="hljs-string">&#x27;/login&#x27;</span>) &#123;<br>    ...<br>  &#125; <span class="hljs-keyword">else</span> &#123;<br>    <span class="hljs-comment">// 判断用户资料是否获取</span><br>    <span class="hljs-comment">// 若不存在用户信息，则需要获取用户信息</span><br>    <span class="hljs-keyword">if</span> (!store.getters.hasUserInfo) &#123;<br>      <span class="hljs-comment">// 触发获取用户信息的 action</span><br>      <span class="hljs-keyword">await</span> store.dispatch(<span class="hljs-string">&#x27;user/getUserInfo&#x27;</span>)<br>    &#125;<br>    next()<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>写入判断用户信息<code>store/getters.js</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> getters = &#123;<br>  ...<br>  <span class="hljs-attr">userInfo</span>: <span class="hljs-function"><span class="hljs-params">state</span> =&gt;</span> state.user.userInfo,<br>  <span class="hljs-comment">/**</span><br><span class="hljs-comment">   * <span class="hljs-doctag">@returns </span>true 表示已存在用户信息</span><br><span class="hljs-comment">   */</span><br>  <span class="hljs-attr">hasUserInfo</span>: <span class="hljs-function"><span class="hljs-params">state</span> =&gt;</span> &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-built_in">JSON</span>.stringify(state.user.userInfo) !== <span class="hljs-string">&#x27;&#123;&#125;&#x27;</span><br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="9、element-plus-的-dropdown-avatar-组件实现用户头像信息及用户主动退出功能"><a href="#9、element-plus-的-dropdown-avatar-组件实现用户头像信息及用户主动退出功能" class="headerlink" title="9、element-plus 的 dropdown avatar 组件实现用户头像信息及用户主动退出功能"></a>9、element-plus 的 dropdown avatar 组件实现用户头像信息及用户主动退出功能</h4><p><code>用户头像功能及下拉菜单栏</code></p><details><summary>点我展示代码</summary><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><code class="hljs html">// layout/components/navbar.vue<br><span class="hljs-tag">&lt;<span class="hljs-name">template</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;navbar&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;right-menu&quot;</span>&gt;</span><br>      <span class="hljs-comment">&lt;!-- 头像 --&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">el-dropdown</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;avatar-container&quot;</span> <span class="hljs-attr">trigger</span>=<span class="hljs-string">&quot;click&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;avatar-wrapper&quot;</span>&gt;</span><br>          <span class="hljs-tag">&lt;<span class="hljs-name">el-avatar</span></span><br><span class="hljs-tag">            <span class="hljs-attr">shape</span>=<span class="hljs-string">&quot;square&quot;</span></span><br><span class="hljs-tag">            <span class="hljs-attr">:size</span>=<span class="hljs-string">&quot;40&quot;</span></span><br><span class="hljs-tag">            <span class="hljs-attr">:src</span>=<span class="hljs-string">&quot;$store.getters.userInfo.avatar&quot;</span></span><br><span class="hljs-tag">          &gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">el-avatar</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">template</span> #<span class="hljs-attr">dropdown</span>&gt;</span><br>          <span class="hljs-tag">&lt;<span class="hljs-name">el-dropdown-menu</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;user-dropdown&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">router-link</span> <span class="hljs-attr">to</span>=<span class="hljs-string">&quot;/&quot;</span>&gt;</span><br>              <span class="hljs-tag">&lt;<span class="hljs-name">el-dropdown-item</span>&gt;</span> 首页 <span class="hljs-tag">&lt;/<span class="hljs-name">el-dropdown-item</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">router-link</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">el-dropdown-item</span> <span class="hljs-attr">divided</span>&gt;</span> 退出登录 <span class="hljs-tag">&lt;/<span class="hljs-name">el-dropdown-item</span>&gt;</span><br>          <span class="hljs-tag">&lt;/<span class="hljs-name">el-dropdown-menu</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span><br>      <span class="hljs-tag">&lt;/<span class="hljs-name">el-dropdown</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">setup</span>&gt;</span><span class="javascript"></span><br><span class="javascript">  <span class="hljs-keyword">import</span> &#123;&#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;vue&quot;</span>;</span><br><span class="javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">style</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;scss&quot;</span> <span class="hljs-attr">scoped</span>&gt;</span><span class="css"></span><br><span class="css">  <span class="hljs-selector-class">.navbar</span> &#123;</span><br><span class="css">    <span class="hljs-attribute">height</span>: <span class="hljs-number">50px</span>;</span><br><span class="css">    <span class="hljs-attribute">overflow</span>: hidden;</span><br><span class="css">    <span class="hljs-attribute">position</span>: relative;</span><br><span class="css">    <span class="hljs-attribute">background</span>: <span class="hljs-number">#fff</span>;</span><br><span class="css">    <span class="hljs-attribute">box-shadow</span>: <span class="hljs-number">0</span> <span class="hljs-number">1px</span> <span class="hljs-number">4px</span> <span class="hljs-built_in">rgba</span>(<span class="hljs-number">0</span>, <span class="hljs-number">21</span>, <span class="hljs-number">41</span>, <span class="hljs-number">0.08</span>);</span><br><span class="css"></span><br><span class="css">    <span class="hljs-selector-class">.right-menu</span> &#123;</span><br><span class="css">      <span class="hljs-attribute">display</span>: flex;</span><br><span class="css">      <span class="hljs-attribute">align-items</span>: center;</span><br><span class="css">      <span class="hljs-attribute">float</span>: right;</span><br><span class="css">      <span class="hljs-attribute">padding-right</span>: <span class="hljs-number">16px</span>;</span><br><span class="css"></span><br><span class="css">      ::v-deep .avatar-container &#123;</span><br><span class="css">        cursor: pointer;</span><br><span class="css">        <span class="hljs-selector-class">.avatar-wrapper</span> &#123;</span><br><span class="css">          <span class="hljs-attribute">margin-top</span>: <span class="hljs-number">5px</span>;</span><br><span class="css">          <span class="hljs-attribute">position</span>: relative;</span><br><span class="css">          n <span class="hljs-selector-class">.el-avatar</span> &#123;</span><br><span class="css">            --el-avatar-<span class="hljs-attribute">background-color</span>: none;</span><br><span class="css">            <span class="hljs-attribute">margin-right</span>: <span class="hljs-number">12px</span>;</span><br><span class="css">          &#125;</span><br><span class="css">        &#125;</span><br><span class="css">      &#125;</span><br><span class="css">    &#125;</span><br><span class="css">  &#125;</span><br><span class="css"></span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br></code></pre></td></tr></table></figure></details><h4 id="10、主动退出功能-在-store-moduels-user-js-中，清除当前用户缓存数据、清除用户权限相关配置、返回到登录页"><a href="#10、主动退出功能-在-store-moduels-user-js-中，清除当前用户缓存数据、清除用户权限相关配置、返回到登录页" class="headerlink" title="10、主动退出功能:在 store/moduels/user.js 中，清除当前用户缓存数据、清除用户权限相关配置、返回到登录页"></a>10、<code>主动退出功能</code>:在 store/moduels/user.js 中，清除当前用户缓存数据、清除用户权限相关配置、返回到登录页</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">import</span> router <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@/router&#x27;</span><br><br><span class="hljs-function"><span class="hljs-title">logout</span>(<span class="hljs-params"></span>)</span> &#123;<br>    <span class="hljs-built_in">this</span>.commit(<span class="hljs-string">&#x27;user/setToken&#x27;</span>, <span class="hljs-string">&#x27;&#x27;</span>)<br>    <span class="hljs-built_in">this</span>.commit(<span class="hljs-string">&#x27;user/setUserInfo&#x27;</span>, &#123;&#125;)<br>    removeAllItem()<br>    router.push(<span class="hljs-string">&#x27;/login&#x27;</span>)<br>&#125;<br></code></pre></td></tr></table></figure><p>退出按钮点击事件，触发 logout 的 action</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">import</span> &#123; useStore &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;vuex&quot;</span>;<br><br><span class="hljs-keyword">const</span> store = useStore();<br><span class="hljs-keyword">const</span> logout = <span class="hljs-function">() =&gt;</span> &#123;<br>  store.dispatch(<span class="hljs-string">&quot;user/logout&quot;</span>);<br>&#125;;<br></code></pre></td></tr></table></figure><h4 id="11、被动退出功能：token-过期、单一账户同时登录"><a href="#11、被动退出功能：token-过期、单一账户同时登录" class="headerlink" title="11、被动退出功能：token 过期、单一账户同时登录"></a>11、<code>被动退出功能</code>：token 过期、单一账户同时登录</h4><p>token 表示一个用户的身份令牌，对服务端而言，只认令牌不认人，所以说一旦其他人获取了你的 token，那么可以伪装成你，来获取对应的敏感数据。</p><p>为了保证用户的信息安全，那么对于 token 而言就被制定了很多安全策略。<br>token 的安全策略：动态 token、刷新 token、失效 token</p><p>选择时效 token：服务端处理 token 时效的同时，在前端主动介入 token 时效的处理中，从而保证用户信息的安全性。</p><p>实现方案：</p><blockquote><p>1、在用户登录时，记录当前登录时间<br>2、制定失效时长<br>3、接口调用时，根据当前时间对比登录时间，看是否超过了时效时长。如果未超过，则正常进行后续操作；如果超过，则进行退出登录操作</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// utils/auth.js</span><br><span class="hljs-keyword">import</span> &#123; TIME_STAMP, TOKEN_TIMEOUT_VALUE &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;@/constant&quot;</span>;<br><span class="hljs-keyword">import</span> &#123; setItem, getItem &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;@/utils/storage&quot;</span>;<br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 获取时间戳</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">export</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">getTimeStamp</span>(<span class="hljs-params"></span>) </span>&#123;<br>  <span class="hljs-keyword">return</span> getItem(TIME_STAMP);<br>&#125;<br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 设置时间戳</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">export</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">setTimeStamp</span>(<span class="hljs-params"></span>) </span>&#123;<br>  setItem(TIME_STAMP, <span class="hljs-built_in">Date</span>.now());<br>&#125;<br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 是否超时</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">export</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">isCheckTimeout</span>(<span class="hljs-params"></span>) </span>&#123;<br>  <span class="hljs-comment">// 当前时间戳</span><br>  <span class="hljs-keyword">var</span> currentTime = <span class="hljs-built_in">Date</span>.now();<br>  <span class="hljs-comment">// 缓存时间戳</span><br>  <span class="hljs-keyword">var</span> timeStamp = getTimeStamp();<br>  <span class="hljs-keyword">return</span> currentTime - timeStamp &gt; TOKEN_TIMEOUT_VALUE;<br>&#125;<br><br><span class="hljs-comment">// token时间戳</span><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">const</span> TIME_STAMP = <span class="hljs-string">&quot;timeStamp&quot;</span>;<br><span class="hljs-comment">// 超时时长(毫秒) 两小时</span><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">const</span> TOKEN_TIMEOUT_VALUE = <span class="hljs-number">2</span> * <span class="hljs-number">3600</span> * <span class="hljs-number">1000</span>;<br></code></pre></td></tr></table></figure><p>用户登录成功之后设置时间，到 store/user.js 的 login 中：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">import</span> &#123; setTimeStamp &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@/utils/auth&#x27;</span><br><br><span class="hljs-function"><span class="hljs-title">login</span>(<span class="hljs-params">context, userInfo</span>)</span> &#123;<br>      ...<br>      <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-built_in">Promise</span>(<span class="hljs-function">(<span class="hljs-params">resolve, reject</span>) =&gt;</span> &#123;<br>        ...<br>          .then(<span class="hljs-function"><span class="hljs-params">data</span> =&gt;</span> &#123;<br>            ...<br>            <span class="hljs-comment">// 保存登录时间</span><br>            setTimeStamp()<br>            resolve()<br>          &#125;)<br>      &#125;)<br>    &#125;,<br></code></pre></td></tr></table></figure><p>在<code>utils/request</code>对应的请求拦截器中进行主动介入</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">import</span> &#123; isCheckTimeout &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@/utils/auth&#x27;</span><br><br><span class="hljs-keyword">if</span> (store.getters.token) &#123;<br>      <span class="hljs-keyword">if</span> (isCheckTimeout()) &#123;<br>        <span class="hljs-comment">// 登出操作</span><br>        store.dispatch(<span class="hljs-string">&#x27;user/logout&#x27;</span>)<br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">Promise</span>.reject(<span class="hljs-keyword">new</span> <span class="hljs-built_in">Error</span>(<span class="hljs-string">&#x27;token 失效&#x27;</span>))<br>      &#125;<br>      ...<br>    &#125;<br><br><span class="hljs-comment">// 响应拦截器</span><br>service.interceptors.response.use(<br>  <span class="hljs-function"><span class="hljs-params">response</span> =&gt;</span> &#123;<br>    ...<br>  &#125;,<br>  <span class="hljs-function"><span class="hljs-params">error</span> =&gt;</span> &#123;<br>    <span class="hljs-comment">// 处理 token 超时问题</span><br>    <span class="hljs-keyword">if</span> (<br>      error.response &amp;&amp;<br>      error.response.data &amp;&amp;<br>      error.response.data.code === <span class="hljs-number">401</span><br>    ) &#123;<br>      <span class="hljs-comment">// token超时</span><br>      store.dispatch(<span class="hljs-string">&#x27;user/logout&#x27;</span>)<br>    &#125;<br>    ElMessage.error(error.message) <span class="hljs-comment">// 提示错误信息</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-built_in">Promise</span>.reject(error)<br>  &#125;<br>)<br></code></pre></td></tr></table></figure><h4 id="12、临时menu菜单"><a href="#12、临时menu菜单" class="headerlink" title="12、临时menu菜单"></a>12、<code>临时menu菜单</code></h4><p>layout/Sidebar/SidebarMenu.vue</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">template</span>&gt;</span><br>  <span class="hljs-comment">&lt;!-- 一级 menu 菜单 --&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">el-menu</span></span><br><span class="hljs-tag">    <span class="hljs-attr">:uniqueOpened</span>=<span class="hljs-string">&quot;true&quot;</span></span><br><span class="hljs-tag">    <span class="hljs-attr">default-active</span>=<span class="hljs-string">&quot;2&quot;</span></span><br><span class="hljs-tag">    <span class="hljs-attr">background-color</span>=<span class="hljs-string">&quot;#545c64&quot;</span></span><br><span class="hljs-tag">    <span class="hljs-attr">text-color</span>=<span class="hljs-string">&quot;#fff&quot;</span></span><br><span class="hljs-tag">    <span class="hljs-attr">active-text-color</span>=<span class="hljs-string">&quot;#ffd04b&quot;</span></span><br><span class="hljs-tag">  &gt;</span><br>    <span class="hljs-comment">&lt;!-- 子集 menu 菜单 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">el-submenu</span> <span class="hljs-attr">index</span>=<span class="hljs-string">&quot;1&quot;</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">template</span> #<span class="hljs-attr">title</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">i</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;el-icon-location&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">i</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>导航一<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br>      <span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">el-menu-item</span> <span class="hljs-attr">index</span>=<span class="hljs-string">&quot;1-1&quot;</span>&gt;</span>选项1<span class="hljs-tag">&lt;/<span class="hljs-name">el-menu-item</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">el-menu-item</span> <span class="hljs-attr">index</span>=<span class="hljs-string">&quot;1-2&quot;</span>&gt;</span>选项2<span class="hljs-tag">&lt;/<span class="hljs-name">el-menu-item</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">el-submenu</span>&gt;</span><br>    <span class="hljs-comment">&lt;!-- 具体菜单项 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">el-menu-item</span> <span class="hljs-attr">index</span>=<span class="hljs-string">&quot;4&quot;</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">i</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;el-icon-setting&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">i</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">template</span> #<span class="hljs-attr">title</span>&gt;</span>导航四<span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">el-menu-item</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">el-menu</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span><br></code></pre></td></tr></table></figure><p>layout/Sidebar/index 导入该组件</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs js">&lt;template&gt;<br>  <span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;&quot;</span>&gt;</span></span><br><span class="xml">    <span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>Admin<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span></span><br><span class="xml">    <span class="hljs-tag">&lt;<span class="hljs-name">el-scrollbar</span>&gt;</span></span><br><span class="xml">      <span class="hljs-tag">&lt;<span class="hljs-name">sidebar-menu</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">sidebar-menu</span>&gt;</span></span><br><span class="xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">el-scrollbar</span>&gt;</span></span><br><span class="xml">  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>&lt;/template&gt;<br><br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">setup</span>&gt;</span><span class="javascript"></span></span><br><span class="javascript"><span class="xml"><span class="hljs-keyword">import</span> SidebarMenu <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./SidebarMenu&#x27;</span></span></span><br><span class="javascript"><span class="xml"><span class="hljs-keyword">import</span> &#123;&#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;vue&#x27;</span></span></span><br><span class="javascript"><span class="xml"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br></code></pre></td></tr></table></figure><p>生成一个临时的 menu 菜单，从这个临时的 menu 菜单可以看出，el-menu 分为三部分：</p><blockquote><p><code>el-menu</code>：整个 menu 菜单<br><code>el-sub-menu</code>:子集 menu 菜单<br><code>el-menu-item</code>:具体菜单项</p></blockquote><h4 id="13、动态-menu-菜单处理"><a href="#13、动态-menu-菜单处理" class="headerlink" title="13、动态 menu 菜单处理"></a>13、动态 menu 菜单处理</h4><blockquote><p>动态 menu 菜单主要和动态路由表配合来实现用户权限的（后续需要完成用户权限）。动态 menu 菜单指的是：根据路由表的配置，自动生成对应的 menu 菜单，当路由表发生变化时，menu 菜单自动发生变化。</p></blockquote><p>实现步骤：</p><blockquote><p>1、定义路由表对应的 menu 菜单规则（核心步骤）<br>2、根据规则制定路由表<br>3、根据规则，一路路由表生成 menu 菜单</p></blockquote><p>上面步骤 1 的菜单规则制定：</p><blockquote><p>1、如果<code>meta &amp;&amp; meta.title &amp;&amp; meta.icon</code> ：则显示在 <code>menu</code> 菜单中，其中 <code>title</code> 为显示的内容，<code>icon</code> 为显示的图标。如果存在 children：则展示子菜单 el-sub-menu；否则展示 el-menu-item。<br>2、不显示在 menu 中</p></blockquote><h4 id="14、创建页面组件"><a href="#14、创建页面组件" class="headerlink" title="14、创建页面组件"></a>14、<code>创建页面组件</code></h4><p>views 文件夹下创建页面：<br>（1）、创建文章:article-create<br>（2）、文章详情:article-detail<br>（3）、文章列表:article-ranking<br>（4）、401 和 404 页面:error-page/401.vue 404.vue<br>（5）、导入:import<br>（6）、权限列表:permission-list<br>（7）、个人中心:profile<br>（8）、角色列表:role-list<br>（9）、用户信息:user-info<br>（10）、用户管理:user-manage</p><h4 id="15、用户权限处理"><a href="#15、用户权限处理" class="headerlink" title="15、用户权限处理"></a>15、用户权限处理</h4><p>需要先对路由表进行划分：私有路由表 privateRoutes(权限路由)、公有路由表 publicRoutes(非权限路由)</p><p><code>router/index.js</code></p><details><summary>显示详细代码</summary><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 私有路由表</span><br><span class="hljs-keyword">const</span> privateRoutes = [<br>  &#123;<br>    <span class="hljs-attr">path</span>: <span class="hljs-string">&quot;/user&quot;</span>,<br>    <span class="hljs-attr">component</span>: layout,<br>    <span class="hljs-attr">redirect</span>: <span class="hljs-string">&quot;/user/manage&quot;</span>,<br>    <span class="hljs-attr">meta</span>: &#123;<br>      <span class="hljs-attr">title</span>: <span class="hljs-string">&quot;user&quot;</span>,<br>      <span class="hljs-attr">icon</span>: <span class="hljs-string">&quot;personnel&quot;</span>,<br>    &#125;,<br>    <span class="hljs-attr">children</span>: [<br>      &#123;<br>        <span class="hljs-attr">path</span>: <span class="hljs-string">&quot;/user/manage&quot;</span>,<br>        <span class="hljs-attr">component</span>: <span class="hljs-function">() =&gt;</span> <span class="hljs-keyword">import</span>(<span class="hljs-string">&quot;@/views/user-manage/index&quot;</span>),<br>        <span class="hljs-attr">meta</span>: &#123;<br>          <span class="hljs-attr">title</span>: <span class="hljs-string">&quot;userManage&quot;</span>,<br>          <span class="hljs-attr">icon</span>: <span class="hljs-string">&quot;personnel-manage&quot;</span>,<br>        &#125;,<br>      &#125;,<br>      &#123;<br>        <span class="hljs-attr">path</span>: <span class="hljs-string">&quot;/user/role&quot;</span>,<br>        <span class="hljs-attr">component</span>: <span class="hljs-function">() =&gt;</span> <span class="hljs-keyword">import</span>(<span class="hljs-string">&quot;@/views/role-list/index&quot;</span>),<br>        <span class="hljs-attr">meta</span>: &#123;<br>          <span class="hljs-attr">title</span>: <span class="hljs-string">&quot;roleList&quot;</span>,<br>          <span class="hljs-attr">icon</span>: <span class="hljs-string">&quot;role&quot;</span>,<br>        &#125;,<br>      &#125;,<br>      &#123;<br>        <span class="hljs-attr">path</span>: <span class="hljs-string">&quot;/user/permission&quot;</span>,<br>        <span class="hljs-attr">component</span>: <span class="hljs-function">() =&gt;</span> <span class="hljs-keyword">import</span>(<span class="hljs-string">&quot;@/views/permission-list/index&quot;</span>),<br>        <span class="hljs-attr">meta</span>: &#123;<br>          <span class="hljs-attr">title</span>: <span class="hljs-string">&quot;permissionList&quot;</span>,<br>          <span class="hljs-attr">icon</span>: <span class="hljs-string">&quot;permission&quot;</span>,<br>        &#125;,<br>      &#125;,<br>      &#123;<br>        <span class="hljs-attr">path</span>: <span class="hljs-string">&quot;/user/info/:id&quot;</span>,<br>        <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;userInfo&quot;</span>,<br>        <span class="hljs-attr">component</span>: <span class="hljs-function">() =&gt;</span> <span class="hljs-keyword">import</span>(<span class="hljs-string">&quot;@/views/user-info/index&quot;</span>),<br>        <span class="hljs-attr">meta</span>: &#123;<br>          <span class="hljs-attr">title</span>: <span class="hljs-string">&quot;userInfo&quot;</span>,<br>        &#125;,<br>      &#125;,<br>      &#123;<br>        <span class="hljs-attr">path</span>: <span class="hljs-string">&quot;/user/import&quot;</span>,<br>        <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;import&quot;</span>,<br>        <span class="hljs-attr">component</span>: <span class="hljs-function">() =&gt;</span> <span class="hljs-keyword">import</span>(<span class="hljs-string">&quot;@/views/import/index&quot;</span>),<br>        <span class="hljs-attr">meta</span>: &#123;<br>          <span class="hljs-attr">title</span>: <span class="hljs-string">&quot;excelImport&quot;</span>,<br>        &#125;,<br>      &#125;,<br>    ],<br>  &#125;,<br>  &#123;<br>    <span class="hljs-attr">path</span>: <span class="hljs-string">&quot;/article&quot;</span>,<br>    <span class="hljs-attr">component</span>: layout,<br>    <span class="hljs-attr">redirect</span>: <span class="hljs-string">&quot;/article/ranking&quot;</span>,<br>    <span class="hljs-attr">meta</span>: &#123;<br>      <span class="hljs-attr">title</span>: <span class="hljs-string">&quot;article&quot;</span>,<br>      <span class="hljs-attr">icon</span>: <span class="hljs-string">&quot;article&quot;</span>,<br>    &#125;,<br>    <span class="hljs-attr">children</span>: [<br>      &#123;<br>        <span class="hljs-attr">path</span>: <span class="hljs-string">&quot;/article/ranking&quot;</span>,<br>        <span class="hljs-attr">component</span>: <span class="hljs-function">() =&gt;</span> <span class="hljs-keyword">import</span>(<span class="hljs-string">&quot;@/views/article-ranking/index&quot;</span>),<br>        <span class="hljs-attr">meta</span>: &#123;<br>          <span class="hljs-attr">title</span>: <span class="hljs-string">&quot;articleRanking&quot;</span>,<br>          <span class="hljs-attr">icon</span>: <span class="hljs-string">&quot;article-ranking&quot;</span>,<br>        &#125;,<br>      &#125;,<br>      &#123;<br>        <span class="hljs-attr">path</span>: <span class="hljs-string">&quot;/article/:id&quot;</span>,<br>        <span class="hljs-attr">component</span>: <span class="hljs-function">() =&gt;</span> <span class="hljs-keyword">import</span>(<span class="hljs-string">&quot;@/views/article-detail/index&quot;</span>),<br>        <span class="hljs-attr">meta</span>: &#123;<br>          <span class="hljs-attr">title</span>: <span class="hljs-string">&quot;articleDetail&quot;</span>,<br>        &#125;,<br>      &#125;,<br>      &#123;<br>        <span class="hljs-attr">path</span>: <span class="hljs-string">&quot;/article/create&quot;</span>,<br>        <span class="hljs-attr">component</span>: <span class="hljs-function">() =&gt;</span> <span class="hljs-keyword">import</span>(<span class="hljs-string">&quot;@/views/article-create/index&quot;</span>),<br>        <span class="hljs-attr">meta</span>: &#123;<br>          <span class="hljs-attr">title</span>: <span class="hljs-string">&quot;articleCreate&quot;</span>,<br>          <span class="hljs-attr">icon</span>: <span class="hljs-string">&quot;article-create&quot;</span>,<br>        &#125;,<br>      &#125;,<br>      &#123;<br>        <span class="hljs-attr">path</span>: <span class="hljs-string">&quot;/article/editor/:id&quot;</span>,<br>        <span class="hljs-attr">component</span>: <span class="hljs-function">() =&gt;</span> <span class="hljs-keyword">import</span>(<span class="hljs-string">&quot;@/views/article-create/index&quot;</span>),<br>        <span class="hljs-attr">meta</span>: &#123;<br>          <span class="hljs-attr">title</span>: <span class="hljs-string">&quot;articleEditor&quot;</span>,<br>        &#125;,<br>      &#125;,<br>    ],<br>  &#125;,<br>];<br><span class="hljs-comment">// 公开路由表</span><br><span class="hljs-keyword">const</span> publicRoutes = [<br>  &#123;<br>    <span class="hljs-attr">path</span>: <span class="hljs-string">&quot;/login&quot;</span>,<br>    <span class="hljs-attr">component</span>: <span class="hljs-function">() =&gt;</span> <span class="hljs-keyword">import</span>(<span class="hljs-string">&quot;@/views/login/index&quot;</span>),<br>  &#125;,<br>  &#123;<br>    <span class="hljs-attr">path</span>: <span class="hljs-string">&quot;/&quot;</span>,<br>    <span class="hljs-comment">// 注意：带有路径“/”的记录中的组件“默认”是一个不返回 Promise 的函数</span><br>    <span class="hljs-attr">component</span>: layout,<br>    <span class="hljs-attr">redirect</span>: <span class="hljs-string">&quot;/profile&quot;</span>,<br>    <span class="hljs-attr">children</span>: [<br>      &#123;<br>        <span class="hljs-attr">path</span>: <span class="hljs-string">&quot;/profile&quot;</span>,<br>        <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;profile&quot;</span>,<br>        <span class="hljs-attr">component</span>: <span class="hljs-function">() =&gt;</span> <span class="hljs-keyword">import</span>(<span class="hljs-string">&quot;@/views/profile/index&quot;</span>),<br>        <span class="hljs-attr">meta</span>: &#123;<br>          <span class="hljs-attr">title</span>: <span class="hljs-string">&quot;profile&quot;</span>,<br>          <span class="hljs-attr">icon</span>: <span class="hljs-string">&quot;el-icon-user&quot;</span>,<br>        &#125;,<br>      &#125;,<br>      &#123;<br>        <span class="hljs-attr">path</span>: <span class="hljs-string">&quot;/404&quot;</span>,<br>        <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;404&quot;</span>,<br>        <span class="hljs-attr">component</span>: <span class="hljs-function">() =&gt;</span> <span class="hljs-keyword">import</span>(<span class="hljs-string">&quot;@/views/error-page/404&quot;</span>),<br>      &#125;,<br>      &#123;<br>        <span class="hljs-attr">path</span>: <span class="hljs-string">&quot;/401&quot;</span>,<br>        <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;401&quot;</span>,<br>        <span class="hljs-attr">component</span>: <span class="hljs-function">() =&gt;</span> <span class="hljs-keyword">import</span>(<span class="hljs-string">&quot;@/views/error-page/401&quot;</span>),<br>      &#125;,<br>    ],<br>  &#125;,<br>];<br><br><span class="hljs-keyword">const</span> router = createRouter(&#123;<br>  <span class="hljs-attr">history</span>: createWebHashHistory(),<br>  <span class="hljs-attr">routes</span>: [...publicRoutes, ...privateRoutes],<br>&#125;);<br></code></pre></td></tr></table></figure></details><blockquote><p>注意：要在 <code>layout/AppMain.vue 中设置路由出口</code></p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">template</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;app-main&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">router-view</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">router-view</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span><br></code></pre></td></tr></table></figure><h4 id="16、解析路由表，获取结构化数据"><a href="#16、解析路由表，获取结构化数据" class="headerlink" title="16、解析路由表，获取结构化数据"></a>16、解析路由表，获取结构化数据</h4><p>数据结构为</p><details><summary>显示详细代码</summary><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs json">[<br>  &#123;<br>    <span class="hljs-attr">&quot;title&quot;</span>: <span class="hljs-string">&quot;个人中心&quot;</span>,<br>    <span class="hljs-attr">&quot;path&quot;</span>: <span class="hljs-string">&quot;&quot;</span><br>  &#125;,<br>  &#123;<br>    <span class="hljs-attr">&quot;title&quot;</span>: <span class="hljs-string">&quot;用户&quot;</span>,<br>    <span class="hljs-attr">&quot;children&quot;</span>: [<br>      &#123;<br>        <span class="hljs-attr">&quot;title&quot;</span>: <span class="hljs-string">&quot;员工管理&quot;</span>,<br>        <span class="hljs-attr">&quot;path&quot;</span>: <span class="hljs-string">&quot;&quot;</span><br>      &#125;,<br>      &#123;<br>        <span class="hljs-attr">&quot;title&quot;</span>: <span class="hljs-string">&quot;角色列表&quot;</span>,<br>        <span class="hljs-attr">&quot;path&quot;</span>: <span class="hljs-string">&quot;&quot;</span><br>      &#125;,<br>      &#123;<br>        <span class="hljs-attr">&quot;title&quot;</span>: <span class="hljs-string">&quot;权限列表&quot;</span>,<br>        <span class="hljs-attr">&quot;path&quot;</span>: <span class="hljs-string">&quot;&quot;</span><br>      &#125;<br>    ]<br>  &#125;,<br>  &#123;<br>    <span class="hljs-attr">&quot;title&quot;</span>: <span class="hljs-string">&quot;文章&quot;</span>,<br>    <span class="hljs-attr">&quot;children&quot;</span>: [<br>      &#123;<br>        <span class="hljs-attr">&quot;title&quot;</span>: <span class="hljs-string">&quot;文章排名&quot;</span>,<br>        <span class="hljs-attr">&quot;path&quot;</span>: <span class="hljs-string">&quot;&quot;</span><br>      &#125;,<br>      &#123;<br>        <span class="hljs-attr">&quot;title&quot;</span>: <span class="hljs-string">&quot;创建文章&quot;</span>,<br>        <span class="hljs-attr">&quot;path&quot;</span>: <span class="hljs-string">&quot;&quot;</span><br>      &#125;<br>    ]<br>  &#125;<br>]<br></code></pre></td></tr></table></figure></details><p>获取路由表数据的 2 中方式：</p><blockquote><p>1、router.options.routes:初始路由列表<br>2、router.getRoutes()：获取所有路由记录的完整列表（选择此种方法）</p></blockquote><p>在 layout/components/Sidebar/SidebarMenu 中</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs js">&lt;script setup&gt;<br>  <span class="hljs-keyword">import</span> &#123;useRouter&#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;vue-router&#x27;</span> <span class="hljs-keyword">const</span> router = useRouter()<br>  <span class="hljs-built_in">console</span>.log(router.getRoutes()) <span class="hljs-comment">// 这里返回的是一个完整的路由表</span><br>&lt;/script&gt;<br></code></pre></td></tr></table></figure><p>打印的结果是一个完整的路由表，里面存在一些问题：</p><blockquote><p>存在重复的路由数据<br>不满足该条件 meta &amp;&amp; meta.title &amp;&amp; meta.icon 的数据不应该存在</p></blockquote><h4 id="17、处理数据结构问题"><a href="#17、处理数据结构问题" class="headerlink" title="17、处理数据结构问题"></a>17、处理数据结构问题</h4><p>创建<code>utils/route.js</code>，里面 2 个函数方法：filterRouters()/generateMenus()很重要</p><details><summary>显示完整代码</summary><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">import</span> path <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;path&quot;</span>;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 返回所有子路由</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">const</span> getChildrenRoutes = <span class="hljs-function">(<span class="hljs-params">routes</span>) =&gt;</span> &#123;<br>  <span class="hljs-keyword">const</span> result = [];<br>  routes.forEach(<span class="hljs-function">(<span class="hljs-params">route</span>) =&gt;</span> &#123;<br>    <span class="hljs-keyword">if</span> (route.children &amp;&amp; route.children.length &gt; <span class="hljs-number">0</span>) &#123;<br>      result.push(...route.children);<br>    &#125;<br>  &#125;);<br>  <span class="hljs-keyword">return</span> result;<br>&#125;;<br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 处理脱离层级的路由：某个一级路由为其他子路由，则剔除该一级路由，保留路由层级</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param <span class="hljs-type">&#123;*&#125;</span> </span>routes router.getRoutes()</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">const</span> filterRouters = <span class="hljs-function">(<span class="hljs-params">routes</span>) =&gt;</span> &#123;<br>  <span class="hljs-keyword">const</span> childrenRoutes = getChildrenRoutes(routes);<br>  <span class="hljs-keyword">return</span> routes.filter(<span class="hljs-function">(<span class="hljs-params">route</span>) =&gt;</span> &#123;<br>    <span class="hljs-keyword">return</span> !childrenRoutes.find(<span class="hljs-function">(<span class="hljs-params">childrenRoute</span>) =&gt;</span> &#123;<br>      <span class="hljs-keyword">return</span> childrenRoute.path === route.path;<br>    &#125;);<br>  &#125;);<br>&#125;;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 判断数据是否为空值</span><br><span class="hljs-comment"> */</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">isNull</span>(<span class="hljs-params">data</span>) </span>&#123;<br>  <span class="hljs-keyword">if</span> (!data) <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>  <span class="hljs-keyword">if</span> (<span class="hljs-built_in">JSON</span>.stringify(data) === <span class="hljs-string">&quot;&#123;&#125;&quot;</span>) <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>  <span class="hljs-keyword">if</span> (<span class="hljs-built_in">JSON</span>.stringify(data) === <span class="hljs-string">&quot;[]&quot;</span>) <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>  <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>&#125;<br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 根据 routes 数据，返回对应 menu 规则数组</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">export</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">generateMenus</span>(<span class="hljs-params">routes, basePath = <span class="hljs-string">&quot;&quot;</span></span>) </span>&#123;<br>  <span class="hljs-keyword">const</span> result = [];<br>  <span class="hljs-comment">// 遍历路由表</span><br>  routes.forEach(<span class="hljs-function">(<span class="hljs-params">item</span>) =&gt;</span> &#123;<br>    <span class="hljs-comment">// 不存在 children &amp;&amp; 不存在 meta 直接 return</span><br>    <span class="hljs-keyword">if</span> (isNull(item.meta) &amp;&amp; isNull(item.children)) <span class="hljs-keyword">return</span>;<br>    <span class="hljs-comment">// 存在 children 不存在 meta，进入迭代</span><br>    <span class="hljs-keyword">if</span> (isNull(item.meta) &amp;&amp; !isNull(item.children)) &#123;<br>      result.push(...generateMenus(item.children));<br>      <span class="hljs-keyword">return</span>;<br>    &#125;<br>    <span class="hljs-comment">// 合并 path 作为跳转路径</span><br>    <span class="hljs-keyword">const</span> routePath = path.resolve(basePath, item.path);<br>    <span class="hljs-comment">// 路由分离之后，存在同名父路由的情况，需要单独处理</span><br>    <span class="hljs-keyword">let</span> route = result.find(<span class="hljs-function">(<span class="hljs-params">item</span>) =&gt;</span> item.path === routePath);<br>    <span class="hljs-keyword">if</span> (!route) &#123;<br>      route = &#123;<br>        ...item,<br>        <span class="hljs-attr">path</span>: routePath,<br>        <span class="hljs-attr">children</span>: [],<br>      &#125;;<br><br>      <span class="hljs-comment">// icon 与 title 必须全部存在</span><br>      <span class="hljs-keyword">if</span> (route.meta.icon &amp;&amp; route.meta.title) &#123;<br>        <span class="hljs-comment">// meta 存在生成 route 对象，放入 arr</span><br>        result.push(route);<br>      &#125;<br>    &#125;<br><br>    <span class="hljs-comment">// 存在 children 进入迭代到children</span><br>    <span class="hljs-keyword">if</span> (item.children) &#123;<br>      route.children.push(...generateMenus(item.children, route.path));<br>    &#125;<br>  &#125;);<br>  <span class="hljs-keyword">return</span> result;<br>&#125;<br></code></pre></td></tr></table></figure></details><h4 id="18、SidebarMenu-调用-filterRouters、generateMenus-方法"><a href="#18、SidebarMenu-调用-filterRouters、generateMenus-方法" class="headerlink" title="18、SidebarMenu 调用 filterRouters、generateMenus 方法"></a>18、SidebarMenu 调用 filterRouters、generateMenus 方法</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs js">&lt;script setup&gt;<br><span class="hljs-keyword">import</span> &#123; computed &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;vue&#x27;</span><br><span class="hljs-keyword">import</span> &#123; useRouter &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;vue-router&#x27;</span><br><span class="hljs-keyword">import</span> &#123; filterRouters, generateMenus &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@/utils/route&#x27;</span><br><br><span class="hljs-keyword">const</span> router = useRouter()<br><span class="hljs-keyword">const</span> routes = computed(<span class="hljs-function">() =&gt;</span> &#123;<br>  <span class="hljs-keyword">const</span> filterRoutes = filterRouters(router.getRoutes())<br>  <span class="hljs-keyword">return</span> generateMenus(filterRoutes)<br>&#125;)<br><span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">JSON</span>.stringify(routes.value))<br>&lt;/script&gt;<br></code></pre></td></tr></table></figure><h4 id="19、生成动态-menu-菜单"><a href="#19、生成动态-menu-菜单" class="headerlink" title="19、生成动态 menu 菜单"></a>19、生成动态 menu 菜单</h4><p>整个 menu 菜单，分为 3 个组件来进行处理</p><blockquote><p>1、SidebarMenu:处理数据，作为最顶层 menu 载体</p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">template</span>&gt;</span><br>  <span class="hljs-comment">&lt;!-- 一级 menu 菜单 --&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">el-menu</span> <span class="hljs-attr">...</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">sidebar-item</span></span><br><span class="hljs-tag">      <span class="hljs-attr">v-for</span>=<span class="hljs-string">&quot;item in routes&quot;</span></span><br><span class="hljs-tag">      <span class="hljs-attr">:key</span>=<span class="hljs-string">&quot;item.path&quot;</span></span><br><span class="hljs-tag">      <span class="hljs-attr">:route</span>=<span class="hljs-string">&quot;item&quot;</span></span><br><span class="hljs-tag">    &gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">sidebar-item</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">el-menu</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span><br></code></pre></td></tr></table></figure><blockquote><p>2、SidebarItem：根据数据处理当前项为 el-sub-menu || el-menu-item</p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">template</span>&gt;</span><br>  <span class="hljs-comment">&lt;!-- 支持渲染多级 menu 菜单 --&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">el-submenu</span> <span class="hljs-attr">v-if</span>=<span class="hljs-string">&quot;route.children.length &gt; 0&quot;</span> <span class="hljs-attr">:index</span>=<span class="hljs-string">&quot;route.path&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">template</span> #<span class="hljs-attr">title</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">menu-item</span> <span class="hljs-attr">:title</span>=<span class="hljs-string">&quot;route.meta.title&quot;</span> <span class="hljs-attr">:icon</span>=<span class="hljs-string">&quot;route.meta.icon&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">menu-item</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span><br>    <span class="hljs-comment">&lt;!-- 循环渲染 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">sidebar-item</span></span><br><span class="hljs-tag">      <span class="hljs-attr">v-for</span>=<span class="hljs-string">&quot;item in route.children&quot;</span></span><br><span class="hljs-tag">      <span class="hljs-attr">:key</span>=<span class="hljs-string">&quot;item.path&quot;</span></span><br><span class="hljs-tag">      <span class="hljs-attr">:route</span>=<span class="hljs-string">&quot;item&quot;</span></span><br><span class="hljs-tag">    &gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">sidebar-item</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">el-submenu</span>&gt;</span><br>  <span class="hljs-comment">&lt;!-- 渲染 item 项 --&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">el-menu-item</span> <span class="hljs-attr">v-else</span> <span class="hljs-attr">:index</span>=<span class="hljs-string">&quot;route.path&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">menu-item</span> <span class="hljs-attr">:title</span>=<span class="hljs-string">&quot;route.meta.title&quot;</span> <span class="hljs-attr">:icon</span>=<span class="hljs-string">&quot;route.meta.icon&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">menu-item</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">el-menu-item</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">setup</span>&gt;</span><span class="javascript"></span><br><span class="javascript">  <span class="hljs-keyword">import</span> MenuItem <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;./MenuItem&quot;</span>;</span><br><span class="javascript">  <span class="hljs-keyword">import</span> &#123; defineProps &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;vue&quot;</span>;</span><br><span class="javascript">  <span class="hljs-comment">// 定义 props</span></span><br><span class="javascript">  defineProps(&#123;</span><br><span class="javascript">    <span class="hljs-attr">route</span>: &#123;</span><br><span class="javascript">      <span class="hljs-attr">type</span>: <span class="hljs-built_in">Object</span>,</span><br><span class="javascript">      <span class="hljs-attr">required</span>: <span class="hljs-literal">true</span>,</span><br><span class="javascript">    &#125;,</span><br><span class="javascript">  &#125;);</span><br><span class="javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><blockquote><p>3、MenuItem:处理 el-menu-item 样式</p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">template</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">i</span> <span class="hljs-attr">v-if</span>=<span class="hljs-string">&quot;icon.includes(&#x27;el-icon&#x27;)&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;sub-el-icon&quot;</span> <span class="hljs-attr">:class</span>=<span class="hljs-string">&quot;icon&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">i</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">svg-icon</span> <span class="hljs-attr">v-else</span> <span class="hljs-attr">:icon</span>=<span class="hljs-string">&quot;icon&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">svg-icon</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>&#123;&#123; title &#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">setup</span>&gt;</span><span class="javascript"></span><br><span class="javascript">  <span class="hljs-keyword">import</span> &#123; defineProps &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;vue&quot;</span>;</span><br><span class="javascript">  defineProps(&#123;</span><br><span class="javascript">    <span class="hljs-attr">title</span>: &#123;</span><br><span class="javascript">      <span class="hljs-attr">type</span>: <span class="hljs-built_in">String</span>,</span><br><span class="javascript">      <span class="hljs-attr">required</span>: <span class="hljs-literal">true</span>,</span><br><span class="javascript">    &#125;,</span><br><span class="javascript">    <span class="hljs-attr">icon</span>: &#123;</span><br><span class="javascript">      <span class="hljs-attr">type</span>: <span class="hljs-built_in">String</span>,</span><br><span class="javascript">      <span class="hljs-attr">required</span>: <span class="hljs-literal">true</span>,</span><br><span class="javascript">    &#125;,</span><br><span class="javascript">  &#125;);</span><br><span class="javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">style</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;scss&quot;</span> <span class="hljs-attr">scoped</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br></code></pre></td></tr></table></figure><p>menu 菜单完成，还需解决样式问题、菜单路由跳转问题、默认激活项</p><p><code>样式修改</code>：store/getters 创建快捷访问（后续加入主题更换功能，样式不能写死）</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">import</span> variables <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@/styles/variables.scss&#x27;</span><br><span class="hljs-keyword">const</span> getters = &#123;<br>  ...<br>  <span class="hljs-attr">cssVar</span>: <span class="hljs-function"><span class="hljs-params">state</span> =&gt;</span> variables<br>&#125;<br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> getters<br></code></pre></td></tr></table></figure><p><code>SidebarMenu</code>写入样式（el-menu 里的 router 是指定路由跳转， activeMenu 为默认激活项）</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs html">// template<br><span class="hljs-tag">&lt;<span class="hljs-name">el-menu</span></span><br><span class="hljs-tag">  <span class="hljs-attr">:background-color</span>=<span class="hljs-string">&quot;$store.getters.cssVar.menuBg&quot;</span></span><br><span class="hljs-tag">  <span class="hljs-attr">:text-color</span>=<span class="hljs-string">&quot;$store.getters.cssVar.menuText&quot;</span></span><br><span class="hljs-tag">  <span class="hljs-attr">:active-text-color</span>=<span class="hljs-string">&quot;$store.getters.cssVar.menuActiveText&quot;</span></span><br><span class="hljs-tag">  <span class="hljs-attr">:default-active</span>=<span class="hljs-string">&quot;activeMenu&quot;</span></span><br><span class="hljs-tag">  <span class="hljs-attr">:unique-opened</span>=<span class="hljs-string">&quot;true&quot;</span></span><br><span class="hljs-tag">  <span class="hljs-attr">router</span></span><br><span class="hljs-tag">&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">el-menu</span>&gt;</span><br><br>// js<br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">setup</span>&gt;</span><span class="javascript"></span><br><span class="javascript">  ...</span><br><span class="javascript"></span><br><span class="javascript">  <span class="hljs-comment">// 计算高亮 menu 的方法</span></span><br><span class="javascript">  <span class="hljs-keyword">const</span> route = useRoute()</span><br><span class="javascript">  <span class="hljs-keyword">const</span> activeMenu = computed(<span class="hljs-function">() =&gt;</span> &#123;</span><br><span class="javascript">    <span class="hljs-keyword">const</span> &#123; path &#125; = route</span><br><span class="javascript">    <span class="hljs-keyword">return</span> path</span><br><span class="javascript">  &#125;)</span><br><span class="javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><h4 id="20、菜单的伸缩功能"><a href="#20、菜单的伸缩功能" class="headerlink" title="20、菜单的伸缩功能"></a>20、菜单的伸缩功能</h4><p>创建<code>store/modules/app.js</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> &#123;<br>  <span class="hljs-attr">namespaced</span>: <span class="hljs-literal">true</span>,<br>  <span class="hljs-attr">state</span>: <span class="hljs-function">() =&gt;</span> (&#123;<br>    <span class="hljs-attr">sidebarOpened</span>: <span class="hljs-literal">true</span>,<br>  &#125;),<br>  <span class="hljs-attr">mutations</span>: &#123;<br>    <span class="hljs-function"><span class="hljs-title">triggerSidebarOpened</span>(<span class="hljs-params">state</span>)</span> &#123;<br>      state.sidebarOpened = !state.sidebarOpened;<br>    &#125;,<br>  &#125;,<br>  <span class="hljs-attr">actions</span>: &#123;&#125;,<br>&#125;;<br></code></pre></td></tr></table></figure><p>在<code>store/index.js</code>中引入上面的 app.js</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">import</span> app <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;./modules/app&quot;</span>;<br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> createStore(&#123;<br>  getters,<br>  <span class="hljs-attr">modules</span>: &#123;<br>    user,<br>    app,<br>  &#125;,<br>&#125;);<br></code></pre></td></tr></table></figure><p>在 <code>store/getters</code> 中创建快捷访问</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js">sidebarOpened: <span class="hljs-function">(<span class="hljs-params">state</span>) =&gt;</span> state.app.sidebarOpened;<br></code></pre></td></tr></table></figure><h4 id="21、创建收缩-icon-组件-hamburger"><a href="#21、创建收缩-icon-组件-hamburger" class="headerlink" title="21、创建收缩 icon 组件 hamburger"></a>21、创建收缩 icon 组件 hamburger</h4><p>创建<code>src/components/Hamburger/index.vue</code></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">template</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;hamburger-container&quot;</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">&quot;toggleClick&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">svg-icon</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;hamburger&quot;</span> <span class="hljs-attr">:icon</span>=<span class="hljs-string">&quot;icon&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">svg-icon</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">setup</span>&gt;</span><span class="javascript"></span><br><span class="javascript">  <span class="hljs-keyword">import</span> &#123; computed &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;vue&quot;</span>;</span><br><span class="javascript">  <span class="hljs-keyword">import</span> &#123; useStore &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;vuex&quot;</span>;</span><br><span class="javascript"></span><br><span class="javascript">  <span class="hljs-keyword">const</span> store = useStore();</span><br><span class="javascript">  <span class="hljs-keyword">const</span> toggleClick = <span class="hljs-function">() =&gt;</span> &#123;</span><br><span class="javascript">    store.commit(<span class="hljs-string">&quot;app/triggerSidebarOpened&quot;</span>);</span><br><span class="javascript">  &#125;;</span><br><span class="javascript"></span><br><span class="javascript">  <span class="hljs-keyword">const</span> icon = computed(<span class="hljs-function">() =&gt;</span></span><br><span class="javascript">    store.getters.sidebarOpened ? <span class="hljs-string">&quot;hamburger-opened&quot;</span> : <span class="hljs-string">&quot;hamburger-closed&quot;</span></span><br><span class="javascript">  );</span><br><span class="javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">style</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;scss&quot;</span> <span class="hljs-attr">scoped</span>&gt;</span><span class="css"></span><br><span class="css">  <span class="hljs-selector-class">.hamburger-container</span> &#123;</span><br><span class="css">    <span class="hljs-attribute">padding</span>: <span class="hljs-number">0</span> <span class="hljs-number">16px</span>;</span><br><span class="css">    <span class="hljs-selector-class">.hamburger</span> &#123;</span><br><span class="css">      <span class="hljs-attribute">display</span>: inline-block;</span><br><span class="css">      <span class="hljs-attribute">vertical-align</span>: middle;</span><br><span class="css">      <span class="hljs-attribute">width</span>: <span class="hljs-number">20px</span>;</span><br><span class="css">      <span class="hljs-attribute">height</span>: <span class="hljs-number">20px</span>;</span><br><span class="css">    &#125;</span><br><span class="css">  &#125;</span><br><span class="css"></span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br></code></pre></td></tr></table></figure><p>在<code>layout/components/Navbar.vue</code>中使用 Hamburger 组件</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">template</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;navbar&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">hamburger</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;hamburger-container&quot;</span> /&gt;</span><br>    ...<br>  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">setup</span>&gt;</span><span class="javascript"></span><br><span class="javascript">  <span class="hljs-keyword">import</span> Hamburger <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@/components/Hamburger&#x27;</span></span><br><span class="javascript">  ...</span><br><span class="javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">style</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;scss&quot;</span> <span class="hljs-attr">scoped</span>&gt;</span><span class="css"></span><br><span class="css">  <span class="hljs-selector-class">.navbar</span> &#123;</span><br><span class="css">    ...</span><br><span class="css"></span><br><span class="css">    <span class="hljs-selector-class">.hamburger-container</span> &#123;</span><br><span class="css">      <span class="hljs-attribute">line-height</span>: <span class="hljs-number">46px</span>;</span><br><span class="css">      <span class="hljs-attribute">height</span>: <span class="hljs-number">100%</span>;</span><br><span class="css">      <span class="hljs-attribute">float</span>: left;</span><br><span class="css">      <span class="hljs-attribute">cursor</span>: pointer;</span><br><span class="css">      // hover 动画</span><br><span class="css">      <span class="hljs-attribute">transition</span>: background <span class="hljs-number">0.5s</span>;</span><br><span class="css"></span><br><span class="css">      &amp;<span class="hljs-selector-pseudo">:hover</span> &#123;</span><br><span class="css">        <span class="hljs-attribute">background</span>: <span class="hljs-built_in">rgba</span>(<span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0.1</span>);</span><br><span class="css">      &#125;</span><br><span class="css">    &#125;</span><br><span class="css"></span><br><span class="css">   ...</span><br><span class="css">  &#125;</span><br><span class="css"></span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br></code></pre></td></tr></table></figure><p>在<code>layout/components/Sidebar/SidebarMenu.vue</code>中添加控制 el-menu 的<code>collapse</code>属性</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">el-menu</span></span><br><span class="hljs-tag">    <span class="hljs-attr">:collapse</span>=<span class="hljs-string">&quot;!$store.getters.sidebarOpened&quot;</span></span><br><span class="hljs-tag">    <span class="hljs-attr">...</span></span><br></code></pre></td></tr></table></figure><p>在<code>layout/index.vue</code>中指定侧边栏的宽度和缩放动画</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span></span><br><span class="hljs-tag">  <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;app-wrapper&quot;</span></span><br><span class="hljs-tag">  <span class="hljs-attr">:class</span>=<span class="hljs-string">&quot;[$store.getters.sidebarOpened ? &#x27;openSidebar&#x27; : &#x27;hideSidebar&#x27;]&quot;</span></span><br><span class="hljs-tag">&gt;</span><br>  ...<br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">style</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;scss&quot;</span> <span class="hljs-attr">scoped</span>&gt;</span><span class="css"></span><br><span class="css">  ... <span class="hljs-selector-class">.fixed-header</span> &#123;</span><br><span class="css">    <span class="hljs-attribute">position</span>: fixed;</span><br><span class="css">    <span class="hljs-attribute">top</span>: <span class="hljs-number">0</span>;</span><br><span class="css">    <span class="hljs-attribute">right</span>: <span class="hljs-number">0</span>;</span><br><span class="css">    <span class="hljs-attribute">z-index</span>: <span class="hljs-number">9</span>;</span><br><span class="css">    <span class="hljs-attribute">width</span>: <span class="hljs-built_in">calc</span>(<span class="hljs-number">100%</span> - #&#123;$sideBarWidth&#125;);</span><br><span class="css">    <span class="hljs-attribute">transition</span>: width <span class="hljs-number">0.28s</span>;</span><br><span class="css">  &#125;</span><br><span class="css"></span><br><span class="css">  <span class="hljs-selector-class">.hideSidebar</span> <span class="hljs-selector-class">.fixed-header</span> &#123;</span><br><span class="css">    <span class="hljs-attribute">width</span>: <span class="hljs-built_in">calc</span>(<span class="hljs-number">100%</span> - #&#123;$hideSideBarWidth&#125;);</span><br><span class="css">  &#125;</span><br><span class="css"></span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><br>  // 在 `styles/variables.scss` 中指定 `hideSideBarWidth`<br>  $hideSideBarWidth: 54px;<br><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br></code></pre></td></tr></table></figure><h4 id="22、SidebarHeader-处理"><a href="#22、SidebarHeader-处理" class="headerlink" title="22、SidebarHeader 处理"></a>22、SidebarHeader 处理</h4><details><summary>显示详细代码</summary><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">template</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;logo-container&quot;</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">el-avatar</span> <span class="hljs-attr">size</span>=<span class="hljs-string">&quot;44&quot;</span> <span class="hljs-attr">shape</span>=<span class="hljs-string">&quot;square&quot;</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;http://xxxxx.com&quot;</span> /&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">h1</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;logo-title&quot;</span> <span class="hljs-attr">v-if</span>=<span class="hljs-string">&quot;$store.getters.sidebarOpened&quot;</span>&gt;</span>Admin<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    ...<br>  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">style</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;scss&quot;</span> <span class="hljs-attr">scoped</span>&gt;</span><span class="css"></span><br><span class="css">  <span class="hljs-selector-class">.logo-container</span> &#123;</span><br><span class="css">    <span class="hljs-attribute">height</span>: <span class="hljs-number">44px</span>;</span><br><span class="css">    <span class="hljs-attribute">padding</span>: <span class="hljs-number">10px</span> <span class="hljs-number">0</span> <span class="hljs-number">22px</span> <span class="hljs-number">0</span>;</span><br><span class="css">    <span class="hljs-attribute">display</span>: flex;</span><br><span class="css">    <span class="hljs-attribute">align-items</span>: center;</span><br><span class="css">    <span class="hljs-attribute">justify-content</span>: center;</span><br><span class="css">    <span class="hljs-selector-class">.logo-title</span> &#123;</span><br><span class="css">      <span class="hljs-attribute">margin-left</span>: <span class="hljs-number">10px</span>;</span><br><span class="css">      <span class="hljs-attribute">color</span>: <span class="hljs-number">#fff</span>;</span><br><span class="css">      <span class="hljs-attribute">font-weight</span>: <span class="hljs-number">600</span>;</span><br><span class="css">      <span class="hljs-attribute">line-height</span>: <span class="hljs-number">50px</span>;</span><br><span class="css">      <span class="hljs-attribute">font-size</span>: <span class="hljs-number">16px</span>;</span><br><span class="css">      <span class="hljs-attribute">white-space</span>: nowrap;</span><br><span class="css">    &#125;</span><br><span class="css">  &#125;</span><br><span class="css"></span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br></code></pre></td></tr></table></figure></details><blockquote><p>处理 el-avatar 的图片背景问题</p></blockquote><p>创建 <code>styles/element.scss</code>,然后将其导入到<code>style/index.scss</code></p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-class">.el-avatar</span> &#123;<br>  --el-avatar-<span class="hljs-attribute">background-color</span>: none;<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>处理动画问题</p></blockquote><p>在 <code>styles/variables.scss</code> 中，加入以下变量</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs css">$sideBarDuration: <span class="hljs-number">0.28s</span>;<br></code></pre></td></tr></table></figure><p><code>styles/sidebar.scss</code> 修改时长</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-class">.main-container</span> &#123;<br>  <span class="hljs-attribute">transition</span>: margin-left #&#123;$sideBarDuration&#125;;<br> ...<br>&#125;<br><br><span class="hljs-selector-class">.sidebar-container</span> &#123;<br>  <span class="hljs-attribute">transition</span>: width #&#123;$sideBarDuration&#125;;<br>...<br>&#125;<br></code></pre></td></tr></table></figure><p><code>layout/index</code> 修改样式</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-class">.fixed-header</span> &#123;<br>  ...<br>  <span class="hljs-attribute">transition</span>: width #&#123;$sideBarDuration&#125;;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="23、组件状态驱动的动态-CSS-值"><a href="#23、组件状态驱动的动态-CSS-值" class="headerlink" title="23、组件状态驱动的动态 CSS 值"></a>23、组件状态驱动的动态 CSS 值</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">template</span>&gt;</span> ... <span class="hljs-tag">&lt;<span class="hljs-name">el-avatar</span> <span class="hljs-attr">:size</span>=<span class="hljs-string">&quot;logoHeight&quot;</span> <span class="hljs-attr">...</span> &lt;/<span class="hljs-attr">template</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">setup</span>&gt;</span><span class="javascript"></span><br><span class="javascript">  ...</span><br><span class="javascript">  <span class="hljs-keyword">const</span> logoHeight = <span class="hljs-number">44</span></span><br><span class="javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">style</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;scss&quot;</span> <span class="hljs-attr">scoped</span>&gt;</span><span class="css"></span><br><span class="css">  <span class="hljs-selector-class">.logo-container</span> &#123;</span><br><span class="css">    <span class="hljs-attribute">height</span>: <span class="hljs-built_in">v-bind</span>(logoHeight) + <span class="hljs-string">&#x27;px&#x27;</span>;</span><br><span class="css">  ...</span><br><span class="css">  &#125;</span><br><span class="css"></span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br></code></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> vue3 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>93、使用vue3+element-plus写后台管理系统：（三）</title>
      <link href="/2022/11/10/93-vue3-ele-plus-admin/"/>
      <url>/2022/11/10/93-vue3-ele-plus-admin/</url>
      
        <content type="html"><![CDATA[<p>包括配置环境变量封装 axios、接口请求模块、vuex 登录请求动作、保存服务端的 token、登录鉴权</p><span id="more"></span><h2 id="一、配置环境变量及封装-axios-模块"><a href="#一、配置环境变量及封装-axios-模块" class="headerlink" title="一、配置环境变量及封装 axios 模块"></a>一、配置环境变量及封装 axios 模块</h2><p>在跟目录下创建.env.development .env.production 2 个文件</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// .env.development</span><br>ENV = <span class="hljs-string">&quot;development&quot;</span>;<br>VUE_APP_BASE_API = <span class="hljs-string">&quot;/api&quot;</span>;<br><br><span class="hljs-comment">// .env.production</span><br>ENV = <span class="hljs-string">&quot;production&quot;</span>;<br>VUE_APP_BASE_APIU = <span class="hljs-string">&quot;/prod-api&quot;</span>;<br></code></pre></td></tr></table></figure><p>axios 的封装 utils 下创建 request.js</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">import</span> axios <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;axios&quot;</span>;<br><span class="hljs-keyword">const</span> service = axios.create(&#123;<br>  <span class="hljs-attr">baseURL</span>: process.env.VUE_APP_BASE_API,<br>  <span class="hljs-attr">timeout</span>: <span class="hljs-number">5000</span>,<br>&#125;);<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> service;<br></code></pre></td></tr></table></figure><h2 id="二、封装登录请求动作"><a href="#二、封装登录请求动作" class="headerlink" title="二、封装登录请求动作"></a>二、封装登录请求动作</h2><p>根目录下的 src 下创建 api 文件夹，<code>touch sys.js</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">import</span> request <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;@/utils/request&quot;</span>;<br><span class="hljs-keyword">export</span> <span class="hljs-keyword">const</span> login = <span class="hljs-function">(<span class="hljs-params">data</span>) =&gt;</span> &#123;<br>  <span class="hljs-keyword">return</span> request(&#123;<br>    <span class="hljs-attr">url</span>: <span class="hljs-string">&quot;/sys/login&quot;</span>,<br>    <span class="hljs-attr">method</span>: <span class="hljs-string">&quot;PSOT&quot;</span>,<br>    data,<br>  &#125;);<br>&#125;;<br></code></pre></td></tr></table></figure><p>将登录请求的动作封装到 vuex 的 action 中，在<code>store</code>文件夹下创建 modules 文件夹，在 modules 下<code>touch user.js</code>模块（此模块用于处理所有和用户相关的内容）</p><blockquote><p>安装 md5 插件，加密登录密码 yarn add md5</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// user.js</span><br><span class="hljs-keyword">import</span> &#123; login &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@/api/sys&#x27;</span><br><span class="hljs-keyword">import</span> md5 <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;md5&#x27;</span><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> &#123;<br>  <span class="hljs-attr">namespaced</span>: <span class="hljs-literal">true</span>,<br>  <span class="hljs-attr">state</span>: <span class="hljs-function">() =&gt;</span> (&#123;&#125;),<br>  <span class="hljs-attr">mutations</span>: &#123;&#125;,<br>  <span class="hljs-attr">actions</span>: &#123;<br>    <span class="hljs-function"><span class="hljs-title">login</span>(<span class="hljs-params">context, userInfo</span>)</span> &#123;<br>      <span class="hljs-keyword">const</span> &#123; username, password &#125; = userInfo<br>      <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-built_in">Promise</span>(<span class="hljs-function">(<span class="hljs-params">resolve, reject</span>) =&gt;</span> &#123;<br>        login(&#123;<br>          username,<br>          <span class="hljs-attr">password</span>: md5(password)<br>        &#125;)<br>          .then(<span class="hljs-function"><span class="hljs-params">data</span> =&gt;</span> &#123;<br>            resolve()<br>          &#125;)<br>          .catch(<span class="hljs-function"><span class="hljs-params">err</span> =&gt;</span> &#123;<br>            reject(err)<br>          &#125;)<br>      &#125;)<br>    &#125;<br>  &#125;<br>&#125;<br><br><span class="hljs-comment">// 在store/index.js中注册</span><br><span class="hljs-keyword">import</span> &#123; createStore &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;vuex&#x27;</span><br><span class="hljs-keyword">import</span> user <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./modules/user.js&#x27;</span><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> createStore(&#123;<br>  <span class="hljs-attr">modules</span>:&#123;<br>    user<br>  &#125;<br>&#125;)<br></code></pre></td></tr></table></figure><p>在登录页，触发定义的 action，此时存在一个问题就是，我们当前请求的接口不存在，需要使用 devServer 代理</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// vue.config.js</span><br><span class="hljs-built_in">module</span>.exports = &#123;<br>  <span class="hljs-attr">devService</span>: &#123;<br>    <span class="hljs-attr">proxy</span>: &#123;<br>      <span class="hljs-string">&quot;/api&quot;</span>: &#123;<br>        <span class="hljs-comment">// 要代理的服务器地址， 不需要写api</span><br>        <span class="hljs-attr">target</span>: <span class="hljs-string">&quot;https://api.xxx.com&quot;</span>,<br>        <span class="hljs-attr">changeOrigin</span>: <span class="hljs-literal">true</span>, <span class="hljs-comment">// 是否跨域</span><br>      &#125;,<br>    &#125;,<br>  &#125;,<br>&#125;;<br></code></pre></td></tr></table></figure><p>重启项目，再次点击登录，就可以跳转到首页了。</p><h2 id="三、本地缓存的处理"><a href="#三、本地缓存的处理" class="headerlink" title="三、本地缓存的处理"></a>三、本地缓存的处理</h2><p>登录成功之后，前端会拿到后端返回的 token,我们需要将 token 进行缓存</p><p>缓存的 2 种方式：</p><blockquote><p>1、本地缓存：localStorage<br>2、全局状态管理： vuex</p></blockquote><p>localStorage 可以方便实现自动登录功能<br>保存在 vuex 中是为了后面在其他位置进行使用</p><h3 id="一-、localStorage"><a href="#一-、localStorage" class="headerlink" title="(一)、localStorage"></a>(一)、localStorage</h3><p>在 utils 文件夹下，新建 storage..js<br>1、封装 4 个方法</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 存储数据</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">const</span> setItem = <span class="hljs-function">(<span class="hljs-params">key, value</span>) =&gt;</span> &#123;<br>  <span class="hljs-comment">// 将数组、对象类型的数据转化为 JSON 字符串进行存储</span><br>  <span class="hljs-keyword">if</span> (<span class="hljs-keyword">typeof</span> value === <span class="hljs-string">&quot;object&quot;</span>) &#123;<br>    value = <span class="hljs-built_in">JSON</span>.stringify(value);<br>  &#125;<br>  <span class="hljs-built_in">window</span>.localStorage.setItem(key, value);<br>&#125;;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 获取数据</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">const</span> getItem = <span class="hljs-function">(<span class="hljs-params">key</span>) =&gt;</span> &#123;<br>  <span class="hljs-keyword">const</span> data = <span class="hljs-built_in">window</span>.localStorage.getItem(key);<br>  <span class="hljs-keyword">try</span> &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-built_in">JSON</span>.parse(data);<br>  &#125; <span class="hljs-keyword">catch</span> (err) &#123;<br>    <span class="hljs-keyword">return</span> data;<br>  &#125;<br>&#125;;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 删除数据</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">const</span> removeItem = <span class="hljs-function">(<span class="hljs-params">key</span>) =&gt;</span> &#123;<br>  <span class="hljs-built_in">window</span>.localStorage.removeItem(key);<br>&#125;;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 删除所有数据</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">const</span> removeAllItem = <span class="hljs-function">(<span class="hljs-params">key</span>) =&gt;</span> &#123;<br>  <span class="hljs-built_in">window</span>.localStorage.clear();<br>&#125;;<br></code></pre></td></tr></table></figure><h3 id="二-、vuex-处理-token"><a href="#二-、vuex-处理-token" class="headerlink" title="(二)、vuex 处理 token"></a>(二)、vuex 处理 token</h3><p>在 store 的 user.js 中</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">import</span> &#123; login &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@/api/sys&#x27;</span><br><span class="hljs-keyword">import</span> md5 <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;md5&#x27;</span><br><span class="hljs-keyword">import</span> &#123; setItem, getItem &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@/utils/storage&#x27;</span><br><span class="hljs-comment">// 常量目录 export const TOKEN = &#x27;token&#x27;</span><br><span class="hljs-keyword">import</span> &#123; TOKEN &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@/constant&#x27;</span><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> &#123;<br>  <span class="hljs-attr">namespaced</span>: <span class="hljs-literal">true</span>,<br>  <span class="hljs-attr">state</span>: <span class="hljs-function">() =&gt;</span> (&#123;<br>    <span class="hljs-attr">token</span>: getItem(TOKEN) || <span class="hljs-string">&#x27;&#x27;</span><br>  &#125;),<br>  <span class="hljs-attr">mutations</span>: &#123;<br>    <span class="hljs-function"><span class="hljs-title">setToken</span>(<span class="hljs-params">state, token</span>)</span> &#123;<br>      state.token = token<br>      setItem(TOKEN, token)<br>    &#125;<br>  &#125;,<br>  <span class="hljs-attr">actions</span>: &#123;<br>    <span class="hljs-function"><span class="hljs-title">login</span>(<span class="hljs-params">context, userInfo</span>)</span> &#123;<br>      ...<br>          .then(<span class="hljs-function"><span class="hljs-params">data</span> =&gt;</span> &#123;<br>            <span class="hljs-built_in">this</span>.commit(<span class="hljs-string">&#x27;user/setToken&#x27;</span>, data.data.data.token)<br>            resolve()<br>          &#125;)<br>          ...<br>      &#125;)<br>    &#125;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="四、响应数据的统一处理"><a href="#四、响应数据的统一处理" class="headerlink" title="四、响应数据的统一处理"></a>四、响应数据的统一处理</h2><p>上面这一行代码<code>this.commit(&#39;user/setToken&#39;, data.data.data.token)</code>，需要使用 data.data.data.token，书写方式不美观。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">import</span> axios <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;axios&#x27;</span><br><span class="hljs-keyword">import</span> &#123; ElMessage &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;element-plus&#x27;</span><br><br>...<br><span class="hljs-comment">// 响应拦截器</span><br>service.interceptors.response.use(<br>  <span class="hljs-function"><span class="hljs-params">response</span> =&gt;</span> &#123;<br>    <span class="hljs-keyword">const</span> &#123; success, message, data &#125; = response.data<br>    <span class="hljs-comment">//   要根据success的成功与否决定下面的操作</span><br>    <span class="hljs-keyword">if</span> (success) &#123;<br>      <span class="hljs-keyword">return</span> data<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>      <span class="hljs-comment">// 业务错误</span><br>      ElMessage.error(message) <span class="hljs-comment">// 提示错误消息</span><br>      <span class="hljs-keyword">return</span> <span class="hljs-built_in">Promise</span>.reject(<span class="hljs-keyword">new</span> <span class="hljs-built_in">Error</span>(message))<br>    &#125;<br>  &#125;,<br>  <span class="hljs-function"><span class="hljs-params">error</span> =&gt;</span> &#123;<br>    <span class="hljs-comment">// <span class="hljs-doctag">TODO:</span> 将来处理 token 超时问题</span><br>    ElMessage.error(error.message) <span class="hljs-comment">// 提示错误信息</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-built_in">Promise</span>.reject(error)<br>  &#125;<br>)<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> service<br></code></pre></td></tr></table></figure><p>上面的代码简写为：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-built_in">this</span>.commit(<span class="hljs-string">&quot;user/setToken&quot;</span>, data.token);<br></code></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> vue3 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>92、使用vue3+element-plus写后台管理系统：（二）</title>
      <link href="/2022/11/07/92-vue3-ele-plus-admin/"/>
      <url>/2022/11/07/92-vue3-ele-plus-admin/</url>
      
        <content type="html"><![CDATA[<p>包括 element-plus 的安装、登录、svg icons 的处理（坑：svg 不显示的问题）</p><span id="more"></span><h2 id="一、安装-element-plus"><a href="#一、安装-element-plus" class="headerlink" title="一、安装 element-plus"></a>一、安装 element-plus</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell">npm install @element-plus/icons<br>yarn add @element-plus/icons<br>pnpm install @element-plus/icons<br></code></pre></td></tr></table></figure><blockquote><p>安装成功，会出现一个 element-plus 安装成功和一个按钮</p></blockquote><h2 id="二、公开路由表配置"><a href="#二、公开路由表配置" class="headerlink" title="二、公开路由表配置"></a>二、公开路由表配置</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// router/router.js</span><br><span class="hljs-keyword">import</span> &#123; createRouter, createWebHistory &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;vue-router&quot;</span>;<br><br><span class="hljs-keyword">const</span> publicRoutes = [<br>  &#123;<br>    <span class="hljs-attr">path</span>: <span class="hljs-string">&quot;/login&quot;</span>,<br>    <span class="hljs-attr">component</span>: <span class="hljs-function">() =&gt;</span> <span class="hljs-keyword">import</span>(<span class="hljs-string">&quot;@/views/login/index&quot;</span>),<br>  &#125;,<br>];<br><br><span class="hljs-keyword">const</span> router = createRouter(&#123;<br>  <span class="hljs-attr">history</span>: createWebHistory(),<br>  <span class="hljs-attr">routes</span>: publicRoutes,<br>&#125;);<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> router;<br></code></pre></td></tr></table></figure><h2 id="三、登录页"><a href="#三、登录页" class="headerlink" title="三、登录页"></a>三、登录页</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">template</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;login-container&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">el-form</span></span><br><span class="hljs-tag">      <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;login-form&quot;</span></span><br><span class="hljs-tag">      <span class="hljs-attr">ref</span>=<span class="hljs-string">&quot;loginFormRef&quot;</span></span><br><span class="hljs-tag">      <span class="hljs-attr">:model</span>=<span class="hljs-string">&quot;loginForm&quot;</span></span><br><span class="hljs-tag">      <span class="hljs-attr">:rules</span>=<span class="hljs-string">&quot;loginRules&quot;</span></span><br><span class="hljs-tag">    &gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;title-container&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">h3</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;title&quot;</span>&gt;</span>后台管理系统<span class="hljs-tag">&lt;/<span class="hljs-name">h3</span>&gt;</span><br>      <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">el-form-item</span> <span class="hljs-attr">prop</span>=<span class="hljs-string">&quot;username&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;svg-container&quot;</span>&gt;</span><br>          <span class="hljs-tag">&lt;<span class="hljs-name">svg-icon</span> <span class="hljs-attr">icon</span>=<span class="hljs-string">&quot;user&quot;</span> /&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">el-input</span></span><br><span class="hljs-tag">          <span class="hljs-attr">placeholder</span>=<span class="hljs-string">&quot;username&quot;</span></span><br><span class="hljs-tag">          <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;username&quot;</span></span><br><span class="hljs-tag">          <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span></span><br><span class="hljs-tag">          <span class="hljs-attr">v-model</span>=<span class="hljs-string">&quot;loginForm.username&quot;</span></span><br><span class="hljs-tag">        &gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">el-input</span>&gt;</span><br>      <span class="hljs-tag">&lt;/<span class="hljs-name">el-form-item</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">el-form-item</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;svg-container&quot;</span>&gt;</span><br>          <span class="hljs-tag">&lt;<span class="hljs-name">svg-icon</span> <span class="hljs-attr">icon</span>=<span class="hljs-string">&quot;password&quot;</span> /&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">el-input</span></span><br><span class="hljs-tag">          <span class="hljs-attr">placeholder</span>=<span class="hljs-string">&quot;password&quot;</span></span><br><span class="hljs-tag">          <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;password&quot;</span></span><br><span class="hljs-tag">          <span class="hljs-attr">:type</span>=<span class="hljs-string">&quot;passwordType&quot;</span></span><br><span class="hljs-tag">          <span class="hljs-attr">v-model</span>=<span class="hljs-string">&quot;loginForm.password&quot;</span></span><br><span class="hljs-tag">        &gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">el-input</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;show-pwd&quot;</span>&gt;</span><br>          <span class="hljs-tag">&lt;<span class="hljs-name">svg-icon</span></span><br><span class="hljs-tag">            <span class="hljs-attr">:icon</span>=<span class="hljs-string">&quot;passwordType === &#x27;password&#x27; ? &#x27;eye&#x27; : &#x27;eye-open&#x27;&quot;</span></span><br><span class="hljs-tag">            @<span class="hljs-attr">click</span>=<span class="hljs-string">&quot;onChangePwdType&quot;</span></span><br><span class="hljs-tag">          &gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">svg-icon</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br>      <span class="hljs-tag">&lt;/<span class="hljs-name">el-form-item</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">el-button</span></span><br><span class="hljs-tag">        <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;primary&quot;</span></span><br><span class="hljs-tag">        <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;width:100%;margin-bottom: 30px&quot;</span></span><br><span class="hljs-tag">        <span class="hljs-attr">:loading</span>=<span class="hljs-string">&quot;loading&quot;</span></span><br><span class="hljs-tag">        @<span class="hljs-attr">click</span>=<span class="hljs-string">&quot;handleLogin&quot;</span></span><br><span class="hljs-tag">        &gt;</span>login<br>      <span class="hljs-tag">&lt;/<span class="hljs-name">el-button</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">el-form</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span><br></code></pre></td></tr></table></figure><p>js</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><code class="hljs js">&lt;script setup&gt;<br><span class="hljs-keyword">import</span> &#123; ref, computed &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;vue&#x27;</span><br><span class="hljs-keyword">import</span> &#123; validatePassword &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./rules&#x27;</span><br><span class="hljs-keyword">import</span> &#123; useStore &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;vuex&#x27;</span><br><span class="hljs-keyword">import</span> &#123; useRouter &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;vue-router&#x27;</span><br><br><span class="hljs-comment">// 数据源</span><br><span class="hljs-keyword">const</span> loginForm = ref(&#123;<br>  <span class="hljs-attr">username</span>: <span class="hljs-string">&#x27;super-admin&#x27;</span>,<br>  <span class="hljs-attr">password</span>: <span class="hljs-string">&#x27;123456&#x27;</span><br>&#125;)<br><span class="hljs-comment">// 验证规则</span><br><span class="hljs-keyword">const</span> loginRules = ref(&#123;<br>  <span class="hljs-attr">username</span>: [&#123;<br>    <span class="hljs-attr">required</span>: <span class="hljs-literal">true</span>,<br>    <span class="hljs-attr">trigger</span>: <span class="hljs-string">&#x27;blur&#x27;</span>,<br>    <span class="hljs-attr">message</span>: computed(<span class="hljs-function">() =&gt;</span> &#123;<br>      <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;error&#x27;</span><br>    &#125;)<br>  &#125;<br>  ],<br>  <span class="hljs-attr">password</span>: [<br>    &#123;<br>      <span class="hljs-attr">required</span>: <span class="hljs-literal">true</span>,<br>      <span class="hljs-attr">trigger</span>: <span class="hljs-string">&#x27;blur&#x27;</span>,<br>      <span class="hljs-attr">validator</span>: validatePassword()<br>    &#125;<br>  ]<br>&#125;)<br><span class="hljs-comment">// 处理密码</span><br><span class="hljs-keyword">const</span> passwordType = ref(<span class="hljs-string">&#x27;password&#x27;</span>)<br><span class="hljs-keyword">const</span> onChangePwdType = <span class="hljs-function">() =&gt;</span> &#123;<br>  <span class="hljs-keyword">if</span> (passwordType.value === <span class="hljs-string">&#x27;password&#x27;</span>) &#123;<br>    passwordType.value = <span class="hljs-string">&#x27;text&#x27;</span><br>  &#125; <span class="hljs-keyword">else</span> &#123;<br>    passwordType.value = <span class="hljs-string">&#x27;password&#x27;</span><br>  &#125;<br>&#125;<br><span class="hljs-comment">// 登录</span><br><span class="hljs-keyword">const</span> loading = ref(<span class="hljs-literal">false</span>)<br><span class="hljs-keyword">const</span> loginFormRef = ref(<span class="hljs-literal">null</span>)<br><span class="hljs-keyword">const</span> router = useRouter()<br><span class="hljs-keyword">const</span> store = useStore()<br><span class="hljs-keyword">const</span> handleLogin = <span class="hljs-function">() =&gt;</span> &#123;<br>  loginFormRef.value.validate(<span class="hljs-function"><span class="hljs-params">valid</span> =&gt;</span> &#123;<br>    <span class="hljs-keyword">if</span> (!valid) <span class="hljs-keyword">return</span><br>    loading.value = <span class="hljs-literal">false</span><br>    store.dispatch(<span class="hljs-string">&#x27;user/login&#x27;</span>, loginForm.value).then(<span class="hljs-function">() =&gt;</span> &#123;<br>      loading.value = <span class="hljs-literal">false</span><br>      router.push(<span class="hljs-string">&#x27;/&#x27;</span>)<br>    &#125;).catch(<span class="hljs-function"><span class="hljs-params">err</span> =&gt;</span> &#123;<br>      <span class="hljs-built_in">console</span>.log(err)<br>      loading.value = <span class="hljs-literal">false</span><br>    &#125;)<br>  &#125;)<br>&#125;<br><br>&lt;/script&gt;<br><br></code></pre></td></tr></table></figure><p>校验规则：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">export</span> <span class="hljs-keyword">const</span> validatePassword = <span class="hljs-function">() =&gt;</span> &#123;<br>  <span class="hljs-keyword">return</span> <span class="hljs-function">(<span class="hljs-params">rule, value, callback</span>) =&gt;</span> &#123;<br>    <span class="hljs-keyword">if</span> (value.length &lt; <span class="hljs-number">6</span>) &#123;<br>      <span class="hljs-comment">// callback(new Error(i18n.global.t(&#x27;msg.login.passwordRule&#x27;)))</span><br>      callback(<span class="hljs-keyword">new</span> <span class="hljs-built_in">Error</span>(<span class="hljs-string">&quot;error&quot;</span>));<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>      callback();<br>    &#125;<br>  &#125;;<br>&#125;;<br></code></pre></td></tr></table></figure><p>登录页样式：</p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br></pre></td><td class="code"><pre><code class="hljs scss">&lt;style lang=&quot;scss&quot; scoped&gt;<br><span class="hljs-variable">$bgColor</span>: <span class="hljs-number">#2d3a4b</span>;<br><span class="hljs-variable">$dark_gray</span>: <span class="hljs-number">#889aa4</span>;<br><span class="hljs-variable">$light_gray</span>: <span class="hljs-number">#eee</span>;<br><span class="hljs-variable">$cursor</span>: <span class="hljs-number">#fff</span>;<br><br><span class="hljs-selector-class">.login-container</span> &#123;<br>  <span class="hljs-attribute">min-height</span>: <span class="hljs-number">100%</span>;<br>  <span class="hljs-attribute">width</span>: <span class="hljs-number">100%</span>;<br>  <span class="hljs-attribute">background-color</span>: <span class="hljs-variable">$bgColor</span>;<br>  <span class="hljs-attribute">overflow</span>: hidden;<br><br>  <span class="hljs-selector-class">.login-form</span> &#123;<br>    <span class="hljs-attribute">position</span>: relative;<br>    <span class="hljs-attribute">width</span>: <span class="hljs-number">520px</span>;<br>    <span class="hljs-attribute">max-width</span>: <span class="hljs-number">100%</span>;<br>    <span class="hljs-attribute">padding</span>: <span class="hljs-number">160px</span> <span class="hljs-number">35px</span> <span class="hljs-number">0</span>;<br>    <span class="hljs-attribute">margin</span>: <span class="hljs-number">0</span> auto;<br>    <span class="hljs-attribute">overflow</span>: hidden;<br><br>    ::v-deep .el-form-item &#123;<br>      border: <span class="hljs-number">1px</span> solid rgba(<span class="hljs-number">255</span>, <span class="hljs-number">255</span>, <span class="hljs-number">255</span>, <span class="hljs-number">0.1</span>);<br>      <span class="hljs-attribute">background-color</span>: rgba(<span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0.1</span>);<br>      <span class="hljs-attribute">border-radius</span>: <span class="hljs-number">5px</span>;<br>      <span class="hljs-attribute">color</span>: <span class="hljs-number">#454545</span>;<br>    &#125;<br><br>    ::v-deep .el-input &#123;<br>      display: inline-block;<br>      <span class="hljs-attribute">height</span>: <span class="hljs-number">47px</span>;<br>      <span class="hljs-attribute">width</span>: <span class="hljs-number">85%</span>;<br><br>      <span class="hljs-selector-tag">input</span> &#123;<br>        <span class="hljs-attribute">background</span>: transparent;<br>        <span class="hljs-attribute">border</span>: <span class="hljs-number">0px</span>;<br>        -webkit-appearance: none;<br>        <span class="hljs-attribute">border-radius</span>: <span class="hljs-number">0px</span>;<br>        <span class="hljs-attribute">padding</span>: <span class="hljs-number">12px</span> <span class="hljs-number">5px</span> <span class="hljs-number">12px</span> <span class="hljs-number">15px</span>;<br>        <span class="hljs-attribute">color</span>: <span class="hljs-variable">$light_gray</span>;<br>        <span class="hljs-attribute">height</span>: <span class="hljs-number">47px</span>;<br>        caret-<span class="hljs-attribute">color</span>: <span class="hljs-variable">$cursor</span>;<br>      &#125;<br>    &#125;<br>  &#125;<br>&#125;<br><br><span class="hljs-selector-class">.svg-container</span> &#123;<br>  <span class="hljs-attribute">padding</span>: <span class="hljs-number">6px</span> <span class="hljs-number">5px</span> <span class="hljs-number">6px</span> <span class="hljs-number">15px</span>;<br>  <span class="hljs-attribute">color</span>: <span class="hljs-variable">$dark_gray</span>;<br>  <span class="hljs-attribute">vertical-align</span>: middle;<br>  <span class="hljs-attribute">display</span>: inline-block;<br>&#125;<br><br><span class="hljs-selector-class">.title-container</span> &#123;<br>  <span class="hljs-attribute">position</span>: relative;<br><br>  <span class="hljs-selector-class">.title</span> &#123;<br>    <span class="hljs-attribute">font-size</span>: <span class="hljs-number">26px</span>;<br>    <span class="hljs-attribute">color</span>: <span class="hljs-variable">$light_gray</span>;<br>    <span class="hljs-attribute">margin</span>: <span class="hljs-number">0px</span> auto <span class="hljs-number">40px</span> auto;<br>    <span class="hljs-attribute">text-align</span>: center;<br>    <span class="hljs-attribute">font-weight</span>: bold;<br>  &#125;<br><br>  ::v-deep .lang-select &#123;<br>    position: absolute;<br>    <span class="hljs-attribute">top</span>: <span class="hljs-number">4px</span>;<br>    <span class="hljs-attribute">right</span>: <span class="hljs-number">0</span>;<br>    <span class="hljs-attribute">background-color</span>: white;<br>    <span class="hljs-attribute">font-size</span>: <span class="hljs-number">22px</span>;<br>    <span class="hljs-attribute">padding</span>: <span class="hljs-number">4px</span>;<br>    <span class="hljs-attribute">border-radius</span>: <span class="hljs-number">4px</span>;<br>    <span class="hljs-attribute">cursor</span>: pointer;<br>  &#125;<br>&#125;<br><br><span class="hljs-selector-class">.show-pwd</span> &#123;<br>  <span class="hljs-attribute">position</span>: absolute;<br>  <span class="hljs-attribute">right</span>: <span class="hljs-number">10px</span>;<br>  <span class="hljs-attribute">top</span>: <span class="hljs-number">7px</span>;<br>  <span class="hljs-attribute">font-size</span>: <span class="hljs-number">16px</span>;<br>  <span class="hljs-attribute">color</span>: <span class="hljs-variable">$dark_gray</span>;<br>  <span class="hljs-attribute">cursor</span>: pointer;<br>  user-select: none;<br>&#125;<br>&lt;/style&gt;<br><br></code></pre></td></tr></table></figure><p>全局样式：src/styles/index.scss</p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><code class="hljs scss"><span class="hljs-selector-tag">html</span>,<br><span class="hljs-selector-tag">body</span> &#123;<br>  <span class="hljs-attribute">height</span>: <span class="hljs-number">100%</span>;<br>  <span class="hljs-attribute">margin</span>: <span class="hljs-number">0</span>;<br>  <span class="hljs-attribute">padding</span>: <span class="hljs-number">0</span>;<br>  -moz-osx-<span class="hljs-attribute">font-smoothing</span>: grayscale;<br>  -webkit-<span class="hljs-attribute">font-smoothing</span>: antialiased;<br>  <span class="hljs-attribute">text-rendering</span>: optimizeLegibility;<br>  <span class="hljs-attribute">font-family</span>: Helvetica Neue, Helvetica, PingFang SC, Hiragino Sans GB, Microsoft<br>      YaHei, Arial, sans-serif;<br>&#125;<br><br><span class="hljs-selector-id">#app</span> &#123;<br>  <span class="hljs-attribute">height</span>: <span class="hljs-number">100%</span>;<br>&#125;<br><br>*,<br>*:before,<br>*:after &#123;<br>  box-sizing: inherit;<br>  <span class="hljs-attribute">margin</span>: <span class="hljs-number">0</span>;<br>  <span class="hljs-attribute">padding</span>: <span class="hljs-number">0</span>;<br>&#125;<br><br><span class="hljs-selector-tag">a</span><span class="hljs-selector-pseudo">:focus</span>,<br><span class="hljs-selector-tag">a</span><span class="hljs-selector-pseudo">:active</span> &#123;<br>  <span class="hljs-attribute">outline</span>: none;<br>&#125;<br><br><span class="hljs-selector-tag">a</span>,<br><span class="hljs-selector-tag">a</span><span class="hljs-selector-pseudo">:focus</span>,<br><span class="hljs-selector-tag">a</span><span class="hljs-selector-pseudo">:hover</span> &#123;<br>  <span class="hljs-attribute">cursor</span>: pointer;<br>  <span class="hljs-attribute">color</span>: inherit;<br>  <span class="hljs-attribute">text-decoration</span>: none;<br>&#125;<br><br><span class="hljs-selector-tag">div</span><span class="hljs-selector-pseudo">:focus</span> &#123;<br>  <span class="hljs-attribute">outline</span>: none;<br>&#125;<br><br><span class="hljs-selector-class">.clearfix</span> &#123;<br>  &amp;:after &#123;<br>    visibility: hidden;<br>    <span class="hljs-attribute">display</span>: block;<br>    <span class="hljs-attribute">font-size</span>: <span class="hljs-number">0</span>;<br>    <span class="hljs-attribute">content</span>: <span class="hljs-string">&quot; &quot;</span>;<br>    <span class="hljs-attribute">clear</span>: both;<br>    <span class="hljs-attribute">height</span>: <span class="hljs-number">0</span>;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>导入全局样式</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">import</span> <span class="hljs-string">&quot;./styles/index.scss&quot;</span>;<br></code></pre></td></tr></table></figure><p><code>这里有个坑：</code> 登录页输入框的 svg 小图标不显示</p><h2 id="四、icon-图标处理方法：SvgIcon"><a href="#四、icon-图标处理方法：SvgIcon" class="headerlink" title="四、icon 图标处理方法：SvgIcon"></a>四、icon 图标处理方法：SvgIcon</h2><p>结合 vue-element-admin 项目的借鉴，将 icon 图标分为 element-plus 图标和自定义引入图标</p><blockquote><p>自定义 SVG 图标组件的能力：显示外部引入图标和项目内的 svg 图标</p></blockquote><p>封装 SvgIcon 组件</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">template</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">div</span></span><br><span class="hljs-tag">    <span class="hljs-attr">v-if</span>=<span class="hljs-string">&quot;isExternal&quot;</span></span><br><span class="hljs-tag">    <span class="hljs-attr">:style</span>=<span class="hljs-string">&quot;styleExternalIcon&quot;</span></span><br><span class="hljs-tag">    <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;svg-external-icon svg-icon&quot;</span></span><br><span class="hljs-tag">    <span class="hljs-attr">:class</span>=<span class="hljs-string">&quot;className&quot;</span></span><br><span class="hljs-tag">  /&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">svg</span> <span class="hljs-attr">v-else</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;svg-icon&quot;</span> <span class="hljs-attr">:class</span>=<span class="hljs-string">&quot;className&quot;</span> <span class="hljs-attr">aria-hidden</span>=<span class="hljs-string">&quot;true&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">use</span> <span class="hljs-attr">:xlink:href</span>=<span class="hljs-string">&quot;iconName&quot;</span> /&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">svg</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// utils/validate.js</span><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 判断是否为外部资源</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">export</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">isExternal</span>(<span class="hljs-params">path</span>) </span>&#123;<br>  <span class="hljs-keyword">return</span> <span class="hljs-regexp">/^(https?:|mailto:|tel:)/</span>.test(path)<br>&#125;<br><br><br>&lt;script setup&gt;<br><span class="hljs-keyword">import</span> &#123; isExternal <span class="hljs-keyword">as</span> external &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@/utils/validate&#x27;</span><br><span class="hljs-keyword">import</span> &#123; defineProps, computed &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;vue&#x27;</span><br><br><span class="hljs-keyword">const</span> props = defineProps(&#123;<br>  <span class="hljs-attr">icon</span>: &#123;<br>    <span class="hljs-attr">type</span>: <span class="hljs-built_in">String</span>,<br>    <span class="hljs-attr">required</span>: <span class="hljs-literal">true</span><br>  &#125;,<br>  <span class="hljs-attr">className</span>: &#123;<br>    <span class="hljs-attr">type</span>: <span class="hljs-built_in">String</span>,<br>    <span class="hljs-attr">default</span>: <span class="hljs-string">&#x27;&#x27;</span><br>  &#125;<br>&#125;)<br><span class="hljs-comment">// 判断是否为外部图标</span><br><span class="hljs-keyword">const</span> isExternal = computed(<span class="hljs-function">() =&gt;</span> external(props.icon))<br><span class="hljs-comment">// 外部图标样式</span><br><span class="hljs-keyword">const</span> styleExternalIcon = computed(<span class="hljs-function">() =&gt;</span> (&#123;<br>  <span class="hljs-attr">mask</span>: <span class="hljs-string">`url(<span class="hljs-subst">$&#123;props.icon&#125;</span>) no-repeat 50% 50%`</span>,<br>  <span class="hljs-string">&#x27;-webkit-mask&#x27;</span>: <span class="hljs-string">`url(<span class="hljs-subst">$&#123;props.icon&#125;</span>) no-repeat 50% 50%`</span><br>&#125;))<br><span class="hljs-comment">// 项目内图标</span><br><span class="hljs-keyword">const</span> iconName = computed(<span class="hljs-function">() =&gt;</span> <span class="hljs-string">`#icon-<span class="hljs-subst">$&#123;props.icon&#125;</span>`</span>)<br><br>&lt;/script&gt;<br></code></pre></td></tr></table></figure><p>样式</p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs scss"><span class="hljs-selector-class">.svg-icon</span> &#123;<br>  <span class="hljs-attribute">width</span>: <span class="hljs-number">1em</span>;<br>  <span class="hljs-attribute">height</span>: <span class="hljs-number">1em</span>;<br>  <span class="hljs-attribute">vertical-align</span>: -<span class="hljs-number">0.15em</span>;<br>  fill: currentColor;<br>  <span class="hljs-attribute">overflow</span>: hidden;<br>&#125;<br><br><span class="hljs-selector-class">.svg-external-icon</span> &#123;<br>  <span class="hljs-attribute">background-color</span>: currentColor;<br>  <span class="hljs-attribute">mask</span>-size: cover <span class="hljs-meta">!important</span>;<br>  <span class="hljs-attribute">display</span>: inline-block;<br>&#125;<br></code></pre></td></tr></table></figure><p>上面只处理了外部 svg 图标的展示，还要处理 element-plus 的图标</p><p>// 创建 icons 文件夹 内部包含：内部 svg 图标、SvgIcon 全局注册</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">import</span> SvgIcon <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;@/components/SvgIcon&quot;</span>;<br><span class="hljs-comment">// 通过 require.context() 函数来创建自己的 context</span><br><span class="hljs-keyword">const</span> svgRequire = <span class="hljs-built_in">require</span>.context(<span class="hljs-string">&quot;./svg&quot;</span>, <span class="hljs-literal">false</span>, <span class="hljs-regexp">/\.svg$/</span>);<br><span class="hljs-comment">// 此时返回一个 require 的函数，可以接受一个 request 的参数，用于 require 的导入。</span><br><span class="hljs-comment">// 该函数提供了三个属性，可以通过 require.keys() 获取到所有的 svg 图标</span><br><span class="hljs-comment">// 遍历图标，把图标作为 request 传入到 require 导入函数中，完成本地 svg 图标的导入</span><br><br>svgRequire.keys().forEach(<span class="hljs-function">(<span class="hljs-params">SvgIcon</span>) =&gt;</span> svgRequire(SvgIcon));<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> (app) =&gt; &#123;<br>  app.component(<span class="hljs-string">&quot;svg-icon&quot;</span>, SvgIcon);<br>&#125;;<br></code></pre></td></tr></table></figure><p>main.js 引入 svgIcon</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 导入 svgIcon</span><br><span class="hljs-keyword">import</span> installIcons <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;@/icons&quot;</span>;<br>installIcons(app);<br></code></pre></td></tr></table></figure><p><code>此时，svg图标仍然不显示</code>，还需要使用 svg-sprite-loader 处理 svg 图标</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">npm i --save-dev svg-sprite-loader@6.0.9<br></code></pre></td></tr></table></figure><p>配置 vue.config.js</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> path = <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;path&quot;</span>);<br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">resolve</span>(<span class="hljs-params">dir</span>) </span>&#123;<br>  <span class="hljs-keyword">return</span> path.join(__dirname, dir);<br>&#125;<br><br><span class="hljs-built_in">module</span>.exports = &#123;<br>  <span class="hljs-function"><span class="hljs-title">chainWebpack</span>(<span class="hljs-params">config</span>)</span> &#123;<br>    <span class="hljs-comment">// 设置 svg-sprite-loader</span><br>    config.module.rule(<span class="hljs-string">&quot;svg&quot;</span>).exclude.add(resolve(<span class="hljs-string">&quot;src/icons&quot;</span>)).end();<br>    config.module<br>      .rule(<span class="hljs-string">&quot;icons&quot;</span>)<br>      .test(<span class="hljs-regexp">/\.svg$/</span>)<br>      .include.add(resolve(<span class="hljs-string">&quot;src/icons&quot;</span>))<br>      .end()<br>      .use(<span class="hljs-string">&quot;svg-sprite-loader&quot;</span>)<br>      .loader(<span class="hljs-string">&quot;svg-sprite-loader&quot;</span>)<br>      .options(&#123;<br>        <span class="hljs-attr">symbolId</span>: <span class="hljs-string">&quot;icon-[name]&quot;</span>,<br>      &#125;)<br>      .end();<br>  &#125;,<br>&#125;;<br></code></pre></td></tr></table></figure><p>至此，svg 图标可以正常显示。</p>]]></content>
      
      
      
        <tags>
            
            <tag> vue3 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>91、使用vue3+element-plus写后台管理系统：（一）</title>
      <link href="/2022/10/16/91-vue3-ele-plus-admin/"/>
      <url>/2022/10/16/91-vue3-ele-plus-admin/</url>
      
        <content type="html"><![CDATA[<p>创建项目及代码格式提交规范（备注：遇见 2 个坑：yarn 问题、git cz 提交空格问题）</p><span id="more"></span><h2 id="一、vue-cli-创建项目"><a href="#一、vue-cli-创建项目" class="headerlink" title="一、vue-cli 创建项目"></a>一、vue-cli 创建项目</h2><p>vue-cli 版本应当大于 4.5.13</p><p>升级 vue-cli</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">npm update -g @vue/cli<br></code></pre></td></tr></table></figure><p>创建项目</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><code class="hljs shell">vue create vue3-admin<br><br>// 进入模板选择<br>Vue CLI v4.5.13<br>? Please pick a preset:<br>  Default ([Vue 2] babel, eslint)<br>  Default (Vue 3) ([Vue 3] babel, eslint)<br><span class="hljs-meta">&gt;</span><span class="bash"> Manually select features  // 选择手动配置</span><br>// ----------------------------------------------------------<br>? Check the features needed for your project:<br> (*) Choose Vue version // 选择 vue 版本<br> (*) Babel // 使用 babel<br> ( ) TypeScript // 不使用 ts<br> ( ) Progressive Web App (PWA) Support // 不使用 PWA<br> (*) Router // 添加 vue-router<br> (*) Vuex // 添加 vuex<br><span class="hljs-meta">&gt;</span><span class="bash">(*) CSS Pre-processors // 使用 css 预处理器</span><br> (*) Linter / Formatter // 代码格式化<br> ( ) Unit Testing // 不配置测试<br> ( ) E2E Testing  // // 不配置测试<br>// ----------------------------------------------------------<br> Choose a version of Vue.js that you want to start the project with<br>  2.x<br><span class="hljs-meta">&gt;</span><span class="bash"> 3.x // 选择 vue 3.0 版本</span><br>// ----------------------------------------------------------<br> Use history mode for router? (Requires proper server setup for index fallback in production) (Y/n) n // 不使用 history模式 的路由<br>// ----------------------------------------------------------<br> ? Pick a CSS pre-processor (PostCSS, Autoprefixer and CSS Modules are supported by default):<br><span class="hljs-meta">&gt;</span><span class="bash"> Sass/SCSS (with dart-sass) // 使用基于 dart-sass 的 scss 预处理器</span><br>  Sass/SCSS (with node-sass)<br>  Less<br>  Stylus<br>// ----------------------------------------------------------<br>? Pick a linter / formatter config:<br>  ESLint with error prevention only<br>  ESLint + Airbnb config<br><span class="hljs-meta">&gt;</span><span class="bash"> ESLint + Standard config // 使用 ESLint 标准代码格式化方案</span><br>  ESLint + Prettier<br>// ----------------------------------------------------------<br>? Pick additional lint features:<br> (*) Lint on save //<br><span class="hljs-meta">&gt;</span><span class="bash">(*) Lint and fix on commit  // 保存时 &amp;&amp; 提交时，都进行 lint</span><br>// ----------------------------------------------------------<br>? Where do you prefer placing config for Babel, ESLint, etc.? (Use arrow keys)<br><span class="hljs-meta">&gt;</span><span class="bash"> In dedicated config files // 单独的配置文件</span><br>  In package.json<br>// ----------------------------------------------------------<br> Save this as a preset for future projects? (y/N) n // 不存储预设<br></code></pre></td></tr></table></figure><p>进入项目，然后启动项目</p><p><code>创建项目这里的坑</code>:<a href="mailto:&#x6a;&#101;&#x73;&#x74;&#x2d;&#119;&#111;&#114;&#107;&#101;&#x72;&#64;&#50;&#x38;&#x2e;&#x31;&#46;&#51;">&#x6a;&#101;&#x73;&#x74;&#x2d;&#119;&#111;&#114;&#107;&#101;&#x72;&#64;&#50;&#x38;&#x2e;&#x31;&#46;&#51;</a>: The engine “node” is incompatible with this module. Expe</p><blockquote><p>解决方法： yarn config set ignore-engines true</p></blockquote><h2 id="二、ESLint-和-Prettier-解决代码格式问题"><a href="#二、ESLint-和-Prettier-解决代码格式问题" class="headerlink" title="二、ESLint 和 Prettier 解决代码格式问题"></a>二、ESLint 和 Prettier 解决代码格式问题</h2><p>创建项目时，已经选择了 eslint，配置文件为.eslintrc.js</p><p>vscode 下载<code>prettier</code>插件，创建.prettierrc 文件，配置如下：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs js">&#123;<br>  <span class="hljs-comment">// 不尾随分号</span><br>  <span class="hljs-string">&quot;semi&quot;</span>: <span class="hljs-literal">false</span>,<br>  <span class="hljs-comment">// 使用单引号</span><br>  <span class="hljs-string">&quot;singleQuote&quot;</span>: <span class="hljs-literal">true</span>,<br>  <span class="hljs-comment">// 多行逗号分割的语法中，最后一行不加逗号</span><br>  <span class="hljs-string">&quot;trailingComma&quot;</span>: <span class="hljs-string">&quot;none&quot;</span><br>&#125;<br></code></pre></td></tr></table></figure><p>vscode 设置中，搜索<code>Format On Save</code>,然后勾选<code>在保存时格式化文件。</code></p><p>还要解决一个问题就是 eslint 和 prettier 的冲突问题，例如 created 钩子函数后面会有一个空格，prettier 会将空格去掉</p><p>解决方法：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// .eslintrc.js  rules规则下添加</span><br><span class="hljs-string">&#x27;space-before-function-paren&#x27;</span>: <span class="hljs-string">&#x27;off&#x27;</span><br></code></pre></td></tr></table></figure><h2 id="三、git-提交规范"><a href="#三、git-提交规范" class="headerlink" title="三、git 提交规范"></a>三、git 提交规范</h2><p>1、全局安装 commitizen</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">npm install -g commitizen@4.2.4<br></code></pre></td></tr></table></figure><p>2、安装并配置 cz-customizable</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">npm i cz-customizable@6.3.0 --save-dev<br><br></code></pre></td></tr></table></figure><p>配置：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// package.json</span><br><span class="hljs-string">&quot;config&quot;</span>:&#123;<br>  <span class="hljs-string">&quot;commitizen&quot;</span>: &#123;<br>    <span class="hljs-string">&quot;path&quot;</span>: <span class="hljs-string">&quot;node_modules/cz-customizable&quot;</span><br>  &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p>3、根目录下创建.cz-config.js 自定义提示文件</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-built_in">module</span>.exports = &#123;<br>  <span class="hljs-comment">// 可选类型</span><br>  <span class="hljs-attr">types</span>: [<br>    &#123; <span class="hljs-attr">value</span>: <span class="hljs-string">&quot;feat&quot;</span>, <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;feat:     新功能&quot;</span> &#125;,<br>    &#123; <span class="hljs-attr">value</span>: <span class="hljs-string">&quot;fix&quot;</span>, <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;fix:      修复&quot;</span> &#125;,<br>    &#123; <span class="hljs-attr">value</span>: <span class="hljs-string">&quot;docs&quot;</span>, <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;docs:     文档变更&quot;</span> &#125;,<br>    &#123; <span class="hljs-attr">value</span>: <span class="hljs-string">&quot;style&quot;</span>, <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;style:    代码格式(不影响代码运行的变动)&quot;</span> &#125;,<br>    &#123;<br>      <span class="hljs-attr">value</span>: <span class="hljs-string">&quot;refactor&quot;</span>,<br>      <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;refactor: 重构(既不是增加feature，也不是修复bug)&quot;</span>,<br>    &#125;,<br>    &#123; <span class="hljs-attr">value</span>: <span class="hljs-string">&quot;perf&quot;</span>, <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;perf:     性能优化&quot;</span> &#125;,<br>    &#123; <span class="hljs-attr">value</span>: <span class="hljs-string">&quot;test&quot;</span>, <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;test:     增加测试&quot;</span> &#125;,<br>    &#123; <span class="hljs-attr">value</span>: <span class="hljs-string">&quot;chore&quot;</span>, <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;chore:    构建过程或辅助工具的变动&quot;</span> &#125;,<br>    &#123; <span class="hljs-attr">value</span>: <span class="hljs-string">&quot;revert&quot;</span>, <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;revert:   回退&quot;</span> &#125;,<br>    &#123; <span class="hljs-attr">value</span>: <span class="hljs-string">&quot;build&quot;</span>, <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;build:    打包&quot;</span> &#125;,<br>  ],<br>  <span class="hljs-comment">// 消息步骤</span><br>  <span class="hljs-attr">messages</span>: &#123;<br>    <span class="hljs-attr">type</span>: <span class="hljs-string">&quot;请选择提交类型:&quot;</span>,<br>    <span class="hljs-attr">customScope</span>: <span class="hljs-string">&quot;请输入修改范围(可选):&quot;</span>,<br>    <span class="hljs-attr">subject</span>: <span class="hljs-string">&quot;请简要描述提交(必填):&quot;</span>,<br>    <span class="hljs-attr">body</span>: <span class="hljs-string">&quot;请输入详细描述(可选):&quot;</span>,<br>    <span class="hljs-attr">footer</span>: <span class="hljs-string">&quot;请输入要关闭的issue(可选):&quot;</span>,<br>    <span class="hljs-attr">confirmCommit</span>: <span class="hljs-string">&quot;确认使用以上信息提交？(y/n/e/h)&quot;</span>,<br>  &#125;,<br>  <span class="hljs-comment">// 跳过问题</span><br>  <span class="hljs-attr">skipQuestions</span>: [<span class="hljs-string">&quot;body&quot;</span>, <span class="hljs-string">&quot;footer&quot;</span>],<br>  <span class="hljs-comment">// subject文字长度默认是72</span><br>  <span class="hljs-attr">subjectLimit</span>: <span class="hljs-number">72</span>,<br>&#125;;<br></code></pre></td></tr></table></figure><p>4、使用 git cz 代替 git commit</p><p>5、git hooks 校验提交信息</p><p>2 个工具的的使用：</p><blockquote><ol><li><a href="https://github.com/conventional-changelog/commitlint">commitlint</a>：用于检查提交信息</li></ol></blockquote><blockquote><ol start="2"><li><a href="https://github.com/typicode/husky">husky</a>：是<code>git hooks</code>工具</li></ol></blockquote><blockquote><blockquote><p>npm 版本大于 7.x</p></blockquote></blockquote><p>5.1 安装 commitlint</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">npm install --save-dev @commitlint/config-conventional@12.1.4 @commitlint/cli@12.1.4<br></code></pre></td></tr></table></figure><p>5.2 创建 commitlint.config.js(编码格式为 UTF-8)</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-built_in">module</span>.exports = &#123;<br>  <span class="hljs-comment">// 继承的规则</span><br>  <span class="hljs-attr">extends</span>: [<span class="hljs-string">&quot;@commitlint/config-conventional&quot;</span>],<br>  <span class="hljs-comment">// 定义规则类型</span><br>  <span class="hljs-attr">rules</span>: &#123;<br>    <span class="hljs-comment">// type 类型定义，表示 git 提交的 type 必须在以下类型范围内</span><br>    <span class="hljs-string">&quot;type-enum&quot;</span>: [<br>      <span class="hljs-number">2</span>,<br>      <span class="hljs-string">&quot;always&quot;</span>,<br>      [<br>        <span class="hljs-string">&quot;feat&quot;</span>, <span class="hljs-comment">// 新功能 feature</span><br>        <span class="hljs-string">&quot;fix&quot;</span>, <span class="hljs-comment">// 修复 bug</span><br>        <span class="hljs-string">&quot;docs&quot;</span>, <span class="hljs-comment">// 文档注释</span><br>        <span class="hljs-string">&quot;style&quot;</span>, <span class="hljs-comment">// 代码格式(不影响代码运行的变动)</span><br>        <span class="hljs-string">&quot;refactor&quot;</span>, <span class="hljs-comment">// 重构(既不增加新功能，也不是修复bug)</span><br>        <span class="hljs-string">&quot;perf&quot;</span>, <span class="hljs-comment">// 性能优化</span><br>        <span class="hljs-string">&quot;test&quot;</span>, <span class="hljs-comment">// 增加测试</span><br>        <span class="hljs-string">&quot;chore&quot;</span>, <span class="hljs-comment">// 构建过程或辅助工具的变动</span><br>        <span class="hljs-string">&quot;revert&quot;</span>, <span class="hljs-comment">// 回退</span><br>        <span class="hljs-string">&quot;build&quot;</span>, <span class="hljs-comment">// 打包</span><br>      ],<br>    ],<br>    <span class="hljs-comment">// subject 大小写不做校验</span><br>    <span class="hljs-string">&quot;subject-case&quot;</span>: [<span class="hljs-number">0</span>],<br>  &#125;,<br>&#125;;<br></code></pre></td></tr></table></figure><p>5.3 安装 husky</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs shell">npm install husky@7.0.1 --save-dev<br>// 启动hooks，生成.husky<br>npx husky install<br><br>// 在 `package.json` 中生成 `prepare` 指令（ **需要 npm &gt; 7.0 版本** ）<br>npm set-script prepare &quot;husky install&quot;<br><br>// 执行 `prepare` 指令<br>npm run prepare<br>// 添加 `commitlint` 的 `hook` 到 `husky`中，并指令在 `commit-msg` 的 `hooks` 下执行 `npx --no-install commitlint --edit &quot;$1&quot;` 指令<br><br>npx husky add .husky/commit-msg &#x27;npx --no-install commitlint --edit &quot;$1&quot;&#x27;<br></code></pre></td></tr></table></figure><p>不符合规范的将不能提交</p><p>5.4 通过 pre-commit 检测提交时代码规范</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs shell">// 执行<br>npx husky add .husky/pre-commit &quot;npx eslint --ext .js,.vue src&quot;<br> // 添加 `commit` 时的 `hook` （`npx eslint --ext .js,.vue src` 会在执行到该 hook 时运行<br>// 上面操作会在.husky文件下生成pre-commit<br></code></pre></td></tr></table></figure><blockquote><p>vscode 提交<br>源代码管理 -&gt; stage all changes -&gt; git cz -&gt; 选择提交类型 -&gt; git push</p></blockquote><p><img src="https://cdn.staticaly.com/gh/HeyJudeYQ/Image-Host@master/20221116/githook.6nw71q0vos40.png" alt="git cz"></p><p><code>这里有个坑：</code></p><blockquote><p>在<code>请简要描述提交（必填）</code> 这一步填写信息时，需要加一个空格</p></blockquote><p>5.5 lint-staged 自动修复格式错误(无需安装，创建项目时自带)</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// package.json</span><br><span class="hljs-string">&quot;lint-staged&quot;</span>: &#123;<br>    <span class="hljs-string">&quot;src/**/*.&#123;js,vue&#125;&quot;</span>: [<br>      <span class="hljs-string">&quot;eslint --fix&quot;</span>,<br>      <span class="hljs-string">&quot;git add&quot;</span><br>    ]<br>  &#125;<br><br></code></pre></td></tr></table></figure><p>修改 <code>.husky/pre-commit</code> 文件</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs js">#!<span class="hljs-regexp">/bin/</span>sh<br>. <span class="hljs-string">&quot;$(dirname &quot;</span>$<span class="hljs-number">0</span><span class="hljs-string">&quot;)/_/husky.sh&quot;</span><br><br>npx lint-staged<br></code></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> vue3 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>90、相对时间及时间国际化的处理</title>
      <link href="/2022/08/15/90-relativeTime/"/>
      <url>/2022/08/15/90-relativeTime/</url>
      
        <content type="html"><![CDATA[<p>相对时间可以理解为最后一次“打招呼”的时间和当前时间的差值。例如：2 小时前，1 天前，1 年前等</p><span id="more"></span><h2 id="一、relativeTime-函数"><a href="#一、relativeTime-函数" class="headerlink" title="一、relativeTime 函数"></a>一、relativeTime 函数</h2><p>使用 day.js 将后端返回的时间戳处理为相对时间（1 小时前，1 天前等格式）</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">import</span> dayjs <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;dayjs&quot;</span>;<br><span class="hljs-keyword">import</span> rTime <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;dayjs/plugin/relativeTime&quot;</span>;<br><span class="hljs-comment">// 处理语言</span><br><span class="hljs-keyword">import</span> <span class="hljs-string">&quot;dayjs/locale/zh-cn&quot;</span>;<br><span class="hljs-keyword">import</span> store <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;@/store&quot;</span>;<br><br><span class="hljs-comment">// 时间格式处理： 2022-08-15</span><br><span class="hljs-keyword">const</span> dateFilter = <span class="hljs-function">(<span class="hljs-params">val, format = <span class="hljs-string">&quot;YYYY-MM-DD&quot;</span></span>) =&gt;</span> &#123;<br>  <span class="hljs-keyword">if</span> (!<span class="hljs-built_in">isNaN</span>(val)) &#123;<br>    val = <span class="hljs-built_in">parseInt</span>(val);<br>  &#125;<br>  <span class="hljs-keyword">return</span> dayjs(val).format(format);<br>&#125;;<br><br><span class="hljs-comment">// 加载相对时间插件</span><br>dayjs.extend(rTime);<br><span class="hljs-comment">// 相对时间处理</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">relativeTime</span>(<span class="hljs-params">val</span>) </span>&#123;<br>  <span class="hljs-keyword">if</span> (!<span class="hljs-built_in">isNaN</span>(val)) &#123;<br>    val = <span class="hljs-built_in">parseInt</span>(val);<br>  &#125;<br>  <span class="hljs-keyword">return</span> dayjs()<br>    .locale(store.getters.langeage === <span class="hljs-string">&quot;zh&quot;</span> ? <span class="hljs-string">&quot;zh-cn&quot;</span> : <span class="hljs-string">&quot;en&quot;</span>)<br>    .to(dayjs(val));<br>&#125;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> (app) =&gt; &#123;<br>  app.config.globalProperties.$filters = &#123;<br>    dateFilter,<br>    relativeTime,<br>  &#125;;<br>&#125;;<br></code></pre></td></tr></table></figure><blockquote><p>app.config.globalProperties 是挂载在 vue 实例上面的，所以可以直接在 template 里面访问</p></blockquote><h2 id="二、组件内处理为相对时间"><a href="#二、组件内处理为相对时间" class="headerlink" title="二、组件内处理为相对时间"></a>二、组件内处理为相对时间</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">el-table</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&quot;tableRef&quot;</span> <span class="hljs-attr">:data</span>=<span class="hljs-string">&quot;tableData&quot;</span> <span class="hljs-attr">border</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">el-table-column</span></span><br><span class="hljs-tag">    <span class="hljs-attr">v-for</span>=<span class="hljs-string">&quot;(item, index) in tableColumns&quot;</span></span><br><span class="hljs-tag">    <span class="hljs-attr">:key</span>=<span class="hljs-string">&quot;index&quot;</span></span><br><span class="hljs-tag">    <span class="hljs-attr">:prop</span>=<span class="hljs-string">&quot;item.prop&quot;</span></span><br><span class="hljs-tag">    <span class="hljs-attr">:label</span>=<span class="hljs-string">&quot;item.label&quot;</span></span><br><span class="hljs-tag">  &gt;</span><br>    // 相对时间的处理<br>    <span class="hljs-tag">&lt;<span class="hljs-name">template</span> #<span class="hljs-attr">default</span>=<span class="hljs-string">&quot;&#123; row &#125;&quot;</span> <span class="hljs-attr">v-if</span>=<span class="hljs-string">&quot;item.prop === &#x27;publicDate&#x27;&quot;</span>&gt;</span><br>      &#123;&#123; $filters.relativeTime(row.publicDate) &#125;&#125;<br>    <span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">el-table-column</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">el-table</span>&gt;</span><br></code></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> vue3 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>89、vue-loader 是什么？</title>
      <link href="/2022/08/14/89%E3%80%81vue-loader/"/>
      <url>/2022/08/14/89%E3%80%81vue-loader/</url>
      
        <content type="html"><![CDATA[<p>vue-loader 是用于处理单文件的 webpack loader。在 Vue 组件中，分为 template\script\style,结合其他 loader,我们可以用 Pug 编写<code>&lt;tempalte&gt;&lt;/tempalte&gt;</code>,用 Sass/Less 编写<code>&lt;style&gt;&lt;/style&gt;</code>,用 js/ts 编写<code>&lt;script&gt;&lt;/script&gt;</code></p><span id="more"></span><p>webpack 打包时，会以 loader 方式调用 vue-loader, vue-loader 被执行时，它会对单文件组件的每个语言块用单独的 loader 链处理，最后将这些单独的块装配成最终的组件模块。</p><p>vue-loader 会调用@vue-compiler-sfc 模块解析 SFC 源码为一个描述符，然后为每个语言块生成 import 代码。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 模板</span><br><span class="hljs-keyword">import</span> render <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;xxx.vue?vue&amp;type=template&#x27;</span><br><span class="hljs-comment">// script</span><br><span class="hljs-keyword">import</span> script <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;xxx.vue?vue&amp;type=script&#x27;</span><br><span class="hljs-keyword">import</span> * <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;xxx.vue?vue&amp;type=script&quot;</span><br><span class="hljs-comment">// 样式</span><br><span class="hljs-keyword">import</span> <span class="hljs-string">&#x27;xxx.vue?vue&amp;type=style&amp;index=1&#x27;</span><br><br>script.render = render<br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> script<br></code></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> vue-loader </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>88、Vue3和Vue2</title>
      <link href="/2022/08/11/88%E3%80%81vue3-vue2/"/>
      <url>/2022/08/11/88%E3%80%81vue3-vue2/</url>
      
        <content type="html"><![CDATA[<p>vue3 的 2 种响应式实现、Vue2 项目如何升级到 Vue3 等等。。。</p><span id="more"></span><p>一、options api 选项式 API</p><p>Options Api 可以理解为就是组件的各个选项，data、methods、computed、watch 等等就像是组件的一个个选项，在对应的选项里做对应的事情。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> &#123;<br>    data () &#123;<br>        <span class="hljs-keyword">return</span> &#123;<br>            <span class="hljs-comment">// 定义响应式数据的选项</span><br>        &#125;<br>    &#125;,<br>    <span class="hljs-attr">methods</span>: &#123;<br>        <span class="hljs-comment">// 定义相关方法的选项</span><br>    &#125;,<br>    <span class="hljs-attr">computed</span>: &#123;<br>        <span class="hljs-comment">// 计算属性的选项</span><br>    &#125;,<br>    <span class="hljs-attr">watch</span>: &#123;<br>        <span class="hljs-comment">// 监听数据的选项</span><br>    &#125;<br>    ...<br>&#125;<br></code></pre></td></tr></table></figure><p>在 data 中定义的数据，是无法做到响应式的，那是因为 Object.definePropety 只会对 data 选项中的数据进行递归拦截</p><p>在实际项目的开发过程中，数据定义在 data 中，方法定义在 methods 中，当我们的代码多起来，比如达到四、五百行的时候，如果我们想改动某个功能，就要去 data 中改数据，再去 methods 中改方法，来回地寻找。</p><p>二、composition api 组合式 api</p><p>1、Composition Api</p><blockquote><p>支持将相同的功能模块代码写在一起，甚至可以将某个功能单独的封装成函数，随意导入引用；也可以将任意的数据定义成响应式，再也不用局限于 data 中，我们只需要将每个实现的功能组合起来就可以了。</p></blockquote><p>示例：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs js">&lt;template&gt;<br>    <span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>&#123;&#123;count&#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>&lt;/template&gt;<br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">setup</span>&gt;</span><span class="javascript"></span></span><br><span class="javascript"><span class="xml">    <span class="hljs-keyword">import</span> &#123; ref &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;vue&quot;</span>;</span></span><br><span class="javascript"><span class="xml">    <span class="hljs-keyword">let</span> count = ref(<span class="hljs-number">0</span>);</span></span><br><span class="javascript"><span class="xml"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br></code></pre></td></tr></table></figure><p>2、watchEffect</p><p>(1)、watchEffect 是立即执行的，不需要添加 immediate 属性。</p><p>(2)、watchEffect 不需要指定对某个具体的数据监听，watchEffect 会根据内容自动去感知，所以我们也可以在一个 watchEffect 中添加多个数据的监听处理</p><p>(3)、watchEffect 不能获取数据改变之前的值。</p><p>同时，watchEffect 会返回一个对象 watchEffectStop，通过执行 watchEffectStop，我们可以控制监听在什么时候结束。</p><blockquote><p>简单理解 watchEffect 会在第一次运行时创建副作用函数并执行一次，如果存在响应式变量，取值会触发 get 函数，这个时候收集依赖存储起来，当其他地方给响应式变量重新赋值的时候，set 函数中会触发方法派发更新，执行收集到的副作用函数，如果不存在响应式变量，就不会被收集触发</p></blockquote><blockquote><p>1、watchEffect 立即运行一个函数，然后被动地追踪它的依赖，当这些依赖改变时重新执行该函数。watch 侦测一个或多个响应式数据源并在数据源变化时调用一个回调函数。<br>2、watchEffect(effect)是一种特殊 watch，传入的函数既是依赖收集的数据源，也是回调函数。如果我们不关心响应式数据变化前后的值，只是想拿这些数据做些事情，那么 watchEffect 就是我们需要的。watch 更底层，可以接收多种数据源，包括用于依赖收集的 getter 函数，因此它完全可以实现 watchEffect 的功能，同时由于可以指定 getter 函数，依赖可以控制的更精确，还能获取数据变化前后的值，因此如果需要这些时我们会使用 watch。<br>3、watchEffect 在使用时，传入的函数会立刻执行一次。watch 默认情况下并不会执行回调函数，除非我们手动设置 immediate 选项。<br>4、watchEffect(fn)相当于 watch(fn,fn,{immediate:true})</p></blockquote><p>vue3 不再只能有一个根元素</p><p>为什么在 vue2 时，只能拥有一个根元素？而 Vue3 可以写多个根节点？</p><blockquote><p>因为 vdom 是一颗单根树形结构，patch 方法在遍历的时候从根节点开始遍历，它要求只有一个根节点。组件也会转换为一个 vdom，自然应该满足这个要求。vue3 中之所以可以写多个根节点，是因为引入了 Fragment 的概念，这是一个抽象的节点，如果发现组件是多根的，就创建一个 Fragment 节点，把多个根节点作为它的 children。将来 patch 的时候，如果发现是一个 Fragment 节点，则直接遍历 children 创建或更新。</p></blockquote><p>3、ref 和 reactive</p><p>ref 和 reactive 的区别是什么呢，我们可以这样简单理解，它们都是用来定义响应式数据的，但是 ref 是用来给简单的数据类型定义响应式数据的，比如 number、string、boolean 等，而 reactive 是针对复杂的数据结构的，比如一个对象。</p><p>它们写法的区别主要在：ref 定义的数据，修改的时候是需改 xxx.value 的，而 reactive 定义的不用，产生这个区别的原因是它们实现响应式的方法不一样。</p><p>4、小结</p><blockquote><p>Options Api</p></blockquote><p>1、选项式的 api，相关代码必须写在规定的选项中，导致相同功能的代码被分割，代码量上来后查找相关代码很麻烦，后期维护修改难度较大。</p><p>2、数据都挂载在同一个 this 下，对 typescript 的支持不友好，类型推断很麻烦。</p><p>3、代码的复用能力很差。</p><blockquote><p>Composition Api</p></blockquote><p>1、组合式 api，代码定义很自由，相同功能代码整合到一起，查找修改都很方便。</p><p>2、公共代码的复用很简单，不同功能的代码也可以自由组合。</p><p>3、Vue 相关的 api 都是通过 import 导入的，这在打包的时候很友好。</p><p>另外，vue3 是支持 options api 的写法的</p><p>三、Vue3 响应式的实现</p><p>在 Vue2.x 中，响应式的机制深入人心，我们只需要在 data 中定义我们需要的数据，就会在初始化时被自动转为响应式数据。</p><p>但是在 Vue2 中，响应式的使用还存在一些限制，比如对象属性的增加和删除等并不能被监听到，在 Vue3 中，重新设计了响应式系统来解决这些问题。</p><h4 id="1、Vue2-x-的响应式——Object-defineProperty"><a href="#1、Vue2-x-的响应式——Object-defineProperty" class="headerlink" title="1、Vue2.x 的响应式——Object.defineProperty"></a>1、Vue2.x 的响应式——Object.defineProperty</h4><p>Vue2 响应式失效的现象</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs js">&lt;template&gt;<br>    <span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span></span><br><span class="xml">        <span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>姓名：<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span></span><br><span class="xml">        <span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>&#123;&#123;person.name&#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span></span><br><span class="xml"></span><br><span class="xml">        <span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>年龄：<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span></span><br><span class="xml">        <span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>&#123;&#123;person.age&#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span></span><br><span class="xml"></span><br><span class="xml">        <span class="hljs-tag">&lt;<span class="hljs-name">button</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">&quot;changeName&quot;</span>&gt;</span>修改姓名<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span><br><span class="xml">        <span class="hljs-tag">&lt;<span class="hljs-name">button</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">&quot;addAge&quot;</span>&gt;</span>增加年龄<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span><br><span class="xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>&lt;/template&gt;<br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> &#123;<br>    data () &#123;<br>        <span class="hljs-keyword">return</span> &#123;<br>            <span class="hljs-attr">person</span>: &#123;<br>                <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;小明&#x27;</span><br>            &#125;<br>        &#125;<br>     &#125;,<br>     <span class="hljs-attr">methods</span>: &#123;<br>         <span class="hljs-function"><span class="hljs-title">addAge</span>(<span class="hljs-params"></span>)</span> &#123;<br>             <span class="hljs-built_in">this</span>.person.age = <span class="hljs-string">&#x27;18&#x27;</span>;<br>         &#125;,<br>         <span class="hljs-function"><span class="hljs-title">changeName</span>(<span class="hljs-params"></span>)</span> &#123;<br>             <span class="hljs-built_in">this</span>.person.name = <span class="hljs-string">&#x27;小红&#x27;</span>;<br>         &#125;<br>     &#125;<br>    ...<br>&#125;<br></code></pre></td></tr></table></figure><p>data 里面只定义了一个响应式对象 person，我们定义了 2 个方法，一个是修改名称、一个是增加年龄，但是使用增加年龄方法时，会给响应式对象添加一个新的属性 age，页面上的年龄部分并不会发生改变。</p><p>Vue2 是通过 Object.defineProperty 循环遍历拦截 data 中的数据来实现响应式的。</p><blockquote><p><strong>Object.defineProperty 其实不是真正的代理，而应该是拦截</strong></p></blockquote><p>而且 Object.defineProperty 也不是对对象进行拦截，而是拦截对象的具体的某个属性。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> person = &#123;&#125;;<br><br><span class="hljs-built_in">Object</span>.defineProperty(person, <span class="hljs-string">&quot;name&quot;</span>, &#123;<br>  <span class="hljs-function"><span class="hljs-title">set</span>(<span class="hljs-params">value</span>)</span> &#123;<br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;name:&quot;</span>, value);<br>  &#125;,<br>  <span class="hljs-function"><span class="hljs-title">get</span>(<span class="hljs-params"></span>)</span> &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;小明&quot;</span>;<br>  &#125;,<br>&#125;);<br><br><span class="hljs-built_in">console</span>.log(person.name);<br></code></pre></td></tr></table></figure><p>Vue2.x 的响应式实现其实就是递归遍历 data 中返回的对象，对每一个属性都使用 Object.defineProperty 进行拦截，而不在 data 中被初始化的数据是没有添加拦截的。</p><p>Vue2 如何添加和删除响应式数据？</p><p>需要额外的 api 来实现，Vue.$set 和Vue.$delete 方法分别实现添加、删除响应式数据</p><p>Vue2 响应式的局限性</p><blockquote><p>1、无法监听整个对象，只能对每个属性单独监听。</p></blockquote><blockquote><p>2、无法监听对象的属性的新增，删除（需要补充额外的 api 来解决）。</p></blockquote><blockquote><p>3、无法监听数组的变化。</p></blockquote><h4 id="2、Vue3-的响应式-proxy"><a href="#2、Vue3-的响应式-proxy" class="headerlink" title="2、Vue3 的响应式-proxy"></a>2、Vue3 的响应式-proxy</h4><blockquote><p>proxy 是真正地对整个对象进行代理，因为 proxy 可以劫持整个对象，所以 Object.defineProperty 中新增，删除某个属性无法检测的问题就不存在了，同时 proxy 也可以检测数组的变化</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> person = &#123;<br>  <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;小明&quot;</span>,<br>  <span class="hljs-attr">age</span>: <span class="hljs-number">18</span>,<br>&#125;;<br><span class="hljs-keyword">const</span> personProxy = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Proxy</span>(person, &#123;<br>  <span class="hljs-attr">get</span>: <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">target, prop</span>) </span>&#123;<br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">`获取了<span class="hljs-subst">$&#123;prop&#125;</span>:`</span>, target[prop]);<br>    <span class="hljs-keyword">return</span> target[prop];<br>  &#125;,<br>  <span class="hljs-attr">set</span>: <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">target, prop, value</span>) </span>&#123;<br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">`修改了<span class="hljs-subst">$&#123;prop&#125;</span>:`</span>, value);<br>    target[prop] = value;<br>  &#125;,<br>&#125;);<br><br><span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;name:&quot;</span>, personProxy.name); <span class="hljs-comment">// 获取了name:小明</span><br>personProxy.age = <span class="hljs-number">20</span>; <span class="hljs-comment">// 修改了age:20</span><br></code></pre></td></tr></table></figure><p>参数 target，表示当前代理的对象，prop 是我们具体要操作的属性，set 多了一个参数 value 是我们对新属性的赋值。</p><p>从方法的参数我们其实就能看出来，proxy 是真的对整个对象进行拦截的，我们如果有新增或删除的属性，也不需要单独去添加处理，可以直接被检测代理。</p><p>在添加删除属性时，无需额外的 api。proxy 不支持 IE11。</p><p>vue3 另外一个代理的方法，那就是对象本身的 get、set 方法</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> count = &#123;<br>  <span class="hljs-attr">_value</span>: <span class="hljs-number">0</span>,<br>  <span class="hljs-keyword">set</span> <span class="hljs-title">value</span>(<span class="hljs-params">num</span>) &#123;<br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;修改了count:&quot;</span>, num);<br>    <span class="hljs-built_in">this</span>._value = num;<br>  &#125;,<br>  <span class="hljs-keyword">get</span> <span class="hljs-title">value</span>() &#123;<br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;获取了count&quot;</span>);<br>    <span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>._value;<br>  &#125;,<br>&#125;;<br><br><span class="hljs-built_in">console</span>.log(count.value); <span class="hljs-comment">// 获取了count</span><br>count.value = <span class="hljs-number">1</span>; <span class="hljs-comment">// 修改了count: 1</span><br></code></pre></td></tr></table></figure><p>这其实就是为什么我们使用 ref 定义的数据，赋值和取值的时候需要使用 xxx.value 了</p><p>一个 Vue3 composition api 常用的工具集：VueUse</p><h2 id="四、Vue2-升级到-Vue3-的非兼容性变更"><a href="#四、Vue2-升级到-Vue3-的非兼容性变更" class="headerlink" title="四、Vue2 升级到 Vue3 的非兼容性变更"></a>四、Vue2 升级到 Vue3 的非兼容性变更</h2><p>Vue3 中做了很多重构，有部分内容对于 Vue2 来说是不兼容的，所以说 Vue2 的代码直接升级到 Vue3 是不能直接运行的。</p><h4 id="1、createApp-的非兼容性变更"><a href="#1、createApp-的非兼容性变更" class="headerlink" title="1、createApp 的非兼容性变更"></a>1、createApp 的非兼容性变更</h4><p>Vue2 根实例挂载及全局组件注册方法：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">import</span> Vue <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;vue&quot;</span>;<br><span class="hljs-keyword">import</span> App <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;./App.vue&quot;</span>;<br><span class="hljs-comment">// 引入全局组件</span><br><span class="hljs-keyword">import</span> GlobalComponent <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;./GlobalComponent.vue&quot;</span>;<br><span class="hljs-comment">// 注册全局组件</span><br>Vue.component(<span class="hljs-string">&quot;GlobalComponent&quot;</span>, GlobalComponent);<br><br><span class="hljs-keyword">new</span> Vue(&#123;<br>  <span class="hljs-attr">render</span>: <span class="hljs-function">(<span class="hljs-params">h</span>) =&gt;</span> h(App),<br>&#125;).$mount(<span class="hljs-string">&quot;#app&quot;</span>);<br></code></pre></td></tr></table></figure><p>Vue3 不直接在 Vue 对象上进行操作了，而是通过 createApp 来创建一个 App 应用实例，所有的操作都在 App 上进行</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">import</span> &#123; createApp &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;vue&quot;</span>;<br><span class="hljs-keyword">import</span> App <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;./App.vue&quot;</span>;<br><br>createApp(App).mount(<span class="hljs-string">&quot;#app&quot;</span>);<br></code></pre></td></tr></table></figure><p>现在我们想要在一个 App 上引入 store，就可以使用下面的写法(<strong>全局对象被共享是一件非常危险的事情</strong>)</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 引入封装好的store</span><br><span class="hljs-keyword">import</span> store <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;./store&quot;</span>;<br><br>createApp(App).use(store).mount(<span class="hljs-string">&quot;#app&quot;</span>);<br>createApp(App2).mount(<span class="hljs-string">&quot;#app2&quot;</span>);<br></code></pre></td></tr></table></figure><p>App 实例上的 store 不会影响 App2</p><h4 id="2、api-的-import-导入"><a href="#2、api-的-import-导入" class="headerlink" title="2、api 的 import 导入"></a>2、api 的 import 导入</h4><blockquote><p><strong>我们在使用这些挂载在 Vue 对象下的 Api 时，需要经过 import 导入的方式来使用。</strong></p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">import</span> &#123; nextTick &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;vue&#x27;</span>;<br><br>nextTick(<span class="hljs-function">() =&gt;</span> &#123;<br>    ...<br>&#125;)<br></code></pre></td></tr></table></figure><p>按需加载的使用。</p><p>在 Vue2 的 Api 中，都是挂载在 Vue 下面，那么在打包的时候，会不管你有没有使用到这个 Api，都会一起打包进去，如果都是这样，随着 Vue 的全局 Api 越来越多，冗余的代码也就越多，打包的耗时、体积或者说代价也就越大。</p><p>在 Vue3 中，通过 import 导入 Api 来使用，那我们在打包的时候，则只会将对应的模块打包进去，做到真正的用了多少就打包多少，就算 Vue 中再增加多少代码，也不会影响我们打包的项目。</p><h4 id="3、小结"><a href="#3、小结" class="headerlink" title="3、小结"></a>3、小结</h4><p>升级 Vue3 不仅需要更换 Vue 版本，还有一些非兼容性变更内容需要了解</p><ol><li>全局的操作不再使用 Vue 实例，而是使用通过 createApp 创建的 app 实例。</li><li>全局和内部 API 已经被重构，需要使用 import 导入使用，并且支持 tree-shake。</li></ol><p>如何将 localStorage 中的数据变成响应式的？</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// tool.js</span><br><span class="hljs-keyword">import</span> &#123; ref, watchEffect &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;vue&quot;</span>;<br><br><span class="hljs-keyword">const</span> useLocalStorage = <span class="hljs-function">(<span class="hljs-params">name, value = &#123;&#125;</span>) =&gt;</span> &#123;<br>  <span class="hljs-keyword">const</span> localData = ref(<span class="hljs-built_in">JSON</span>.parse(<span class="hljs-built_in">localStorage</span>.getItem(name)) || value);<br><br>  watchEffect(<span class="hljs-function">() =&gt;</span> &#123;<br>    <span class="hljs-comment">// 监听本地localstorage数据对应的响应式变量更改</span><br>    <span class="hljs-built_in">localStorage</span>.setItem(name, <span class="hljs-built_in">JSON</span>.stringify(localData.value));<br>  &#125;);<br><br>  <span class="hljs-keyword">return</span> localData;<br>&#125;;<br><br><span class="hljs-keyword">export</span> &#123; useLocalStorage &#125;;<br></code></pre></td></tr></table></figure><p>假设有一个计数器，需要将数据同步到本地的 localStorage 中，我们只需要在计数器文件中引入 useLocalStorage 方法即可：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs js">&lt;script setup&gt;<br>  <span class="hljs-keyword">import</span> &#123;useLocalStorage&#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./useLocalStorage&#x27;</span>;<br>  <span class="hljs-comment">// 定义响应式数据</span><br>  <span class="hljs-keyword">let</span> count = useLocalStorage(<span class="hljs-string">&#x27;count&#x27;</span>, <span class="hljs-number">0</span>);<br><br>  <span class="hljs-keyword">const</span> addCount = <span class="hljs-function">() =&gt;</span> &#123;<br>    count.value ++;<br>  &#125;<br><br>&lt;/script&gt;<br></code></pre></td></tr></table></figure><h2 id="五、如何将-Vue2-项目升级到-Vue3"><a href="#五、如何将-Vue2-项目升级到-Vue3" class="headerlink" title="五、如何将 Vue2 项目升级到 Vue3?"></a>五、如何将 Vue2 项目升级到 Vue3?</h2><h4 id="1、项目升级方法一"><a href="#1、项目升级方法一" class="headerlink" title="1、项目升级方法一"></a>1、项目升级方法一</h4><p>将 vue-cli 升级到高版本</p><p>Vue 的依赖版本升级到 vue3,需要安装@vue/compat</p><blockquote><blockquote><p>注意@vue/compat 的版本号需要与 Vue 的版本号保持一致</p></blockquote></blockquote><p>@vue/compat 是 Vue2 和 Vue3 的一个过渡产物，@vue/compat 可以运行在 Vue2 的环境下，但会对 Vue3 不兼容或者废弃的部分进行警告，我们引入@vue/compat 后，只需要根据警告的内容进行修改就可以了。<br>通过@vue/compat 也可以对警告进行分类过滤，单独针对某一些问题进行修改.</p><p>安装完 Vue 和@vue/compat 的依赖后，还需要在项目根目录下新增 vue.config.js 文件，包含以下内容:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// vue.config.js</span><br><span class="hljs-built_in">module</span>.exports = &#123;<br>  <span class="hljs-attr">chainWebpack</span>: <span class="hljs-function">(<span class="hljs-params">config</span>) =&gt;</span> &#123;<br>    config.resolve.alias.set(<span class="hljs-string">&quot;vue&quot;</span>, <span class="hljs-string">&quot;@vue/compat&quot;</span>);<br><br>    config.module<br>      .rule(<span class="hljs-string">&quot;vue&quot;</span>)<br>      .use(<span class="hljs-string">&quot;vue-loader&quot;</span>)<br>      .tap(<span class="hljs-function">(<span class="hljs-params">options</span>) =&gt;</span> &#123;<br>        <span class="hljs-keyword">return</span> &#123;<br>          ...options,<br>          <span class="hljs-attr">compilerOptions</span>: &#123;<br>            <span class="hljs-attr">compatConfig</span>: &#123;<br>              <span class="hljs-attr">MODE</span>: <span class="hljs-number">2</span>,<br>            &#125;,<br>          &#125;,<br>        &#125;;<br>      &#125;);<br>  &#125;,<br>&#125;;<br></code></pre></td></tr></table></figure><p>运行项目，根据警告信息的内容去 Vue 官网的特性参考中查询具体的错误原因，以及修改方案。</p><p>vue-router 和 vuex 都要升级到 v4，Element-ui 也要更新到 Vue3 对应的版本（element-plus）</p><p>vue3 版本 router 部分的写法：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">import</span> &#123; createRouter, createWebHashHistory &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;vue-router&quot;</span>;<br><br><span class="hljs-keyword">import</span> Home <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;../pages/home.vue&quot;</span>;<br><span class="hljs-keyword">import</span> Login <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;../pages/login.vue&quot;</span>;<br><br><span class="hljs-keyword">const</span> routes = [<br>  &#123;<br>    <span class="hljs-attr">path</span>: <span class="hljs-string">&quot;/home&quot;</span>,<br>    <span class="hljs-attr">component</span>: Home,<br>  &#125;,<br>  &#123;<br>    <span class="hljs-attr">path</span>: <span class="hljs-string">&quot;/&quot;</span>,<br>    <span class="hljs-attr">component</span>: Login,<br>  &#125;,<br>];<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> createRouter(&#123;<br>  <span class="hljs-attr">history</span>: createWebHashHistory(),<br>  routes,<br>&#125;);<br></code></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// main.js</span><br><span class="hljs-keyword">import</span> &#123; createApp &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;vue&quot;</span>;<br><br><span class="hljs-keyword">import</span> App <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;./App.vue&quot;</span>;<br><span class="hljs-keyword">import</span> routers <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;./router&quot;</span>;<br><br><span class="hljs-keyword">const</span> app = createApp(App);<br>app.use(routers).mount(<span class="hljs-string">&quot;#app&quot;</span>);<br></code></pre></td></tr></table></figure><h4 id="2、项目升级方法二：gogocode"><a href="#2、项目升级方法二：gogocode" class="headerlink" title="2、项目升级方法二：gogocode"></a>2、项目升级方法二：gogocode</h4><p>1、安装最新的 gogocode-cli</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js">npm install gogocode-cli -g<br></code></pre></td></tr></table></figure><p>2、在需要升级的项目根目录下，运行下面的指令</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js">gogocode -s ./src -t gogocode-plugin-vue -o ./src-out<br></code></pre></td></tr></table></figure><p>-s 后面指的是需要升级的源码文件夹，-o 后面的参数指的是升级后的代码输出位置</p><p>3、代码转换了还不够，我们项目的依赖都要升级到对应版本<br>GOGOCode 可以帮我们把 package.json 里面的 Vue/Vuex/Vue-router/Vue 编译工具升级到适配 Vue3 的版本，在项目根目录下执行以下指令</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js">gogocode -s package.json -t gogocode-plugin-vue -o package.json<br></code></pre></td></tr></table></figure><p>虽然使用了 GOGOCode，但也不代表我们的项目就可以直接完成升级，项目中如果用到了其他 Vue2 版本的组件库，还是需要我们自己去升级 Vue3 对应的版本，包括一些 Api 的变化都要我们自己去手动调整，并且使用 GOGOCode 也有一些转化规则是不支持的，具体的可以参考 GOGOCode 的转化规则覆盖。</p><h2 id="六、vite"><a href="#六、vite" class="headerlink" title="六、vite"></a>六、vite</h2><h4 id="1、什么是-ES-Module？"><a href="#1、什么是-ES-Module？" class="headerlink" title="1、什么是 ES Module？"></a>1、什么是 ES Module？</h4><blockquote><p>将 JavaScript 程序拆分为可按需导入的单独模块的机制，简单来说就是我们可以对 JavaScript 模块化开发，通过 import 和 export 来导入导出我们的模块内容</p></blockquote><p>Vite 在冷启动的时候，将代码分为依赖和源码两部分，源码部分通常会使用 ESModules 或者 CommonJS 拆分到大量小模块中，而对于依赖部分，Vite 使用 Esbuild 对依赖进行预构建</p><p>Esbuild 的优势：</p><p>1、语言优势，Esbuild 使用 Go 语言开发，相对于 JavaScript，Go 语言是一种编译型语言，在编译阶段就已经将源码转译为机器码。</p><p>2、多线程，Rollup 和 webpack 都没有使用多线程的能力，而 Esbuild 在算法上进行了大量的优化，充分的利用了多 CPU 的优势。</p><h4 id="2、搭建-vite-项目"><a href="#2、搭建-vite-项目" class="headerlink" title="2、搭建 vite 项目"></a>2、搭建 vite 项目</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// node 16.3.0</span><br>npm init vite@latest<br></code></pre></td></tr></table></figure><h4 id="3、vite-项目的目录"><a href="#3、vite-项目的目录" class="headerlink" title="3、vite 项目的目录"></a>3、vite 项目的目录</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs js">    |-- .gitignore<br>    |-- index.html<br>    |-- package-lock.json<br>    |-- package.json<br>    |-- README.md<br>    |-- vite.config.js<br>    |-- .vscode<br>    |   |-- extensions.json<br>    |-- public<br>    |   |-- favicon.ico<br>    |-- src<br>        |-- App.vue<br>        |-- main.js<br>        |-- assets<br>        |   |-- logo.png<br>        |-- components<br>            |-- HelloWorld.vue<br><br><span class="hljs-comment">// src/</span><br>|-- src<br>    |-- App.vue<br>    |-- main.js<br>    |-- api           -- 请求数据，接口文件<br>    |-- assets        -- 静态资源<br>    |-- commons       -- 公共文件（公共方法，封装函数）<br>    |-- components    -- Vue组件<br>    |-- pages         -- 模块页面<br>    |-- router        -- 路由文件<br>    |-- store         -- 数据管理<br></code></pre></td></tr></table></figure><h4 id="4、安装-vue-router-的-4-x-版本"><a href="#4、安装-vue-router-的-4-x-版本" class="headerlink" title="4、安装 vue-router 的 4.x 版本"></a>4、安装 vue-router 的 4.x 版本</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js">npm install vue-router@<span class="hljs-number">4</span><br></code></pre></td></tr></table></figure><p>在 router 文件下新建 router.js 文件来增加路由控制，</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">import</span> &#123; createRouter, createWebHashHistory &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;vue-router&quot;</span>;<br><br><span class="hljs-keyword">import</span> Login <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;../pages/login.vue&quot;</span>;<br><span class="hljs-keyword">import</span> Home <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;../pages/home.vue&quot;</span>;<br><br><span class="hljs-keyword">const</span> routes = [<br>  &#123;<br>    <span class="hljs-attr">path</span>: <span class="hljs-string">&quot;/login&quot;</span>,<br>    <span class="hljs-attr">component</span>: Login,<br>  &#125;,<br>  &#123;<br>    <span class="hljs-attr">path</span>: <span class="hljs-string">&quot;/home&quot;</span>,<br>    <span class="hljs-attr">component</span>: Home,<br>  &#125;,<br>];<br><br><span class="hljs-keyword">const</span> router = createRouter(&#123;<br>  <span class="hljs-attr">history</span>: createWebHashHistory(),<br>  routes,<br>&#125;);<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> router;<br></code></pre></td></tr></table></figure><p>createRouter 用来创建一个可以被 Vue 应用程序使用的路由实例，需要传入两个参数，history 是表示路由的历史记录，我们可以选择使用 createWebHistory、createWebHashHistory 来分别创建 HTML5 历史记录和 hash 历史记录，我们这里选择创建 hash 历史记录</p><h2 id="七、输入路由的时候是怎么获取到页面的"><a href="#七、输入路由的时候是怎么获取到页面的" class="headerlink" title="七、输入路由的时候是怎么获取到页面的"></a>七、输入路由的时候是怎么获取到页面的</h2><blockquote><p>当我们在浏览器中输入一个地址后，浏览器会根据路径构建一个请求，接下来就会对输入的域名进行 DNS 解析，得到正确的 IP 地址，然后和得到的 IP 地址建立 TCP 链接，发送 HTTP 请求，服务器接收到请求后，就会返回响应的 HTML 内容。完成了请求和响应后，浏览器拿到了返回的 HTML 字符串，转换成 DOM 树结构，经过对 DOM 的样式计算，最终生成布局，在页面上进行合成渲染</p></blockquote><h2 id="八、性能优化"><a href="#八、性能优化" class="headerlink" title="八、性能优化"></a>八、性能优化</h2><p>1、路由懒加载：有效拆分 APP 尺寸，访问时才异步加载</p><p>(1)当打包构建应用时，JavaScript 包会变得非常大，影响页面加载。利用路由懒加载我们能把不同路由对应的组件分割成不同的代码块，然后当路由被访问的时候才加载对应组件，这样会更加高效，是一种优化手段。</p><p>(2)一般来说，对所有的路由都使用动态导入是个好主意。</p><p>(3)给 component 选项配置一个返回 Promise 组件的函数就可以定义懒加载路由。例如：<br>{ path: ‘/users/:id’, component: () =&gt; import(‘./views/UserDetails’) }</p><p>(4)结合注释() =&gt; import(/_ webpackChunkName: “group-user” _/ ‘./UserDetails.vue’)可以做 webpack 代码分块<br>vite 中结合 rollupOptions 定义分块</p><p>(5)路由中不能使用异步组件</p><p>2、keep-alive 缓存页面：避免和重复创建组件实例，且能保留缓存组件状态</p><p>3、v-show 复用 DOM：避免重复创建组件</p><p>4、v-once 和 v-memo:不再变化的数据使用 v-once；按条件跳过更新时使用 v-memo</p><p>5、长列表性能优化：如果是大数据长列表，可采用虚拟滚动，只渲染少部分区域的内容</p><p>6、事件的销毁：Vue 组件销毁时，会自动解绑它的全部指令及事件监听器，但是仅限于组件本身的事件</p><p>7、图片懒加载：图片过多的页面，为了加速页面加载速度，所以很多时候我们需要将页面内未出现在可视区域内的图片先不做加载， 等到滚动到可视区域后再去加载。可以使用 vue-lazyload</p><p>8、第三方插件按需引入：例如组件库（element-plus）</p><p>9、服务端渲染：首屏渲染慢，可以考虑 SSR \ SSG</p>]]></content>
      
      
      
        <tags>
            
            <tag> vue3 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>87、element的表单校验自动定位到未校验成功位置</title>
      <link href="/2022/08/09/87.element-validator/"/>
      <url>/2022/08/09/87.element-validator/</url>
      
        <content type="html"><![CDATA[<p>遇到的项目问题是在每个折叠面板里边都有不同的表单，用 element 上的校验时，若有没填写的表单或不符合表单格式的要求，则自动展开该折叠面板，且页面定位到没校验成功的表单。</p><span id="more"></span><h2 id="方法一"><a href="#方法一" class="headerlink" title="方法一"></a>方法一</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-built_in">this</span>.$refs.form.validate(<span class="hljs-function">(<span class="hljs-params">valid, object</span>) =&gt;</span> &#123;<br>  <span class="hljs-keyword">if</span> (valid) &#123;<br>    alert(<span class="hljs-string">&quot;submit!&quot;</span>);<br>  &#125; <span class="hljs-keyword">else</span> &#123;<br>    <span class="hljs-keyword">let</span> split = <span class="hljs-string">&quot;&quot;</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> i <span class="hljs-keyword">in</span> object) &#123;<br>      <span class="hljs-keyword">let</span> dom = <span class="hljs-built_in">this</span>.$refs[i];<br>      <span class="hljs-keyword">if</span> (<span class="hljs-built_in">Object</span>.prototype.toString.call(dom) !== <span class="hljs-string">&quot;[object Object]&quot;</span>) &#123;<br>        <span class="hljs-comment">//这里是针对遍历的情况（多个输入框），取值为数组</span><br>        dom = dom[<span class="hljs-number">0</span>];<br>        <span class="hljs-comment">// 第一个未填写必填项的表单被记录，这个是为了处理如何把校验未成功的第一个面板展开</span><br>        split = dom.prop;<br>        <span class="hljs-keyword">let</span> index = split.indexOf(<span class="hljs-string">&quot;.&quot;</span>);<br>        <span class="hljs-keyword">let</span> last = split.lastIndexOf(<span class="hljs-string">&quot;.&quot;</span>);<br>        <span class="hljs-comment">// 通过未填写的表单索引展开折叠面板</span><br>        <span class="hljs-built_in">this</span>.activeName = <span class="hljs-built_in">Number</span>(split.slice(index + <span class="hljs-number">1</span>, last));<br>        <span class="hljs-keyword">break</span>;<br>      &#125;<br>      dom.$el.scrollIntoView(&#123;<br>        <span class="hljs-comment">//滚动到指定节点</span><br>        <span class="hljs-attr">block</span>: <span class="hljs-string">&quot;center&quot;</span>, <span class="hljs-comment">//值有start,center,end，nearest，当前显示在视图区域中间</span><br>        <span class="hljs-attr">behavior</span>: <span class="hljs-string">&quot;smooth&quot;</span>, <span class="hljs-comment">//值有auto、instant,smooth，缓动动画（当前是慢速的）</span><br>      &#125;);<br>    &#125;<br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;error submit!!&quot;</span>);<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>  &#125;<br>&#125;);<br></code></pre></td></tr></table></figure><h2 id="方法二"><a href="#方法二" class="headerlink" title="方法二"></a>方法二</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-function"><span class="hljs-title">submit</span>(<span class="hljs-params">formName</span>)</span> &#123;<br>   <span class="hljs-built_in">this</span>.$refs[formName][<span class="hljs-string">&quot;validate&quot;</span>](<span class="hljs-function">(<span class="hljs-params">valid</span>) =&gt;</span> &#123;<br>     <span class="hljs-keyword">if</span> (valid) &#123;<br><br>     &#125; <span class="hljs-keyword">else</span> &#123;<br>       <span class="hljs-built_in">setTimeout</span>(<span class="hljs-function">()=&gt;</span>&#123;<br>           <span class="hljs-keyword">var</span> isError= <span class="hljs-built_in">document</span>.getElementsByClassName(<span class="hljs-string">&quot;is-error&quot;</span>);<br>           isError[<span class="hljs-number">0</span>].querySelector(<span class="hljs-string">&#x27;input&#x27;</span>).focus();<br>         &#125;,<span class="hljs-number">100</span>);<br>         <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>     &#125;<br>   &#125;);<br> &#125;<br></code></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>86、canvas电子签名</title>
      <link href="/2022/08/08/86.signature/"/>
      <url>/2022/08/08/86.signature/</url>
      
        <content type="html"><![CDATA[<p>canvas电子签名</p><span id="more"></span><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span> /&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">http-equiv</span>=<span class="hljs-string">&quot;X-UA-Compatible&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;IE=edge&quot;</span> /&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;viewport&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;width=device-width, initial-scale=1.0&quot;</span> /&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Document<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><span class="css"></span><br><span class="css">      <span class="hljs-selector-id">#cvs</span> &#123;</span><br><span class="css">        <span class="hljs-attribute">background-color</span>: <span class="hljs-number">#000</span>;</span><br><span class="css">        <span class="hljs-attribute">background</span>: <span class="hljs-number">#000</span>;</span><br><span class="css">      &#125;</span><br><span class="css">      <span class="hljs-selector-tag">body</span> &#123;</span><br><span class="css">        <span class="hljs-attribute">height</span>: <span class="hljs-number">100vh</span>;</span><br><span class="css">        <span class="hljs-attribute">background-color</span>: <span class="hljs-built_in">rgb</span>(<span class="hljs-number">26</span>, <span class="hljs-number">25</span>, <span class="hljs-number">25</span>);</span><br><span class="css">      &#125;</span><br><span class="css">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">canvas</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;cvs&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">canvas</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;margin-top: 50px&quot;</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;clear&quot;</span>&gt;</span>清空<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;back&quot;</span>&gt;</span>回退<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;save&quot;</span>&gt;</span>保存<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript"></span><br><span class="javascript">      <span class="hljs-keyword">let</span> width = <span class="hljs-number">800</span>;</span><br><span class="javascript">      <span class="hljs-keyword">let</span> height = <span class="hljs-number">400</span>;</span><br><span class="javascript">      <span class="hljs-keyword">let</span> isDownin = <span class="hljs-literal">false</span>;</span><br><span class="javascript">      <span class="hljs-keyword">let</span> lastX = <span class="hljs-number">0</span>;</span><br><span class="javascript">      <span class="hljs-keyword">let</span> lastY = <span class="hljs-number">0</span>;</span><br><span class="javascript">      <span class="hljs-keyword">let</span> cacheData = [];</span><br><span class="javascript"></span><br><span class="javascript">      <span class="hljs-keyword">const</span> cvs = <span class="hljs-built_in">document</span>.getElementById(<span class="hljs-string">&quot;cvs&quot;</span>);</span><br><span class="javascript">      <span class="hljs-keyword">const</span> ctx = cvs.getContext(<span class="hljs-string">&quot;2d&quot;</span>);</span><br><span class="javascript">      cvs.width = width;</span><br><span class="javascript">      cvs.height = height;</span><br><span class="javascript"></span><br><span class="javascript">      cvs.addEventListener(<span class="hljs-string">&quot;mousedown&quot;</span>, <span class="hljs-function">(<span class="hljs-params">e</span>) =&gt;</span> &#123;</span><br><span class="javascript">        isDownin = <span class="hljs-literal">true</span>;</span><br><span class="javascript">        lastX = e.pageX;</span><br><span class="javascript">        lastY = e.pageY;</span><br><span class="javascript">        <span class="hljs-keyword">let</span> cacheItem = ctx.getImageData(<span class="hljs-number">0</span>, <span class="hljs-number">0</span>, width, height);</span><br><span class="javascript">        cacheData.push(cacheItem);</span><br><span class="javascript">        ctx.moveTo(lastX, lastY);</span><br><span class="javascript">      &#125;);</span><br><span class="javascript">      cvs.addEventListener(<span class="hljs-string">&quot;mousemove&quot;</span>, <span class="hljs-function">(<span class="hljs-params">e</span>) =&gt;</span> &#123;</span><br><span class="javascript">        <span class="hljs-keyword">if</span> (!isDownin) <span class="hljs-keyword">return</span>;</span><br><span class="javascript">        drawLine(e.pageX, e.pageY);</span><br><span class="javascript">        ctx.stroke();</span><br><span class="javascript">      &#125;);</span><br><span class="javascript">      cvs.addEventListener(<span class="hljs-string">&quot;mouseup&quot;</span>, <span class="hljs-function">(<span class="hljs-params">e</span>) =&gt;</span> &#123;</span><br><span class="javascript">        isDownin = <span class="hljs-literal">false</span>;</span><br><span class="javascript">      &#125;);</span><br><span class="javascript"></span><br><span class="javascript">      <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">drawLine</span>(<span class="hljs-params">x, y</span>) </span>&#123;</span><br><span class="javascript">        ctx.beginPath();</span><br><span class="javascript">        ctx.lineWidth = <span class="hljs-number">8</span>;</span><br><span class="javascript">        ctx.strokeStyle = <span class="hljs-string">&quot;#fff&quot;</span>;</span><br><span class="javascript">        ctx.lineCap = <span class="hljs-string">&quot;round&quot;</span>;</span><br><span class="javascript">        ctx.lineJoin = <span class="hljs-string">&quot;round&quot;</span>;</span><br><span class="javascript">        ctx.moveTo(lastX, lastY);</span><br><span class="javascript">        ctx.lineTo(x, y);</span><br><span class="javascript">        ctx.stroke();</span><br><span class="javascript">        lastX = x;</span><br><span class="javascript">        lastY = y;</span><br><span class="javascript">      &#125;</span><br><span class="javascript"></span><br><span class="javascript">      <span class="hljs-comment">/* 清空 */</span></span><br><span class="javascript">      <span class="hljs-keyword">const</span> clear = <span class="hljs-built_in">document</span>.getElementById(<span class="hljs-string">&quot;clear&quot;</span>);</span><br><span class="javascript">      clear.onclick = <span class="hljs-function">() =&gt;</span> &#123;</span><br><span class="javascript">        ctx.clearRect(<span class="hljs-number">0</span>, <span class="hljs-number">0</span>, width, height);</span><br><span class="javascript">      &#125;;</span><br><span class="javascript"></span><br><span class="javascript">      <span class="hljs-comment">/* 回退 */</span></span><br><span class="javascript">      <span class="hljs-keyword">const</span> back = <span class="hljs-built_in">document</span>.getElementById(<span class="hljs-string">&quot;back&quot;</span>);</span><br><span class="javascript">      back.onclick = <span class="hljs-function">() =&gt;</span> &#123;</span><br><span class="javascript">        <span class="hljs-keyword">if</span> (cacheData.length === <span class="hljs-number">0</span>) <span class="hljs-keyword">return</span>;</span><br><span class="javascript">        ctx.putImageData(cacheData.pop(), <span class="hljs-number">0</span>, <span class="hljs-number">0</span>);</span><br><span class="javascript">      &#125;;</span><br><span class="javascript"></span><br><span class="javascript">      <span class="hljs-keyword">const</span> save = <span class="hljs-built_in">document</span>.getElementById(<span class="hljs-string">&quot;save&quot;</span>);</span><br><span class="javascript">      save.onclick = <span class="hljs-function">() =&gt;</span> &#123;</span><br><span class="javascript">        cvs.toBlob(<span class="hljs-function">(<span class="hljs-params">blob</span>) =&gt;</span> &#123;</span><br><span class="javascript">          <span class="hljs-keyword">const</span> a = <span class="hljs-built_in">document</span>.createElement(<span class="hljs-string">&quot;a&quot;</span>);</span><br><span class="javascript">          <span class="hljs-built_in">document</span>.body.append(a);</span><br><span class="javascript">          a.download = <span class="hljs-string">`签名.png`</span>;</span><br><span class="javascript">          a.href = URL.createObjectURL(blob);</span><br><span class="javascript">          a.click();</span><br><span class="javascript">          a.remove();</span><br><span class="javascript">        &#125;);</span><br><span class="javascript">      &#125;;</span><br><span class="javascript">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> js </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>85、常用代码片段</title>
      <link href="/2022/08/06/85.js-function/"/>
      <url>/2022/08/06/85.js-function/</url>
      
        <content type="html"><![CDATA[<p>整理一些常用的代码片段</p><span id="more"></span><h2 id="一、数组重排序"><a href="#一、数组重排序" class="headerlink" title="一、数组重排序"></a>一、数组重排序</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> shuffle = <span class="hljs-function">(<span class="hljs-params">arr</span>) =&gt;</span> arr.sort(<span class="hljs-function">() =&gt;</span> <span class="hljs-built_in">Math</span>.random() - <span class="hljs-number">0.5</span>);<br><span class="hljs-keyword">const</span> arr = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>];<br><span class="hljs-built_in">console</span>.log(shuffle(arr));<br></code></pre></td></tr></table></figure><h2 id="二、复制到剪切板"><a href="#二、复制到剪切板" class="headerlink" title="二、复制到剪切板"></a>二、复制到剪切板</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> copyToClipboard = <span class="hljs-function">(<span class="hljs-params">text</span>) =&gt;</span><br>  navigator.clipboard &amp;&amp;<br>  navigator.clipboard.writeText &amp;&amp;<br>  navigator.clipboard.writeText(text);<br><br>copyToClipboard(<span class="hljs-string">&quot;Hello World!&quot;</span>);<br></code></pre></td></tr></table></figure><h2 id="三、滚动到顶部"><a href="#三、滚动到顶部" class="headerlink" title="三、滚动到顶部"></a>三、滚动到顶部</h2><p>behavior:”smooth”：开启平滑滚动</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> scrollToTop = <span class="hljs-function">(<span class="hljs-params">element</span>) =&gt;</span><br>  element.scrollIntoView(&#123; <span class="hljs-attr">behavior</span>: <span class="hljs-string">&quot;smooth&quot;</span>, <span class="hljs-attr">block</span>: <span class="hljs-string">&quot;start&quot;</span> &#125;);<br></code></pre></td></tr></table></figure><h2 id="四、检测设备"><a href="#四、检测设备" class="headerlink" title="四、检测设备"></a>四、检测设备</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> detectDeviceType = <span class="hljs-function">() =&gt;</span><br>  <span class="hljs-regexp">/Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i</span>.test(<br>    navigator.userAgent<br>  )<br>    ? <span class="hljs-string">&quot;Mobile&quot;</span><br>    : <span class="hljs-string">&quot;Desktop&quot;</span>;<br><br><span class="hljs-built_in">console</span>.log(detectDeviceType());<br></code></pre></td></tr></table></figure><h2 id="五、深拷贝对象"><a href="#五、深拷贝对象" class="headerlink" title="五、深拷贝对象"></a>五、深拷贝对象</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> deepCopy = <span class="hljs-function">(<span class="hljs-params">obj</span>) =&gt;</span> <span class="hljs-built_in">JSON</span>.parse(<span class="hljs-built_in">JSON</span>.stringify(obj));<br></code></pre></td></tr></table></figure><h2 id="六、等待函数"><a href="#六、等待函数" class="headerlink" title="六、等待函数"></a>六、等待函数</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> wait = <span class="hljs-function">(<span class="hljs-params">ms</span>) =&gt;</span> <span class="hljs-keyword">new</span> <span class="hljs-built_in">Promise</span>(<span class="hljs-function">(<span class="hljs-params">resolve</span>) =&gt;</span> <span class="hljs-built_in">setTimeout</span>(resolve, ms));<br><br><span class="hljs-keyword">const</span> asyncFn = <span class="hljs-keyword">async</span> () =&gt; &#123;<br>  <span class="hljs-keyword">await</span> wait(<span class="hljs-number">1000</span>);<br>  <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;等待异步函数执行结束&quot;</span>);<br>&#125;;<br><br>asyncFn();<br></code></pre></td></tr></table></figure><h2 id="七、生成随机色"><a href="#七、生成随机色" class="headerlink" title="七、生成随机色"></a>七、生成随机色</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> generateRandomHexColor = <span class="hljs-function">() =&gt;</span><br>  <span class="hljs-string">`#<span class="hljs-subst">$&#123;<span class="hljs-built_in">Math</span>.floor(<span class="hljs-built_in">Math</span>.random() * <span class="hljs-number">0xffffff</span>).toString(<span class="hljs-number">16</span>)&#125;</span>`</span>;<br><br><span class="hljs-built_in">console</span>.log(generateRandomHexColor());<br></code></pre></td></tr></table></figure><h2 id="八、数组结构与树结构的转换"><a href="#八、数组结构与树结构的转换" class="headerlink" title="八、数组结构与树结构的转换"></a>八、数组结构与树结构的转换</h2><p>数组结构数据</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> arrayData = [<br>  &#123; <span class="hljs-attr">id</span>: <span class="hljs-number">2</span>, <span class="hljs-attr">title</span>: <span class="hljs-string">&quot;中国&quot;</span>, <span class="hljs-attr">parent_id</span>: <span class="hljs-number">0</span> &#125;,<br>  &#123; <span class="hljs-attr">id</span>: <span class="hljs-number">3</span>, <span class="hljs-attr">title</span>: <span class="hljs-string">&quot;上海&quot;</span>, <span class="hljs-attr">parent_id</span>: <span class="hljs-number">2</span> &#125;,<br>  &#123; <span class="hljs-attr">id</span>: <span class="hljs-number">4</span>, <span class="hljs-attr">title</span>: <span class="hljs-string">&quot;浦东新区&quot;</span>, <span class="hljs-attr">parent_id</span>: <span class="hljs-number">3</span> &#125;,<br>  &#123; <span class="hljs-attr">id</span>: <span class="hljs-number">5</span>, <span class="hljs-attr">title</span>: <span class="hljs-string">&quot;新场古镇&quot;</span>, <span class="hljs-attr">parent_id</span>: <span class="hljs-number">4</span> &#125;,<br>  &#123; <span class="hljs-attr">id</span>: <span class="hljs-number">6</span>, <span class="hljs-attr">title</span>: <span class="hljs-string">&quot;湖南省&quot;</span>, <span class="hljs-attr">parent_id</span>: <span class="hljs-number">2</span> &#125;,<br>  &#123; <span class="hljs-attr">id</span>: <span class="hljs-number">1</span>, <span class="hljs-attr">title</span>: <span class="hljs-string">&quot;俄罗斯&quot;</span>, <span class="hljs-attr">parent_id</span>: <span class="hljs-number">0</span> &#125;,<br>];<br></code></pre></td></tr></table></figure><p>方法一、使用递归：</p><p>1、递归需分为两个函数来完成<br>2、 以为返回的递归函数主要处理查找 id 添加 children<br>3、 由转化函数将结果返回</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 递归查找添加children</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param <span class="hljs-type">&#123;数组数据&#125;</span> <span class="hljs-variable">data</span></span></span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param <span class="hljs-type">&#123;存放返回结果&#125;</span> <span class="hljs-variable">result</span></span></span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param <span class="hljs-type">&#123;父id&#125;</span> <span class="hljs-variable">pid</span></span></span><br><span class="hljs-comment"> */</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">getChildren</span>(<span class="hljs-params">data, result, pid</span>) </span>&#123;<br>  <span class="hljs-keyword">for</span> (<span class="hljs-keyword">const</span> item <span class="hljs-keyword">of</span> data) &#123;<br>    <span class="hljs-keyword">if</span> (item.parent_id === pid) &#123;<br>      <span class="hljs-keyword">const</span> newItem = &#123; <span class="hljs-attr">children</span>: [], ...item &#125;;<br>      result.push(newItem);<br>      getChildren(data, newItem.children, item.id);<br>    &#125;<br>  &#125;<br>&#125;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 转化方法</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param <span class="hljs-type">&#123;数组数据&#125;</span> <span class="hljs-variable">data</span></span></span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param <span class="hljs-type">&#123;父id&#125;</span> <span class="hljs-variable">pid</span></span></span><br><span class="hljs-comment"> * <span class="hljs-doctag">@returns</span></span><br><span class="hljs-comment"> */</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">arrayToTree</span>(<span class="hljs-params">data, pid</span>) </span>&#123;<br>  <span class="hljs-keyword">let</span> result = [];<br>  getChildren(data, result, pid);<br>  <span class="hljs-keyword">return</span> result;<br>&#125;<br><br><span class="hljs-built_in">console</span>.log(arrayToTree(arrayData, <span class="hljs-number">0</span>));<br></code></pre></td></tr></table></figure><p>方法二、reduce</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 数组结构转为树结构</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param <span class="hljs-type">&#123;*&#125;</span> </span>data 数组数据</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@returns</span></span><br><span class="hljs-comment"> */</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">arrayToTree</span>(<span class="hljs-params">data</span>) </span>&#123;<br>  <span class="hljs-keyword">const</span> result = [];<br>  <span class="hljs-keyword">const</span> obj = data.reduce(<span class="hljs-function">(<span class="hljs-params">pre, cur</span>) =&gt;</span> &#123;<br>    pre[cur.id] = cur;<br>    <span class="hljs-keyword">return</span> pre;<br>  &#125;, &#123;&#125;);<br>  <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> item <span class="hljs-keyword">of</span> data) &#123;<br>    <span class="hljs-keyword">if</span> (item.parent_id === <span class="hljs-number">0</span>) &#123;<br>      result.push(item);<br>      <span class="hljs-keyword">continue</span>;<br>    &#125;<br>    <span class="hljs-keyword">if</span> (item.parent_id <span class="hljs-keyword">in</span> obj) &#123;<br>      <span class="hljs-keyword">const</span> parent = obj[item.parent_id];<br>      parent.children = parent.children || [];<br>      parent.children.push(item);<br>    &#125;<br>  &#125;<br>  <span class="hljs-keyword">return</span> result;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="九、树结构转数组结构"><a href="#九、树结构转数组结构" class="headerlink" title="九、树结构转数组结构"></a>九、树结构转数组结构</h2><p>数组结构</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">/** 树状形结构数据treeData */</span><br><span class="hljs-keyword">const</span> treeData = [<br>  &#123;<br>    <span class="hljs-attr">id</span>: <span class="hljs-number">2</span>,<br>    <span class="hljs-attr">title</span>: <span class="hljs-string">&quot;中国&quot;</span>,<br>    <span class="hljs-attr">parent_id</span>: <span class="hljs-number">0</span>,<br>    <span class="hljs-attr">children</span>: [<br>      &#123;<br>        <span class="hljs-attr">id</span>: <span class="hljs-number">3</span>,<br>        <span class="hljs-attr">title</span>: <span class="hljs-string">&quot;上海&quot;</span>,<br>        <span class="hljs-attr">parent_id</span>: <span class="hljs-number">2</span>,<br>        <span class="hljs-attr">children</span>: [<br>          &#123;<br>            <span class="hljs-attr">id</span>: <span class="hljs-number">4</span>,<br>            <span class="hljs-attr">title</span>: <span class="hljs-string">&quot;浦东新区&quot;</span>,<br>            <span class="hljs-attr">parent_id</span>: <span class="hljs-number">3</span>,<br>            <span class="hljs-attr">children</span>: [&#123; <span class="hljs-attr">id</span>: <span class="hljs-number">5</span>, <span class="hljs-attr">title</span>: <span class="hljs-string">&quot;新场古镇&quot;</span>, <span class="hljs-attr">parent_id</span>: <span class="hljs-number">4</span> &#125;],<br>          &#125;,<br>        ],<br>      &#125;,<br>      &#123; <span class="hljs-attr">id</span>: <span class="hljs-number">6</span>, <span class="hljs-attr">title</span>: <span class="hljs-string">&quot;湖南省&quot;</span>, <span class="hljs-attr">parent_id</span>: <span class="hljs-number">2</span> &#125;,<br>    ],<br>  &#125;,<br>  &#123; <span class="hljs-attr">id</span>: <span class="hljs-number">1</span>, <span class="hljs-attr">title</span>: <span class="hljs-string">&quot;俄罗斯&quot;</span>, <span class="hljs-attr">parent_id</span>: <span class="hljs-number">0</span> &#125;,<br>];<br></code></pre></td></tr></table></figure><p>递归方法</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 树结构数组扁平化</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param <span class="hljs-type">&#123;*&#125;</span> </span>data 树结构的数组</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@returns</span></span><br><span class="hljs-comment"> */</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">treeToArray</span>(<span class="hljs-params">data</span>) </span>&#123;<br>  <span class="hljs-keyword">return</span> data.reduce(<span class="hljs-function">(<span class="hljs-params">pre, cur</span>) =&gt;</span> &#123;<br>    <span class="hljs-keyword">const</span> &#123; children = [], ...item &#125; = cur;<br>    <span class="hljs-keyword">return</span> pre.concat([&#123; ...item &#125;], treeToArray(children));<br>  &#125;, []);<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="十、数据类型验证"><a href="#十、数据类型验证" class="headerlink" title="十、数据类型验证"></a>十、数据类型验证</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">typeOf</span>(<span class="hljs-params">obj</span>) </span>&#123;<br>  <span class="hljs-keyword">const</span> toString = <span class="hljs-built_in">Object</span>.prototype.toString;<br>  <span class="hljs-keyword">const</span> map = &#123;<br>    <span class="hljs-string">&quot;[object Boolean]&quot;</span>: <span class="hljs-string">&quot;boolean&quot;</span>,<br>    <span class="hljs-string">&quot;[object Number]&quot;</span>: <span class="hljs-string">&quot;number&quot;</span>,<br>    <span class="hljs-string">&quot;[object String]&quot;</span>: <span class="hljs-string">&quot;string&quot;</span>,<br>    <span class="hljs-string">&quot;[object Function]&quot;</span>: <span class="hljs-string">&quot;function&quot;</span>,<br>    <span class="hljs-string">&quot;[object Array]&quot;</span>: <span class="hljs-string">&quot;array&quot;</span>,<br>    <span class="hljs-string">&quot;[object Date]&quot;</span>: <span class="hljs-string">&quot;date&quot;</span>,<br>    <span class="hljs-string">&quot;[object RegExp]&quot;</span>: <span class="hljs-string">&quot;regExp&quot;</span>,<br>    <span class="hljs-string">&quot;[object Undefined]&quot;</span>: <span class="hljs-string">&quot;undefined&quot;</span>,<br>    <span class="hljs-string">&quot;[object Null]&quot;</span>: <span class="hljs-string">&quot;null&quot;</span>,<br>    <span class="hljs-string">&quot;[object Object]&quot;</span>: <span class="hljs-string">&quot;object&quot;</span>,<br>    <span class="hljs-string">&quot;[object FormData]&quot;</span>: <span class="hljs-string">&quot;formData&quot;</span>,<br>  &#125;;<br>  <span class="hljs-keyword">return</span> map[toString.call(obj)];<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="十一、只能输入金额"><a href="#十一、只能输入金额" class="headerlink" title="十一、只能输入金额"></a>十一、只能输入金额</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html">:rules=&quot;&#123; required: itrue, validator: validatePrice, trigger: &#x27;blur&#x27; &#125;&quot;<br></code></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-function"><span class="hljs-title">validatePrice</span>(<span class="hljs-params">rule, value, callback</span>)</span> &#123;<br>    <span class="hljs-keyword">if</span> (!value) &#123;<br>        callback(<span class="hljs-keyword">new</span> <span class="hljs-built_in">Error</span>(<span class="hljs-string">&#x27;请输入价格&#x27;</span>))<br>    &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (!<span class="hljs-regexp">/(^[1-9]\d*(\.\d&#123;1,2&#125;)?$)|(^0(\.\d&#123;1,2&#125;)?$)/</span>.test(value)) &#123;<br>        callback(<span class="hljs-keyword">new</span> <span class="hljs-built_in">Error</span>(<span class="hljs-string">&#x27;请输入有效价格&#x27;</span>))<br>    &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (value &gt;= <span class="hljs-number">99999999</span>) &#123;<br>        callback(<span class="hljs-keyword">new</span> <span class="hljs-built_in">Error</span>(<span class="hljs-string">&#x27;超过最大金额&#x27;</span>))<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        callback()<br>    &#125;<br>&#125;,<br></code></pre></td></tr></table></figure><h2 id="十二、数字单位：10000-转换为万（含：亿）"><a href="#十二、数字单位：10000-转换为万（含：亿）" class="headerlink" title="十二、数字单位：10000 转换为万（含：亿）"></a>十二、数字单位：10000 转换为万（含：亿）</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">/** 数字超过一万转换为万</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param <span class="hljs-type">&#123; Number &#125;</span> </span>value 数值</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param <span class="hljs-type">&#123; Number &#125;</span> </span>decimal 保留几位小数</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@returns <span class="hljs-type">&#123; String &#125;</span></span></span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">const</span> transNumberToShort = <span class="hljs-function">(<span class="hljs-params">value, decimal = <span class="hljs-number">2</span></span>) =&gt;</span> &#123;<br>  <span class="hljs-keyword">const</span> k = <span class="hljs-number">10000</span>;<br>  <span class="hljs-keyword">const</span> sizes = [<span class="hljs-string">&quot;&quot;</span>, <span class="hljs-string">&quot;万&quot;</span>, <span class="hljs-string">&quot;亿&quot;</span>, <span class="hljs-string">&quot;万亿&quot;</span>];<br>  <span class="hljs-keyword">let</span> i = <span class="hljs-literal">undefined</span>;<br>  <span class="hljs-keyword">let</span> str = <span class="hljs-string">&quot;&quot;</span>;<br>  <span class="hljs-keyword">if</span> (value &lt; k) &#123;<br>    str = value;<br>  &#125; <span class="hljs-keyword">else</span> &#123;<br>    i = <span class="hljs-built_in">Math</span>.floor(<span class="hljs-built_in">Math</span>.log(value) / <span class="hljs-built_in">Math</span>.log(k));<br>    str = (value / <span class="hljs-built_in">Math</span>.pow(k, i)).toFixed(decimal) + sizes[i];<br>  &#125;<br>  <span class="hljs-keyword">return</span> str;<br>&#125;;<br></code></pre></td></tr></table></figure><h2 id="十三、简单的数据双向绑定"><a href="#十三、简单的数据双向绑定" class="headerlink" title="十三、简单的数据双向绑定"></a>十三、简单的数据双向绑定</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span> /&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;viewport&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;width=device-width, initial-scale=1.0&quot;</span> /&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">http-equiv</span>=<span class="hljs-string">&quot;X-UA-Compatible&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;ie=edge&quot;</span> /&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Document<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><br>  <span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;app&quot;</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;a&quot;</span> /&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;b&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript"></span><br><span class="javascript">    <span class="hljs-keyword">var</span> obj = &#123;</span><br><span class="javascript">      <span class="hljs-attr">val</span>: <span class="hljs-literal">null</span>,</span><br><span class="javascript">    &#125;; <span class="hljs-comment">//定义一个空对象</span></span><br><span class="javascript"></span><br><span class="javascript">    <span class="hljs-built_in">Object</span>.defineProperty(obj, <span class="hljs-string">&quot;val&quot;</span>, &#123;</span><br><span class="javascript">      <span class="hljs-comment">// 这里的 val 就是 obj 里面的值</span></span><br><span class="javascript"></span><br><span class="javascript">      <span class="hljs-attr">get</span>: <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;</span><br><span class="javascript">        <span class="hljs-keyword">return</span> val;</span><br><span class="javascript">      &#125;,</span><br><span class="javascript"></span><br><span class="javascript">      <span class="hljs-attr">set</span>: <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">newVal</span>) </span>&#123;</span><br><span class="javascript">        val = newVal; <span class="hljs-comment">//定义val等于修改后的内容</span></span><br><span class="javascript">        <span class="hljs-keyword">if</span> (!val) <span class="hljs-keyword">return</span>; <span class="hljs-comment">// 阻止显示 undefined</span></span><br><span class="javascript">        <span class="hljs-built_in">document</span>.getElementById(<span class="hljs-string">&quot;a&quot;</span>).value = val; <span class="hljs-comment">//让文本框的内容等于val</span></span><br><span class="javascript"></span><br><span class="javascript">        <span class="hljs-built_in">document</span>.getElementById(<span class="hljs-string">&quot;b&quot;</span>).innerHTML = val; <span class="hljs-comment">//让span的内容等于val</span></span><br><span class="javascript">      &#125;,</span><br><span class="javascript">    &#125;);</span><br><span class="javascript">    <span class="hljs-built_in">document</span>.addEventListener(<span class="hljs-string">&quot;keyup&quot;</span>, <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">e</span>) </span>&#123;</span><br><span class="javascript">      <span class="hljs-comment">//当在文本框输入内容时让对象里你定义的val等于文本框的值</span></span><br><span class="javascript"></span><br><span class="javascript">      obj.val = e.target.value;</span><br><span class="javascript">    &#125;);</span><br><span class="javascript">  </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="十四、数组大小排序"><a href="#十四、数组大小排序" class="headerlink" title="十四、数组大小排序"></a>十四、数组大小排序</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> num = [<span class="hljs-number">7</span>, <span class="hljs-number">8</span>, <span class="hljs-number">6</span>, <span class="hljs-number">5</span>, <span class="hljs-number">2</span>];<br><span class="hljs-comment">//倒序排列</span><br>num.sort(<span class="hljs-function">(<span class="hljs-params">a, b</span>) =&gt;</span> &#123;<br>  <span class="hljs-keyword">return</span> b - a;<br>&#125;);<br><span class="hljs-comment">//正序排列</span><br>num.sort(<span class="hljs-function">(<span class="hljs-params">a, b</span>) =&gt;</span> &#123;<br>  <span class="hljs-keyword">return</span> a - b;<br>&#125;);<br></code></pre></td></tr></table></figure><h2 id="十五、js-从数组里面取出某两个值作为对象的-key-和-value"><a href="#十五、js-从数组里面取出某两个值作为对象的-key-和-value" class="headerlink" title="十五、js 从数组里面取出某两个值作为对象的 key 和 value"></a>十五、js 从数组里面取出某两个值作为对象的 key 和 value</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> data = [<br>  &#123;<br>    <span class="hljs-attr">id</span>: <span class="hljs-number">1</span>,<br>    <span class="hljs-attr">content</span>: <span class="hljs-string">&quot;1111&quot;</span>,<br>  &#125;,<br>  &#123;<br>    <span class="hljs-attr">id</span>: <span class="hljs-number">2</span>,<br>    <span class="hljs-attr">content</span>: <span class="hljs-string">&quot;2222&quot;</span>,<br>  &#125;,<br>  &#123;<br>    <span class="hljs-attr">id</span>: <span class="hljs-number">3</span>,<br>    <span class="hljs-attr">content</span>: <span class="hljs-string">&quot;3333&quot;</span>,<br>  &#125;,<br>];<br><span class="hljs-keyword">let</span> lessonObj = data.reduce(<span class="hljs-function">(<span class="hljs-params">obj, cur, index</span>) =&gt;</span> &#123;<br>  obj[<span class="hljs-string">`config_<span class="hljs-subst">$&#123;cur[<span class="hljs-string">&quot;id&quot;</span>]&#125;</span>`</span>] = cur[<span class="hljs-string">&quot;content&quot;</span>];<br>  <span class="hljs-keyword">return</span> obj;<br>&#125;, &#123;&#125;);<br></code></pre></td></tr></table></figure><h2 id="十六、深拷贝、浅拷贝"><a href="#十六、深拷贝、浅拷贝" class="headerlink" title="十六、深拷贝、浅拷贝"></a>十六、深拷贝、浅拷贝</h2><blockquote><p>区别：浅拷贝地址还是指向原来那个内存地址，深拷贝是重新开辟一个内存地址</p></blockquote><blockquote><p>浅拷贝只是对指针的拷贝，拷贝后两个指针指向同一个内存空间</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-built_in">Object</span>.assign()<br><span class="hljs-built_in">Array</span>.prototype.slice(<span class="hljs-number">0</span>)<br>扩展运算符（...）<br></code></pre></td></tr></table></figure><blockquote><p>深拷贝不但对指针进行拷贝，而且对指针指向的内容进行拷贝</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 方法一</span><br><span class="hljs-built_in">JSON</span>.parse(<span class="hljs-built_in">JSON</span>.stringify());<br><br><span class="hljs-comment">// 方法二</span><br><span class="hljs-comment">// 循环对象，把对象的 KEY 和 VALUE 存放到一个新的变量里面</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">deepClone</span>(<span class="hljs-params">source</span>) </span>&#123;<br>  <span class="hljs-keyword">const</span> targetObj = source.constructor === <span class="hljs-built_in">Array</span> ? [] : &#123;&#125;;<br>  <span class="hljs-keyword">for</span> (keys <span class="hljs-keyword">in</span> source) &#123;<br>    <span class="hljs-keyword">if</span> (source.hasOwnProperty(keys)) &#123;<br>      <span class="hljs-comment">// 数组和对象</span><br>      <span class="hljs-keyword">if</span> (source[keys] &amp;&amp; <span class="hljs-keyword">typeof</span> source[keys] === <span class="hljs-string">&quot;object&quot;</span>) &#123;<br>        <span class="hljs-comment">// targetObj[keys] = targetObj[keys] === Array ? [] : &#123;&#125;; // 只是为了可读性，可要可不要</span><br>        targetObj[keys] = deepClone(source[keys]);<br>      &#125; <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-comment">// 基本类型</span><br>        targetObj[keys] = source[keys];<br>      &#125;<br>    &#125;<br>  &#125;<br>  <span class="hljs-keyword">return</span> targetObj;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> js </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>84、Chrome快速切换搜索引擎</title>
      <link href="/2022/08/04/84.search/"/>
      <url>/2022/08/04/84.search/</url>
      
        <content type="html"><![CDATA[<p>如何在不同的搜索引擎的之间快速切换？其实谷歌浏览器（Chrome）自带了一个关键词功能，只需要稍加修改，就可以方便的实现搜索引擎切换，不需要额外安装任何特殊软件或者浏览器插件。</p><span id="more"></span><h2 id="一、Chrome浏览器的设置"><a href="#一、Chrome浏览器的设置" class="headerlink" title="一、Chrome浏览器的设置"></a>一、Chrome浏览器的设置</h2><p>1、打开<code>Chrome浏览器的设置</code>，找到<code>搜索引擎设置</code>，然后点击<code>管理搜索引擎</code>。 </p><p>2、进入后会看到各个搜索引擎的设置项，我们以百度为例，点击这一条右侧的三个小点，然后点击<code>编辑</code></p><p>3、在弹出来的对话框中，把<code>关键词</code>这一项改为一个更简洁的关键词，例如“bd”，然后点击保存。</p><p>4、在Chrome搜索框内输入<code>关键词</code>，然后<code>tab</code>或者<code>空格</code>,即可切换输入法</p>]]></content>
      
      
      
        <tags>
            
            <tag> tool </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>83、egg-jwt用户鉴权、注册、登录及中间件</title>
      <link href="/2022/08/03/83-egg-jwt/"/>
      <url>/2022/08/03/83-egg-jwt/</url>
      
        <content type="html"><![CDATA[<span id="more"></span><h2 id="一、egg-jwt实现用户鉴权"><a href="#一、egg-jwt实现用户鉴权" class="headerlink" title="一、egg-jwt实现用户鉴权"></a>一、egg-jwt实现用户鉴权</h2><blockquote><p>用户鉴权，一种用于在通信网络中对试图访问来自服务提供商的服务的用户进行鉴权的方法。用于用户登陆到DSMP或使用数据业务时，业务网关或Portal发送此消息到DSMP，对该用户使用数据业务的合法性和有效性（状态是否为激活）进行检查。</p></blockquote><p>简单理解，鉴权就是用户在浏览网页或 <code>App</code> 时，通过约定好的方式，让网页和用户建立起一种相互信赖的机制，继而返回给用户需要的信息。</p><p>鉴权的机制：</p><ul><li>HTTP Basic Authentication</li><li>session-cookie</li><li>Token 令牌</li><li>OAuth(开放授权)</li></ul><p><code>token</code> 可以运用在如网页、客户端、小程序、浏览器插件等等领域。如果选用 <code>cookie</code> 的形式鉴权，在客户端和小程序就无法使用这套接口，因为它们没有域的概念，而 <code>cookie</code> 是需要存在某个域下。</p><h2 id="二、注册接口"><a href="#二、注册接口" class="headerlink" title="二、注册接口"></a>二、注册接口</h2><p>在 <code>controller</code> 目录下新建 <code>user.js</code> 用于编写用户相关的代码</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// controller/user.js</span><br><span class="hljs-meta">&#x27;use strict&#x27;</span>;<br><br><span class="hljs-keyword">const</span> Controller = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;egg&#x27;</span>).Controller;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">UserController</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Controller</span> </span>&#123;<br>  <span class="hljs-keyword">async</span> <span class="hljs-function"><span class="hljs-title">register</span>(<span class="hljs-params"></span>)</span> &#123;<br>    <span class="hljs-keyword">const</span> &#123; ctx &#125; = <span class="hljs-built_in">this</span>;<br>    <span class="hljs-keyword">const</span> &#123; username, password &#125; = ctx.request.body; <span class="hljs-comment">// 获取注册需要的参数</span><br>  &#125;<br>&#125;<br><br><span class="hljs-built_in">module</span>.exports = UserController;<br></code></pre></td></tr></table></figure><p>此时我们拿到了 <code>username</code> 和 <code>password</code>，我们需要判断两个参数是否为空。如果是空，则返回错误信息：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 判空操作</span><br><span class="hljs-keyword">if</span> (!username || !password) &#123;<br>  ctx.body = &#123;<br>    <span class="hljs-attr">code</span>: <span class="hljs-number">500</span>,<br>    <span class="hljs-attr">msg</span>: <span class="hljs-string">&#x27;账号密码不能为空&#x27;</span>,<br>    <span class="hljs-attr">data</span>: <span class="hljs-literal">null</span><br>  &#125;<br>  <span class="hljs-keyword">return</span><br>&#125;<br></code></pre></td></tr></table></figure><p>此时我们还需要一个判断，根据用户传入的 <code>username</code> 去数据库的 <code>user</code> 表查询，是否已经被注册。</p><p>在 <code>service</code> 目录下新建 <code>user.js</code>，并且添加 <code>getUserByName</code> 方法用于根据 <code>username</code> 查找用户信息</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">//  service/user.js</span><br><span class="hljs-meta">&#x27;use strict&#x27;</span>;<br><br><span class="hljs-keyword">const</span> Service = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;egg&#x27;</span>).Service;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">UserService</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Service</span> </span>&#123;<br>  <span class="hljs-comment">// 通过用户名获取用户信息</span><br>  <span class="hljs-keyword">async</span> <span class="hljs-function"><span class="hljs-title">getUserByName</span>(<span class="hljs-params">username</span>)</span> &#123;<br>    <span class="hljs-keyword">const</span> &#123; app &#125; = <span class="hljs-built_in">this</span>;<br>      <span class="hljs-keyword">try</span> &#123;<br>        <span class="hljs-keyword">const</span> result = <span class="hljs-keyword">await</span> app.mysql.get(<span class="hljs-string">&#x27;user&#x27;</span>, &#123; username &#125;);<br>        <span class="hljs-keyword">return</span> result;<br>      &#125; <span class="hljs-keyword">catch</span> (error) &#123;<br>        <span class="hljs-built_in">console</span>.log(error);<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>      &#125;<br>  &#125;<br>&#125;<br><span class="hljs-built_in">module</span>.exports = UserService;<br></code></pre></td></tr></table></figure><blockquote><p>使用 async 和 await 时，如果想捕获错误，需要使用 try…catch 来捕获，如果代码运行过程中发生错误，都将会被 catch 捕获。</p></blockquote><p> <code>controller/user.js</code> 继续添加逻辑，在 「判空操作」逻辑下，判断是否已经被注册的逻辑：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// controller/user.js</span><br><span class="hljs-keyword">async</span> <span class="hljs-function"><span class="hljs-title">register</span>(<span class="hljs-params"></span>)</span> &#123;<br>  ...<br>  <span class="hljs-comment">// 验证数据库内是否已经有该账户名</span><br>  <span class="hljs-keyword">const</span> userInfo = <span class="hljs-keyword">await</span> ctx.service.user.getUserByName(username) <span class="hljs-comment">// 获取用户信息</span><br><br>  <span class="hljs-comment">// 判断是否已经存在</span><br>  <span class="hljs-keyword">if</span> (userInfo &amp;&amp; userInfo.id) &#123;<br>    ctx.body = &#123;<br>      <span class="hljs-attr">code</span>: <span class="hljs-number">500</span>,<br>      <span class="hljs-attr">msg</span>: <span class="hljs-string">&#x27;账户名已被注册，请重新输入&#x27;</span>,<br>      <span class="hljs-attr">data</span>: <span class="hljs-literal">null</span><br>    &#125;<br>    <span class="hljs-keyword">return</span><br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>经过上述两层判断之后，接下便可将账号和密码写入数据库</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// controller/user.js</span><br><span class="hljs-comment">// 默认头像，放在 user.js 的最外，部避免重复声明。</span><br><span class="hljs-keyword">const</span> defaultAvatar = <span class="hljs-string">&#x27;http://s.yezgea02.com/1615973940679/WeChat77d6d2ac093e247c361f0b8a7aeb6c2a.png&#x27;</span><br><span class="hljs-comment">// 调用 service 方法，将数据存入数据库。</span><br><span class="hljs-keyword">const</span> result = <span class="hljs-keyword">await</span> ctx.service.user.register(&#123;<br>  username,<br>  password,<br>  <span class="hljs-attr">signature</span>: <span class="hljs-string">&#x27;世界和平。&#x27;</span>,<br>  <span class="hljs-attr">avatar</span>: defaultAvatar<br>&#125;);<br><br><span class="hljs-keyword">if</span> (result) &#123;<br>  ctx.body = &#123;<br>    <span class="hljs-attr">code</span>: <span class="hljs-number">200</span>,<br>    <span class="hljs-attr">msg</span>: <span class="hljs-string">&#x27;注册成功&#x27;</span>,<br>    <span class="hljs-attr">data</span>: <span class="hljs-literal">null</span><br>  &#125;<br>&#125; <span class="hljs-keyword">else</span> &#123;<br>  ctx.body = &#123;<br>    <span class="hljs-attr">code</span>: <span class="hljs-number">500</span>,<br>    <span class="hljs-attr">msg</span>: <span class="hljs-string">&#x27;注册失败&#x27;</span>,<br>    <span class="hljs-attr">data</span>: <span class="hljs-literal">null</span><br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><code>service/user.js</code> 添加 <code>register</code> 写入数据库的方法</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// service/user.js</span><br>...<br><span class="hljs-comment">// 注册</span><br><span class="hljs-keyword">async</span> <span class="hljs-function"><span class="hljs-title">register</span>(<span class="hljs-params">params</span>)</span> &#123;<br>  <span class="hljs-keyword">const</span> &#123; app &#125; = <span class="hljs-built_in">this</span>;<br>  <span class="hljs-keyword">try</span> &#123;<br>    <span class="hljs-keyword">const</span> result = <span class="hljs-keyword">await</span> app.mysql.insert(<span class="hljs-string">&#x27;user&#x27;</span>, params);<br>    <span class="hljs-keyword">return</span> result;<br>  &#125; <span class="hljs-keyword">catch</span> (error) &#123;<br>    <span class="hljs-built_in">console</span>.log(error);<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>在 <code>router.js</code> 将接口抛出</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// router.js</span><br><span class="hljs-meta">&#x27;use strict&#x27;</span>;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param <span class="hljs-type">&#123;Egg.Application&#125;</span> <span class="hljs-variable">app</span></span> - egg application</span><br><span class="hljs-comment"> */</span><br><span class="hljs-built_in">module</span>.exports = <span class="hljs-function"><span class="hljs-params">app</span> =&gt;</span> &#123;<br>  <span class="hljs-keyword">const</span> &#123; router, controller &#125; = app;<br>  router.post(<span class="hljs-string">&#x27;/api/user/register&#x27;</span>, controller.user.register);<br>&#125;;<br></code></pre></td></tr></table></figure><p>通过postman工具测试接口。</p><h2 id="三、登录接口"><a href="#三、登录接口" class="headerlink" title="三、登录接口"></a>三、登录接口</h2><blockquote><p>通过注册的「用户名」和「密码」，调用登录接口，接口会返回给我们一个 <code>token</code> 令牌</p></blockquote><p>每次发起请求，无论是获取数据，还是提交数据，我们都需要将 <code>token</code> 带上，以此来标识，此次获取(GET)或提交(POST)是哪一个用户的行为。</p><p> <code>egg-jwt</code> 有加密的功能，也有解密的功能。通过解密 <code>token</code> 拿到当初加密 <code>token</code> 时的信息，信息的内容大致就是当初注册时候的用户信息。</p><p>安装egg-jwt插件</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">npm i egg-jwt -S<br></code></pre></td></tr></table></figure><p>Egg-jwt的<a href="https://link.juejin.cn/?target=https://github.com/okoala/egg-jwt%23readme">仓库地址</a></p><p>在 <code>config/plugin.js</code> 下添加插件：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs js">jwt: &#123;<br>  <span class="hljs-attr">enable</span>: <span class="hljs-literal">true</span>,<br>  <span class="hljs-attr">package</span>: <span class="hljs-string">&#x27;egg-jwt&#x27;</span><br>&#125;<br></code></pre></td></tr></table></figure><p><code>config/config.default.js</code> 下添加自定义加密字符串</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs js">config.jwt = &#123;<br>  <span class="hljs-attr">secret</span>: <span class="hljs-string">&#x27;YQ&#x27;</span>,<br>&#125;;<br></code></pre></td></tr></table></figure><blockquote><p>secret<code>加密字符串，将在后续用于结合用户信息生成一串</code>token</p></blockquote><p>在 <code>/controller/user.js</code> 下新建 <code>login</code> 方法</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">async</span> <span class="hljs-function"><span class="hljs-title">login</span>(<span class="hljs-params"></span>)</span> &#123;<br>    <span class="hljs-comment">// app 为全局属性，相当于所有的插件方法都植入到了 app 对象。</span><br>    <span class="hljs-keyword">const</span> &#123; ctx, app &#125; = <span class="hljs-built_in">this</span>;<br>    <span class="hljs-keyword">const</span> &#123; username, password &#125; = ctx.request.body<br>    <span class="hljs-comment">// 根据用户名，在数据库查找相对应的id操作</span><br>    <span class="hljs-keyword">const</span> userInfo = <span class="hljs-keyword">await</span> ctx.service.user.getUserByName(username)<br>    <span class="hljs-comment">// 没找到说明没有该用户</span><br>    <span class="hljs-keyword">if</span> (!userInfo || !userInfo.id) &#123;<br>      ctx.body = &#123;<br>        <span class="hljs-attr">code</span>: <span class="hljs-number">500</span>,<br>        <span class="hljs-attr">msg</span>: <span class="hljs-string">&#x27;账号不存在&#x27;</span>,<br>        <span class="hljs-attr">data</span>: <span class="hljs-literal">null</span><br>      &#125;<br>      <span class="hljs-keyword">return</span><br>    &#125;<br>    <span class="hljs-comment">// 找到用户，并且判断输入密码与数据库中用户密码。</span><br>    <span class="hljs-keyword">if</span> (userInfo &amp;&amp; password != userInfo.password) &#123;<br>      ctx.body = &#123;<br>        <span class="hljs-attr">code</span>: <span class="hljs-number">500</span>,<br>        <span class="hljs-attr">msg</span>: <span class="hljs-string">&#x27;账号密码错误&#x27;</span>,<br>        <span class="hljs-attr">data</span>: <span class="hljs-literal">null</span><br>      &#125;<br>      <span class="hljs-keyword">return</span><br>    &#125;<br>   <span class="hljs-comment">// 生成 token 加盐</span><br>  <span class="hljs-comment">// app.jwt.sign 方法接受两个参数，第一个为对象，对象内是需要加密的内容；第二个是加密字符串，上文已经提到过。</span><br>    <span class="hljs-keyword">const</span> token = app.jwt.sign(&#123;<br>      <span class="hljs-attr">id</span>: userInfo.id,<br>      <span class="hljs-attr">username</span>: userInfo.username,<br>      <span class="hljs-attr">exp</span>: <span class="hljs-built_in">Math</span>.floor(<span class="hljs-built_in">Date</span>.now() / <span class="hljs-number">1000</span>) + (<span class="hljs-number">24</span> * <span class="hljs-number">60</span> * <span class="hljs-number">60</span>) <span class="hljs-comment">// token 有效期为 24 小时</span><br>    &#125;, app.config.jwt.secret);<br><br>    ctx.body = &#123;<br>      <span class="hljs-attr">code</span>: <span class="hljs-number">200</span>,<br>      <span class="hljs-attr">message</span>: <span class="hljs-string">&#x27;登录成功&#x27;</span>,<br>      <span class="hljs-attr">data</span>: &#123;<br>        token<br>      &#125;,<br>    &#125;;<br>&#125;<br><br></code></pre></td></tr></table></figure><p>把获取到的 <code>userInfo</code> 中的 <code>id</code> 和 <code>username</code> 两个属性，通过 <code>app.jwt.sign</code> 方法，结合 <code>app.config.jwt.secret</code> 加密字符串（之前声明的 <code>YQ</code>），生成一个 <code>token</code>。这个 <code>token</code> 会是一串很长的加密字符串</p><p>在 <code>/controller/user.js</code> 中，新增一个验证方法 <code>test</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 验证方法</span><br><span class="hljs-keyword">async</span> <span class="hljs-function"><span class="hljs-title">test</span>(<span class="hljs-params"></span>)</span> &#123;<br>  <span class="hljs-keyword">const</span> &#123; ctx, app &#125; = <span class="hljs-built_in">this</span>;<br>  <span class="hljs-comment">// 通过 token 解析，拿到 user_id</span><br>  <span class="hljs-keyword">const</span> token = ctx.request.header.authorization; <span class="hljs-comment">// 请求头获取 authorization 属性，值为 token</span><br>  <span class="hljs-comment">// 通过 app.jwt.verify + 加密字符串 解析出 token 的值 </span><br>  <span class="hljs-keyword">const</span> decode = <span class="hljs-keyword">await</span> app.jwt.verify(token, app.config.jwt.secret);<br>  <span class="hljs-comment">// 响应接口</span><br>  ctx.body = &#123;<br>    <span class="hljs-attr">code</span>: <span class="hljs-number">200</span>,<br>    <span class="hljs-attr">message</span>: <span class="hljs-string">&#x27;获取成功&#x27;</span>,<br>    <span class="hljs-attr">data</span>: &#123;<br>      ...decode<br>    &#125;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>在路由 <code>router.js</code> 脚本中，将登录接口抛出</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs JS"><span class="hljs-meta">&#x27;use strict&#x27;</span>;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param <span class="hljs-type">&#123;Egg.Application&#125;</span> <span class="hljs-variable">app</span></span> - egg application</span><br><span class="hljs-comment"> */</span><br><span class="hljs-built_in">module</span>.exports = <span class="hljs-function"><span class="hljs-params">app</span> =&gt;</span> &#123;<br>  <span class="hljs-keyword">const</span> &#123; router, controller &#125; = app;<br>  router.post(<span class="hljs-string">&#x27;/api/user/register&#x27;</span>, controller.user.register);<br>  router.post(<span class="hljs-string">&#x27;/api/user/login&#x27;</span>, controller.user.login);<br>&#125;;<br></code></pre></td></tr></table></figure><h2 id="四、登录验证中间件"><a href="#四、登录验证中间件" class="headerlink" title="四、登录验证中间件"></a>四、登录验证中间件</h2><p>中间件我们可以理解成一个过滤器，举个例子，我们有 <code>A</code>、<code>B</code>、<code>C</code>、<code>D</code> 四个接口是需要用户权限的，如果我们要判断是否有用户权限的话，就需要在这四个接口的控制层去判断用户是否登录。</p><p>每个接口都验证存在的弊端</p><blockquote><p>1、每次编写新的接口，都要在方法内部做判断，这很费事。 2、一旦鉴权有所调整，我们需要修改每个用到判断登录的代码。</p></blockquote><p>在请求接口的时候，过一层中间件，判断该请求是否是登录状态下发起的。此时我们打开项目，在 <code>app</code> 目录下新新建一个文件夹 <code>middleware</code>，并且在该目录下新增 <code>jwtErr.js</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-meta">&#x27;use strict&#x27;</span>;<br><br><span class="hljs-built_in">module</span>.exports = <span class="hljs-function">(<span class="hljs-params">secret</span>) =&gt;</span> &#123;<br>  <span class="hljs-keyword">return</span> <span class="hljs-keyword">async</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">jwtErr</span>(<span class="hljs-params">ctx, next</span>) </span>&#123;<br>    <span class="hljs-keyword">const</span> token = ctx.request.header.authorization; <span class="hljs-comment">// 若是没有 token，返回的是 null 字符串</span><br>    <span class="hljs-keyword">let</span> decode<br>    <span class="hljs-keyword">if</span>(token != <span class="hljs-string">&#x27;null&#x27;</span> &amp;&amp; token) &#123;<br>      <span class="hljs-keyword">try</span> &#123;<br>        decode = ctx.app.jwt.verify(token, secret); <span class="hljs-comment">// 验证token</span><br>        <span class="hljs-keyword">await</span> next();<br>      &#125; <span class="hljs-keyword">catch</span> (error) &#123;<br>        <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;error&#x27;</span>, error)<br>        ctx.status = <span class="hljs-number">200</span>;<br>        ctx.body = &#123;<br>          <span class="hljs-attr">msg</span>: <span class="hljs-string">&#x27;token已过期，请重新登录&#x27;</span>,<br>          <span class="hljs-attr">code</span>: <span class="hljs-number">401</span>,<br>        &#125;<br>        <span class="hljs-keyword">return</span>;<br>      &#125;<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>      ctx.status = <span class="hljs-number">200</span>;<br>      ctx.body = &#123;<br>        <span class="hljs-attr">code</span>: <span class="hljs-number">401</span>,<br>        <span class="hljs-attr">msg</span>: <span class="hljs-string">&#x27;token不存在&#x27;</span>,<br>      &#125;;<br>      <span class="hljs-keyword">return</span>;<br>    &#125;<br>  &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p>首先中间件默认抛出一个函数，该函数返回一个异步方法 <code>jwtErr</code>，<code>jewErr</code> 方法有两个参数 <code>ctx</code> 是上下文，可以在 <code>ctx</code> 中拿到全局对象 <code>app</code>。</p><p>首先，通过 <code>ctx.request.header.authorization</code> 获取到请求头中的 <code>authorization</code> 属性，它便是我们请求接口是携带的 <code>token</code> 值，如果没有携带 <code>token</code>，该值为字符串 <code>null</code>。我们通过 <code>if</code> 语句判断如果有 <code>token</code> 的情况下，使用 <code>ctx.app.jwt.verify</code> 方法验证该 <code>token</code> 是否存在并且有效，如果是存在且有效，则通过验证 <code>await next()</code> 继续执行后续的接口逻辑。否则判断是失效还是不存在该 <code>token</code>。</p><p>中间件完成后，我们在路由中<code>router.js</code> 去使用它</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-meta">&#x27;use strict&#x27;</span>;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param <span class="hljs-type">&#123;Egg.Application&#125;</span> <span class="hljs-variable">app</span></span> - egg application</span><br><span class="hljs-comment"> */</span><br><span class="hljs-built_in">module</span>.exports = <span class="hljs-function"><span class="hljs-params">app</span> =&gt;</span> &#123;<br>  <span class="hljs-keyword">const</span> &#123; router, controller, middleware &#125; = app;<br>  <span class="hljs-keyword">const</span> _jwt = middleware.jwtErr(app.config.jwt.secret); <span class="hljs-comment">// 传入加密字符串</span><br>  router.post(<span class="hljs-string">&#x27;/api/user/register&#x27;</span>, controller.user.register);<br>  router.post(<span class="hljs-string">&#x27;/api/user/login&#x27;</span>, controller.user.login);<br>  router.get(<span class="hljs-string">&#x27;/api/user/test&#x27;</span>, _jwt, controller.user.test); <span class="hljs-comment">// 放入第二个参数，作为中间件过滤项</span><br>&#125;;<br></code></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> egg </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>82、egg-mysql的增删改查</title>
      <link href="/2022/08/03/82-egg-mysql/"/>
      <url>/2022/08/03/82-egg-mysql/</url>
      
        <content type="html"><![CDATA[<p>MySQL安装成功后，在egg项目中安装egg-mysql插件，配置完成后，编写查询、新增、删除、编辑接口。</p><span id="more"></span><h2 id="一、安装MySQL"><a href="#一、安装MySQL" class="headerlink" title="一、安装MySQL"></a>一、安装MySQL</h2><p>版本选择MySQL 8.0.20  Mac Intel 版本</p><p>安装过程设置密码：0987654321</p><p>此时在terminal输入命令：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">mysql -u root -p<br></code></pre></td></tr></table></figure><p>Commod not found</p><p>1、termina进入 路径：/usr/local/mysql/bin  查看目录是否有mysql</p><p>如果存在，在此路径下执行：vim ~/.bash_profile</p><p>打开后，输入 i 键，进入编辑，在.bash_profile中添加mysql/bin的目录，完成后，ESC退出编辑，输入：wq回车保存</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">PATH=$PATH:/usr/local/mysql/bin<br></code></pre></td></tr></table></figure><p>2、输入source  ~/.bash_profile      使配置生效</p><p>3、指令登录数据库：mysql -u root -p   输入密码：0987654321</p><p>4、开启服务：mysql.server start</p><h2 id="二、egg-js安装egg-mysql插件"><a href="#二、egg-js安装egg-mysql插件" class="headerlink" title="二、egg.js安装egg-mysql插件"></a>二、egg.js安装egg-mysql插件</h2><h4 id="1、安装egg-mysql及插件配置"><a href="#1、安装egg-mysql及插件配置" class="headerlink" title="1、安装egg-mysql及插件配置"></a>1、安装egg-mysql及插件配置</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell">npm install egg-mysql<br><br><br></code></pre></td></tr></table></figure><p>config/plugin.js</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-meta">&#x27;use strict&#x27;</span>;<br><br><span class="hljs-comment">/** <span class="hljs-doctag">@type </span>Egg.EggPlugin */</span><br><span class="hljs-built_in">module</span>.exports = &#123;<br>  <span class="hljs-attr">ejs</span>: &#123;<br>    <span class="hljs-attr">enable</span>: <span class="hljs-literal">true</span>,<br>    <span class="hljs-attr">package</span>: <span class="hljs-string">&#x27;egg-view-ejs&#x27;</span><br>  &#125;,<br>  <span class="hljs-attr">mysql</span>: &#123;<br>    <span class="hljs-attr">enable</span>: <span class="hljs-literal">true</span>,<br>    <span class="hljs-attr">package</span>: <span class="hljs-string">&#x27;egg-mysql&#x27;</span><br>  &#125;<br>&#125;;<br></code></pre></td></tr></table></figure><p>config/plugin-default.js</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-built_in">exports</span>.mysql = &#123;<br>  <span class="hljs-comment">// 单数据库信息配置</span><br>  <span class="hljs-attr">client</span>: &#123;<br>    <span class="hljs-comment">// host</span><br>    <span class="hljs-attr">host</span>: <span class="hljs-string">&#x27;localhost&#x27;</span>,<br>    <span class="hljs-comment">// 端口号</span><br>    <span class="hljs-attr">port</span>: <span class="hljs-string">&#x27;3306&#x27;</span>,<br>    <span class="hljs-comment">// 用户名</span><br>    <span class="hljs-attr">user</span>: <span class="hljs-string">&#x27;root&#x27;</span>,<br>    <span class="hljs-comment">// 密码</span><br>    <span class="hljs-attr">password</span>: <span class="hljs-string">&#x27;数据库密码&#x27;</span>, <span class="hljs-comment">// 初始化密码，没设置的可以不写</span><br>    <span class="hljs-comment">// 数据库名</span><br>    <span class="hljs-attr">database</span>: <span class="hljs-string">&#x27;test&#x27;</span>, <span class="hljs-comment">// 我们新建的数据库名称</span><br>  &#125;,<br>  <span class="hljs-comment">// 是否加载到 app 上，默认开启</span><br>  <span class="hljs-attr">app</span>: <span class="hljs-literal">true</span>,<br>  <span class="hljs-comment">// 是否加载到 agent 上，默认关闭</span><br>  <span class="hljs-attr">agent</span>: <span class="hljs-literal">false</span>,<br>&#125;;<br></code></pre></td></tr></table></figure><h4 id="2、修改-service-home-js"><a href="#2、修改-service-home-js" class="headerlink" title="2、修改 service/home.js"></a>2、修改 <code>service/home.js</code></h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-meta">&#x27;use strict&#x27;</span>;<br><br><span class="hljs-keyword">const</span> Service = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;egg&#x27;</span>).Service;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">HomeService</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Service</span> </span>&#123;<br>  <span class="hljs-keyword">async</span> <span class="hljs-function"><span class="hljs-title">user</span>(<span class="hljs-params"></span>)</span> &#123;<br>    <span class="hljs-keyword">const</span> &#123; ctx, app &#125; = <span class="hljs-built_in">this</span>;<br>    <span class="hljs-keyword">const</span> QUERY_STR = <span class="hljs-string">&#x27;id, name&#x27;</span>;<br>    <span class="hljs-keyword">let</span> sql = <span class="hljs-string">`select <span class="hljs-subst">$&#123;QUERY_STR&#125;</span> from list`</span>; <span class="hljs-comment">// 获取 id 的 sql 语句</span><br>    <span class="hljs-keyword">try</span> &#123;<br>      <span class="hljs-keyword">const</span> result = <span class="hljs-keyword">await</span> app.mysql.query(sql); <span class="hljs-comment">// mysql 实例已经挂载到 app 对象下，可以通过 app.mysql 获取到。</span><br>      <span class="hljs-keyword">return</span> result;<br>    &#125; <span class="hljs-keyword">catch</span> (error) &#123;<br>      <span class="hljs-built_in">console</span>.log(error);<br>      <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>    &#125;<br>  &#125;<br>&#125;<br><span class="hljs-built_in">module</span>.exports = HomeService;<br></code></pre></td></tr></table></figure><h4 id="3、修改controller-home-js中的user方法"><a href="#3、修改controller-home-js中的user方法" class="headerlink" title="3、修改controller/home.js中的user方法"></a>3、修改controller/home.js中的user方法</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">async</span> <span class="hljs-function"><span class="hljs-title">user</span>(<span class="hljs-params"></span>)</span> &#123;<br>  <span class="hljs-keyword">const</span> &#123; ctx &#125; = <span class="hljs-built_in">this</span>;<br>  <span class="hljs-keyword">const</span> result = <span class="hljs-keyword">await</span> ctx.service.home.user();<br>  ctx.body = result<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="4、路由配置"><a href="#4、路由配置" class="headerlink" title="4、路由配置"></a>4、路由配置</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js">router.get(<span class="hljs-string">&#x27;/user&#x27;</span>, controller.home.user);<br></code></pre></td></tr></table></figure><h2 id="三、新增接口"><a href="#三、新增接口" class="headerlink" title="三、新增接口"></a>三、新增接口</h2><p>在 <code>service/home.js</code> 下新建一个函数 <code>addUser</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 新增</span><br><span class="hljs-keyword">async</span> <span class="hljs-function"><span class="hljs-title">addUser</span>(<span class="hljs-params">name</span>)</span> &#123;<br>  <span class="hljs-keyword">const</span> &#123; ctx, app &#125; = <span class="hljs-built_in">this</span>;<br>  <span class="hljs-keyword">try</span> &#123;<br>    <span class="hljs-keyword">const</span> result = <span class="hljs-keyword">await</span> app.mysql.insert(<span class="hljs-string">&#x27;list&#x27;</span>, &#123; name &#125;); <span class="hljs-comment">// 给 list 表，新增一条数据</span><br>    <span class="hljs-keyword">return</span> result;<br>  &#125; <span class="hljs-keyword">catch</span> (error) &#123;<br>    <span class="hljs-built_in">console</span>.log(error);<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>再为 <code>controller/home.js</code> 添加一个 <code>addUser</code> 方法</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">async</span> <span class="hljs-function"><span class="hljs-title">addUser</span>(<span class="hljs-params"></span>)</span> &#123;<br>  <span class="hljs-keyword">const</span> &#123; ctx &#125; = <span class="hljs-built_in">this</span>;<br>  <span class="hljs-keyword">const</span> &#123; name &#125; = ctx.request.body;<br>  <span class="hljs-keyword">try</span> &#123;<br>    <span class="hljs-keyword">const</span> result = <span class="hljs-keyword">await</span> ctx.service.home.addUser(name);<br>    ctx.body = &#123;<br>      <span class="hljs-attr">code</span>: <span class="hljs-number">200</span>,<br>      <span class="hljs-attr">msg</span>: <span class="hljs-string">&#x27;添加成功&#x27;</span>,<br>      <span class="hljs-attr">data</span>: <span class="hljs-literal">null</span><br>    &#125;<br>  &#125; <span class="hljs-keyword">catch</span> (error) &#123;<br>    ctx.body = &#123;<br>      <span class="hljs-attr">code</span>: <span class="hljs-number">500</span>,<br>      <span class="hljs-attr">msg</span>: <span class="hljs-string">&#x27;添加失败&#x27;</span>,<br>      <span class="hljs-attr">data</span>: <span class="hljs-literal">null</span><br>    &#125;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>配置路由</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js">router.post(<span class="hljs-string">&#x27;/add_user&#x27;</span>, controller.home.addUser);<br></code></pre></td></tr></table></figure><p>这个post请求需要使用postman测试接口是否成功。</p><h2 id="四、编辑接口"><a href="#四、编辑接口" class="headerlink" title="四、编辑接口"></a>四、编辑接口</h2><p>通过 <code>/user</code> 拿到了列表数据，我们可以通过 <code>id</code> 定位某条数据，去修改它的 <code>name</code> 属性。</p><p><code>/service/home.js</code>，添加编辑操作</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 编辑</span><br><span class="hljs-keyword">async</span> <span class="hljs-function"><span class="hljs-title">editUser</span>(<span class="hljs-params">id, name</span>)</span> &#123;<br>  <span class="hljs-keyword">const</span> &#123; ctx, app &#125; = <span class="hljs-built_in">this</span>;<br>  <span class="hljs-keyword">try</span> &#123;<br>    <span class="hljs-keyword">let</span> result = <span class="hljs-keyword">await</span> app.mysql.update(<span class="hljs-string">&#x27;list&#x27;</span>, &#123; name &#125;, &#123;<br>      <span class="hljs-attr">where</span>: &#123;<br>        id<br>      &#125;<br>    &#125;);<br>    <span class="hljs-keyword">return</span> result;<br>  &#125; <span class="hljs-keyword">catch</span> (error) &#123;<br>    <span class="hljs-built_in">console</span>.log(error);<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><code>/controller/home.js</code> 添加如下代码：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 编辑</span><br><span class="hljs-keyword">async</span> <span class="hljs-function"><span class="hljs-title">editUser</span>(<span class="hljs-params"></span>)</span> &#123;<br>  <span class="hljs-keyword">const</span> &#123; ctx &#125; = <span class="hljs-built_in">this</span>;<br>  <span class="hljs-keyword">const</span> &#123; id, name &#125; = ctx.request.body;<br>  <span class="hljs-keyword">try</span> &#123;<br>    <span class="hljs-keyword">const</span> result = <span class="hljs-keyword">await</span> ctx.service.home.editUser(id, name);<br>    ctx.body = &#123;<br>      <span class="hljs-attr">code</span>: <span class="hljs-number">200</span>,<br>      <span class="hljs-attr">msg</span>: <span class="hljs-string">&#x27;添加成功&#x27;</span>,<br>      <span class="hljs-attr">data</span>: <span class="hljs-literal">null</span><br>    &#125;<br>  &#125; <span class="hljs-keyword">catch</span> (error) &#123;<br>    ctx.body = &#123;<br>      <span class="hljs-attr">code</span>: <span class="hljs-number">500</span>,<br>      <span class="hljs-attr">msg</span>: <span class="hljs-string">&#x27;添加失败&#x27;</span>,<br>      <span class="hljs-attr">data</span>: <span class="hljs-literal">null</span><br>    &#125;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>配置路由：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js">router.post(<span class="hljs-string">&#x27;/edit_user&#x27;</span>, controller.home.editUser);<br></code></pre></td></tr></table></figure><p>post请求需要使用postman工具测试接口</p><h2 id="五、删除接口"><a href="#五、删除接口" class="headerlink" title="五、删除接口"></a>五、删除接口</h2><p>在 <code>/service/home.js</code> 添加删除接口</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 删除</span><br><span class="hljs-keyword">async</span> <span class="hljs-function"><span class="hljs-title">deleteUser</span>(<span class="hljs-params">id</span>)</span> &#123;<br>  <span class="hljs-keyword">const</span> &#123; ctx, app &#125; = <span class="hljs-built_in">this</span>;<br>  <span class="hljs-keyword">try</span> &#123;<br>    <span class="hljs-keyword">let</span> result = <span class="hljs-keyword">await</span> app.mysql.delete(<span class="hljs-string">&#x27;list&#x27;</span>, &#123; id &#125;);<br>    <span class="hljs-keyword">return</span> result;<br>  &#125; <span class="hljs-keyword">catch</span> (error) &#123;<br>    <span class="hljs-built_in">console</span>.log(error);<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><code>/controller/home.js</code> 添加相应的控制器方法</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 删除</span><br><span class="hljs-keyword">async</span> <span class="hljs-function"><span class="hljs-title">deleteUser</span>(<span class="hljs-params"></span>)</span> &#123;<br>  <span class="hljs-keyword">const</span> &#123; ctx &#125; = <span class="hljs-built_in">this</span>;<br>  <span class="hljs-keyword">const</span> &#123; id &#125; = ctx.request.body;<br>  <span class="hljs-keyword">try</span> &#123;<br>    <span class="hljs-keyword">const</span> result = <span class="hljs-keyword">await</span> ctx.service.home.deleteUser(id);<br>    ctx.body = &#123;<br>      <span class="hljs-attr">code</span>: <span class="hljs-number">200</span>,<br>      <span class="hljs-attr">msg</span>: <span class="hljs-string">&#x27;删除成功&#x27;</span>,<br>      <span class="hljs-attr">data</span>: <span class="hljs-literal">null</span><br>    &#125;<br>  &#125; <span class="hljs-keyword">catch</span> (error) &#123;<br>    ctx.body = &#123;<br>      <span class="hljs-attr">code</span>: <span class="hljs-number">500</span>,<br>      <span class="hljs-attr">msg</span>: <span class="hljs-string">&#x27;删除失败&#x27;</span>,<br>      <span class="hljs-attr">data</span>: <span class="hljs-literal">null</span><br>    &#125;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>添加相应路由：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// router.js</span><br>router.post(<span class="hljs-string">&#x27;/delete_user&#x27;</span>, controller.home.deleteUser);<br></code></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> egg </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>81、egg.js(二)</title>
      <link href="/2022/08/02/81-egg.js/"/>
      <url>/2022/08/02/81-egg.js/</url>
      
        <content type="html"><![CDATA[<p>Egg.js：<a href="https://issummer.cn/2021/06/20/egg/">https://issummer.cn/2021/06/20/egg/</a></p><span id="more"></span><h2 id="一、项目环境"><a href="#一、项目环境" class="headerlink" title="一、项目环境"></a>一、项目环境</h2><p>egg.js对node版本是有要求的，node&gt; 8.x npm &gt;= 6.1.0</p><p>目前电脑环境：node:12.6.0  npm 6.1.0</p><p>egg提供脚手架生成指令</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell">mkdir egg-example &amp;&amp; cd egg-example<br>npm init egg --type=simple<br>npm i<br></code></pre></td></tr></table></figure><p>启动项目会出现报错：Cannot find module ‘fs/promise’</p><p>主要是由于node版本较低造成的，使用n 升级node版本到16.13.0 ,重新npm install，启动项目，报错消失。</p><h2 id="二、egg项目目录"><a href="#二、egg项目目录" class="headerlink" title="二、egg项目目录"></a>二、egg项目目录</h2><p><code>Egg</code> 作为一套解决方案，它内部高度集成了封装好的项目目录结构，现代开发俗称“约定式开发”。正常情况下，你从 0 开始搭建一个 <code>Node</code> 服务端代码，需要结合很多工具插件来辅助完成项目的搭建，而 <code>Egg</code> 则提前为你提供好了这些繁琐的初始工作，让你能专心与业务层面的开发。</p><p>当然，“约定式开发”也有不好的地方，很多配置项都是内部约定好的，在你想要用到某一个功能时，你可能需要去查阅 <code>Egg</code> 的官方文档是如何配置的，这就会消耗一点时间，但是相比之下，使用它的利大于弊。</p><h4 id="1、app-router-js"><a href="#1、app-router-js" class="headerlink" title="1、app/router.js"></a>1、<strong>app/router.js</strong></h4><p>用于配置 URL 路由规则，比如 <code>get</code> 请求，<code>npm run dev</code> 启动项目之后，直接在浏览器中访问启动的<code>端口 + 路径</code>，默认是 <code>http://localhost:7001/</code>，将会拿到 <code>app/controller</code> 文件夹下，<code>home.js</code> 脚本中 <code>index</code> 方法返回的内容。</p><p>这就是路由配置的作用，当然，抛出的形式有多种，如<code>router.get</code>、<code>router.post</code>、<code>router.delete</code>、<code>router.put</code> 等，都是支持的，更加具体的内容 <a href="https://link.juejin.cn/?target=https://eggjs.org/zh-cn/basics/router.html">Router 配置</a>。</p><h4 id="2、app-controller-xx"><a href="#2、app-controller-xx" class="headerlink" title="2、app/controller/xx"></a><strong>2、app/controller/xx</strong></h4><p>用于解析用户的输入，处理后返回相应的结果。通过请求路径将用户的请求基于 <code>method</code> 和 <code>URL</code> 分发到对应的 <code>Controller</code> 上，而 <code>Controller</code> 要做的事情就是响应用户的诉求。举个例子，我想拿到 A 用户的个人信息，于是我们要在控制器（Controller）里，通过请求携带的 A 用户的 id 参数，从数据库里获取指定用户的个人信息。</p><p>控制器需要做的就是处理数据和响应请求返回数据。更加详细的描述 <a href="https://link.juejin.cn/?target=https://eggjs.org/zh-cn/basics/controller.html">Controller 文档</a></p><h4 id="3、app-service-xx"><a href="#3、app-service-xx" class="headerlink" title="3、app/service/xx"></a><strong>3、app/service/xx</strong></h4><p>简单来说，<code>Service</code> 就是在复杂业务场景下用于做业务逻辑封装的一个抽象层。初始化项目中未声明 <code>service</code> 文件夹，它是可选项，但是官方建议我们操作业务逻辑最好做一层封装。我们换一种理解方式，<code>Service</code> 层就是用于数据库的查询，我们尽量将粒度细化，这样以便多个 <code>Controller</code> 共同调用同一个 <code>Service</code>。更加详细的描述 <a href="https://link.juejin.cn/?target=https://eggjs.org/zh-cn/basics/service.html">Service 文档</a>。</p><h4 id="4、app-middleware-xx"><a href="#4、app-middleware-xx" class="headerlink" title="4、app/middleware/xx"></a><strong>4、app/middleware/xx</strong></h4><p>用于编写中间件，中间件的概念就是在路由配置里设置了中间件的路由，每次请求命中后，都要过一层中间件。在后续的开发中，也会利用到这个中间件的原理做用户鉴权。当用户未登录的情况下，是不能调用某些接口的。</p><p>每次都在 <code>Controller</code> 判断，当前请求是否携带有效的用户认证信息。接口一多，到处都是这样的判断，逻辑重复。所以，中间件在某种程度上，也算是优化代码结构的一种方式。更加详细的描述 <a href="https://link.juejin.cn/?target=https://eggjs.org/zh-cn/basics/middleware.html">Middleware 文档</a>。</p><h4 id="5、app-public-xx"><a href="#5、app-public-xx" class="headerlink" title="5、app/public/xx"></a><strong>5、app/public/xx</strong></h4><p>用于放置静态资源。会有一个上传静态资源的接口，包括图片、文本文档、excel、word等，都可以通过服务端读取文件之后，将其写入 <code>app/public</code> 文件夹中。在目前没有 <code>OSS</code> 服务的情况下，姑且先用这种方式存储静态资源，会消耗一点服务器的内存。</p><h4 id="6、config-config-env-js"><a href="#6、config-config-env-js" class="headerlink" title="6、config/config.{env}.js"></a><strong>6、config/config.{env}.js</strong></h4><p>用于编写配置文件。 <code>config/config.default.js</code> 文件，这个是 <code>Egg</code> 框架约定好的，在内部设置一些全局的配置常量，在任何地方都可以通过 <code>app.config</code> 获取到 <code>config.default.js</code> 文件内的配置项。</p><h4 id="7、config-plugin-js"><a href="#7、config-plugin-js" class="headerlink" title="7、config/plugin.js"></a><strong>7、config/plugin.js</strong></h4><p>用于配置需要加载的插件。比如 <code>egg-mysql</code>、<code>egg-cors</code>、<code>egg-jwt</code> 等官方提供的插件</p><h2 id="三、编写-GET-和-POST-接口"><a href="#三、编写-GET-和-POST-接口" class="headerlink" title="三、编写 GET 和 POST 接口"></a>三、编写 GET 和 POST 接口</h2><h4 id="GET-请求参数获取"><a href="#GET-请求参数获取" class="headerlink" title="GET 请求参数获取"></a><strong><code>GET</code> 请求参数获取</strong></h4><p>浏览器输入URL：<code>http:*//localhost:7001/?id=12</code></p><p>打开 <code>app/controller/home.js</code>，通过如下形式获取到浏览器查询参数</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> Controller = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;egg&#x27;</span>).Controller;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">HomeController</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Controller</span> </span>&#123;<br>  <span class="hljs-keyword">async</span> <span class="hljs-function"><span class="hljs-title">index</span>(<span class="hljs-params"></span>)</span> &#123;<br>    <span class="hljs-keyword">const</span> &#123; ctx &#125; = <span class="hljs-built_in">this</span>;<br>    <span class="hljs-keyword">const</span> &#123; id &#125; = ctx.query;<br>    ctx.body = id;<br>  &#125;<br>&#125;<br><br><span class="hljs-built_in">module</span>.exports = HomeController;<br></code></pre></td></tr></table></figure><p>还有另一种获取申明参数，比如我希望通过这样一个地址获取用户参数 <code>/user/5</code>，想获取用户 <code>id</code> 为 <code>5</code> 的用户信息。<br>我们可以这样操作，首先添加路由，打开 <code>app/router.js</code> 添加一个路由：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-meta">&#x27;use strict&#x27;</span>;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param <span class="hljs-type">&#123;Egg.Application&#125;</span> <span class="hljs-variable">app</span></span> - egg application</span><br><span class="hljs-comment"> */</span><br><span class="hljs-built_in">module</span>.exports = <span class="hljs-function"><span class="hljs-params">app</span> =&gt;</span> &#123;<br>  <span class="hljs-keyword">const</span> &#123; router, controller &#125; = app;<br>  router.get(<span class="hljs-string">&#x27;/&#x27;</span>, controller.home.index);<br>  router.get(<span class="hljs-string">&#x27;/user/:id&#x27;</span>, controller.home.user);<br>&#125;;<br></code></pre></td></tr></table></figure><p>其次在 <code>app/controller/home.js</code> 下添加一个 <code>user</code> 方法如下：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-meta">&#x27;use strict&#x27;</span>;<br><br><span class="hljs-keyword">const</span> Controller = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;egg&#x27;</span>).Controller;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">HomeController</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Controller</span> </span>&#123;<br>  <span class="hljs-keyword">async</span> <span class="hljs-function"><span class="hljs-title">index</span>(<span class="hljs-params"></span>)</span> &#123;<br>    <span class="hljs-keyword">const</span> &#123; ctx &#125; = <span class="hljs-built_in">this</span>;<br>    <span class="hljs-keyword">const</span> &#123; id &#125; = ctx.query;<br>    ctx.body = id;<br>  &#125;<br>  <span class="hljs-comment">// 获取用户信息</span><br>  <span class="hljs-keyword">async</span> <span class="hljs-function"><span class="hljs-title">user</span>(<span class="hljs-params"></span>)</span> &#123;<br>    <span class="hljs-keyword">const</span> &#123; ctx &#125; = <span class="hljs-built_in">this</span>;<br>    <span class="hljs-keyword">const</span> &#123; id &#125; = ctx.params; <span class="hljs-comment">// 通过 params 获取申明参数</span><br>    ctx.body = id;<br>  &#125;<br>&#125;<br><span class="hljs-built_in">module</span>.exports = HomeController;<br></code></pre></td></tr></table></figure><p>浏览器输入URL：<code>localhost:7001/user/123</code></p><p>网页会打印出：123</p><h4 id="post请求参数获取"><a href="#post请求参数获取" class="headerlink" title="post请求参数获取"></a><strong>post请求参数获取</strong></h4><p><code>POST</code> 接口需要借助 <code>Postman</code> 工具进行请求，因为通过浏览器无法手动发起 <code>POST</code> 请求，只能通过浏览器地址栏发起 <code>GET</code> 请求。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// app/router.js</span><br><span class="hljs-comment">// ...</span><br>router.post(<span class="hljs-string">&#x27;/add&#x27;</span>, controller.home.add);<br></code></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// app/controller/home.js</span><br><span class="hljs-comment">// post 请求方法</span><br><span class="hljs-keyword">async</span> <span class="hljs-function"><span class="hljs-title">add</span>(<span class="hljs-params"></span>)</span> &#123;<br>  <span class="hljs-keyword">const</span> &#123; ctx &#125; = <span class="hljs-built_in">this</span>;<br>  <span class="hljs-keyword">const</span> &#123; title &#125; = ctx.request.body;<br>  <span class="hljs-comment">// Egg 框架内置了 bodyParser 中间件来对 POST 请求 body 解析成 object 挂载到 ctx.request.body 上</span><br>  ctx.body = &#123;<br>    title<br>  &#125;;<br>&#125;<br></code></pre></td></tr></table></figure><p>用<code>Postman</code>发送post请求会出现报错，触发网络请求的安防策略</p><p><code>config/config.default.js</code> 做好白名单配置，全部允许请求：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs js">config.security = &#123;<br>  <span class="hljs-attr">csrf</span>: &#123;<br>    <span class="hljs-attr">enable</span>: <span class="hljs-literal">false</span>,<br>    <span class="hljs-attr">ignoreJSON</span>: <span class="hljs-literal">true</span><br>  &#125;,<br>  <span class="hljs-attr">domainWhiteList</span>: [ <span class="hljs-string">&#x27;*&#x27;</span> ], <span class="hljs-comment">// 配置白名单</span><br>&#125;;<br></code></pre></td></tr></table></figure><p>配置完成后，再次发送请求，可以看到请求成功，成功拿到服务端参数。</p><h4 id="从-Service-内获取数据"><a href="#从-Service-内获取数据" class="headerlink" title="从 Service 内获取数据"></a><strong>从 Service 内获取数据</strong></h4><p>模拟一下在 <code>Service</code> 中获取数据库的数据，在 <code>app</code> 目录下新建 <code>service</code>，并且创建一个 <code>home.js</code>，</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-meta">&#x27;use strict&#x27;</span><br><br><span class="hljs-keyword">const</span> Service = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;egg&#x27;</span>).Service<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">HomeService</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Service</span> </span>&#123;<br>  <span class="hljs-keyword">async</span> <span class="hljs-function"><span class="hljs-title">user</span>(<span class="hljs-params"></span>)</span>&#123;<br>    <span class="hljs-comment">// 假设从数据库获取的用户信息</span><br>    <span class="hljs-keyword">return</span> &#123;<br>      <span class="hljs-attr">name</span>:<span class="hljs-string">&#x27;yu&#x27;</span>,<br>      <span class="hljs-attr">msg</span>:<span class="hljs-string">&#x27;i love you egg.js&#x27;</span><br>    &#125;<br>  &#125;<br>&#125;<br><br><span class="hljs-built_in">module</span>.exports = HomeService<br></code></pre></td></tr></table></figure><p>在 <code>Controller</code> 内拿到上述方法</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">//  app/controller/home.js</span><br><span class="hljs-comment">// 获取用户信息</span><br><span class="hljs-keyword">async</span> <span class="hljs-function"><span class="hljs-title">user</span>(<span class="hljs-params"></span>)</span> &#123;<br>  <span class="hljs-keyword">const</span> &#123; ctx &#125; = <span class="hljs-built_in">this</span>;<br>  <span class="hljs-keyword">const</span> &#123; name, msg &#125; = <span class="hljs-keyword">await</span> ctx.service.home.user();<br>  ctx.body = &#123;<br>    name,<br>    msg<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><code>Postman</code>打开<a href="http://127.0.0.1:7001/user/yu">http://127.0.0.1:7001/user/yu</a>  可以看到网页显示：{“name”:”yu”,”msg”:”i love you egg.js”}</p><h2 id="四、Egg-js-中使用前端模板"><a href="#四、Egg-js-中使用前端模板" class="headerlink" title="四、Egg.js 中使用前端模板"></a>四、Egg.js 中使用前端模板</h2><p>开发一些简单的网页，想快速部署到云服务器上，就可以使用前端模板的开发形式。</p><h4 id="1、首先安装插件-egg-view-ejs："><a href="#1、首先安装插件-egg-view-ejs：" class="headerlink" title="1、首先安装插件 egg-view-ejs："></a>1、首先安装插件 <code>egg-view-ejs</code>：</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">npm install egg-view-ejs -save<br></code></pre></td></tr></table></figure><h4 id="2、然后在-config-plugin-js-里面声明需要用到的插件："><a href="#2、然后在-config-plugin-js-里面声明需要用到的插件：" class="headerlink" title="2、然后在 config/plugin.js 里面声明需要用到的插件："></a>2、然后在 <code>config/plugin.js</code> 里面声明需要用到的插件：</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-built_in">module</span>.exports = &#123;<br>  <span class="hljs-attr">ejs</span>: &#123;<br>    <span class="hljs-attr">enable</span>: <span class="hljs-literal">true</span>,<br>    <span class="hljs-attr">package</span>: <span class="hljs-string">&#x27;egg-view-ejs&#x27;</span><br>  &#125;<br>&#125;;<br></code></pre></td></tr></table></figure><h4 id="3、去-config-config-default-js-里配置-ejs-，这一步我们会将-ejs-的后缀改成-html-的后缀。"><a href="#3、去-config-config-default-js-里配置-ejs-，这一步我们会将-ejs-的后缀改成-html-的后缀。" class="headerlink" title="3、去 config/config.default.js 里配置 ejs ，这一步我们会将 .ejs 的后缀改成 .html 的后缀。"></a>3、去 <code>config/config.default.js</code> 里配置 <code>ejs</code> ，这一步我们会将 <code>.ejs</code> 的后缀改成 <code>.html</code> 的后缀。</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs js">config.view = &#123;<br>  <span class="hljs-attr">mapping</span>: &#123;<span class="hljs-string">&#x27;.html&#x27;</span>: <span class="hljs-string">&#x27;ejs&#x27;</span>&#125;  <span class="hljs-comment">//左边写成.html后缀，会自动渲染.html文件</span><br>&#125;;<br></code></pre></td></tr></table></figure><p>上述的配置，指的是将 <code>view</code> 文件夹下的 <code>.html</code> 后缀的文件，识别为 <code>.ejs</code>。</p><p>接着，在 <code>app</code> 目录下创建 <code>view</code> 文件夹，并且新建一个 <code>index.html</code> 文件，作为前端模板</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;viewport&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">http-equiv</span>=<span class="hljs-string">&quot;X-UA-Compatible&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;ie=edge&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>&lt;%-title%&gt;<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-comment">&lt;!-- 使用模板数据 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>&lt;%-title%&gt;<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span> <br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><p>在 <code>Controller</code> 内把变量注入到 <code>index.html</code> 文件，模板通过 <code>&lt;%-xx%&gt;</code>关键字获取到传入的变量。</p><h4 id="4、修改-controller-home-js-下的-index-方法"><a href="#4、修改-controller-home-js-下的-index-方法" class="headerlink" title="4、修改 controller/home.js 下的 index 方法"></a>4、修改 <code>controller/home.js</code> 下的 <code>index</code> 方法</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">async</span> <span class="hljs-function"><span class="hljs-title">index</span>(<span class="hljs-params"></span>)</span> &#123;<br>  <span class="hljs-keyword">const</span> &#123; ctx &#125; = <span class="hljs-built_in">this</span>;<br>  <span class="hljs-comment">// ctx.render 默认会去 view 文件夹寻找 index.html，这是 Egg 约定好的。</span><br>  <span class="hljs-keyword">await</span> ctx.render(<span class="hljs-string">&#x27;index.html&#x27;</span>, &#123;<br>    <span class="hljs-attr">title</span>: <span class="hljs-string">&#x27;于齐&#x27;</span>, <span class="hljs-comment">// 将 title 传入 index.html</span><br>  &#125;);<br>&#125;<br></code></pre></td></tr></table></figure><p>浏览器打开：localhost:7001  就会显示：于齐</p><p>上述开发模式便是前后端不分离的模式，在页面不复杂的情况下，整个项目不采用如 <code>React</code> 、<code>Vue</code> 这些前端框架，也是可以的。在上述代码 <code>ctx.render</code> 之前，我们可以从数据库获取想要的信息，作为参数塞入模板中，模板拿到数据，构建 <code>HTML</code>。如果是提交事件，可以通过原生 <code>ajax</code> 或者是引入一把梭专家 <code>jQuery</code>，提交数据。</p>]]></content>
      
      
      
        <tags>
            
            <tag> egg </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>80、使用 element-plus 版本升级后的问题清单</title>
      <link href="/2022/08/01/80-element-plus/"/>
      <url>/2022/08/01/80-element-plus/</url>
      
        <content type="html"><![CDATA[<p>element-plus 版本升级由@1.1.0-beta.15 升级到@2.0.4 版本时，在开发时遇到的问题整理及解决方法</p><span id="more"></span><h2 id="一、错误：-Can-39-t-reexport-the-named-export-39-xxx-39-from-non-EcmaScript-module-only-default-export-is-available-处理"><a href="#一、错误：-Can-39-t-reexport-the-named-export-39-xxx-39-from-non-EcmaScript-module-only-default-export-is-available-处理" class="headerlink" title="一、错误： Can&#39;t reexport the named export &#39;xxx&#39; from non EcmaScript module (only default export is available) 处理"></a>一、错误： <code>Can&#39;t reexport the named export &#39;xxx&#39; from non EcmaScript module (only default export is available)</code> 处理</h2><p>这个问题是 element plus 版本升级后，再运行项目，element plus 对 webpack 的一个编译处理。</p><p>解决方式：</p><p>在 vue.config.js 的 chainWebpack 下增加一个规则：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-function"><span class="hljs-title">chainWebpack</span>(<span class="hljs-params">config</span>)</span>&#123;<br>  config.module<br>  .rule(<span class="hljs-string">&quot;element-plus-2&quot;</span>)<br>  .test(<span class="hljs-regexp">/\.mjs$/</span>)<br>  <span class="hljs-comment">// https://webpack.docschina.org/configuration/module/#ruletype</span><br>  .type(<span class="hljs-string">&quot;javascript/auto&quot;</span>)<br>  .include.add(<span class="hljs-regexp">/node_modules/</span>)<br>  .end();<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="二、样式错误问题：input的白-蓝边、图片的灰色底"><a href="#二、样式错误问题：input的白-蓝边、图片的灰色底" class="headerlink" title="二、样式错误问题：input的白/蓝边、图片的灰色底"></a>二、样式错误问题：input的白/蓝边、图片的灰色底</h2><p>在做用户登录发现的el-input 存在的2个样式问题</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs css">// 处理 <span class="hljs-selector-tag">input</span> 的白/蓝边<br><span class="hljs-selector-class">.el-input__inner</span> &#123;<br>  <span class="hljs-attribute">box-shadow</span>: none <span class="hljs-meta">!important</span>;<br>  --el-select-<span class="hljs-selector-tag">input</span>-focus-<span class="hljs-attribute">border-color</span>: none <span class="hljs-meta">!important</span>;<br>&#125;<br><br>// 处理图片的灰色底<br><span class="hljs-selector-class">.el-avatar</span> &#123;<br>  --el-avatar-bg-<span class="hljs-attribute">color</span>: none <span class="hljs-meta">!important</span>;<br>&#125;<br><br></code></pre></td></tr></table></figure><h2 id="三、tbody路径的变更"><a href="#三、tbody路径的变更" class="headerlink" title="三、tbody路径的变更"></a>三、tbody路径的变更</h2><p>1.x版本的element plus获取el元素的方式为：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> el = tableRef.value.$el.querySelectorAll(<span class="hljs-string">&#x27;.el-table__body-wrapper &gt; table &gt; tbody&#x27;</span>)[<span class="hljs-number">0</span>]<br></code></pre></td></tr></table></figure><p>2.x版本的element plus获取el元素的方式为</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> el = tableRef.value.$el.querySelectorAll(<span class="hljs-string">&#x27;.el-table__body &gt; tbody&#x27;</span>)[<span class="hljs-number">0</span>]<br></code></pre></td></tr></table></figure><h2 id="四、中台项目侧边栏收起图标不显示问题"><a href="#四、中台项目侧边栏收起图标不显示问题" class="headerlink" title="四、中台项目侧边栏收起图标不显示问题"></a>四、中台项目侧边栏收起图标不显示问题</h2><p>查看控制台发现，#app .sidebar-container .svg-icon{margin-left:16px} 这个样式存在问题</p><p>解决方式：在侧边栏menu收起时，取消margin-left</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-class">.el-menu--collapse</span>&#123;<br>  <span class="hljs-selector-class">.svg-icon</span>&#123;<br>    <span class="hljs-attribute">margin-right</span>:<span class="hljs-number">0px</span>;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> vue3 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>79、ref-reactive</title>
      <link href="/2022/07/31/79-ref-reactive/"/>
      <url>/2022/07/31/79-ref-reactive/</url>
      
        <content type="html"><![CDATA[<p>ref/reactive 都能创建一个响应对象，这二者的区别是什么呢？</p><span id="more"></span><h2 id="一、reactive"><a href="#一、reactive" class="headerlink" title="一、reactive"></a>一、reactive</h2><blockquote><p>reactive 都能创建一个响应对象或数组</p></blockquote><p>1、reactive 用来创建引用类型的响应式数据</p><p>2、reactive 的本质是将每一层的数据都解析成 proxy 对象</p><p>3、reactive 的响应式默认都是递归的，改变某一层的值都会递归的调用一遍，重新渲染 dom</p><p>4、直接解构，响应性会丢失，需要用 toRefs 包裹。引用类型直接改变引用地址也会导致响应式丢失</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">tempalte</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>&#123;&#123; state.count &#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">tempalte</span>&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// script 这里加了setup  没写setup需要在setup()&#123;&#125;内部定义 并返回（return）</span><br>&lt;script setup&gt;<br><span class="hljs-keyword">import</span> &#123; reactive &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;vue&quot;</span><br><span class="hljs-keyword">const</span> state = reactive(&#123;<span class="hljs-attr">count</span>:<span class="hljs-number">0</span>&#125;)<br>&lt;/script&gt;<br><br></code></pre></td></tr></table></figure><h2 id="二、ref"><a href="#二、ref" class="headerlink" title="二、ref"></a>二、ref</h2><blockquote><p>vue3 提供了一个 ref()方法允许我们创建使用任何值类型的响应式 ref</p></blockquote><p>1、ref 用来创建基础类型的响应式数据</p><p>2、template 中默认调用 value 显示数据，script 中需要使用.value 调用</p><p>3、和 react ref 差不多，react 是.current 获取值，vue3 是.value</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">import</span> &#123; ref &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;vue&quot;</span>;<br><span class="hljs-keyword">const</span> count = ref(<span class="hljs-number">0</span>);<br><span class="hljs-built_in">console</span>.log(count); <span class="hljs-comment">// &#123; value:0 &#125;</span><br>count.value++;<br><span class="hljs-built_in">console</span>.log(count.value); <span class="hljs-comment">// 2</span><br></code></pre></td></tr></table></figure><p>相关 API</p><p>1、Ref ts 定义 import { type Ref } from ‘vue’;</p><p>2、isRef 判断是否为 ref 对象。一般是 ref，toRef，toRefs 创建的变量</p><p>3、toRefs 将 reactive 对象解构为单个响应式对象</p><p>4、shallowRef 创建一个跟踪自身  .value  变化的 ref，但不会使其值也变成响应式的，简单理解为创建一个和 ref 相同结构的非响应式变量</p><p>5、triggerRef 强制更新页面 DOM。即使创建的 ref 没有变，想更新 dom 可以用</p><p>6、customRef 提供类似于 computed 的 get 和 set，可自定义 ref 行为</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">template</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">HelloWorld</span> <span class="hljs-attr">msg</span>=<span class="hljs-string">&quot;Hello Vue 3.0 + Vite&quot;</span> @<span class="hljs-attr">some-event</span>=<span class="hljs-string">&quot;callback&quot;</span> /&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>父组件监听事件：&#123;&#123; counts &#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>v-model<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">custom-input</span></span><br><span class="hljs-tag">    <span class="hljs-attr">:modelValue</span>=<span class="hljs-string">&quot;searchText&quot;</span></span><br><span class="hljs-tag">    @<span class="hljs-attr">update:modelValue</span>=<span class="hljs-string">&quot;newValue =&gt; searchText = newValue&quot;</span></span><br><span class="hljs-tag">  /&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">Child</span> /&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">h2</span>&gt;</span><br>    reactive方法用来创建响应式对象，它接收一个对象/数组参数，返回对象的响应式副本，当该对象的属性值发生变化，会自动更新使用该对象的地方。<br>  <span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span><br>    Object:&#123;&#123; reactiveObj.name &#125;&#125;<br>    <span class="hljs-tag">&lt;<span class="hljs-name">span</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">&quot;setReactiveObj&quot;</span>&gt;</span>Update<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span><br>    Array:&#123;&#123; reactiveArr &#125;&#125;<br>    <span class="hljs-tag">&lt;<span class="hljs-name">span</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">&quot;setReactiveArr&quot;</span>&gt;</span>Update<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">h2</span>&gt;</span><br>    ref 的作用就是将一个原始数据类型（primitive data<br>    type）转换成一个带有响应式特性的数据类型，原始数据类型共有7个，分别是：String/<br>    Number /BigInt /Boolean /Symbol /Null /Undefined。 ref的值在 JS/TS<br>    中读取和修改时，需要使用 .value获取，在模版中读取是，不需要使用 .value。<br>  <span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span><br>    String:&#123;&#123;refValue&#125;&#125;<br>    <span class="hljs-tag">&lt;<span class="hljs-name">button</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">&quot;setRefValue&quot;</span>&gt;</span>Update<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span><br>    Object:&#123;&#123; refObj.name &#125;&#125;<br>    <span class="hljs-tag">&lt;<span class="hljs-name">button</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">&quot;setRefObj&quot;</span>&gt;</span>Update<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">h2</span>&gt;</span>vue3 reactive deep Obj/array<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span><br>    Deep Object:&#123;&#123; reactiveDeepObj &#125;&#125;<br>    <span class="hljs-tag">&lt;<span class="hljs-name">button</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">&quot;setReactiveDeepObj&quot;</span>&gt;</span>Update<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span><br>    Deep Object Array: &#123;&#123; reactiveDeepArr &#125;&#125;<br>    <span class="hljs-tag">&lt;<span class="hljs-name">button</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">&quot;setReactiveDeepArr&quot;</span>&gt;</span>update<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><code class="hljs js">&lt;script setup&gt;<br><span class="hljs-keyword">import</span> HelloWorld <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./components/HelloWorld.vue&#x27;</span><br><span class="hljs-keyword">import</span> CustomInput <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;./components/CustomInput.vue&quot;</span><br><span class="hljs-keyword">import</span> Child <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;./components/Child.vue&quot;</span><br><br><span class="hljs-keyword">import</span> &#123; ref, reactive, nextTick, provide &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;vue&quot;</span><br><span class="hljs-keyword">let</span> counts = ref(<span class="hljs-number">10</span>)<br><br><span class="hljs-keyword">const</span> callback = <span class="hljs-function">() =&gt;</span> &#123;<br>  nextTick(<span class="hljs-function">() =&gt;</span> &#123;<br>    counts.value = <span class="hljs-number">14</span><br>  &#125;)<br>&#125;<br><br><span class="hljs-keyword">const</span> provideMsg = ref(<span class="hljs-string">&quot;provide message&quot;</span>)<br>provide(<span class="hljs-string">&quot;provideMsg&quot;</span>, provideMsg)<br><br><br><span class="hljs-comment">// reactive</span><br><span class="hljs-keyword">let</span> reactiveObj = reactive(&#123; <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;jude&#x27;</span> &#125;)<br><br><span class="hljs-keyword">let</span> setReactiveObj = <span class="hljs-function">() =&gt;</span> &#123;<br>  reactiveObj.name = <span class="hljs-string">&#x27;hello,jude&#x27;</span><br>&#125;<br><br><span class="hljs-keyword">let</span> reactiveArr = reactive([<span class="hljs-string">&#x27;a&#x27;</span>, <span class="hljs-string">&#x27;b&#x27;</span>, <span class="hljs-string">&#x27;c&#x27;</span>, <span class="hljs-string">&#x27;d&#x27;</span>])<br><span class="hljs-keyword">let</span> setReactiveArr = <span class="hljs-function">() =&gt;</span> &#123;<br>  reactiveArr[<span class="hljs-number">1</span>] = <span class="hljs-string">&#x27;hello,jude!&#x27;</span><br>&#125;<br><br><span class="hljs-comment">// Ref</span><br><span class="hljs-keyword">let</span> refValue = ref(<span class="hljs-string">&#x27;jude 1992&#x27;</span>)<br><span class="hljs-keyword">let</span> setRefValue = <span class="hljs-function">() =&gt;</span> &#123;<br>  refValue.value = <span class="hljs-string">&#x27;hello jude 1992&#x27;</span><br>&#125;<br><br><span class="hljs-keyword">let</span> refObj = ref(&#123; <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;jude 1992&#x27;</span> &#125;)<br><span class="hljs-keyword">let</span> setRefObj = <span class="hljs-function">() =&gt;</span> &#123;<br>  refObj.value.name = <span class="hljs-string">&#x27;hello jude 1992&#x27;</span><br>&#125;<br><br><span class="hljs-comment">// reactive可以用在深层对象或者数组</span><br><span class="hljs-keyword">let</span> reactiveDeepObj = reactive(<br>  &#123;<br>    <span class="hljs-attr">user</span>: &#123;<br>      <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;jude 1992&#x27;</span><br>    &#125;<br>  &#125;<br>)<br><span class="hljs-keyword">let</span> setReactiveDeepObj = <span class="hljs-function">() =&gt;</span> &#123;<br>  reactiveDeepObj.user.name = <span class="hljs-string">&#x27;hello  jude 1992&#x27;</span><br>&#125;<br><br><span class="hljs-keyword">let</span> reactiveDeepArr = reactive(<br>  [<span class="hljs-string">&#x27;a&#x27;</span>, [<span class="hljs-string">&#x27;a1&#x27;</span>, <span class="hljs-string">&#x27;a2&#x27;</span>, <span class="hljs-string">&#x27;a3&#x27;</span>], <span class="hljs-string">&#x27;c&#x27;</span>, <span class="hljs-string">&#x27;d&#x27;</span>]<br>)<br><span class="hljs-keyword">let</span> setReactiveDeepArr = <span class="hljs-function">() =&gt;</span> &#123;<br>  reactiveDeepArr[<span class="hljs-number">1</span>][<span class="hljs-number">1</span>] = <span class="hljs-string">&quot;hello jude 1992&quot;</span><br>&#125;<br><br><span class="hljs-comment">// reactive 返回值和源对象不相等</span><br><span class="hljs-keyword">let</span> reactivSource = &#123; <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;jude 1992&#x27;</span> &#125;<br><span class="hljs-keyword">let</span> reactiveData = reactive(reactivSource)<br><span class="hljs-built_in">console</span>.log(reactivSource === reactiveData) <span class="hljs-comment">// false</span><br><span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;reactivSource&#x27;</span>, reactivSource);<br><span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;reactiveData&#x27;</span>, reactiveData);<br><br><br><span class="hljs-comment">// ts写法</span><br><span class="hljs-comment">// let refObjValue = ref &lt; string &gt; (&#x27;jude 1992&#x27;)</span><br><span class="hljs-comment">// let reactiveObjValue = reactive &lt; &#123; name: string &#125; &gt; (&#123; name: &#x27;jude 1992&#x27; &#125;)</span><br>&lt;/script&gt;<br><br></code></pre></td></tr></table></figure><h2 id="三、总结"><a href="#三、总结" class="headerlink" title="三、总结"></a>三、总结</h2><blockquote><p>1.reactive 一般用于对象/数组类型的数据，都不需要使用 .value；<br>2.ref 一般用于基础数据类型的数据，在 JS 中读取和修改时，需要使用 .value，在模版中使用时则不需要；<br>3.reactive 可以修改深层属性值，并保持响应；<br>4.reactive 返回值和源对象不同；<br>5.reactive 的属性值可以是 ref 值；<br>6.ref 本质也是 reactive，ref(obj)等价于 reactive({value: obj})。</p></blockquote><blockquote><p>ref 接收内部值（inner value）返回响应式 Ref 对象，reactive 返回响应式代理对象;从定义上看 ref 通常用于处理单值的响应式，reactive 用于处理对象类型的数据响应式;两者均是用于构造响应式数据，但是 ref 主要解决原始值的响应式问题;ref 返回的响应式数据在 JS 中使用需要加上.value 才能访问其值，在视图中使用会自动脱 ref，不需要.value；ref 可以接收对象或数组等非原始值，但内部依然是 reactive 实现响应式；reactive 内部如果接收 Ref 对象会自动脱 ref；使用展开运算符(…)展开 reactive 返回的响应式对象会使其失去响应性，可以结合 toRefs()将值转换为 Ref 对象之后再展开;reactive 内部使用 Proxy 代理传入对象并拦截该对象各种操作（trap），从而实现响应式。ref 内部封装一个 RefImpl 类，并设置 get value/set value，拦截用户对值的访问，从而实现响应式。</p></blockquote>]]></content>
      
      
      
        <tags>
            
            <tag> js </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>78、js-cheat-sheet</title>
      <link href="/2022/07/30/78-js-cheat/"/>
      <url>/2022/07/30/78-js-cheat/</url>
      
        <content type="html"><![CDATA[<p>上传到图床上的4张图:JavaScript-Cheet-Sheet</p><span id="more"></span><h3 id="1、图1"><a href="#1、图1" class="headerlink" title="1、图1"></a>1、图1</h3><blockquote><p>-document/element/node/attr()/event()/EventTarget/clientRect()</p></blockquote><p><img src="https://cdn.staticaly.com/gh/HeyJudeYQ/Image-Host@master/20220919/JS-Cheat-Sheet_4.7j1b1pmevio0.webp" alt="JavaScript wiki1" title="js"></p><h3 id="2、图2"><a href="#2、图2" class="headerlink" title="2、图2"></a>2、图2</h3><blockquote><p>-window/screen/console/preformance/navigator/location/history</p></blockquote><p><img src="https://cdn.staticaly.com/gh/HeyJudeYQ/Image-Host@master/20220919/JS-Cheat-Sheet_3.5xvltiz2kh40.webp" alt="JavaScript wiki2"></p><h3 id="3、图3"><a href="#3、图3" class="headerlink" title="3、图3"></a>3、图3</h3><blockquote><p>-Math/Object/Set/Map/Promise/Generator/Proxy/Symbol/BigInt/Modules/json/</p></blockquote><p><img src="https://cdn.staticaly.com/gh/HeyJudeYQ/Image-Host@master/20220919/JS-Cheat-Sheet_2.lhqvhvi6fsg.webp" alt="JavaScript wiki3"></p><h3 id="4、图4"><a href="#4、图4" class="headerlink" title="4、图4"></a>4、图4</h3><blockquote><p>-number/string/array/date/function/Reg</p></blockquote><p><img src="https://cdn.staticaly.com/gh/HeyJudeYQ/Image-Host@master/20220919/JS-Cheat-Sheet_1.21ramjzckheo.webp" alt="JavaScript wiki4"></p>]]></content>
      
      
      
        <tags>
            
            <tag> js </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>77、使用element-ui开发问题清单</title>
      <link href="/2022/07/30/77-element-ui/"/>
      <url>/2022/07/30/77-element-ui/</url>
      
        <content type="html"><![CDATA[<p>整理使用 element-ui 开发时遇到的问题（包含“摘抄”其他开发人员开发遇到的问题 😁）</p><span id="more"></span><h2 id="1、去除-el-input-组件-type-”number”输入框聚焦时的上下箭头"><a href="#1、去除-el-input-组件-type-”number”输入框聚焦时的上下箭头" class="headerlink" title="1、去除 el-input 组件 type=”number”输入框聚焦时的上下箭头"></a>1、去除 el-input 组件 type=”number”输入框聚焦时的上下箭头</h2><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-comment">/* 设置全局 */</span><br><span class="hljs-selector-class">.clear-number-input</span><span class="hljs-selector-class">.el-input</span>::-webkit-outer-spin-button,<br>.clear-number-input.el-input::-webkit-inner-spin-button &#123;<br>  margin: <span class="hljs-number">0</span>;<br>  -webkit-appearance: none <span class="hljs-meta">!important</span>;<br>&#125;<br><span class="hljs-selector-class">.clear-number-input</span><span class="hljs-selector-class">.el-input</span> <span class="hljs-selector-tag">input</span><span class="hljs-selector-attr">[type=<span class="hljs-string">&quot;number&quot;</span>]</span>::-webkit-outer-spin-button,<br>.clear-number-input.el-input input[type=<span class="hljs-string">&quot;number&quot;</span>]::-webkit-inner-spin-button &#123;<br>  margin: <span class="hljs-number">0</span>;<br>  -webkit-appearance: none <span class="hljs-meta">!important</span>;<br>&#125;<br><span class="hljs-selector-class">.clear-number-input</span><span class="hljs-selector-class">.el-input</span> &#123;<br>  -moz-appearance: textfield;<br>&#125;<br><span class="hljs-selector-class">.clear-number-input</span><span class="hljs-selector-class">.el-input</span> <span class="hljs-selector-tag">input</span><span class="hljs-selector-attr">[type=<span class="hljs-string">&quot;number&quot;</span>]</span> &#123;<br>  -moz-appearance: textfield;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="2、el-input-输入框正则限制，绑定值未更新"><a href="#2、el-input-输入框正则限制，绑定值未更新" class="headerlink" title="2、el-input 输入框正则限制，绑定值未更新"></a>2、el-input 输入框正则限制，绑定值未更新</h2><p>输入框仅支持数字</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">el-input</span></span><br><span class="hljs-tag">  <span class="hljs-attr">v-model</span>=<span class="hljs-string">&quot;form.num&quot;</span></span><br><span class="hljs-tag">  <span class="hljs-attr">placeholder</span>=<span class="hljs-string">&quot;请输入数字&quot;</span></span><br><span class="hljs-tag">  @<span class="hljs-attr">keyup.native</span>=<span class="hljs-string">&quot;form.num=form.num.replace(/[^\d.]/g,&#x27;&#x27;)&quot;</span></span><br><span class="hljs-tag">&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">el-input</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="3、el-form-回车刷新页面（触发了表单默认的提交行为）"><a href="#3、el-form-回车刷新页面（触发了表单默认的提交行为）" class="headerlink" title="3、el-form 回车刷新页面（触发了表单默认的提交行为）"></a>3、el-form 回车刷新页面（触发了表单默认的提交行为）</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">el-form</span> <span class="hljs-attr">inline</span> @<span class="hljs-attr">submit.native.prevent</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">el-form-item</span> <span class="hljs-attr">label</span>=<span class="hljs-string">&quot;订单号&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">el-input</span></span><br><span class="hljs-tag">      <span class="hljs-attr">v-model</span>=<span class="hljs-string">&quot;query.orderNo&quot;</span></span><br><span class="hljs-tag">      <span class="hljs-attr">:placeholder</span>=<span class="hljs-string">&quot;输入订单号查询&quot;</span></span><br><span class="hljs-tag">      <span class="hljs-attr">clearable</span></span><br><span class="hljs-tag">      @<span class="hljs-attr">keyup.enter.native</span>=<span class="hljs-string">&quot;enterInput&quot;</span></span><br><span class="hljs-tag">    /&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">el-form-item</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">el-form</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="4、el-table固定列最后一行显示不完全、表头与内容错位"><a href="#4、el-table固定列最后一行显示不完全、表头与内容错位" class="headerlink" title="4、el-table固定列最后一行显示不完全、表头与内容错位"></a>4、el-table固定列最后一行显示不完全、表头与内容错位</h2><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-class">.el-table__fixed-right</span> &#123;<br>  <span class="hljs-attribute">height</span>:<span class="hljs-number">100%</span> <span class="hljs-meta">!important</span>;<br>&#125;<br><br>// 全局设置 表头内容错位<br><span class="hljs-selector-class">.el-table--scrollable-y</span> <span class="hljs-selector-class">.el-table__body-wrapper</span> &#123;<br> <span class="hljs-attribute">overflow-y</span>: overlay <span class="hljs-meta">!important</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="5、表单校验只其中一个字段"><a href="#5、表单校验只其中一个字段" class="headerlink" title="5、表单校验只其中一个字段"></a>5、表单校验只其中一个字段</h2><p>仅校验手机号码（如果需要多个参数，将参数改为数组形式即可。）</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-built_in">this</span>.$refs[<span class="hljs-string">&#x27;form&#x27;</span>].validateField(<span class="hljs-string">&#x27;mobile&#x27;</span>, <span class="hljs-function"><span class="hljs-params">valid</span> =&gt;</span> &#123;<br>  <span class="hljs-keyword">if</span> (valid) &#123;<br>    <span class="hljs-comment">// do something</span><br>  &#125;<br>&#125;)<br></code></pre></td></tr></table></figure><h2 id="6、el-table跨分页多选"><a href="#6、el-table跨分页多选" class="headerlink" title="6、el-table跨分页多选"></a>6、el-table跨分页多选</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">el-table</span> <span class="hljs-attr">row-key</span>=<span class="hljs-string">&quot;id&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">el-table-column</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;selection&quot;</span> <span class="hljs-attr">reserve-selection</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">el-table-column</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">el-table</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="7、el-table内嵌el-input-focus失效"><a href="#7、el-table内嵌el-input-focus失效" class="headerlink" title="7、el-table内嵌el-input focus失效"></a>7、el-table内嵌el-input focus失效</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">el-table</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">el-table-column</span> <span class="hljs-attr">label</span>=<span class="hljs-string">&quot;名称&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">template</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">el-input</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&quot;inputRef&quot;</span> /&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">el-table-column</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">el-table</span>&gt;</span><br><br>// 无效<br>this.$refs[&#x27;inputRef&#x27;].focus()<br>this.$refs[&#x27;inputRef&#x27;][0].focus()<br>this.$refs[&#x27;inputRef&#x27;].$el.children[0].focus()<br><br>// 有效<br><span class="hljs-tag">&lt;<span class="hljs-name">el-input</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;inputRef&quot;</span> /&gt;</span><br>document.getElementById(&#x27;inputRef&#x27;).focus()<br></code></pre></td></tr></table></figure><h2 id="8、el-dialog-的-destroy-on-close-属性设置无效"><a href="#8、el-dialog-的-destroy-on-close-属性设置无效" class="headerlink" title="8、el-dialog 的 destroy-on-close 属性设置无效"></a>8、el-dialog 的 destroy-on-close 属性设置无效</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">el-dialog</span> <span class="hljs-attr">:visible.sync</span>=<span class="hljs-string">&quot;visible&quot;</span> <span class="hljs-attr">v-if</span>=<span class="hljs-string">&quot;visible&quot;</span> <span class="hljs-attr">destroy-on-close</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">el-dialog</span>&gt;</span><br></code></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> vue2 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>76、vue3状态管理pinia及使用pinia解构不生效解决方法</title>
      <link href="/2022/07/29/76-pinia/"/>
      <url>/2022/07/29/76-pinia/</url>
      
        <content type="html"><![CDATA[<p>使用 pinia 时，解构 store 里的 helloWorld 和 count 时，没有发生响应式数据变化的情况。这是因为在使用 store 的过程中，如果直接进行进行解构的话，会破坏数据的响应，因此可以通过使用 storeToRefs 来解构。</p><span id="more"></span><h2 id="一、pinia-的使用时的问题复现"><a href="#一、pinia-的使用时的问题复现" class="headerlink" title="一、pinia 的使用时的问题复现"></a>一、pinia 的使用时的问题复现</h2><h3 id="1、stores-counter-js"><a href="#1、stores-counter-js" class="headerlink" title="1、stores:counter.js"></a>1、stores:counter.js</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">import</span> &#123; defineStore &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;pinia&quot;</span>;<br><span class="hljs-comment">// defineStore() 第一个参数：相当于为容器取一个名字 第二个参数为配置对象</span><br><span class="hljs-comment">// state:存储全局状态  getters:监视、计算状态的变化，具有缓存功能</span><br><span class="hljs-comment">// actions：对state里数据变化进行逻辑处理   （修改state全局状态数据）</span><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">const</span> mainStore = defineStore(<span class="hljs-string">&quot;main&quot;</span>, &#123;<br>  <span class="hljs-attr">state</span>: <span class="hljs-function">() =&gt;</span> &#123;<br>    <span class="hljs-keyword">return</span> &#123;<br>      <span class="hljs-attr">helloWorld</span>: <span class="hljs-string">&quot;hello world !!!&quot;</span>,<br>      <span class="hljs-attr">count</span>: <span class="hljs-number">0</span>,<br>    &#125;;<br>  &#125;,<br>  <span class="hljs-attr">getters</span>: &#123;&#125;,<br>  <span class="hljs-attr">actions</span>: &#123;&#125;,<br>&#125;);<br></code></pre></td></tr></table></figure><h3 id="2、组件：Test-vue"><a href="#2、组件：Test-vue" class="headerlink" title="2、组件：Test.vue"></a>2、组件：Test.vue</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">template</span>&gt;</span><br>  <span class="hljs-comment">&lt;!-- 非解构 --&gt;</span><br>  <span class="hljs-comment">&lt;!-- &lt;div&gt;&#123;&#123; store.helloWorld&#125;&#125;&#123;&#123;store.count&#125;&#125;&lt;/div&gt; --&gt;</span><br>  <span class="hljs-comment">&lt;!-- 解构 --&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>&#123;&#123; helloWorld &#125;&#125;&#123;&#123; count &#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span><br></code></pre></td></tr></table></figure><p>如果不使用storeToRefs，点击按钮不会生效。<br>storeToRefs的源码中，会先进行vue版本的判断，如果是Vue2版本，会直接返回toRefs(store),非Vue2环境，遍历对象的键值，会过滤掉store中的非ref/reactive对象，对于符合ref和reactive类型的值，将其复制到一个新的对象中refs中，最后返回refs</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs js">&lt;script setup&gt;<br>  <span class="hljs-keyword">import</span> &#123;storeToRefs&#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;pinia&quot;</span><br>  <span class="hljs-keyword">import</span> &#123;mainStore&#125; <span class="hljs-keyword">from</span><span class="hljs-string">&#x27;../stores/counter&#x27;</span><br>  <span class="hljs-keyword">const</span> store = mainStore() <br>  <span class="hljs-keyword">const</span> &#123;(helloWorld, count)&#125; = storeToRefs(store)<br>&lt;/script&gt;<br></code></pre></td></tr></table></figure><h3 id="3、组件：AddButton-vue"><a href="#3、组件：AddButton-vue" class="headerlink" title="3、组件：AddButton.vue"></a>3、组件：AddButton.vue</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">template</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">button</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">&quot;handleClick&quot;</span>&gt;</span>Add<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs js">&lt;script setup&gt;<br>  <span class="hljs-keyword">import</span> &#123;mainStore&#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;../stores/counter&#x27;</span><br>  <span class="hljs-keyword">const</span> store = mainStore()<br>  <span class="hljs-keyword">const</span> handleClick = <span class="hljs-function">() =&gt;</span> &#123;store.count++&#125;<br>&lt;/script&gt;<br></code></pre></td></tr></table></figure><h3 id="4、App-vue"><a href="#4、App-vue" class="headerlink" title="4、App.vue"></a>4、App.vue</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">template</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">header</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">img</span></span><br><span class="hljs-tag">      <span class="hljs-attr">alt</span>=<span class="hljs-string">&quot;Vue logo&quot;</span></span><br><span class="hljs-tag">      <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;logo&quot;</span></span><br><span class="hljs-tag">      <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;@/assets/logo.svg&quot;</span></span><br><span class="hljs-tag">      <span class="hljs-attr">width</span>=<span class="hljs-string">&quot;125&quot;</span></span><br><span class="hljs-tag">      <span class="hljs-attr">height</span>=<span class="hljs-string">&quot;125&quot;</span></span><br><span class="hljs-tag">    /&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;wrapper&quot;</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">Test</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">Test</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">add-button</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">add-button</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">header</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">RouterView</span> /&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs js">&lt;script setup&gt;<br>  <span class="hljs-keyword">import</span> &#123;(RouterLink, RouterView)&#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;vue-router&#x27;</span><br>  <span class="hljs-keyword">import</span> Test <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./components/Test.vue&#x27;</span><br>  <span class="hljs-keyword">import</span> AddButton <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;./components/AddButton.vue&quot;</span><br>&lt;/script&gt;<br></code></pre></td></tr></table></figure><h2 id="二、pinia如何修改状态数据"><a href="#二、pinia如何修改状态数据" class="headerlink" title="二、pinia如何修改状态数据"></a>二、pinia如何修改状态数据</h2><h3 id="1、-patch修改单个或者多个数据"><a href="#1、-patch修改单个或者多个数据" class="headerlink" title="1、$patch修改单个或者多个数据"></a>1、$patch修改单个或者多个数据</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">button</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">&quot;handleClickPatch&quot;</span>&gt;</span>Add handleClickPatch<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs js">&lt;script setup&gt;<br><span class="hljs-keyword">import</span> &#123; mainStore &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;../stores/counter&#x27;</span>;<br><span class="hljs-keyword">const</span> store = mainStore()<br><span class="hljs-keyword">const</span> handleClick = <span class="hljs-function">() =&gt;</span> &#123;<br>  store.count++;<br>  <span class="hljs-comment">// store.helloWorld = store.helloWorld === &#x27;yq&#x27; ? &#x27;helloworld&#x27; : &#x27;yq&#x27;</span><br>&#125;<br><span class="hljs-comment">// 1、修改状态数据 $patch  可同时修改多个数据的状态  参数为一个对象</span><br><span class="hljs-keyword">const</span> handleClickPatch = <span class="hljs-function">() =&gt;</span> &#123;<br>  store.$patch(&#123;<br>    <span class="hljs-attr">count</span>:store.count + <span class="hljs-number">2</span>,<br>    <span class="hljs-attr">helloWorld</span>:store.helloWorld === <span class="hljs-string">&#x27;yq&#x27;</span> ? <span class="hljs-string">&#x27;HelloWorld&#x27;</span> : <span class="hljs-string">&#x27;yq&#x27;</span><br>  &#125;)<br>&#125;<br>&lt;/script&gt;<br><br></code></pre></td></tr></table></figure><h3 id="2、-patch加函数形式修改状态数据"><a href="#2、-patch加函数形式修改状态数据" class="headerlink" title="2、$patch加函数形式修改状态数据"></a>2、$patch加函数形式修改状态数据</h3><blockquote><blockquote><p>适合修改复杂数据，例如数组、对象</p></blockquote></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">button</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">&quot;handleClickMethod&quot;</span>&gt;</span>Add handleClickMethod<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><br></code></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs js">&lt;script setup&gt;<br><span class="hljs-keyword">import</span> &#123; mainStore &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;../stores/counter&#x27;</span>;<br><span class="hljs-keyword">const</span> store = mainStore()<br><span class="hljs-keyword">const</span> handleClick = <span class="hljs-function">() =&gt;</span> &#123;<br>  store.count++;<br>  <span class="hljs-comment">// store.helloWorld = store.helloWorld === &#x27;yq&#x27; ? &#x27;helloworld&#x27; : &#x27;yq&#x27;</span><br>&#125;<br><span class="hljs-comment">// 1、修改状态数据 $patch  可同时修改多个数据的状态  参数为一个对象</span><br><span class="hljs-keyword">const</span> handleClickPatch = <span class="hljs-function">() =&gt;</span> &#123;<br>  store.$patch(&#123;<br>    <span class="hljs-attr">count</span>:store.count + <span class="hljs-number">2</span>,<br>    <span class="hljs-attr">helloWorld</span>:store.helloWorld === <span class="hljs-string">&#x27;yq&#x27;</span> ? <span class="hljs-string">&#x27;HelloWorld&#x27;</span> : <span class="hljs-string">&#x27;yq&#x27;</span><br>  &#125;)<br>&#125;<br><br><span class="hljs-comment">// 2、传递函数  适合复杂数据的修改，比如数组、对象的修改</span><br><span class="hljs-keyword">const</span> handleClickMethod = <span class="hljs-function">() =&gt;</span>&#123;<br>  store.$patch(<span class="hljs-function">(<span class="hljs-params">state</span>) =&gt;</span> &#123;<br>    state.count++;<br>    state.helloWorld = state.helloWorld === <span class="hljs-string">&#x27;yq&#x27;</span> ? <span class="hljs-string">&#x27;helloworld&#x27;</span> :<span class="hljs-string">&#x27;yq&#x27;</span><br>  &#125;)<br>&#125;<br>&lt;/script&gt;<br></code></pre></td></tr></table></figure><h3 id="3、actions"><a href="#3、actions" class="headerlink" title="3、actions"></a>3、actions</h3><blockquote><p>在使用actions的时候，不能使用箭头函数，因为箭头函数绑定的是外部的this</p></blockquote><p>stores ：counter.js</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">export</span> <span class="hljs-keyword">const</span> mainStore = defineStore(<span class="hljs-string">&#x27;main&#x27;</span>, &#123;<br>  <span class="hljs-attr">state</span>:<span class="hljs-function">()=&gt;</span>&#123;<br>    <span class="hljs-keyword">return</span> &#123;<br>      <span class="hljs-attr">helloWorld</span>:<span class="hljs-string">&#x27;hello world !!!&#x27;</span>,<br>      <span class="hljs-attr">count</span>:<span class="hljs-number">0</span><br>    &#125;<br>  &#125;,<br>  <span class="hljs-attr">getters</span>:&#123;<br><br>  &#125;,<br>  <span class="hljs-attr">actions</span>:&#123;<br>    <span class="hljs-function"><span class="hljs-title">changeState</span>(<span class="hljs-params"></span>)</span>&#123;<br>      <span class="hljs-built_in">this</span>.count++<br>      <span class="hljs-built_in">this</span>.helloWorld = <span class="hljs-string">&#x27;yq&#x27;</span><br>    &#125;<br>  &#125;<br>&#125;)<br></code></pre></td></tr></table></figure><p>组件:AddButton.vue</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">button</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">&quot;handleClickAction&quot;</span>&gt;</span> Add handleClickAction<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> handleClickAction = <span class="hljs-function">() =&gt;</span>&#123;<br>  store.changeState()<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="4、getters"><a href="#4、getters" class="headerlink" title="4、getters"></a>4、getters</h3><p>store:counter.js</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">export</span> <span class="hljs-keyword">const</span> mainStore = defineStore(<span class="hljs-string">&#x27;main&#x27;</span>, &#123;<br>  <span class="hljs-attr">state</span>:<span class="hljs-function">()=&gt;</span>&#123;<br>    <span class="hljs-keyword">return</span> &#123;<br>      <span class="hljs-attr">helloWorld</span>:<span class="hljs-string">&#x27;hello world !!!&#x27;</span>,<br>      <span class="hljs-attr">count</span>:<span class="hljs-number">0</span>,<br>      <span class="hljs-attr">phone</span>:<span class="hljs-string">&#x27;19542932249&#x27;</span><br>    &#125;<br>  &#125;,<br>  <span class="hljs-attr">getters</span>:&#123;<br>    <span class="hljs-function"><span class="hljs-title">phoneHidden</span>(<span class="hljs-params">state</span>)</span>&#123;<br>      <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;go  具有缓存 只会调用一次&quot;</span>)<br>      <span class="hljs-comment">// 使用this关键字</span><br>      <span class="hljs-comment">// return this.phone.toString().replace(/^(\d&#123;3&#125;)\d&#123;4&#125;(\d&#123;4&#125;)$/, &#x27;$1****$2&#x27;)</span><br>      <span class="hljs-keyword">return</span> state.phone.toString().replace(<span class="hljs-regexp">/^(\d&#123;3&#125;)\d&#123;4&#125;(\d&#123;4&#125;)$/</span>, <span class="hljs-string">&#x27;$1****$2&#x27;</span>)<br>    &#125;<br>  &#125;,<br>  <span class="hljs-attr">actions</span>:&#123;<br>    <span class="hljs-comment">// 在用actions的时候，不能使用箭头函数，因为箭头函数绑定的是外部的this</span><br>    <span class="hljs-function"><span class="hljs-title">changeState</span>(<span class="hljs-params"></span>)</span>&#123;<br>      <span class="hljs-built_in">this</span>.count++<br>      <span class="hljs-built_in">this</span>.helloWorld = <span class="hljs-string">&#x27;yq&#x27;</span><br>    &#125;<br>  &#125;<br>&#125;)<br></code></pre></td></tr></table></figure><blockquote><p>注意：getters里是可以使用this的</p></blockquote><p>写法如下：</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs ts">getters:&#123;<br>  phoneHidden():<span class="hljs-built_in">String</span>&#123;<br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;go  具有缓存 只会调用一次&quot;</span>)<br>    <span class="hljs-comment">// 使用this关键字</span><br>    <span class="hljs-comment">// return this.phone.toString().replace(/^(\d&#123;3&#125;)\d&#123;4&#125;(\d&#123;4&#125;)$/, &#x27;$1****$2&#x27;)</span><br>  &#125;<br>&#125;,<br></code></pre></td></tr></table></figure><p>组件：Test.vue</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">template</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span><br>    &#123;&#123; store.helloWorld&#125;&#125;&#123;&#123;store.count&#125;&#125;<br>  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span><br>    &#123;&#123; phoneHidden &#125;&#125;<br>  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span><br><br></code></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs js">&lt;script setup&gt;<br><span class="hljs-keyword">import</span> &#123; storeToRefs &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;pinia&quot;</span>;<br><span class="hljs-keyword">import</span> &#123; mainStore &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;../stores/counter&#x27;</span>;<br><span class="hljs-keyword">const</span> store = mainStore()<br><span class="hljs-keyword">const</span> &#123; helloWorld,count,phoneHidden &#125; = storeToRefs(store)<br>&lt;/script&gt;<br></code></pre></td></tr></table></figure><p>组件：AddButton.vue</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">button</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">&quot;handleClickChangePhone&quot;</span>&gt;</span>change phone<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><br></code></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs js">&lt;script setup&gt;<br><span class="hljs-keyword">import</span> &#123; mainStore &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;../stores/counter&#x27;</span>;<br><span class="hljs-keyword">const</span> store = mainStore()<br><br><span class="hljs-keyword">const</span> handleClickChangePhone = <span class="hljs-function">() =&gt;</span> &#123;<br>  store.phone = <span class="hljs-string">&quot;18775352722&quot;</span><br>&#125;<br>&lt;/script&gt;<br></code></pre></td></tr></table></figure><h3 id="5、Github项目代码："><a href="#5、Github项目代码：" class="headerlink" title="5、Github项目代码："></a>5、Github项目代码：</h3><blockquote><p>github: <a href="https://github.com/HeyJudeYQ/pinia-demo">https://github.com/HeyJudeYQ/pinia-demo</a></p></blockquote>]]></content>
      
      
      
        <tags>
            
            <tag> vue3 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>75、vue.$data表单暂存</title>
      <link href="/2022/07/28/75-localStorage/"/>
      <url>/2022/07/28/75-localStorage/</url>
      
        <content type="html"><![CDATA[<p>暂存表单信息</p><span id="more"></span><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">template</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">el-form</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&quot;form&quot;</span> <span class="hljs-attr">:model</span>=<span class="hljs-string">&quot;form&quot;</span> <span class="hljs-attr">label-width</span>=<span class="hljs-string">&quot;80px&quot;</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">el-form-item</span> <span class="hljs-attr">label</span>=<span class="hljs-string">&quot;活动名称&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">el-input</span> <span class="hljs-attr">v-model</span>=<span class="hljs-string">&quot;form.name&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">el-input</span>&gt;</span><br>      <span class="hljs-tag">&lt;/<span class="hljs-name">el-form-item</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">el-form-item</span> <span class="hljs-attr">label</span>=<span class="hljs-string">&quot;活动区域&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">el-select</span> <span class="hljs-attr">v-model</span>=<span class="hljs-string">&quot;form.region&quot;</span> <span class="hljs-attr">placeholder</span>=<span class="hljs-string">&quot;请选择活动区域&quot;</span>&gt;</span><br>          <span class="hljs-tag">&lt;<span class="hljs-name">el-option</span> <span class="hljs-attr">label</span>=<span class="hljs-string">&quot;区域一&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;shanghai&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">el-option</span>&gt;</span><br>          <span class="hljs-tag">&lt;<span class="hljs-name">el-option</span> <span class="hljs-attr">label</span>=<span class="hljs-string">&quot;区域二&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;beijing&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">el-option</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">el-select</span>&gt;</span><br>      <span class="hljs-tag">&lt;/<span class="hljs-name">el-form-item</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">el-form-item</span> <span class="hljs-attr">label</span>=<span class="hljs-string">&quot;活动时间&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">el-col</span> <span class="hljs-attr">:span</span>=<span class="hljs-string">&quot;11&quot;</span>&gt;</span><br>          <span class="hljs-tag">&lt;<span class="hljs-name">el-date-picker</span></span><br><span class="hljs-tag">            <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;date&quot;</span></span><br><span class="hljs-tag">            <span class="hljs-attr">placeholder</span>=<span class="hljs-string">&quot;选择日期&quot;</span></span><br><span class="hljs-tag">            <span class="hljs-attr">v-model</span>=<span class="hljs-string">&quot;form.date1&quot;</span></span><br><span class="hljs-tag">            <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;width: 100%;&quot;</span></span><br><span class="hljs-tag">          &gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">el-date-picker</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">el-col</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">el-col</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;line&quot;</span> <span class="hljs-attr">:span</span>=<span class="hljs-string">&quot;2&quot;</span>&gt;</span>-<span class="hljs-tag">&lt;/<span class="hljs-name">el-col</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">el-col</span> <span class="hljs-attr">:span</span>=<span class="hljs-string">&quot;11&quot;</span>&gt;</span><br>          <span class="hljs-tag">&lt;<span class="hljs-name">el-time-picker</span></span><br><span class="hljs-tag">            <span class="hljs-attr">placeholder</span>=<span class="hljs-string">&quot;选择时间&quot;</span></span><br><span class="hljs-tag">            <span class="hljs-attr">v-model</span>=<span class="hljs-string">&quot;form.date2&quot;</span></span><br><span class="hljs-tag">            <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;width: 100%;&quot;</span></span><br><span class="hljs-tag">          &gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">el-time-picker</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">el-col</span>&gt;</span><br>      <span class="hljs-tag">&lt;/<span class="hljs-name">el-form-item</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">el-form-item</span> <span class="hljs-attr">label</span>=<span class="hljs-string">&quot;即时配送&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">el-switch</span> <span class="hljs-attr">v-model</span>=<span class="hljs-string">&quot;form.delivery&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">el-switch</span>&gt;</span><br>      <span class="hljs-tag">&lt;/<span class="hljs-name">el-form-item</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">el-form-item</span> <span class="hljs-attr">label</span>=<span class="hljs-string">&quot;活动性质&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">el-checkbox-group</span> <span class="hljs-attr">v-model</span>=<span class="hljs-string">&quot;form.type&quot;</span>&gt;</span><br>          <span class="hljs-tag">&lt;<span class="hljs-name">el-checkbox</span> <span class="hljs-attr">label</span>=<span class="hljs-string">&quot;美食/餐厅线上活动&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;type&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">el-checkbox</span>&gt;</span><br>          <span class="hljs-tag">&lt;<span class="hljs-name">el-checkbox</span> <span class="hljs-attr">label</span>=<span class="hljs-string">&quot;地推活动&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;type&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">el-checkbox</span>&gt;</span><br>          <span class="hljs-tag">&lt;<span class="hljs-name">el-checkbox</span> <span class="hljs-attr">label</span>=<span class="hljs-string">&quot;线下主题活动&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;type&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">el-checkbox</span>&gt;</span><br>          <span class="hljs-tag">&lt;<span class="hljs-name">el-checkbox</span> <span class="hljs-attr">label</span>=<span class="hljs-string">&quot;单纯品牌曝光&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;type&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">el-checkbox</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">el-checkbox-group</span>&gt;</span><br>      <span class="hljs-tag">&lt;/<span class="hljs-name">el-form-item</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">el-form-item</span> <span class="hljs-attr">label</span>=<span class="hljs-string">&quot;特殊资源&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">el-radio-group</span> <span class="hljs-attr">v-model</span>=<span class="hljs-string">&quot;form.resource&quot;</span>&gt;</span><br>          <span class="hljs-tag">&lt;<span class="hljs-name">el-radio</span> <span class="hljs-attr">label</span>=<span class="hljs-string">&quot;线上品牌商赞助&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">el-radio</span>&gt;</span><br>          <span class="hljs-tag">&lt;<span class="hljs-name">el-radio</span> <span class="hljs-attr">label</span>=<span class="hljs-string">&quot;线下场地免费&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">el-radio</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">el-radio-group</span>&gt;</span><br>      <span class="hljs-tag">&lt;/<span class="hljs-name">el-form-item</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">el-form-item</span> <span class="hljs-attr">label</span>=<span class="hljs-string">&quot;活动形式&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">el-input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;textarea&quot;</span> <span class="hljs-attr">v-model</span>=<span class="hljs-string">&quot;form.desc&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">el-input</span>&gt;</span><br>      <span class="hljs-tag">&lt;/<span class="hljs-name">el-form-item</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">el-form-item</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">el-button</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;primary&quot;</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">&quot;onSubmit&quot;</span>&gt;</span>立即创建<span class="hljs-tag">&lt;/<span class="hljs-name">el-button</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">el-button</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">&quot;stash&quot;</span>&gt;</span>暂存<span class="hljs-tag">&lt;/<span class="hljs-name">el-button</span>&gt;</span><br>      <span class="hljs-tag">&lt;/<span class="hljs-name">el-form-item</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">el-form</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs js">&lt;script&gt;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> &#123;<br>    <span class="hljs-function"><span class="hljs-title">data</span>(<span class="hljs-params"></span>)</span> &#123;<br>        <span class="hljs-keyword">const</span> stashStr = <span class="hljs-built_in">localStorage</span>.getItem(<span class="hljs-string">&#x27;stash&#x27;</span>)<br>        <span class="hljs-keyword">const</span> stash = stashStr ? <span class="hljs-built_in">JSON</span>.parse(stashStr) : &#123;&#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">Object</span>.assign(&#123;<br>            <span class="hljs-attr">form</span>: &#123;<br>                <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;&#x27;</span>,<br>                <span class="hljs-attr">region</span>: <span class="hljs-string">&#x27;&#x27;</span>,<br>                <span class="hljs-attr">date1</span>: <span class="hljs-string">&#x27;&#x27;</span>,<br>                <span class="hljs-attr">date2</span>: <span class="hljs-string">&#x27;&#x27;</span>,<br>                <span class="hljs-attr">delivery</span>: <span class="hljs-literal">false</span>,<br>                <span class="hljs-attr">type</span>: [],<br>                <span class="hljs-attr">resource</span>: <span class="hljs-string">&#x27;&#x27;</span>,<br>                <span class="hljs-attr">desc</span>: <span class="hljs-string">&#x27;&#x27;</span><br>            &#125;<br>        &#125;, stash)<br>    &#125;,<br>    <span class="hljs-attr">methods</span>: &#123;<br>        <span class="hljs-function"><span class="hljs-title">onSubmit</span>(<span class="hljs-params"></span>)</span> &#123;<br>            <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;submit!&#x27;</span>);<br>        &#125;,<br>        <span class="hljs-function"><span class="hljs-title">stash</span>(<span class="hljs-params"></span>)</span> &#123;<br>            <span class="hljs-built_in">localStorage</span>.setItem(<span class="hljs-string">&#x27;stash&#x27;</span>, <span class="hljs-built_in">JSON</span>.stringify(<span class="hljs-built_in">this</span>.$data));<br>        &#125;<br>    &#125;<br><br>&#125;<br>&lt;/script&gt;<br><br></code></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>74、options-api &amp; composition-api</title>
      <link href="/2022/07/26/74-composition-api&amp;options-api/"/>
      <url>/2022/07/26/74-composition-api&amp;options-api/</url>
      
        <content type="html"><![CDATA[<p>在Vue2中，我们使用的是Options Api语法，而在Vue3中，编程语法方面改变的最大亮点应该就是Composition Api了。</p><span id="more"></span><h2 id="一、options-api"><a href="#一、options-api" class="headerlink" title="一、options api"></a>一、options api</h2><blockquote><p>options api 即选项式api,也就是组件的各个选项，例如：data、methods、computed、watch等等，对应的选项做对应的事情。</p></blockquote><p>在实际项目的开发过程中，数据定义在data中，方法定义在methods中，当我们的代码多起来，比如达到四、五百行的时候，如果我们想改动某个功能，就要去data中改数据，再去methods中改方法，来回地寻找。</p><p>相同功能的代码被分割，对后期的改动很不友好，如果换了一个新人接手，或者自己过一段时间再去看这段代码，估计没注释的话，那是相当费劲。 而且因为所有的数据都是挂载在this下面，typescript的类型推导也很麻烦，代码的复用、公共组件的导入导出也都很困难。Vue3新增了Composition Api来解决这些痛点。</p><h2 id="二、composition-api"><a href="#二、composition-api" class="headerlink" title="二、composition api"></a>二、composition api</h2><blockquote><p>Composition Api:组合式api,支持将相同的功能模块代码写在一起，甚至可以将某个功能单独的封装成函数，随意导入引用；也可以将任意的数据定义成响应式，再也不用局限于data中，我们只需要将每个实现的功能组合起来就可以了。</p></blockquote><p>watch：侦听一个或多个响应式数据源，并在数据源变化时调用所给的回调函数。</p><blockquote><p>watch() 默认是懒侦听的，即仅在侦听源发生变化时才执行回调函数。(immediate:true 立即执行)，包含3个参数：侦听器的源、发生变化的回调函数（这个回调函数接受3个参数：新值、旧值、用于注册副作用清理的回调函数。）、可选参数（immediate：true/false 立即触发侦听器回调函数、deep:源是对象，强制深度遍历，flush:调整回调的刷新时机、onTrack/onTrigger:调试侦听器的依赖）</p></blockquote><p>注意：1、watchEffect是立即执行的，不需要添加immediate属性。<br>2、watchEffect不需要指定对某个具体的数据监听，watchEffect会根据内容自动去感知，所以我们也可以在一个watchEffect中添加多个数据的监听处理（如果watchEffect中没有任何响应式数据，会不会执行呢？大家可以试一下）。<br>3、watchEffect不能获取数据改变之前的值。</p><p>ref和reactive的区别是什么呢，我们可以这样简单理解，它们都是用来定义响应式数据的，但是ref是用来给简单的数据类型定义响应式数据的，比如number、string、boolean等，而reactive是针对复杂的数据结构的，比如一个对象。</p><p>ref定义的数据，修改的时候是需改xxx.value的，而reactive定义的不用</p>]]></content>
      
      
      
        <tags>
            
            <tag> vue3 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>73、关于使用element-ui的el-table组件：带分页打印表头</title>
      <link href="/2022/07/25/73-print/"/>
      <url>/2022/07/25/73-print/</url>
      
        <content type="html"><![CDATA[<p>使用 command（win : control） + p 打印时，如果页面的 table 分页后，想要将第二页之后的每个页面都加上表头，可以封装一个可复用的组件。</p><span id="more"></span><h2 id="一、编写可复用的组件"><a href="#一、编写可复用的组件" class="headerlink" title="一、编写可复用的组件"></a>一、编写可复用的组件</h2><p>代码如下：</p><p>ElTableHeader.vue</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">import</span> &#123; Table &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;element-ui&quot;</span>;<br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> &#123;<br>  <span class="hljs-attr">extends</span>: Table,<br>  <span class="hljs-function"><span class="hljs-title">mounted</span>(<span class="hljs-params"></span>)</span> &#123;<br>    <span class="hljs-built_in">this</span>.$nextTick(<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<br>      <span class="hljs-keyword">let</span> thead = <span class="hljs-built_in">this</span>.$el.querySelector(<span class="hljs-string">&quot;.el-table__header-wrapper thead&quot;</span>);<br>      <span class="hljs-keyword">let</span> theadNew = thead.cloneNode(<span class="hljs-literal">true</span>);<br>      <span class="hljs-built_in">this</span>.$el<br>        .querySelector(<span class="hljs-string">&quot;.el-table__body-wrapper table&quot;</span>)<br>        .appendChild(theadNew);<br>    &#125;);<br>  &#125;,<br>&#125;;<br></code></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-class">.el-table</span> &gt;&gt;&gt; <span class="hljs-selector-class">.el-table__body-wrapper</span> <span class="hljs-selector-tag">thead</span> &#123;<br>       <span class="hljs-attribute">display</span>: none;<br>   &#125;<br>   <span class="hljs-keyword">@media</span> print &#123;<br>       <span class="hljs-selector-class">.el-table</span> &gt;&gt;&gt; <span class="hljs-selector-class">.el-table__header-wrapper</span> &#123;<br>           <span class="hljs-attribute">display</span>: none;<br>       &#125;<br>       <span class="hljs-selector-class">.el-table</span> &gt;&gt;&gt; <span class="hljs-selector-class">.el-table__body-wrapper</span> <span class="hljs-selector-tag">thead</span> &#123;<br>           <span class="hljs-attribute">display</span>: table-header-group;<br>       &#125;<br>   &#125;<br></code></pre></td></tr></table></figure><h2 id="二、全局注册及使用"><a href="#二、全局注册及使用" class="headerlink" title="二、全局注册及使用"></a>二、全局注册及使用</h2><h4 id="1、main-js引入"><a href="#1、main-js引入" class="headerlink" title="1、main.js引入"></a>1、main.js引入</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">import ElTableHeader from &quot;./components/ElTableHeader.vue&quot;<br>Vue.component(&quot;el-table-header&quot;,ElTableHeader)<br></code></pre></td></tr></table></figure><h4 id="2、使用"><a href="#2、使用" class="headerlink" title="2、使用"></a>2、使用</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">template</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">el-table-header</span> <span class="hljs-attr">:data</span>=<span class="hljs-string">&quot;tableData&quot;</span>&gt;</span><br><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">el-table-header</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span><br></code></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> element-ui </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>72、关于使用element-ui的el-select组件下拉框错位问题</title>
      <link href="/2022/07/11/72-el-select/"/>
      <url>/2022/07/11/72-el-select/</url>
      
        <content type="html"><![CDATA[<p>使用 element-ui的el-form组件里使用el-selcet组件时，下拉框的el-select-item会出现向右偏移的问题。有2种方法可以解决下拉框错位的问题。</p><span id="more"></span><h2 id="一、方法一：margin-left-0px-important"><a href="#一、方法一：margin-left-0px-important" class="headerlink" title="一、方法一：margin-left:0px !important"></a>一、方法一：margin-left:0px !important</h2><p>在el-select添加一个类名：select-item</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-class">.select-item</span> <span class="hljs-selector-class">.el-form-item__content</span>&#123;<br>  <span class="hljs-attribute">margin-left</span>:<span class="hljs-number">0px</span> <span class="hljs-meta">!important</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="二、方法二：position-initial"><a href="#二、方法二：position-initial" class="headerlink" title="二、方法二：position:initial;"></a>二、方法二：position:initial;</h2><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-class">.select-item</span> <span class="hljs-selector-class">.el-form-item__content</span>&#123;<br>  <span class="hljs-attribute">position</span>:initial;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> element-ui </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>71、headerSearch组件</title>
      <link href="/2022/06/25/71-headerSearch/"/>
      <url>/2022/06/25/71-headerSearch/</url>
      
        <content type="html"><![CDATA[<p>headerSearch组件:在指定搜索框中对当前应用中所有页面进行检索，以select形式展示出被检索的页面，以达到快速进入的目的；</p><span id="more"></span><h2 id="一、原理："><a href="#一、原理：" class="headerlink" title="一、原理："></a>一、原理：</h2><p>1、根据指定内容对所有页面进行检索；<br>2、以select形式展示检索出的页面；<br>3、通过检索页面可快速进入对应页面。</p><h2 id="二、方案："><a href="#二、方案：" class="headerlink" title="二、方案："></a>二、方案：</h2><p>1、创建 headerSearch 组件，用作样式展示和用户输入内容获取<br>2、获取所有的页面数据，用作被检索的数据源<br>3、根据用户输入内容在数据源中进行模糊搜索<br>4、把搜索到的内容以 select 进行展示<br>5、监听 select 的 change 事件，完成对应跳转</p><h2 id="三、代码："><a href="#三、代码：" class="headerlink" title="三、代码："></a>三、代码：</h2><details><summary>点击展示js代码</summary><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">template</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">:class</span>=<span class="hljs-string">&quot;&#123; show: isShow &#125;&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;header-search&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">svg-icon</span></span><br><span class="hljs-tag">      <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;guide-search&quot;</span></span><br><span class="hljs-tag">      <span class="hljs-attr">class-name</span>=<span class="hljs-string">&quot;search-icon&quot;</span></span><br><span class="hljs-tag">      <span class="hljs-attr">icon</span>=<span class="hljs-string">&quot;search&quot;</span></span><br><span class="hljs-tag">      @<span class="hljs-attr">click.stop</span>=<span class="hljs-string">&quot;onShowClick&quot;</span></span><br><span class="hljs-tag">    /&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">el-select</span></span><br><span class="hljs-tag">      <span class="hljs-attr">ref</span>=<span class="hljs-string">&quot;headerSearchSelectRef&quot;</span></span><br><span class="hljs-tag">      <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;header-search-select&quot;</span></span><br><span class="hljs-tag">      <span class="hljs-attr">v-model</span>=<span class="hljs-string">&quot;search&quot;</span></span><br><span class="hljs-tag">      <span class="hljs-attr">filterable</span></span><br><span class="hljs-tag">      <span class="hljs-attr">default-first-option</span></span><br><span class="hljs-tag">      <span class="hljs-attr">remote</span></span><br><span class="hljs-tag">      <span class="hljs-attr">placeholder</span>=<span class="hljs-string">&quot;Search&quot;</span></span><br><span class="hljs-tag">      <span class="hljs-attr">:remote-method</span>=<span class="hljs-string">&quot;querySearch&quot;</span></span><br><span class="hljs-tag">      @<span class="hljs-attr">change</span>=<span class="hljs-string">&quot;onSelectChange&quot;</span></span><br><span class="hljs-tag">    &gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">el-option</span></span><br><span class="hljs-tag">        <span class="hljs-attr">v-for</span>=<span class="hljs-string">&quot;option in searchOptions&quot;</span></span><br><span class="hljs-tag">        <span class="hljs-attr">:key</span>=<span class="hljs-string">&quot;option.item.path&quot;</span></span><br><span class="hljs-tag">        <span class="hljs-attr">:label</span>=<span class="hljs-string">&quot;option.item.title.join(&#x27; &gt; &#x27;)&quot;</span></span><br><span class="hljs-tag">        <span class="hljs-attr">:value</span>=<span class="hljs-string">&quot;option.item&quot;</span></span><br><span class="hljs-tag">      &gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">el-option</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">el-select</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span><br><br></code></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br></pre></td><td class="code"><pre><code class="hljs js"><br>&lt;script setup&gt;<br><span class="hljs-keyword">import</span> &#123; computed, ref, watch &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;vue&#x27;</span><br><span class="hljs-keyword">import</span> &#123; generateRoutes &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./FuseData&#x27;</span><br><span class="hljs-keyword">import</span> Fuse <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;fuse.js&#x27;</span><br><span class="hljs-keyword">import</span> &#123; filterRouters &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@/utils/route&#x27;</span><br><span class="hljs-keyword">import</span> &#123; useRouter &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;vue-router&#x27;</span><br><span class="hljs-keyword">import</span> &#123; watchSwitchLang &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@/utils/i18n&#x27;</span><br><br><span class="hljs-comment">// 控制 search 显示</span><br><span class="hljs-keyword">const</span> isShow = ref(<span class="hljs-literal">false</span>)<br><span class="hljs-comment">// el-select 实例</span><br><span class="hljs-keyword">const</span> headerSearchSelectRef = ref(<span class="hljs-literal">null</span>)<br><span class="hljs-keyword">const</span> onShowClick = <span class="hljs-function">() =&gt;</span> &#123;<br>  isShow.value = !isShow.value<br>  headerSearchSelectRef.value.focus()<br>&#125;<br><br><span class="hljs-comment">// search 相关</span><br><span class="hljs-keyword">const</span> search = ref(<span class="hljs-string">&#x27;&#x27;</span>)<br><span class="hljs-comment">// 搜索结果</span><br><span class="hljs-keyword">const</span> searchOptions = ref([])<br><span class="hljs-comment">// 搜索方法</span><br><span class="hljs-keyword">const</span> querySearch = <span class="hljs-function"><span class="hljs-params">query</span> =&gt;</span> &#123;<br>  <span class="hljs-keyword">if</span> (query !== <span class="hljs-string">&#x27;&#x27;</span>) &#123;<br>    searchOptions.value = fuse.search(query)<br>  &#125; <span class="hljs-keyword">else</span> &#123;<br>    searchOptions.value = []<br>  &#125;<br>&#125;<br><span class="hljs-comment">// 选中回调</span><br><span class="hljs-keyword">const</span> onSelectChange = <span class="hljs-function"><span class="hljs-params">val</span> =&gt;</span> &#123;<br>  router.push(val.path)<br>  onClose()<br>&#125;<br><br><span class="hljs-comment">// 检索数据源</span><br><span class="hljs-keyword">const</span> router = useRouter()<br><span class="hljs-keyword">let</span> searchPool = computed(<span class="hljs-function">() =&gt;</span> &#123;<br>  <span class="hljs-keyword">const</span> filterRoutes = filterRouters(router.getRoutes())<br>  <span class="hljs-keyword">return</span> generateRoutes(filterRoutes)<br>&#125;)<br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 搜索库相关</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">let</span> fuse<br><span class="hljs-keyword">const</span> initFuse = <span class="hljs-function"><span class="hljs-params">searchPool</span> =&gt;</span> &#123;<br>  fuse = <span class="hljs-keyword">new</span> Fuse(searchPool, &#123;<br>    <span class="hljs-comment">// 是否按优先级进行排序</span><br>    <span class="hljs-attr">shouldSort</span>: <span class="hljs-literal">true</span>,<br>    <span class="hljs-comment">// 匹配算法放弃的时机， 阈值 0.0 需要完美匹配（字母和位置），阈值 1.0 将匹配任何内容。</span><br>    <span class="hljs-attr">threshold</span>: <span class="hljs-number">0.4</span>,<br>    <span class="hljs-comment">// 匹配长度超过这个值的才会被认为是匹配的</span><br>    <span class="hljs-attr">minMatchCharLength</span>: <span class="hljs-number">1</span>,<br>    <span class="hljs-comment">// 将被搜索的键列表。 这支持嵌套路径、加权搜索、在字符串和对象数组中搜索。</span><br>    <span class="hljs-comment">// name：搜索的键</span><br>    <span class="hljs-comment">// weight：对应的权重</span><br>    <span class="hljs-attr">keys</span>: [<br>      &#123;<br>        <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;title&#x27;</span>,<br>        <span class="hljs-attr">weight</span>: <span class="hljs-number">0.7</span><br>      &#125;,<br>      &#123;<br>        <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;path&#x27;</span>,<br>        <span class="hljs-attr">weight</span>: <span class="hljs-number">0.3</span><br>      &#125;<br>    ]<br>  &#125;)<br>&#125;<br>initFuse(searchPool.value)<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 关闭 search 的处理事件</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">const</span> onClose = <span class="hljs-function">() =&gt;</span> &#123;<br>  headerSearchSelectRef.value.blur()<br>  isShow.value = <span class="hljs-literal">false</span><br>  searchOptions.value = []<br>&#125;<br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 监听 search 打开，处理 close 事件</span><br><span class="hljs-comment"> */</span><br>watch(isShow, <span class="hljs-function"><span class="hljs-params">val</span> =&gt;</span> &#123;<br>  <span class="hljs-keyword">if</span> (val) &#123;<br>    <span class="hljs-built_in">document</span>.body.addEventListener(<span class="hljs-string">&#x27;click&#x27;</span>, onClose)<br>  &#125; <span class="hljs-keyword">else</span> &#123;<br>    <span class="hljs-built_in">document</span>.body.removeEventListener(<span class="hljs-string">&#x27;click&#x27;</span>, onClose)<br>  &#125;<br>&#125;)<br><br><span class="hljs-comment">// 处理国际化</span><br>watchSwitchLang(<span class="hljs-function">() =&gt;</span> &#123;<br>  searchPool = computed(<span class="hljs-function">() =&gt;</span> &#123;<br>    <span class="hljs-keyword">const</span> filterRoutes = filterRouters(router.getRoutes())<br>    <span class="hljs-keyword">return</span> generateRoutes(filterRoutes)<br>  &#125;)<br>  initFuse(searchPool.value)<br>&#125;)<br>&lt;/script&gt;<br><br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">style</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;scss&quot;</span> <span class="hljs-attr">scoped</span>&gt;</span><span class="css"></span></span><br><span class="css"><span class="xml"><span class="hljs-selector-class">.header-search</span> &#123;</span></span><br><span class="css"><span class="xml">  <span class="hljs-attribute">font-size</span>: <span class="hljs-number">0</span> <span class="hljs-meta">!important</span>;</span></span><br><span class="css"><span class="xml">  <span class="hljs-selector-class">.search-icon</span> &#123;</span></span><br><span class="css"><span class="xml">    <span class="hljs-attribute">cursor</span>: pointer;</span></span><br><span class="css"><span class="xml">    <span class="hljs-attribute">font-size</span>: <span class="hljs-number">18px</span>;</span></span><br><span class="css"><span class="xml">    <span class="hljs-attribute">vertical-align</span>: middle;</span></span><br><span class="css"><span class="xml">  &#125;</span></span><br><span class="css"><span class="xml">  <span class="hljs-selector-class">.header-search-select</span> &#123;</span></span><br><span class="css"><span class="xml">    <span class="hljs-attribute">font-size</span>: <span class="hljs-number">18px</span>;</span></span><br><span class="css"><span class="xml">    <span class="hljs-attribute">transition</span>: width <span class="hljs-number">0.2s</span>;</span></span><br><span class="css"><span class="xml">    <span class="hljs-attribute">width</span>: <span class="hljs-number">0</span>;</span></span><br><span class="css"><span class="xml">    <span class="hljs-attribute">overflow</span>: hidden;</span></span><br><span class="css"><span class="xml">    <span class="hljs-attribute">background</span>: transparent;</span></span><br><span class="css"><span class="xml">    <span class="hljs-attribute">border-radius</span>: <span class="hljs-number">0</span>;</span></span><br><span class="css"><span class="xml">    <span class="hljs-attribute">display</span>: inline-block;</span></span><br><span class="css"><span class="xml">    <span class="hljs-attribute">vertical-align</span>: middle;</span></span><br><span class="css"><span class="xml"></span></span><br><span class="css"><span class="xml">    ::v-deep .el-input__inner &#123;</span></span><br><span class="css"><span class="xml">      border-radius: <span class="hljs-number">0</span>;</span></span><br><span class="css"><span class="xml">      <span class="hljs-attribute">border</span>: <span class="hljs-number">0</span>;</span></span><br><span class="css"><span class="xml">      <span class="hljs-attribute">padding-left</span>: <span class="hljs-number">0</span>;</span></span><br><span class="css"><span class="xml">      <span class="hljs-attribute">padding-right</span>: <span class="hljs-number">0</span>;</span></span><br><span class="css"><span class="xml">      <span class="hljs-attribute">box-shadow</span>: none <span class="hljs-meta">!important</span>;</span></span><br><span class="css"><span class="xml">      <span class="hljs-attribute">border-bottom</span>: <span class="hljs-number">1px</span> solid <span class="hljs-number">#d9d9d9</span>;</span></span><br><span class="css"><span class="xml">      <span class="hljs-attribute">vertical-align</span>: middle;</span></span><br><span class="css"><span class="xml">    &#125;</span></span><br><span class="css"><span class="xml">  &#125;</span></span><br><span class="css"><span class="xml">  &amp;<span class="hljs-selector-class">.show</span> &#123;</span></span><br><span class="css"><span class="xml">    <span class="hljs-selector-class">.header-search-select</span> &#123;</span></span><br><span class="css"><span class="xml">      <span class="hljs-attribute">width</span>: <span class="hljs-number">210px</span>;</span></span><br><span class="css"><span class="xml">      <span class="hljs-attribute">margin-left</span>: <span class="hljs-number">10px</span>;</span></span><br><span class="css"><span class="xml">    &#125;</span></span><br><span class="css"><span class="xml">  &#125;</span></span><br><span class="css"><span class="xml">&#125;</span></span><br><span class="css"><span class="xml"></span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span></span><br><br></code></pre></td></tr></table></figure></details><h2 id="四、数据源："><a href="#四、数据源：" class="headerlink" title="四、数据源："></a>四、数据源：</h2><p>FuseData.js</p><details><summary>点击展示js代码</summary><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">import</span> path <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;path&#x27;</span><br><span class="hljs-keyword">import</span> i18n <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@/i18n&#x27;</span><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 筛选出可供搜索的路由对象</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param </span>routes 路由表</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param </span>basePath 基础路径，默认为 /</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param <span class="hljs-variable">prefixTitle</span></span></span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">const</span> generateRoutes = <span class="hljs-function">(<span class="hljs-params">routes, basePath = <span class="hljs-string">&#x27;/&#x27;</span>, prefixTitle = []</span>) =&gt;</span> &#123;<br>  <span class="hljs-comment">// 创建 result 数据</span><br>  <span class="hljs-keyword">let</span> res = []<br>  <span class="hljs-comment">// 循环 routes 路由</span><br>  <span class="hljs-keyword">for</span> (<span class="hljs-keyword">const</span> route <span class="hljs-keyword">of</span> routes) &#123;<br>    <span class="hljs-comment">// 创建包含 path 和 title 的 item</span><br>    <span class="hljs-keyword">const</span> data = &#123;<br>      <span class="hljs-attr">path</span>: path.resolve(basePath, route.path),<br>      <span class="hljs-attr">title</span>: [...prefixTitle]<br>    &#125;<br>    <span class="hljs-comment">// 当前存在 meta 时，使用 i18n 解析国际化数据，组合成新的 title 内容</span><br>    <span class="hljs-comment">// 动态路由不允许被搜索</span><br>    <span class="hljs-comment">// 匹配动态路由的正则</span><br>    <span class="hljs-keyword">const</span> re = <span class="hljs-regexp">/.*\/:.*/</span><br>    <span class="hljs-keyword">if</span> (<br>      route.meta &amp;&amp;<br>      route.meta.title &amp;&amp;<br>      !re.exec(route.path) &amp;&amp;<br>      !res.find(<span class="hljs-function"><span class="hljs-params">item</span> =&gt;</span> item.path === data.path)<br>    ) &#123;<br>      <span class="hljs-keyword">const</span> i18ntitle = i18n.global.t(<span class="hljs-string">`msg.route.<span class="hljs-subst">$&#123;route.meta.title&#125;</span>`</span>)<br>      data.title = [...data.title, i18ntitle]<br>      res.push(data)<br>    &#125;<br><br>    <span class="hljs-comment">// 存在 children 时，迭代调用</span><br>    <span class="hljs-keyword">if</span> (route.children) &#123;<br>      <span class="hljs-keyword">const</span> tempRoutes = generateRoutes(route.children, data.path, data.title)<br>      <span class="hljs-keyword">if</span> (tempRoutes.length &gt;= <span class="hljs-number">1</span>) &#123;<br>        res = [...res, ...tempRoutes]<br>      &#125;<br>    &#125;<br>  &#125;<br>  <span class="hljs-keyword">return</span> res<br>&#125;<br><br></code></pre></td></tr></table></figure></details>]]></content>
      
      
      
        <tags>
            
            <tag> element-ui </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>70、功能引导组件</title>
      <link href="/2022/06/20/70-guide/"/>
      <url>/2022/06/20/70-guide/</url>
      
        <content type="html"><![CDATA[<p>功能引导组件实现</p><span id="more"></span><h2 id="一、功能引导：driver-js"><a href="#一、功能引导：driver-js" class="headerlink" title="一、功能引导：driver.js"></a>一、功能引导：driver.js</h2><p>实现思路：</p><h4 id="1、定义导航数据"><a href="#1、定义导航数据" class="headerlink" title="1、定义导航数据"></a>1、定义导航数据</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">svg-icon</span> <span class="hljs-attr">icon</span>=<span class="hljs-string">&quot;guide&quot;</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">&quot;onClick&quot;</span> /&gt;</span><br></code></pre></td></tr></table></figure><p>let driver = null</p><h4 id="2、实例化Driver"><a href="#2、实例化Driver" class="headerlink" title="2、实例化Driver"></a>2、实例化Driver</h4><p>需要安装driver.js</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">import</span> Driver <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;driver.js&#x27;</span><br><span class="hljs-keyword">import</span> <span class="hljs-string">&#x27;driver.js/dist/driver.min.css&#x27;</span><br><span class="hljs-keyword">import</span> &#123; onMounted &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;vue&#x27;</span><br><span class="hljs-keyword">import</span> &#123; useI18n &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;vue-i18n&#x27;</span><br><span class="hljs-keyword">import</span> steps <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./steps&#x27;</span><br><span class="hljs-keyword">import</span> &#123; watchSwitchLang &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@/utils/i18n&#x27;</span><br><br><br><span class="hljs-keyword">const</span> initDriver = <span class="hljs-function">() =&gt;</span> &#123;<br>  driver = <span class="hljs-keyword">new</span> Driver(&#123;<br>    <span class="hljs-attr">animate</span>: <span class="hljs-literal">false</span>,<br>    <span class="hljs-comment">// 禁止点击蒙版关闭</span><br>    <span class="hljs-attr">allowClose</span>: <span class="hljs-literal">false</span>,<br>    <span class="hljs-attr">closeBtnText</span>: i18n.t(<span class="hljs-string">&#x27;msg.guide.close&#x27;</span>),<br>    <span class="hljs-attr">nextBtnText</span>: i18n.t(<span class="hljs-string">&#x27;msg.guide.next&#x27;</span>),<br>    <span class="hljs-attr">prevBtnText</span>: i18n.t(<span class="hljs-string">&#x27;msg.guide.prev&#x27;</span>)<br>  &#125;)<br>&#125;<br><br><span class="hljs-comment">// 语言切换时，重新初始化 Driver</span><br>watchSwitchLang(initDriver)<br></code></pre></td></tr></table></figure><h4 id="3、定义触发方法"><a href="#3、定义触发方法" class="headerlink" title="3、定义触发方法"></a>3、定义触发方法</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> onClick = <span class="hljs-function">() =&gt;</span> &#123;<br>  driver.defineSteps(steps(i18n))<br>  driver.start()<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="4、steps资源文件"><a href="#4、steps资源文件" class="headerlink" title="4、steps资源文件"></a>4、steps资源文件</h4><details><summary>点击展示js代码</summary><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 此处不需要导入 @/i18n 使用 i18n.global ，因为我们在 router 中 layout 不是按需加载，所以会在 Guide 会在 I18n 初始化完成之前被直接调用。导致 i18n 为 undefined</span><br><span class="hljs-keyword">const</span> steps = <span class="hljs-function"><span class="hljs-params">i18n</span> =&gt;</span> &#123;<br>  <span class="hljs-keyword">return</span> [<br>    <span class="hljs-comment">// 起始</span><br>    &#123;<br>      <span class="hljs-attr">element</span>: <span class="hljs-string">&#x27;#guide-start&#x27;</span>,<br>      <span class="hljs-attr">popover</span>: &#123;<br>        <span class="hljs-attr">title</span>: i18n.t(<span class="hljs-string">&#x27;msg.guide.guideTitle&#x27;</span>),<br>        <span class="hljs-attr">description</span>: i18n.t(<span class="hljs-string">&#x27;msg.guide.guideDesc&#x27;</span>),<br>        <span class="hljs-attr">position</span>: <span class="hljs-string">&#x27;bottom-right&#x27;</span><br>      &#125;<br>    &#125;,<br>    &#123;<br>      <span class="hljs-attr">element</span>: <span class="hljs-string">&#x27;#guide-hamburger&#x27;</span>,<br>      <span class="hljs-attr">popover</span>: &#123;<br>        <span class="hljs-attr">title</span>: i18n.t(<span class="hljs-string">&#x27;msg.guide.hamburgerTitle&#x27;</span>),<br>        <span class="hljs-attr">description</span>: i18n.t(<span class="hljs-string">&#x27;msg.guide.hamburgerDesc&#x27;</span>)<br>      &#125;<br>    &#125;,<br>    &#123;<br>      <span class="hljs-attr">element</span>: <span class="hljs-string">&#x27;#guide-breadcrumb&#x27;</span>,<br>      <span class="hljs-attr">popover</span>: &#123;<br>        <span class="hljs-attr">title</span>: i18n.t(<span class="hljs-string">&#x27;msg.guide.breadcrumbTitle&#x27;</span>),<br>        <span class="hljs-attr">description</span>: i18n.t(<span class="hljs-string">&#x27;msg.guide.breadcrumbDesc&#x27;</span>)<br>      &#125;<br>    &#125;,<br>    &#123;<br>      <span class="hljs-attr">element</span>: <span class="hljs-string">&#x27;#guide-search&#x27;</span>,<br>      <span class="hljs-attr">popover</span>: &#123;<br>        <span class="hljs-attr">title</span>: i18n.t(<span class="hljs-string">&#x27;msg.guide.searchTitle&#x27;</span>),<br>        <span class="hljs-attr">description</span>: i18n.t(<span class="hljs-string">&#x27;msg.guide.searchDesc&#x27;</span>),<br>        <span class="hljs-attr">position</span>: <span class="hljs-string">&#x27;bottom-right&#x27;</span><br>      &#125;<br>    &#125;,<br>    &#123;<br>      <span class="hljs-attr">element</span>: <span class="hljs-string">&#x27;#guide-full&#x27;</span>,<br>      <span class="hljs-attr">popover</span>: &#123;<br>        <span class="hljs-attr">title</span>: i18n.t(<span class="hljs-string">&#x27;msg.guide.fullTitle&#x27;</span>),<br>        <span class="hljs-attr">description</span>: i18n.t(<span class="hljs-string">&#x27;msg.guide.fullDesc&#x27;</span>),<br>        <span class="hljs-attr">position</span>: <span class="hljs-string">&#x27;bottom-right&#x27;</span><br>      &#125;<br>    &#125;,<br>    &#123;<br>      <span class="hljs-attr">element</span>: <span class="hljs-string">&#x27;#guide-theme&#x27;</span>,<br>      <span class="hljs-attr">popover</span>: &#123;<br>        <span class="hljs-attr">title</span>: i18n.t(<span class="hljs-string">&#x27;msg.guide.themeTitle&#x27;</span>),<br>        <span class="hljs-attr">description</span>: i18n.t(<span class="hljs-string">&#x27;msg.guide.themeDesc&#x27;</span>),<br>        <span class="hljs-attr">position</span>: <span class="hljs-string">&#x27;bottom-right&#x27;</span><br>      &#125;<br>    &#125;,<br>    &#123;<br>      <span class="hljs-attr">element</span>: <span class="hljs-string">&#x27;#guide-lang&#x27;</span>,<br>      <span class="hljs-attr">popover</span>: &#123;<br>        <span class="hljs-attr">title</span>: i18n.t(<span class="hljs-string">&#x27;msg.guide.langTitle&#x27;</span>),<br>        <span class="hljs-attr">description</span>: i18n.t(<span class="hljs-string">&#x27;msg.guide.langDesc&#x27;</span>),<br>        <span class="hljs-attr">position</span>: <span class="hljs-string">&#x27;bottom-right&#x27;</span><br>      &#125;<br>    &#125;,<br>    &#123;<br>      <span class="hljs-attr">element</span>: <span class="hljs-string">&#x27;#guide-tags&#x27;</span>,<br>      <span class="hljs-attr">popover</span>: &#123;<br>        <span class="hljs-attr">title</span>: i18n.t(<span class="hljs-string">&#x27;msg.guide.tagTitle&#x27;</span>),<br>        <span class="hljs-attr">description</span>: i18n.t(<span class="hljs-string">&#x27;msg.guide.tagDesc&#x27;</span>)<br>      &#125;<br>    &#125;,<br>    &#123;<br>      <span class="hljs-attr">element</span>: <span class="hljs-string">&#x27;#guide-sidebar&#x27;</span>,<br>      <span class="hljs-attr">popover</span>: &#123;<br>        <span class="hljs-attr">title</span>: i18n.t(<span class="hljs-string">&#x27;msg.guide.sidebarTitle&#x27;</span>),<br>        <span class="hljs-attr">description</span>: i18n.t(<span class="hljs-string">&#x27;msg.guide.sidebarDesc&#x27;</span>),<br>        <span class="hljs-attr">position</span>: <span class="hljs-string">&#x27;right-center&#x27;</span><br>      &#125;<br>    &#125;<br>  ]<br>&#125;<br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> steps<br><br></code></pre></td></tr></table></figure></details><h4 id="5、引导高亮区域添加ID"><a href="#5、引导高亮区域添加ID" class="headerlink" title="5、引导高亮区域添加ID"></a>5、引导高亮区域添加ID</h4><p>示例：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">svg-icon</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;guide-hamburger&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;hamburger&quot;</span> <span class="hljs-attr">:icon</span>=<span class="hljs-string">&quot;icon&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">svg-icon</span>&gt;</span><br><br><span class="hljs-comment">&lt;!-- 面包屑 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">breadcrumb</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;guide-breadcrumb&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;breadcrumb-container&quot;</span> /&gt;</span><br></code></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> vue3 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>69、screenfull组件</title>
      <link href="/2022/06/15/69-screenfull/"/>
      <url>/2022/06/15/69-screenfull/</url>
      
        <content type="html"><![CDATA[<p>screenfull组件:主要使用的是浏览器的2个API:Document.exitFullscreen():该方法用于请求从全屏模式切换到窗口模式；<br>Element.requestFullscreen()：该方法用于请求浏览器（user agent）将特定元素（甚至延伸到它的后代元素）置为全屏模式。<br>当通过document.getElementById(‘app’).requestFullscreen()在获取id=app的DOM之后，把该区域置为全屏</p><p>这种方法存在一定的问题（内容区域的AppMain）区域背景为黑色。</p><span id="more"></span><p>实现全屏显示模式，通常可以使用包装库：screenfull。</p><h2 id="一、实现"><a href="#一、实现" class="headerlink" title="一、实现"></a>一、实现</h2><p>1、安装screenfull</p><p>2、创建全屏组件</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">template</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">svg-icon</span></span><br><span class="hljs-tag">      <span class="hljs-attr">:icon</span>=<span class="hljs-string">&quot;isFullscreen ? &#x27;exit-fullscreen&#x27; : &#x27;fullscreen&#x27;&quot;</span></span><br><span class="hljs-tag">      @<span class="hljs-attr">click</span>=<span class="hljs-string">&quot;onToggle&quot;</span></span><br><span class="hljs-tag">    /&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs js"><br>&lt;script setup&gt;<br><span class="hljs-keyword">import</span> &#123; ref, onMounted, onUnmounted &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;vue&#x27;</span><br><span class="hljs-keyword">import</span> screenfull <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;screenfull&#x27;</span><br><br><span class="hljs-comment">// 是否全屏</span><br><span class="hljs-keyword">const</span> isFullscreen = ref(<span class="hljs-literal">false</span>)<br><br><span class="hljs-comment">// 监听变化</span><br><span class="hljs-keyword">const</span> change = <span class="hljs-function">() =&gt;</span> &#123;<br>  isFullscreen.value = screenfull.isFullscreen<br>&#125;<br><br><span class="hljs-comment">// 切换事件</span><br><span class="hljs-keyword">const</span> onToggle = <span class="hljs-function">() =&gt;</span> &#123;<br>  screenfull.toggle()<br>&#125;<br><br><span class="hljs-comment">// 设置侦听器</span><br>onMounted(<span class="hljs-function">() =&gt;</span> &#123;<br>  screenfull.on(<span class="hljs-string">&#x27;change&#x27;</span>, change)<br>&#125;)<br><br><span class="hljs-comment">// 删除侦听器</span><br>onUnmounted(<span class="hljs-function">() =&gt;</span> &#123;<br>  screenfull.off(<span class="hljs-string">&#x27;change&#x27;</span>, change)<br>&#125;)<br>&lt;/script&gt;<br><br></code></pre></td></tr></table></figure><p>3、引入全屏组件</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">screenfull</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;right-menu-item hover-effect&quot;</span> /&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">import</span> Screenfull <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@/components/Screenfull&#x27;</span><br></code></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> vue3 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>68、ESlint+Prettier+VSCode代码格式规范、git提交规范</title>
      <link href="/2022/06/07/68-eslint/"/>
      <url>/2022/06/07/68-eslint/</url>
      
        <content type="html"><![CDATA[<p>ESlint+Prettier+VSCode代码格式规范、git提交规范</p><span id="more"></span><h2 id="一、ESlint规范、Prettier格式化工具规范"><a href="#一、ESlint规范、Prettier格式化工具规范" class="headerlink" title="一、ESlint规范、Prettier格式化工具规范"></a>一、ESlint规范、Prettier格式化工具规范</h2><h3 id="1-eslintrc-js"><a href="#1-eslintrc-js" class="headerlink" title="1.  .eslintrc.js"></a>1.  .eslintrc.js</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// ESLint 配置文件遵循 commonJS 的导出规则，所导出的对象就是 ESLint 的配置对象</span><br><span class="hljs-comment">// 文档：https://eslint.bootcss.com/docs/user-guide/configuring</span><br><span class="hljs-built_in">module</span>.exports = &#123;<br>  <span class="hljs-comment">// 表示当前目录即为根目录，ESLint 规则将被限制到该目录下</span><br>  <span class="hljs-attr">root</span>: <span class="hljs-literal">true</span>,<br>  <span class="hljs-comment">// env 表示启用 ESLint 检测的环境</span><br>  <span class="hljs-attr">env</span>: &#123;<br>    <span class="hljs-comment">// 在 node 环境下启动 ESLint 检测</span><br>    <span class="hljs-attr">node</span>: <span class="hljs-literal">true</span><br>  &#125;,<br>  <span class="hljs-comment">// ESLint 中基础配置需要继承的配置</span><br>  <span class="hljs-attr">extends</span>: [<span class="hljs-string">&quot;plugin:vue/vue3-essential&quot;</span>, <span class="hljs-string">&quot;@vue/standard&quot;</span>],<br>  <span class="hljs-comment">// 解析器</span><br>  <span class="hljs-attr">parserOptions</span>: &#123;<br>    <span class="hljs-attr">parser</span>: <span class="hljs-string">&quot;babel-eslint&quot;</span><br>  &#125;,<br>  <span class="hljs-comment">// 需要修改的启用规则及其各自的错误级别</span><br>  <span class="hljs-comment">/**</span><br><span class="hljs-comment">   * 错误级别分为三种：</span><br><span class="hljs-comment">   * &quot;off&quot; 或 0 - 关闭规则</span><br><span class="hljs-comment">   * &quot;warn&quot; 或 1 - 开启规则，使用警告级别的错误：warn (不会导致程序退出)</span><br><span class="hljs-comment">   * &quot;error&quot; 或 2 - 开启规则，使用错误级别的错误：error (当被触发的时候，程序会退出)</span><br><span class="hljs-comment">   */</span><br>  <span class="hljs-attr">rules</span>: &#123;<br>    <span class="hljs-string">&quot;no-console&quot;</span>: process.env.NODE_ENV === <span class="hljs-string">&quot;production&quot;</span> ? <span class="hljs-string">&quot;warn&quot;</span> : <span class="hljs-string">&quot;off&quot;</span>,<br>    <span class="hljs-string">&quot;no-debugger&quot;</span>: process.env.NODE_ENV === <span class="hljs-string">&quot;production&quot;</span> ? <span class="hljs-string">&quot;warn&quot;</span> : <span class="hljs-string">&quot;off&quot;</span>,<br>    <span class="hljs-string">&#x27;space-before-function-paren&#x27;</span>: <span class="hljs-string">&#x27;off&#x27;</span>,<br>    <span class="hljs-string">&#x27;no-unused-expressions&#x27;</span>: <span class="hljs-string">&#x27;off&#x27;</span><br>  &#125;<br>&#125;;<br>space-before-<span class="hljs-function"><span class="hljs-keyword">function</span>-<span class="hljs-title">paren</span>:<span class="hljs-title">off</span> 关闭《方法名后增加空格》的规则</span><br><span class="hljs-function"></span><br></code></pre></td></tr></table></figure><h3 id="2、VSCode安装Prettier插件"><a href="#2、VSCode安装Prettier插件" class="headerlink" title="2、VSCode安装Prettier插件"></a>2、VSCode安装Prettier插件</h3><p>(1)新建.prettierrc  </p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs js">&#123;<br>  <span class="hljs-comment">// 不尾随分号</span><br>  <span class="hljs-string">&quot;semi&quot;</span>: <span class="hljs-literal">false</span>,<br>  <span class="hljs-comment">// 使用单引号</span><br>  <span class="hljs-string">&quot;singleQuote&quot;</span>: <span class="hljs-literal">true</span>,<br>  <span class="hljs-comment">// 多行逗号分割的语法中，最后一行不加逗号</span><br>  <span class="hljs-string">&quot;trailingComma&quot;</span>: <span class="hljs-string">&quot;none&quot;</span><br>&#125;<br></code></pre></td></tr></table></figure><p>(2)打开VSCode设置，搜索save,勾选Format On Save<br>VSCode默认一个tab是4个空格，可以修改成2个。</p><p>这样我们保存的代码，prettier会帮我们自动格式化成符合ESlint校验规则的代码。</p><h3 id="3、git提交规范"><a href="#3、git提交规范" class="headerlink" title="3、git提交规范"></a>3、git提交规范</h3><h4 id="1-、全局安装Commitizen"><a href="#1-、全局安装Commitizen" class="headerlink" title="(1)、全局安装Commitizen"></a>(1)、全局安装Commitizen</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js">npm install -g commitizen@<span class="hljs-number">4.2</span><span class="hljs-number">.4</span><br></code></pre></td></tr></table></figure><h4 id="2-、安装并配置cz-customizable"><a href="#2-、安装并配置cz-customizable" class="headerlink" title="(2)、安装并配置cz-customizable"></a>(2)、安装并配置cz-customizable</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">npm i cz-customizable@6.3.0 --save-dev<br></code></pre></td></tr></table></figure><p>在package.json中配置</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-string">&quot;config&quot;</span>: &#123;<br>  <span class="hljs-attr">&quot;commitizen&quot;</span>: &#123;<br>    <span class="hljs-attr">&quot;path&quot;</span>: <span class="hljs-string">&quot;node_modules/cz-customizable&quot;</span><br>  &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><h4 id="3-、根目录下创建-cz-config-js自定义提示文件"><a href="#3-、根目录下创建-cz-config-js自定义提示文件" class="headerlink" title="(3)、根目录下创建.cz-config.js自定义提示文件"></a>(3)、根目录下创建.cz-config.js自定义提示文件</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-built_in">module</span>.exports = &#123;<br>  <span class="hljs-comment">// 可选类型</span><br>  <span class="hljs-attr">types</span>: [<br>    &#123; <span class="hljs-attr">value</span>: <span class="hljs-string">&#x27;feat&#x27;</span>, <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;feat:     新功能&#x27;</span> &#125;,<br>    &#123; <span class="hljs-attr">value</span>: <span class="hljs-string">&#x27;fix&#x27;</span>, <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;fix:      修复&#x27;</span> &#125;,<br>    &#123; <span class="hljs-attr">value</span>: <span class="hljs-string">&#x27;docs&#x27;</span>, <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;docs:     文档变更&#x27;</span> &#125;,<br>    &#123; <span class="hljs-attr">value</span>: <span class="hljs-string">&#x27;style&#x27;</span>, <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;style:    代码格式(不影响代码运行的变动)&#x27;</span> &#125;,<br>    &#123;<br>      <span class="hljs-attr">value</span>: <span class="hljs-string">&#x27;refactor&#x27;</span>,<br>      <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;refactor: 重构(既不是增加feature，也不是修复bug)&#x27;</span><br>    &#125;,<br>    &#123; <span class="hljs-attr">value</span>: <span class="hljs-string">&#x27;perf&#x27;</span>, <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;perf:     性能优化&#x27;</span> &#125;,<br>    &#123; <span class="hljs-attr">value</span>: <span class="hljs-string">&#x27;test&#x27;</span>, <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;test:     增加测试&#x27;</span> &#125;,<br>    &#123; <span class="hljs-attr">value</span>: <span class="hljs-string">&#x27;chore&#x27;</span>, <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;chore:    构建过程或辅助工具的变动&#x27;</span> &#125;,<br>    &#123; <span class="hljs-attr">value</span>: <span class="hljs-string">&#x27;revert&#x27;</span>, <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;revert:   回退&#x27;</span> &#125;,<br>    &#123; <span class="hljs-attr">value</span>: <span class="hljs-string">&#x27;build&#x27;</span>, <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;build:    打包&#x27;</span> &#125;<br>  ],<br>  <span class="hljs-comment">// 消息步骤</span><br>  <span class="hljs-attr">messages</span>: &#123;<br>    <span class="hljs-attr">type</span>: <span class="hljs-string">&#x27;请选择提交类型:&#x27;</span>,<br>    <span class="hljs-attr">customScope</span>: <span class="hljs-string">&#x27;请输入修改范围(可选):&#x27;</span>,<br>    <span class="hljs-attr">subject</span>: <span class="hljs-string">&#x27;请简要描述提交(必填):&#x27;</span>,<br>    <span class="hljs-attr">body</span>: <span class="hljs-string">&#x27;请输入详细描述(可选):&#x27;</span>,<br>    <span class="hljs-attr">footer</span>: <span class="hljs-string">&#x27;请输入要关闭的issue(可选):&#x27;</span>,<br>    <span class="hljs-attr">confirmCommit</span>: <span class="hljs-string">&#x27;确认使用以上信息提交？(y/n/e/h)&#x27;</span><br>  &#125;,<br>  <span class="hljs-comment">// 跳过问题</span><br>  <span class="hljs-attr">skipQuestions</span>: [<span class="hljs-string">&#x27;body&#x27;</span>, <span class="hljs-string">&#x27;footer&#x27;</span>],<br>  <span class="hljs-comment">// subject文字长度默认是72</span><br>  <span class="hljs-attr">subjectLimit</span>: <span class="hljs-number">72</span><br>&#125;<br></code></pre></td></tr></table></figure><h4 id="4-、使用git-cz代替git-commit"><a href="#4-、使用git-cz代替git-commit" class="headerlink" title="(4)、使用git cz代替git commit"></a>(4)、使用git cz代替git commit</h4><p>并不是所有人都记得使用git cz  还需要加上Git Hooks</p><h3 id="4、Git-Hooks"><a href="#4、Git-Hooks" class="headerlink" title="4、Git Hooks"></a>4、Git Hooks</h3><p>Git Hooks常用的2个钩子：<br>1、commit-msg：可以用来规范化标准格式，并且可以按需指定是否要拒绝本次提交<br>2、pre-commit：会在提交前被调用，并且可以按需指定是否要拒绝本次提交</p><h4 id="（1）commitlint和husky-2个工具的安装与配置"><a href="#（1）commitlint和husky-2个工具的安装与配置" class="headerlink" title="（1）commitlint和husky 2个工具的安装与配置"></a>（1）commitlint和husky 2个工具的安装与配置</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">npm install --save-dev @commitlint/config-conventional@12.1.4 @commitlint/cli@12.1.4<br><br></code></pre></td></tr></table></figure><p>创建commitlint.config.js</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">echo &quot;module.exports = &#123;extends: [&#x27;@commitlint/config-conventional&#x27;]&#125;&quot; &gt; commitlint.config.js<br></code></pre></td></tr></table></figure><p>配置commitlint.config.js</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-built_in">module</span>.exports = &#123;<br>  <span class="hljs-comment">// 继承的规则</span><br>  <span class="hljs-attr">extends</span>: [<span class="hljs-string">&#x27;@commitlint/config-conventional&#x27;</span>],<br>  <span class="hljs-comment">// 定义规则类型</span><br>  <span class="hljs-attr">rules</span>: &#123;<br>    <span class="hljs-comment">// type 类型定义，表示 git 提交的 type 必须在以下类型范围内</span><br>    <span class="hljs-string">&#x27;type-enum&#x27;</span>: [<br>      <span class="hljs-number">2</span>,<br>      <span class="hljs-string">&#x27;always&#x27;</span>,<br>      [<br>        <span class="hljs-string">&#x27;feat&#x27;</span>, <span class="hljs-comment">// 新功能 feature</span><br>        <span class="hljs-string">&#x27;fix&#x27;</span>, <span class="hljs-comment">// 修复 bug</span><br>        <span class="hljs-string">&#x27;docs&#x27;</span>, <span class="hljs-comment">// 文档注释</span><br>        <span class="hljs-string">&#x27;style&#x27;</span>, <span class="hljs-comment">// 代码格式(不影响代码运行的变动)</span><br>        <span class="hljs-string">&#x27;refactor&#x27;</span>, <span class="hljs-comment">// 重构(既不增加新功能，也不是修复bug)</span><br>        <span class="hljs-string">&#x27;perf&#x27;</span>, <span class="hljs-comment">// 性能优化</span><br>        <span class="hljs-string">&#x27;test&#x27;</span>, <span class="hljs-comment">// 增加测试</span><br>        <span class="hljs-string">&#x27;chore&#x27;</span>, <span class="hljs-comment">// 构建过程或辅助工具的变动</span><br>        <span class="hljs-string">&#x27;revert&#x27;</span>, <span class="hljs-comment">// 回退</span><br>        <span class="hljs-string">&#x27;build&#x27;</span> <span class="hljs-comment">// 打包</span><br>      ]<br>    ],<br>    <span class="hljs-comment">// subject 大小写不做校验</span><br>    <span class="hljs-string">&#x27;subject-case&#x27;</span>: [<span class="hljs-number">0</span>]<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>注意：确保此文件为UTF-8编码格式</p></blockquote><p>安装husky:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">npm install husky@7.0.1 --save-dev<br></code></pre></td></tr></table></figure><p>启动hooks，生成.husky文件夹</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">npx husky install<br></code></pre></td></tr></table></figure><p>在package.json中生成prepare指令（npm版本 &gt; 7.0）</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">npm set-script prepare &quot;husky install&quot;<br></code></pre></td></tr></table></figure><p>执行prepare指令</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">npm run prepare<br></code></pre></td></tr></table></figure><p>添加 commitlint 的 hook 到 husky中，并指令在 commit-msg 的 hooks 下执行 npx –no-install commitlint –edit “$1” 指令</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">npx husky add .husky/commit-msg &#x27;npx --no-install commitlint --edit &quot;$1&quot;&#x27;<br><br></code></pre></td></tr></table></figure><p>pre-commit规避格式错误的提交<br>通过 husky 监测 pre-commit 钩子，在该钩子下执行 npx eslint –ext .js,.vue src 指令来去进行相关检测：</p><p>执行 npx husky add .husky/pre-commit “npx eslint –ext .js,.vue src” 添加 commit 时的 hook （npx eslint –ext .js,.vue src 会在执行到该 hook 时运行）</p><p>该操作会生成对应文件 pre-commit：</p><p>lint-staged 自动修复格式错误</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-string">&quot;lint-staged&quot;</span>: &#123;<br>  <span class="hljs-attr">&quot;src/**/*.&#123;js,vue&#125;&quot;</span>: [<br>    <span class="hljs-string">&quot;eslint --fix&quot;</span>,<br>    <span class="hljs-string">&quot;git add&quot;</span><br>  ]<br>&#125;<br></code></pre></td></tr></table></figure><p>修改 .husky/pre-commit 文件</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs js">#!<span class="hljs-regexp">/bin/</span>sh<br>. <span class="hljs-string">&quot;$(dirname &quot;</span>$<span class="hljs-number">0</span><span class="hljs-string">&quot;)/_/husky.sh&quot;</span><br><br>npx lint-staged<br><br><br></code></pre></td></tr></table></figure><h3 id="5、package-json"><a href="#5、package-json" class="headerlink" title="5、package.json"></a>5、package.json</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">&quot;scripts&quot;: &#123;<br>  &quot;prepare&quot;: &quot;husky install&quot;<br>&#125;,<br>&quot;config&quot;: &#123;<br>  &quot;commitizen&quot;: &#123;<br>    &quot;path&quot;: &quot;node_modules/cz-customizable&quot;<br>  &#125;<br>&#125;,<br>&quot;gitHooks&quot;: &#123;<br>  &quot;pre-commit&quot;: &quot;lint-staged&quot;<br>&#125;,<br>&quot;lint-staged&quot;: &#123;<br>  &quot;src/**/*.&#123;js,vue&#125;&quot;: [<br>    &quot;eslint --fix&quot;,<br>    &quot;git add&quot;<br>  ]<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> eslint </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>67、ant-design-vue-table</title>
      <link href="/2022/05/10/67-ant-design-vue-table/"/>
      <url>/2022/05/10/67-ant-design-vue-table/</url>
      
        <content type="html"><![CDATA[<p>column列描述数据对象，customRender:生成复杂数据的渲染函数，参数分别为当前行的值，当前行数据，行索引，@return 里面可以设置表格行/列合并。</p><span id="more"></span><p>将列表里后端返回的空数据使用”-“填充。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> columns = [&#123;<br><span class="hljs-attr">title</span>:<span class="hljs-string">&#x27;开始时间&#x27;</span>，<br><span class="hljs-attr">dataIndex</span>:<span class="hljs-string">&#x27;start_date&#x27;</span>,<br><span class="hljs-attr">key</span>:<span class="hljs-string">&#x27;start_date&#x27;</span>,<br><span class="hljs-attr">align</span>:<span class="hljs-string">&#x27;center&#x27;</span>,<br><span class="hljs-attr">ellipsis</span>:<span class="hljs-literal">true</span>,<br><span class="hljs-attr">width</span>:<span class="hljs-number">250</span>,<br><span class="hljs-attr">customRender</span>: <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">text, row, index</span>) </span>&#123;<br>    <span class="hljs-keyword">if</span> (row.start_date == <span class="hljs-literal">null</span>) &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;-&#x27;</span><br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-keyword">return</span> row.start_date<br>    &#125;<br>&#125;,<br>&#125;]<br></code></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> ant-design-vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>66、Mac系统升级后桌面文件夹及文件消失</title>
      <link href="/2022/04/19/66-mac-finder/"/>
      <url>/2022/04/19/66-mac-finder/</url>
      
        <content type="html"><![CDATA[<p>解决方式：终端输入如下命令即可</p><figure class="highlight shell"><figcaption><span>script</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell">defaults write com.apple.finder CreateDesktop -bool true; killall Finder<br>// 显示/隐藏  隐藏文件<br>command shift + .<br></code></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> other </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>65、响应式原理</title>
      <link href="/2022/04/12/65-reactive/"/>
      <url>/2022/04/12/65-reactive/</url>
      
        <content type="html"><![CDATA[<span id="more"></span><p>1、什么是响应式？</p><p>数据变化可以被检测对这种变化做出响应的机制</p><p>2、Vue为什么需要响应式？</p><p>MVVM框架需要解决的核心问题技术就是连接数据层和视图层，<br>通过数据驱动应用，数据变化，试图更新，要做到这点就需要对数据做响应式处理，这样一旦数据发生变化就可以立即做出更新处理。</p><p>3、响应式的好处？</p><p>通过数据响应式加上虚拟DOM和patch算法，开发人员只需要操作数据，关心业务，完全不用接触繁琐的DOM操作，大大提升开发效率，降低开发难度。</p><p>4、如何实现Vue的响应式？优缺点？</p><p>Vue2肿的数据响应式会根据数据类型来做不同处理，如果是对象采用Object.defineProperty()的方式定义数据拦截，当数据被访问或发生变化时，我们感知并做出响应；<br>如果是数组则通过覆盖数组对象原型的7个变更方法，使这些方法可以额外的做更新通知，从而作出响应。<br>这种机制很好的解决了数据响应化问题，但是也存在一些缺点：<br>初始化时的递归遍历会造成性能损失；新增或者删除属性需要使用Vue.set/delete这些特殊的API才能生效；对于es6中新产生的Map、Set这些数据结构不支持。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">defineReactive</span>(<span class="hljs-params">obj,key,val</span>)</span>&#123;<br>  <span class="hljs-built_in">Object</span>.defineProperty(obj,key,&#123;<br>    <span class="hljs-function"><span class="hljs-title">get</span>(<span class="hljs-params">key</span>)</span>&#123;&#125;,<br>    <span class="hljs-function"><span class="hljs-title">set</span>(<span class="hljs-params">key,val</span>)</span>&#123;&#125;<br>  &#125;)<br>&#125;<br></code></pre></td></tr></table></figure><p>5、Vue3如何实现响应式？</p><p>利用es6的Proxy代理响应式的数据。<br>好处：不需要特殊的api，初始化性能和内存小号都得到了大幅改善<br>由于响应化的实现代码抽取为独立的reactivity报，使得我们可以灵活的使用它，第三方的扩展开发更加的灵活</p><p>Proxy属性拦截的原理：利用get、set、deleteProperty这3个trap实现拦截</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">reactive</span>(<span class="hljs-params">obj</span>)</span>&#123;<br>  <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-built_in">Proxy</span>(obj,&#123;<br>    <span class="hljs-function"><span class="hljs-title">get</span>(<span class="hljs-params">target,key</span>)</span>&#123;&#125;,<br>    <span class="hljs-function"><span class="hljs-title">set</span>(<span class="hljs-params">target,key,val</span>)</span>&#123;&#125;,<br>    <span class="hljs-function"><span class="hljs-title">deleteProperty</span>(<span class="hljs-params">target,key</span>)</span>&#123;&#125;<br>  &#125;)<br>&#125;<br></code></pre></td></tr></table></figure><p>proxy更快的原因：初始化时懒处理，用户访问才做拦截处理，初始化更快。</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs ts"><span class="hljs-comment">// https://github1s.com/vuejs/core/blob/HEAD/packages/reactivity/src/baseHandlers.ts</span><br>    <span class="hljs-keyword">if</span> (isObject(res)) &#123;<br>      <span class="hljs-comment">// Convert returned value into a proxy as well. we do the isObject check</span><br>      <span class="hljs-comment">// here to avoid invalid value warning. Also need to lazy access readonly</span><br>      <span class="hljs-comment">// and reactive here to avoid circular dependency.</span><br>      <span class="hljs-keyword">return</span> isReadonly ? <span class="hljs-keyword">readonly</span>(res) : reactive(res)<br>    &#125;<br></code></pre></td></tr></table></figure><p>轻量的依赖关系保存：利用WeakMap\Map\Set保存响应式数据和副作用之间的依赖关系。</p>]]></content>
      
      
      
        <tags>
            
            <tag> vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>63、ant-design-vue v-model.trim不生效</title>
      <link href="/2022/04/06/63-ant-design-vue-trim/"/>
      <url>/2022/04/06/63-ant-design-vue-trim/</url>
      
        <content type="html"><![CDATA[<p>同element-ui一样，el-input和a-input  均不支持v-model修饰符。</p><span id="more"></span><p>解决办法：</p><p>element-ui示例代码：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">el-form-item</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">el-input</span></span><br><span class="hljs-tag">        <span class="hljs-attr">placeholder</span>=<span class="hljs-string">&quot;请输入内容&quot;</span></span><br><span class="hljs-tag">        <span class="hljs-attr">v-model</span>=<span class="hljs-string">&quot;queryInfo.name&quot;</span></span><br><span class="hljs-tag">        @<span class="hljs-attr">blur</span>=<span class="hljs-string">&quot;queryInfo.name=$event.target.value.trim()&quot;</span></span><br><span class="hljs-tag">        <span class="hljs-attr">clearable</span></span><br><span class="hljs-tag">        <span class="hljs-attr">maxlength</span>=<span class="hljs-string">&quot;11&quot;</span></span><br><span class="hljs-tag">    &gt;</span><br><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">el-input</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">el-form-item</span>&gt;</span><br></code></pre></td></tr></table></figure><p>ant-design-vue示例代码：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">a-form-item</span> <span class="hljs-attr">label</span>=<span class="hljs-string">&quot;租户名称&quot;</span>&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">a-input</span> <span class="hljs-attr">placeholder</span>=<span class="hljs-string">&quot;请输入租户名称&quot;</span> <span class="hljs-attr">v-model</span>=<span class="hljs-string">&quot;queryInfo.name&quot;</span> <span class="hljs-attr">allowClear</span> /&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">a-form-item</span>&gt;</span><br></code></pre></td></tr></table></figure><p>去空格函数</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs js">methods:&#123;<br>    <span class="hljs-function"><span class="hljs-title">tirmHandler</span>(<span class="hljs-params">target, prop</span>)</span>&#123;<br>        <span class="hljs-keyword">if</span> (target &amp;&amp; target[prop] &amp;&amp; target[prop].trim) &#123;<br>            target[prop] = target[prop].trim()<br>        &#125;<br>    &#125;,<br>    <span class="hljs-function"><span class="hljs-title">handleCnfirm</span>(<span class="hljs-params"></span>)</span>&#123;<br>        <span class="hljs-built_in">this</span>.trimHandler(<span class="hljs-built_in">this</span>.queryInfo.name,<span class="hljs-string">&#x27;name&#x27;</span>)<br>    &#125;   <br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> ant-design-vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>64、ant-design-vue-picker</title>
      <link href="/2022/04/06/64-ant-design-vue-picker/"/>
      <url>/2022/04/06/64-ant-design-vue-picker/</url>
      
        <content type="html"><![CDATA[<p>ant-design-vue 限制时间选择框,展示2天内数据且只能选择7日范围内（截止时间不得超过当日）</p><span id="more"></span><p>1、template</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">a-form-item</span> <span class="hljs-attr">label</span>=<span class="hljs-string">&quot;时间&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">a-range-picker</span></span><br><span class="hljs-tag">    <span class="hljs-attr">v-model</span>=<span class="hljs-string">&quot;rangeTime&quot;</span></span><br><span class="hljs-tag">    <span class="hljs-attr">:allowClear</span>=<span class="hljs-string">&quot;false&quot;</span></span><br><span class="hljs-tag">    <span class="hljs-attr">:disabled-date</span>=<span class="hljs-string">&quot;disableDate&quot;</span></span><br><span class="hljs-tag">    @<span class="hljs-attr">change</span>=<span class="hljs-string">&quot;onChange&quot;</span></span><br><span class="hljs-tag">    @<span class="hljs-attr">openChange</span>=<span class="hljs-string">&quot;openChange&quot;</span></span><br><span class="hljs-tag">    <span class="hljs-attr">:placeholder</span>=<span class="hljs-string">&quot;[&#x27;开始时间&#x27;, &#x27;结束时间&#x27;]&quot;</span></span><br><span class="hljs-tag">  /&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">a-form-item</span>&gt;</span><br></code></pre></td></tr></table></figure><p>2、js</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// data</span><br><span class="hljs-attr">rangeTime</span>: [moment(<span class="hljs-built_in">Date</span>.now() - <span class="hljs-number">1</span> * <span class="hljs-number">24</span> * <span class="hljs-number">3600</span> * <span class="hljs-number">1000</span>), moment(<span class="hljs-built_in">Date</span>.now())],<br><span class="hljs-attr">firstSelectTime</span>: <span class="hljs-literal">null</span>,<br><br><br><span class="hljs-comment">//  methods</span><br><span class="hljs-comment">// 日期校验</span><br><span class="hljs-function"><span class="hljs-title">disableDate</span>(<span class="hljs-params">current</span>)</span> &#123;<br>  <span class="hljs-keyword">let</span> nowDate = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Date</span>()<br>  nowDate.setMilliseconds(<span class="hljs-number">0</span>)<br>  nowDate.setSeconds(<span class="hljs-number">0</span>)<br>  nowDate.setMinutes(<span class="hljs-number">0</span>)<br>  nowDate.setHours(<span class="hljs-number">0</span>)<br>  <span class="hljs-keyword">let</span> isOut30 = <span class="hljs-literal">false</span><br>  <span class="hljs-keyword">if</span> (<span class="hljs-built_in">this</span>.firstSelectTime) &#123;<br>    <span class="hljs-keyword">if</span> (<br>      current &gt; <span class="hljs-built_in">this</span>.firstSelectTime + <span class="hljs-number">6</span> * <span class="hljs-number">24</span> * <span class="hljs-number">3600</span> * <span class="hljs-number">1000</span> ||<br>      current &lt; <span class="hljs-built_in">this</span>.firstSelectTime - <span class="hljs-number">6</span> * <span class="hljs-number">24</span> * <span class="hljs-number">3600</span> * <span class="hljs-number">1000</span><br>    ) &#123;<br>      isOut30 = <span class="hljs-literal">true</span><br>    &#125;<br>  &#125;<br>  <span class="hljs-keyword">return</span> current &amp;&amp; (current &gt; <span class="hljs-built_in">Date</span>.now() || isOut30)<br>&#125;,<br><span class="hljs-function"><span class="hljs-title">calendarChange</span>(<span class="hljs-params">dates, dateStrings</span>)</span> &#123;<br>  <span class="hljs-built_in">this</span>.firstSelectTime = moment(<span class="hljs-built_in">Date</span>.now() - <span class="hljs-number">1</span> * <span class="hljs-number">24</span> * <span class="hljs-number">3600</span> * <span class="hljs-number">1000</span>)<br>&#125;,<br><span class="hljs-function"><span class="hljs-title">openChange</span>(<span class="hljs-params">status</span>)</span> &#123;<br>  <span class="hljs-built_in">this</span>.firstSelectTime = moment(<span class="hljs-built_in">Date</span>.now() - <span class="hljs-number">1</span> * <span class="hljs-number">24</span> * <span class="hljs-number">3600</span> * <span class="hljs-number">1000</span>)<br>&#125;,<br></code></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> ant-design-vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>62、权限管理</title>
      <link href="/2022/03/12/62-permmsion/"/>
      <url>/2022/03/12/62-permmsion/</url>
      
        <content type="html"><![CDATA[<ol><li>权限管理一般需求是页面权限和按钮权限的管理</li><li>具体实现的时候分后端和前端两种方案：<br>前端方案会把所有路由信息在前端配置，通过路由守卫要求用户登录，用户登录后根据角色过滤出路由表。比如我会配置一个 asyncRoutes‘数组，需要认证的页面在其路由的‘meta’中添加一个 roles*字段，等获取用户角色之后取两者的交集，若结果不为空则说明可以访问。此过滤过程结束，剩下的路由就是该用户能访问的页面，最后通过‘router.addRoutes(accessRoutes)°方式动态添加路由即可。<br>后端方案会把所有页面路由信息存在数据库中，用户登录的时候根据其角色查询得到其能访问的所有页面路由信息返回给前端，前端再通过 addRoutes‘动态添加路由信息<br>按钮权限的控制通常会实现一个指令，例如V-permissin’，将按钮要求角色通过值传给vpermission指<br>令，在指令的 moutned钩子中可以判断当前用户角色和按钮是否存在交集，有则保留按钮，无则移除按钮。</li><li>纯前端方案的优点是实现简单，不需要额外权限管理页面，但是维护起来问题比较大，有新的页面和角色需求就要修改前端代码重新打包部署；服务端方案就不存在这个问题，通过专门的角色和权限管理页面，配置页面和按钮权限信息到数据库，应用每次登陆时获取的都是最新的路由信息，可谓一劳永逸！</li></ol>]]></content>
      
      
      
        <tags>
            
            <tag> vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>61、js如何将base64转成16进制</title>
      <link href="/2022/03/01/61-base64To16/"/>
      <url>/2022/03/01/61-base64To16/</url>
      
        <content type="html"><![CDATA[<p>需求：将base64密文解密成16进制。</p><span id="more"></span><p>1、原生js的编码(btoa)和解码(atob)</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> baseStr = <span class="hljs-string">&quot;http://www.baidu.com&quot;</span><br><span class="hljs-keyword">var</span> encodedData = <span class="hljs-built_in">window</span>.btoa(baseStr)<br><span class="hljs-built_in">console</span>.log(encodedData) <span class="hljs-comment">//aHR0cDovL3d3dy5iYWlkdS5jb20=</span><br><br><span class="hljs-keyword">var</span> decodedData = <span class="hljs-built_in">window</span>.atob(encodedData)<br><span class="hljs-built_in">console</span>.log(decodedData) <span class="hljs-comment">// http://www.baidu.com</span><br></code></pre></td></tr></table></figure><p>2、base64转16进制</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-function"><span class="hljs-title">stringToHex</span>(<span class="hljs-params">base64</span>)</span>&#123;<br>  <span class="hljs-keyword">var</span> raw = atob(base64)<br>  <span class="hljs-keyword">var</span> HEX = <span class="hljs-string">&#x27;&#x27;</span><br>  <span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> i = <span class="hljs-number">0</span>; i &lt; raw.length; i++) &#123;<br>    <span class="hljs-keyword">var</span> _hex = raw.charCodeAt(i).toString(<span class="hljs-number">16</span>)<br>    HEX += _hex.length == <span class="hljs-number">2</span> ? _hex : <span class="hljs-string">&#x27;0&#x27;</span> + _hex<br>  &#125;<br>  <span class="hljs-keyword">return</span> HEX<br>  <span class="hljs-comment">// return HEX.toUpperCase()  将字符串转换成大写格式</span><br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> js </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>60、什么是上位机、下位机?</title>
      <link href="/2022/02/28/60-Upper-Lower/"/>
      <url>/2022/02/28/60-Upper-Lower/</url>
      
        <content type="html"><![CDATA[<p>上位机在系统中起主控作用，主要作为系统的规划控制，属于决策层；而下位机是具体执行层，主要完成系统规划层下达的任务。</p><span id="more"></span><p>1.通常上位机和下位机通讯可以采用不同的通讯协议，可以有RS232的串口通讯或者采用RS485串行通讯。<br>当用计算机和PLC通讯的时候，不但可以采用传统的D形式的串行通讯，还可以采用更适合工业控制的双线的PROFIBUS-DP通讯。</p><p>2.上位机与下位机之间的关系：上位机给下位机发送控制命令，下位机收到此命令并执行相应的动作；<br>上位机给下位机发送状态获取命令，下位机收到此命令后调用传感器测量，然后转化为数字信息反馈给上位机；下位机主动发送状态信息或报警信息给上位机。</p><p>3.下位机指直接与机器相连接的计算机或单片机，一般用于接收和反馈上位机的指令，并且根据指令控制机器执行动作以及从机器传感器读取数据。<br>典型设备类型：PLC，stm32，51，FPGA，ARM等各类可编程芯片。</p>]]></content>
      
      
      
        <tags>
            
            <tag> other </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>59、ant-design-vue select下拉框组件</title>
      <link href="/2022/02/26/59-ant-design-vue/"/>
      <url>/2022/02/26/59-ant-design-vue/</url>
      
        <content type="html"><![CDATA[<p>问题：选中select的某一项，下拉框不显示已选择项？</p><span id="more"></span><p>解决方式：<br>    添加chang事件：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">a-form-item</span> <span class="hljs-attr">label</span>=<span class="hljs-string">&quot;状态&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">a-select</span> <span class="hljs-attr">v-model</span>=<span class="hljs-string">&quot;queryInfo.statusCode&quot;</span> <span class="hljs-attr">placeholder</span>=<span class="hljs-string">&quot;请选择状态&quot;</span> <span class="hljs-attr">allowClear</span> @<span class="hljs-attr">change</span>=<span class="hljs-string">&quot;selectChange&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">a-select-option</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;voltageStatusScope3&quot;</span>&gt;</span>一<span class="hljs-tag">&lt;/<span class="hljs-name">a-select-option</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">a-select-option</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;voltageStatusScope2&quot;</span>&gt;</span>二<span class="hljs-tag">&lt;/<span class="hljs-name">a-select-option</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">a-select-option</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;voltageStatusScope1&quot;</span>&gt;</span>三<span class="hljs-tag">&lt;/<span class="hljs-name">a-select-option</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">a-select</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">a-form-item</span>&gt;</span><br>```    <br><br>```js<br>selectChange()&#123;<br>    this.$forceUpdate();<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> ant-design-vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>58、解决Homebrew安装失败</title>
      <link href="/2022/02/25/58-homebrew/"/>
      <url>/2022/02/25/58-homebrew/</url>
      
        <content type="html"><![CDATA[<p>Homebrew是一款Mac OS平台下的软件包管理工具，拥有安装、卸载、更新、查看、搜索等很多实用的功能。</p><span id="more"></span><h2 id="一、安装"><a href="#一、安装" class="headerlink" title="一、安装"></a>一、安装</h2><p>官网安装方式：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js">/usr/bin/ruby -e <span class="hljs-string">&quot;$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)&quot;</span><br></code></pre></td></tr></table></figure><p>官网安装一直失败。。。。(不适合国内用户)</p><h2 id="二、解决方式"><a href="#二、解决方式" class="headerlink" title="二、解决方式"></a>二、解决方式</h2><p>1、终端输入：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js">/bin/zsh -c <span class="hljs-string">&quot;$(curl -fsSL https://gitee.com/cunkai/HomebrewCN/raw/master/Homebrew.sh)&quot;</span><br></code></pre></td></tr></table></figure><p>2、选择一个镜像</p><blockquote><p>1、中科大下载源<br>2、清华大学下载源 …</p></blockquote><p>3、查看本地软件库列表</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js">brew ls<br></code></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> tool </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>57、Vue2/Vue3 响应式原理</title>
      <link href="/2022/02/24/57-vue2-defineProperty/"/>
      <url>/2022/02/24/57-vue2-defineProperty/</url>
      
        <content type="html"><![CDATA[<p>Vue官网：当把一个普通的对象传入Vue实例作为data选项，Vue将遍历此对象所有的属性，并使用Object.defineProperty把这些数星星全部转化为getter/setter。Object.defineProperty是ES5中一个无法shim的特性（查了一下shim的意思：就是可以将新的API引入到旧的环境中，而且仅靠环境中的已有手段实现，Obejct.defineProperty无法在低级浏览器中的方法实现），这也就是Vue不支持IE8以及更低版本浏览器的原因。</p><span id="more"></span><h2 id="一、Vue无法检测对象属性添加或删除"><a href="#一、Vue无法检测对象属性添加或删除" class="headerlink" title="一、Vue无法检测对象属性添加或删除"></a>一、Vue无法检测对象属性添加或删除</h2><p>Object.defineProperty 没有对对象的新属性进⾏属性劫持 </p><blockquote><p>原因：由于Vue会在初始化实例时对对象的属性执行getter/setter转化，所以属性必须在data对象上存在才能让Vue将它转换为响应式的。</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> vm = <span class="hljs-keyword">new</span> Vue(&#123;<br>    <span class="hljs-attr">data</span>:&#123;<br>        <span class="hljs-attr">a</span>:<span class="hljs-number">1</span><br>    &#125;<br>&#125;)<br><br>vm.a 是响应式<br>vm.b 是非响应式<br></code></pre></td></tr></table></figure><p>解决无法检测对象属性的增加、删除的方法：Vue.set(object,propertyName,value)(增加属性)、Vue.delete()（删除属性）</p><h2 id="二、Vue不能检测数组的变动"><a href="#二、Vue不能检测数组的变动" class="headerlink" title="二、Vue不能检测数组的变动"></a>二、Vue不能检测数组的变动</h2><p>数组是一个特殊的JavaScript对象，Vue没有对数组进⾏ Object.defineProperty 的属性劫持，所以会存在的问题：</p><p>不能检测数组变动的2类问题：</p><blockquote><p>1、当你利用索引直接设置一个数组项时，例如：vm.items[indexOfItem] = newValue<br>2、当你修改数组的长度时，例如：vm.items.length = newLength</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> vm = <span class="hljs-keyword">new</span> Vue(&#123;<br>    <span class="hljs-attr">data</span>:&#123;<br>        <span class="hljs-attr">items</span>: [<span class="hljs-string">&#x27;a&#x27;</span><span class="hljs-string">&#x27;,&#x27;</span>b<span class="hljs-string">&#x27;,&#x27;</span>c<span class="hljs-string">&#x27;]</span><br><span class="hljs-string">    &#125;</span><br><span class="hljs-string">&#125;)</span><br><span class="hljs-string"></span><br><span class="hljs-string">vvm.items[1] = &#x27;</span>x<span class="hljs-string">&#x27; // 非响应式</span><br><span class="hljs-string">vm.items.length = 2 // 非响应式</span><br></code></pre></td></tr></table></figure><p>解决利用索引值设置一个数组项的方法：</p><blockquote><p>vm.$set(vm.items, indexOfItem, newValue)</p></blockquote><p>解决第2个问题：</p><blockquote><p>vm.items.splice(newLength)  // Array.prototype.slice</p></blockquote><h2 id="三、Vue2-为什么不劫持数组？"><a href="#三、Vue2-为什么不劫持数组？" class="headerlink" title="三、Vue2 为什么不劫持数组？"></a>三、Vue2 为什么不劫持数组？</h2><p>Vue2使用的Object.defineProperty无法监控到数组下标的变化，导致通过数组下标添加元素，不能实时响应； Object.defineProperty是可以监听数组下标变化的，对于javascript来讲，数组也是属于Object。</p><p>尤雨溪说过：为了性能！！！</p><p>原因：</p><blockquote><p>1、因为数组的位置不固定，数量多变，正常对象key对应value一般不会变，但是如果数组删除了某个元素。比如第一个元素被删除或者头部增加一个元素，那么将导致后面所有的key对应value错位，如果6个元素，也就会触发5次set。<br>2、数组元素可能非常非常多，每个元素进行劫持有一定浪费，这可能是Evan you对性能的考虑。<br>3、Vue将数组的7个变异方法进行了重写，也就是更改了Array原型上的方法达到劫持变化。</p></blockquote><p>Vue3 的 proxy<br>Object.defineProperty只能劫持对象的属性，从而需要对每个对象，每个属性进行遍历，如果，属性值是对象，还需要深度遍历。</p><p>Proxy可以劫持整个对象，并返回一个新的对象。</p><p>所以为什么proxy优于Object.defineProperty？</p><p>Object.defineProperty必须“预先”劫持属性。被劫持的属性才会被监听到。所以后添加的属性，需要手动再次劫持。</p><p>而proxy代理了整个对象，不需要预先劫持属性，而是在获取/修改的时候，通过get/set方法来告诉你key。所以不管如何新增属性，总是能被捕获到。</p><h2 id="四、Vue响应式原理"><a href="#四、Vue响应式原理" class="headerlink" title="四、Vue响应式原理"></a>四、Vue响应式原理</h2><p>整体思路是数据劫持+观察者模式：</p><p>对象内部通过 defineReactive ⽅法，使⽤ Object.defineProperty 将属性进⾏劫持（只会劫持已经存在的属性），数组则是通过重写数组⽅法来实现。当⻚⾯使⽤对应属性时，每个属性都拥有⾃⼰的 dep 属性，存放他所依赖的 watcher （依赖收集），当属性变化后会通知⾃⼰对应的 watcher 去更新(派发更新)。</p><blockquote><p>Vue响应式原理的核心：就是Observer、Dep、Watcher。Observer中进行响应式的绑定，在数据被读的时候，触发get方法，执行Dep来收集依赖，也就是收集Watcher。在数据被改的时候，触发set方法，通过对应的所有依赖(Watcher)，去执行更新。比如watch和computed就执行开发者自定义的回调方法。</p></blockquote><h2 id="五、为什么只对对象劫持，对数组方法进行重写？"><a href="#五、为什么只对对象劫持，对数组方法进行重写？" class="headerlink" title="五、为什么只对对象劫持，对数组方法进行重写？"></a>五、为什么只对对象劫持，对数组方法进行重写？</h2><blockquote><p>因为对象最多也就⼏⼗个属性，拦截起来数量不多，但是数组可能会有⼏百⼏千项，拦截起来⾮常耗性能，所以直接重写数组原型上的⽅法，是⽐较节省性能的⽅案</p></blockquote><h2 id="六、实现一个数据双向绑定"><a href="#六、实现一个数据双向绑定" class="headerlink" title="六、实现一个数据双向绑定"></a>六、实现一个数据双向绑定</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs js">&lt;input id=<span class="hljs-string">&quot;hangdleInput&quot;</span> type=<span class="hljs-string">&quot;text&quot;</span>&gt;<br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;hangdleValue&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="javascript"><span class="xml">    <span class="hljs-keyword">let</span> obj =&#123;&#125;</span></span><br><span class="javascript"><span class="xml">    <span class="hljs-keyword">let</span> input = <span class="hljs-built_in">document</span>.getElementById(<span class="hljs-string">&#x27;hangdleInput&#x27;</span>)</span></span><br><span class="javascript"><span class="xml">    <span class="hljs-keyword">let</span> span = <span class="hljs-built_in">document</span>.getElementById(<span class="hljs-string">&#x27;hangdleValue&#x27;</span>)</span></span><br><span class="javascript"><span class="xml">    <span class="hljs-built_in">Object</span>.defineProperty(obj,<span class="hljs-string">&#x27;text&#x27;</span>,&#123;</span></span><br><span class="javascript"><span class="xml">        <span class="hljs-attr">configurable</span>: <span class="hljs-literal">true</span>,</span></span><br><span class="javascript"><span class="xml">        <span class="hljs-attr">enumerable</span>: <span class="hljs-literal">true</span>,</span></span><br><span class="javascript"><span class="xml">        <span class="hljs-function"><span class="hljs-title">get</span>(<span class="hljs-params"></span>)</span>&#123;</span></span><br><span class="javascript"><span class="xml">            <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;get data&#x27;</span>)</span></span><br><span class="javascript"><span class="xml">        &#125;,</span></span><br><span class="javascript"><span class="xml">        <span class="hljs-function"><span class="hljs-title">set</span>(<span class="hljs-params">newVal</span>)</span>&#123;</span></span><br><span class="javascript"><span class="xml">            <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;set data&#x27;</span>)</span></span><br><span class="javascript"><span class="xml">            input.value = newVal</span></span><br><span class="javascript"><span class="xml">            span.innerHTML = newVal</span></span><br><span class="javascript"><span class="xml">        &#125;</span></span><br><span class="javascript"><span class="xml">    &#125;)</span></span><br><span class="javascript"><span class="xml">    input.addEventListener(<span class="hljs-string">&#x27;keyup&#x27;</span>,<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">e</span>)</span>&#123;</span></span><br><span class="javascript"><span class="xml">        obj.text = e.target.value</span></span><br><span class="javascript"><span class="xml">    &#125;)</span></span><br><span class="javascript"><span class="xml"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br></code></pre></td></tr></table></figure><h2 id="七、Vue3-Proxy"><a href="#七、Vue3-Proxy" class="headerlink" title="七、Vue3 Proxy"></a>七、Vue3 Proxy</h2><blockquote><p>Vue2 的响应式是基于 Object.defineProperty 实现的<br>Vue3 的响应式是基于 ES6 的 Proxy 来实现的</p></blockquote><p>在Vue2.0中，数据双向绑定就是通过Object.defineProperty去监听对象的每一个属性，然后在get/set方法中通过发布订阅者模式来实现的数据响应，但是存在一定的缺陷，比如只能监听已存在的属性，对于新增删除属性就无能为力了，同时无法监听数组的变化，所以在Vue3.0中将其换成了功能更强大的ES6 Proxy。</p><p>Vue2的响应式函数:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 响应式函数</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">reactive</span>(<span class="hljs-params">obj, key, value</span>) </span>&#123;<br>  <span class="hljs-built_in">Object</span>.defineProperty(data, key, &#123;<br>    <span class="hljs-function"><span class="hljs-title">get</span>(<span class="hljs-params"></span>)</span> &#123;<br>      <span class="hljs-built_in">console</span>.log(<span class="hljs-string">`访问了<span class="hljs-subst">$&#123;key&#125;</span>属性`</span>)<br>      <span class="hljs-keyword">return</span> value<br>    &#125;,<br>    <span class="hljs-function"><span class="hljs-title">set</span>(<span class="hljs-params">val</span>)</span> &#123;<br>      <span class="hljs-built_in">console</span>.log(<span class="hljs-string">`将<span class="hljs-subst">$&#123;key&#125;</span>由-&gt;<span class="hljs-subst">$&#123;value&#125;</span>-&gt;设置成-&gt;<span class="hljs-subst">$&#123;val&#125;</span>`</span>)<br>      <span class="hljs-keyword">if</span> (value !== val) &#123;<br>        value = val<br>      &#125;<br>    &#125;<br>  &#125;)<br>&#125;<br><span class="hljs-keyword">const</span> data = &#123;<br>  <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;jude&#x27;</span>,<br>  <span class="hljs-attr">age</span>: <span class="hljs-number">18</span><br>&#125;<br><span class="hljs-built_in">Object</span>.keys(data).forEach(<span class="hljs-function"><span class="hljs-params">key</span> =&gt;</span> reactive(data, key, data[key]))<br><span class="hljs-built_in">console</span>.log(data.name)<br><span class="hljs-comment">// 访问了name属性</span><br><span class="hljs-comment">// jude</span><br>data.name = <span class="hljs-string">&#x27;summer&#x27;</span> <span class="hljs-comment">// 将name由-&gt;jude-&gt;设置成-&gt;summer</span><br><span class="hljs-built_in">console</span>.log(data.name)<br><span class="hljs-comment">// 访问了name属性</span><br><span class="hljs-comment">// summer</span><br></code></pre></td></tr></table></figure><p>Vue3的响应式函数：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> data = &#123;<br>  <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;jude&#x27;</span>,<br>  <span class="hljs-attr">age</span>: <span class="hljs-number">18</span><br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">reactive</span>(<span class="hljs-params">target</span>) </span>&#123;<br>  <span class="hljs-keyword">const</span> handler = &#123;<br>    <span class="hljs-function"><span class="hljs-title">get</span>(<span class="hljs-params">target, key, receiver</span>)</span> &#123;<br>      <span class="hljs-built_in">console</span>.log(<span class="hljs-string">`访问了<span class="hljs-subst">$&#123;key&#125;</span>属性`</span>)<br>      <span class="hljs-keyword">return</span> <span class="hljs-built_in">Reflect</span>.get(target, key, receiver)<br>    &#125;,<br>    <span class="hljs-function"><span class="hljs-title">set</span>(<span class="hljs-params">target, key, value, receiver</span>)</span> &#123;<br>      <span class="hljs-built_in">console</span>.log(<span class="hljs-string">`将<span class="hljs-subst">$&#123;key&#125;</span>由-&gt;<span class="hljs-subst">$&#123;target[key]&#125;</span>-&gt;设置成-&gt;<span class="hljs-subst">$&#123;value&#125;</span>`</span>)<br>      <span class="hljs-built_in">Reflect</span>.set(target, key, value, receiver)<br>    &#125;<br>  &#125;<br><br>  <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-built_in">Proxy</span>(target, handler)<br>&#125;<br><br><span class="hljs-keyword">const</span> proxyData = reactive(data)<br><br><span class="hljs-built_in">console</span>.log(proxyData.name)<br><span class="hljs-comment">// 访问了name属性</span><br><span class="hljs-comment">// jude</span><br>proxyData.name = <span class="hljs-string">&#x27;summer&#x27;</span><br><span class="hljs-comment">// 将name由-&gt;jude-&gt;设置成-&gt;summer</span><br><span class="hljs-built_in">console</span>.log(proxyData.name)<br><span class="hljs-comment">// 访问了name属性</span><br><span class="hljs-comment">// summer</span><br></code></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">/**</span><br><span class="hljs-comment">* target: 要兼容的对象，可以是一个对象，数组,函数等等</span><br><span class="hljs-comment">* handler: 是一个对象，里面包含了可以监听这个对象的行为函数，比如上面例子里面的get与set</span><br><span class="hljs-comment">* 同时会返回一个新的对象proxy, 为了能够触发handler里面的函数，必须要使用返回值去进行其他操作，比如修改值</span><br><span class="hljs-comment">*/</span><br><span class="hljs-keyword">const</span> proxy = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Proxy</span>(target, handler)<br><br></code></pre></td></tr></table></figure><h3 id="1、handle-get、handle-set、handle-has、handler-deleteProperty"><a href="#1、handle-get、handle-set、handle-has、handler-deleteProperty" class="headerlink" title="1、handle.get、handle.set、handle.has、handler.deleteProperty"></a>1、handle.get、handle.set、handle.has、handler.deleteProperty</h3><blockquote><p>当通过proxy去读取对象里面的属性的时候，会进入到get钩子函数里面<br>当通过proxy去为对象设置修改属性的时候，会进入到set钩子函数里面<br>当使用in判断属性是否在proxy代理对象里面时，会触发has<br>当使用delete去删除对象里面的属性的时候，会进入deleteProperty钩子函数</p></blockquote><h3 id="2、Reflect"><a href="#2、Reflect" class="headerlink" title="2、Reflect"></a>2、Reflect</h3><blockquote><p>在上面，我们获取属性的值或者修改属性的值都是通过直接操作target来实现的，但实际上ES6已经为我们提供了在Proxy内部调用对象的默认行为的API: Reflect。</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> obj = &#123;&#125;<br><span class="hljs-keyword">const</span> proxy = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Proxy</span>(obj, &#123;<br>  <span class="hljs-function"><span class="hljs-title">get</span>(<span class="hljs-params">target,key,receiver</span>)</span> &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-built_in">Reflect</span>.get(target,key,receiver)<br>  &#125;<br>&#125;)<br></code></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>56、HTTP的请求方法、状态码</title>
      <link href="/2022/02/23/56-http/"/>
      <url>/2022/02/23/56-http/</url>
      
        <content type="html"><![CDATA[<p>整理一下HTTP的请求方法、GET/POST方法的区别、HTTP状态码、跨域解决方法，最近面试也被问到这些问题。</p><span id="more"></span><h2 id="一、HTTP的请求方法"><a href="#一、HTTP的请求方法" class="headerlink" title="一、HTTP的请求方法"></a>一、HTTP的请求方法</h2><blockquote><p>GET: 通常是用来获取资源<br>POST： 提交数据<br>PUT： 修改数据<br>DELETE： 删除资源<br>HEAD: 获取资源的元信息</p></blockquote><h2 id="二、GET和POST请求的区别？"><a href="#二、GET和POST请求的区别？" class="headerlink" title="二、GET和POST请求的区别？"></a>二、GET和POST请求的区别？</h2><p>从字面意思来讲，GET就是拿、获得，POST就是给、邮寄。</p><p>1、缓存角度： GET请求会被浏览器主动缓存下来，留下历史记录，而POST默认不会；</p><p>2、编码角度： GET只能进行URL编码，只能接受ASCII字符，而POST没有限制；</p><p>3、参数角度： GET一般将参数放在URL中，存在安全问题，POST放在请求体中，适合传输敏感信息</p><p>4、幂等性角度： GET是幂等，POST则不是。（幂等表示执行相同的操作，结果也是相同的）</p><p>5、TCP角度：GET会将请求报文一次性发出去，而POST会分为2个TCP数据包,先发header部分，如果服务器响应100，再发body部分。（Firefox浏览器的POST请求只会发一个TCP包）。</p><h2 id="三、HTTP状态码"><a href="#三、HTTP状态码" class="headerlink" title="三、HTTP状态码"></a>三、HTTP状态码</h2><blockquote><p>1XX: 协议处理的中间状态，还需要后续操作<br>2XX: 成功状态<br>3XX: 重定向状态，资源位置发生变动，需要重新请求<br>4XX: 请求报文有误<br>5XX: 服务端发生错误</p></blockquote><p>通常在开发过程中，常用到的状态码包括：<br>200：这个最常见，成功的状态码，通常在响应体中放有数据<br>204：与200的区别就在于响应头后没有body数据<br>206：表示部分内容，这个状态码在断点续传中可以看到（响应头字段为：Content-Range）</p><p>301: 永久重定向<br>302: 临时重定向<br>304: 协商缓存命中时返回这个304状态码</p><p>403： 服务器禁止访问<br>404： 资源未找到，在服务器上未找到相应的资源</p><p>500： 服务器出错了，一般将报错信息发送给后端，后端同学来检查</p><h2 id="四、HTTP、HTTP-2特点"><a href="#四、HTTP、HTTP-2特点" class="headerlink" title="四、HTTP、HTTP/2特点"></a>四、HTTP、HTTP/2特点</h2><h3 id="1、http特点"><a href="#1、http特点" class="headerlink" title="1、http特点"></a>1、http特点</h3><p>1、灵活可拓展。语义自由，只规定了基本格式；传输形式多样性，可传输文本、图片、视频等任意数据。</p><p>2、可靠传输。基于TCP/IP，继承了TCP特性。</p><p>3、请求-应答。一发一收、有来有回</p><p>4、无状态。每次的http请求都输独立、无关的，默认不需要保留状态信息。</p><h3 id="2、http缺点"><a href="#2、http缺点" class="headerlink" title="2、http缺点"></a>2、http缺点</h3><p>1、无状态。区分场景，无状态是优点也是缺点，例如长链接中，无状态就是缺点；如果就是获取一些数据，不需要保存连接上下文信息，无状态反而减少了网络开销，http成了优点。</p><p>2、明文传输：协议里的头部报文不使用二进制数据，而是文本形式。调试便利的同时，http报文信息暴露给了外界，容易被外界攻击。</p><h3 id="3、https-2的改进"><a href="#3、https-2的改进" class="headerlink" title="3、https/2的改进"></a>3、https/2的改进</h3><p>1、头部压缩：针对头部字段，采用压缩算法</p><p>2、多路复用：解决http对头阻塞问题</p><p>3、设置优先级：二进制分帧</p><p>4、服务器推送：不再是被动的接受请求、响应请求，能新建stream给客户端发送信息。</p><p>5、安全性：</p><h3 id="4、三次握手"><a href="#4、三次握手" class="headerlink" title="4、三次握手"></a>4、三次握手</h3><blockquote><p>三次握手其实就是指建立一个TCP连接时，需要客户端和服务器总共发送3个包。进行三次握手的主要作用就是为了确认双方的接收能力和发送能力是否正常、指定自己的初始化序列号为后面的可靠性传送做准备。实质上其实就是连接服务器指定端口，建立TCP连接，并同步连接双方的序列号和确认号，交换TCP窗口大小信息。</p></blockquote><p>第一次握手：客户端发送网络包，服务端收到了。<br>这样服务端就能得出结论：客户端的发送能力、服务端的接收能力是正常的。</p><p>第二次握手：服务端发包，客户端收到了。<br>这样客户端就能得出结论：服务端的接收、发送能力，客户端的接收、发送能力是正常的。不过此时服务器并不能确认客户端的接收能力是否正常。</p><p>第三次握手：客户端发包，服务端收到了。<br>这样服务端就能得出结论：客户端的接收、发送能力正常，服务器自己的发送、接收能力也正常。</p><h2 id="五、跨域及解决方式："><a href="#五、跨域及解决方式：" class="headerlink" title="五、跨域及解决方式："></a>五、跨域及解决方式：</h2><p>前后端分离的开发模式中，通常会遇到跨域问题，当一个ajax请求发出去了，服务器也响应了，但是前端拿不到响应数据，这主要是因为浏览器有一个同源策略。</p><h3 id="1、浏览器的同源策略"><a href="#1、浏览器的同源策略" class="headerlink" title="1、浏览器的同源策略"></a>1、浏览器的同源策略</h3><blockquote><p>浏览器遵循同源策略，即协议 + host主机 + port端口都相同时，视为同源，不存在跨域。<br>当浏览器发送Ajax请求时，只要当前的URL和目标URL不同源（协议、host、port有一个不相同，就是不同源），就存在跨域请求。</p></blockquote><h3 id="2、CROS：跨域资源共享"><a href="#2、CROS：跨域资源共享" class="headerlink" title="2、CROS：跨域资源共享"></a>2、CROS：跨域资源共享</h3><p>CORS是一个W3C标准，需要浏览器和服务器的共同支持。一般在服务端响应头返回Access-Control-Allow-Origin:* (也可以指定具体的源名)</p><blockquote><p>options 预检请求</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs js">OPTIONS / HTTP/<span class="hljs-number">1.1</span><br><span class="hljs-attr">Origin</span>: 当前地址<br><span class="hljs-attr">Host</span>: xxx.com<br>Access-Control-Request-Method: PUT<br>Access-Control-Request-Headers: X-Custom-Header<br></code></pre></td></tr></table></figure><p>在预检请求的响应返回后，如果请求不满足响应头的条件，则触发XMLHttpRequest的onerror方法，当然后面真正的CORS请求也不会发出去了。</p><h3 id="3、Nginx反向代理"><a href="#3、Nginx反向代理" class="headerlink" title="3、Nginx反向代理"></a>3、Nginx反向代理</h3><blockquote><p>Nginx是高性能的反向代理服务器</p></blockquote><p>反向代理其实就是拿到客户端的请求，将请求转发给其他服务器，主要场景是维持服务器集群的负载均衡。即：反向代理帮其他的服务器拿到请求，然后选择一个合适的服务器，将请求转交给它。</p><p>例如：客户端域名：client.com  服务器域名：server.com,Nginx解决跨域的方法如下：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs js">server &#123;<br>  listen  <span class="hljs-number">80</span>;<br>  server_name  client.com;<br>  location /api &#123;<br>    proxy_pass server.com;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>客户端首先访问client.com/api（此时不存在跨域），Nginx服务器作为反向代理，将请求转发给sever.com，响应返回时又将响应给到客户端，完成整个跨域请求。</p><h3 id="4、Jsonp"><a href="#4、Jsonp" class="headerlink" title="4、Jsonp"></a>4、Jsonp</h3><blockquote><p>通过给script标签的src填上目标地址发送GET请求（只支持GET请求），实现跨域请求拿到相应数据。</p></blockquote><h3 id="5、websocket"><a href="#5、websocket" class="headerlink" title="5、websocket"></a>5、websocket</h3><blockquote><p>websocket实现了客户端与服务端直接的持久连接，本质没有使用了 HTTP 的响应头, 因此也没有跨域的限制</p></blockquote>]]></content>
      
      
      
        <tags>
            
            <tag> http </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>55、大文件断点续传</title>
      <link href="/2022/02/21/55-file-upload/"/>
      <url>/2022/02/21/55-file-upload/</url>
      
        <content type="html"><![CDATA[<p>关于大文件断点续传的问题,解决方案是Blob.prototype.slice方法，和数组的slice方法类似，使用slice方法可以返回源文件的切片。按照要求将源文件切位n个切片，将多个切片同时上传，源文件由一个大文件转换成n个小切片同时上传，可以大大减少上传时间。<br>需要注意的是上传到服务端的切片可能位置会发生改变，需要将切片的位置记录下来。</p><span id="more"></span><h2 id="一、服务端（Node-js）"><a href="#一、服务端（Node-js）" class="headerlink" title="一、服务端（Node.js）"></a>一、服务端（Node.js）</h2><p>服务端需要做的是：接受n个切片，并将这些切片在上传后合并。</p><p>需要注意的是：</p><p>1、合并切片的时间: 即n个切片什么时候上传完成</p><blockquote><p>前端上传的切片中带有切片的个数，服务端接受到切片的总数后自动合并<br>2、怎么合并切片<br>使用node.js的读写流(readStream/writeStream)，将所有切片的流传输到最终文件的流里。</p></blockquote><p>服务端：</p><blockquote><p>server<br>-index.js<br>-controller.js</p></blockquote><details><summary>点我展示代码</summary><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// index.js</span><br><span class="hljs-keyword">const</span> Controller = <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;./controller&quot;</span>);<br><span class="hljs-keyword">const</span> http = <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;http&quot;</span>);<br><span class="hljs-keyword">const</span> server = http.createServer();<br><br><span class="hljs-keyword">const</span> controller = <span class="hljs-keyword">new</span> Controller();<br><br>server.on(<span class="hljs-string">&quot;request&quot;</span>, <span class="hljs-keyword">async</span> (req, res) =&gt; &#123;<br>  res.setHeader(<span class="hljs-string">&quot;Access-Control-Allow-Origin&quot;</span>, <span class="hljs-string">&quot;*&quot;</span>);<br>  <span class="hljs-comment">// 解决跨域   </span><br>  res.setHeader(<span class="hljs-string">&quot;Access-Control-Allow-Headers&quot;</span>, <span class="hljs-string">&quot;*&quot;</span>);<br>  <span class="hljs-keyword">if</span> (req.method === <span class="hljs-string">&quot;OPTIONS&quot;</span>) &#123;<br>    res.status = <span class="hljs-number">200</span>;<br>    res.end();<br>    <span class="hljs-keyword">return</span>;<br>  &#125;<br><span class="hljs-comment">//   验证上传文件是否已上传</span><br>  <span class="hljs-keyword">if</span> (req.url === <span class="hljs-string">&quot;/verify&quot;</span>) &#123;<br>    <span class="hljs-keyword">await</span> controller.handleVerifyUpload(req, res);<br>    <span class="hljs-keyword">return</span>;<br>  &#125;<br>    <span class="hljs-comment">// 合并切片</span><br>  <span class="hljs-keyword">if</span> (req.url === <span class="hljs-string">&quot;/merge&quot;</span>) &#123;<br>    <span class="hljs-keyword">await</span> controller.handleMerge(req, res);<br>    <span class="hljs-keyword">return</span>;<br>  &#125;<br>  <span class="hljs-keyword">if</span> (req.url === <span class="hljs-string">&quot;/&quot;</span>) &#123;<br>    <span class="hljs-keyword">await</span> controller.handleFormData(req, res);<br>  &#125;<br>&#125;);<br><br>server.listen(<span class="hljs-number">3001</span>, <span class="hljs-function">() =&gt;</span> <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;正在监听 3001 端口&quot;</span>));<br><br></code></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// controller.js</span><br><span class="hljs-comment">// 处理前端传来的FormData</span><br><span class="hljs-keyword">const</span> multiparty = <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;multiparty&quot;</span>);<br><span class="hljs-keyword">const</span> path = <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;path&quot;</span>);<br><span class="hljs-keyword">const</span> fse = <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;fs-extra&quot;</span>);<br><br><span class="hljs-keyword">const</span> extractExt = <span class="hljs-function"><span class="hljs-params">filename</span> =&gt;</span><br>  filename.slice(filename.lastIndexOf(<span class="hljs-string">&quot;.&quot;</span>), filename.length); <span class="hljs-comment">// 提取后缀名</span><br><span class="hljs-keyword">const</span> UPLOAD_DIR = path.resolve(__dirname, <span class="hljs-string">&quot;..&quot;</span>, <span class="hljs-string">&quot;target&quot;</span>); <span class="hljs-comment">// 大文件存储目录</span><br><br><span class="hljs-keyword">const</span> pipeStream = <span class="hljs-function">(<span class="hljs-params">path, writeStream</span>) =&gt;</span><br>  <span class="hljs-keyword">new</span> <span class="hljs-built_in">Promise</span>(<span class="hljs-function"><span class="hljs-params">resolve</span> =&gt;</span> &#123;<br>    <span class="hljs-comment">//   创建可读流</span><br>    <span class="hljs-keyword">const</span> readStream = fse.createReadStream(path);<br>    readStream.on(<span class="hljs-string">&quot;end&quot;</span>, <span class="hljs-function">() =&gt;</span> &#123;<br>      fse.unlinkSync(path);<br>      resolve();<br>    &#125;);<br>    readStream.pipe(writeStream);<br>  &#125;);<br><br><span class="hljs-comment">// 合并切片</span><br><span class="hljs-keyword">const</span> mergeFileChunk = <span class="hljs-keyword">async</span> (filePath, fileHash, size) =&gt; &#123;<br>  <span class="hljs-keyword">const</span> chunkDir = path.resolve(UPLOAD_DIR, fileHash);<br>  <span class="hljs-keyword">const</span> chunkPaths = <span class="hljs-keyword">await</span> fse.readdir(chunkDir);<br>  <span class="hljs-comment">// 根据切片下标进行排序</span><br>  <span class="hljs-comment">// 否则直接读取目录的获得的顺序可能会错乱</span><br>  chunkPaths.sort(<span class="hljs-function">(<span class="hljs-params">a, b</span>) =&gt;</span> a.split(<span class="hljs-string">&quot;-&quot;</span>)[<span class="hljs-number">1</span>] - b.split(<span class="hljs-string">&quot;-&quot;</span>)[<span class="hljs-number">1</span>]);<br>  <span class="hljs-keyword">await</span> <span class="hljs-built_in">Promise</span>.all(<br>    chunkPaths.map(<span class="hljs-function">(<span class="hljs-params">chunkPath, index</span>) =&gt;</span><br>      pipeStream(<br>        path.resolve(chunkDir, chunkPath),<br>        <span class="hljs-comment">// 指定位置创建可写流</span><br>        fse.createWriteStream(filePath, &#123;<br>          <span class="hljs-attr">start</span>: index * size,<br>          <span class="hljs-attr">end</span>: (index + <span class="hljs-number">1</span>) * size<br>        &#125;)<br>      )<br>    )<br>  );<br>  fse.rmdirSync(chunkDir); <span class="hljs-comment">// 合并后删除保存切片的目录</span><br>&#125;;<br><br><span class="hljs-keyword">const</span> resolvePost = <span class="hljs-function"><span class="hljs-params">req</span> =&gt;</span><br>  <span class="hljs-keyword">new</span> <span class="hljs-built_in">Promise</span>(<span class="hljs-function"><span class="hljs-params">resolve</span> =&gt;</span> &#123;<br>    <span class="hljs-keyword">let</span> chunk = <span class="hljs-string">&quot;&quot;</span>;<br>    req.on(<span class="hljs-string">&quot;data&quot;</span>, <span class="hljs-function"><span class="hljs-params">data</span> =&gt;</span> &#123;<br>      chunk += data;<br>    &#125;);<br>    req.on(<span class="hljs-string">&quot;end&quot;</span>, <span class="hljs-function">() =&gt;</span> &#123;<br>      resolve(<span class="hljs-built_in">JSON</span>.parse(chunk));<br>    &#125;);<br>  &#125;);<br><br><span class="hljs-comment">// 返回已经上传切片名</span><br><span class="hljs-keyword">const</span> createUploadedList = <span class="hljs-keyword">async</span> fileHash =&gt;<br>  fse.existsSync(path.resolve(UPLOAD_DIR, fileHash))<br>    ? <span class="hljs-keyword">await</span> fse.readdir(path.resolve(UPLOAD_DIR, fileHash))<br>    : [];<br><br><span class="hljs-built_in">module</span>.exports = <span class="hljs-class"><span class="hljs-keyword">class</span> </span>&#123;<br>  <span class="hljs-comment">// 合并切片</span><br>  <span class="hljs-keyword">async</span> <span class="hljs-function"><span class="hljs-title">handleMerge</span>(<span class="hljs-params">req, res</span>)</span> &#123;<br>    <span class="hljs-keyword">const</span> data = <span class="hljs-keyword">await</span> resolvePost(req);<br>    <span class="hljs-keyword">const</span> &#123; fileHash, filename, size &#125; = data;<br>    <span class="hljs-keyword">const</span> ext = extractExt(filename);<br>    <span class="hljs-keyword">const</span> filePath = path.resolve(UPLOAD_DIR, <span class="hljs-string">`<span class="hljs-subst">$&#123;fileHash&#125;</span><span class="hljs-subst">$&#123;ext&#125;</span>`</span>);<br>    <span class="hljs-keyword">await</span> mergeFileChunk(filePath, fileHash, size);<br>    res.end(<br>      <span class="hljs-built_in">JSON</span>.stringify(&#123;<br>        <span class="hljs-attr">code</span>: <span class="hljs-number">0</span>,<br>        <span class="hljs-attr">message</span>: <span class="hljs-string">&quot;file merged success&quot;</span><br>      &#125;)<br>    );<br>  &#125;<br>  <span class="hljs-comment">// 处理切片</span><br>  <span class="hljs-keyword">async</span> <span class="hljs-function"><span class="hljs-title">handleFormData</span>(<span class="hljs-params">req, res</span>)</span> &#123;<br>    <span class="hljs-keyword">const</span> multipart = <span class="hljs-keyword">new</span> multiparty.Form();<br>    <span class="hljs-comment">//下面multipart.parse的回调中 fields 参数保存了FormData中的文件</span><br>    multipart.parse(req, <span class="hljs-keyword">async</span> (err, fields, files) =&gt; &#123;<br>      <span class="hljs-keyword">if</span> (err) &#123;<br>        <span class="hljs-built_in">console</span>.error(err);<br>        res.status = <span class="hljs-number">500</span>;<br>        res.end(<span class="hljs-string">&quot;process file chunk failed&quot;</span>);<br>        <span class="hljs-keyword">return</span>;<br>      &#125;<br>      <span class="hljs-keyword">const</span> [chunk] = files.chunk;<br>      <span class="hljs-keyword">const</span> [hash] = fields.hash;<br>      <span class="hljs-keyword">const</span> [fileHash] = fields.fileHash;<br>      <span class="hljs-keyword">const</span> [filename] = fields.filename;<br>      <span class="hljs-keyword">const</span> filePath = path.resolve(<br>        UPLOAD_DIR,<br>        <span class="hljs-string">`<span class="hljs-subst">$&#123;fileHash&#125;</span><span class="hljs-subst">$&#123;extractExt(filename)&#125;</span>`</span><br>      );<br>      <span class="hljs-keyword">const</span> chunkDir = path.resolve(UPLOAD_DIR, fileHash);<br><br>      <span class="hljs-comment">// 文件存在直接返回</span><br>      <span class="hljs-keyword">if</span> (fse.existsSync(filePath)) &#123;<br>        res.end(<span class="hljs-string">&quot;file exist&quot;</span>);<br>        <span class="hljs-keyword">return</span>;<br>      &#125;<br><br>      <span class="hljs-comment">// 切片目录不存在，创建切片目录</span><br>      <span class="hljs-keyword">if</span> (!fse.existsSync(chunkDir)) &#123;<br>        <span class="hljs-keyword">await</span> fse.mkdirs(chunkDir);<br>      &#125;<br>      <span class="hljs-comment">// fs-extra 专用方法，类似 fs.rename 并且跨平台</span><br>      <span class="hljs-comment">// fs-extra 的 rename 方法 windows 平台会有权限问题</span><br>      <span class="hljs-comment">// https://github.com/meteor/meteor/issues/7852#issuecomment-255767835</span><br>      <span class="hljs-keyword">await</span> fse.move(chunk.path, path.resolve(chunkDir, hash));<br>      res.end(<span class="hljs-string">&quot;received file chunk&quot;</span>);<br>    &#125;);<br>  &#125;<br>  <span class="hljs-comment">// 验证是否已上传/已上传切片下标</span><br>  <span class="hljs-keyword">async</span> <span class="hljs-function"><span class="hljs-title">handleVerifyUpload</span>(<span class="hljs-params">req, res</span>)</span> &#123;<br>    <span class="hljs-keyword">const</span> data = <span class="hljs-keyword">await</span> resolvePost(req);<br>    <span class="hljs-keyword">const</span> &#123; fileHash, filename &#125; = data;<br>    <span class="hljs-keyword">const</span> ext = extractExt(filename);<br>    <span class="hljs-keyword">const</span> filePath = path.resolve(UPLOAD_DIR, <span class="hljs-string">`<span class="hljs-subst">$&#123;fileHash&#125;</span><span class="hljs-subst">$&#123;ext&#125;</span>`</span>);<br>    <span class="hljs-keyword">if</span> (fse.existsSync(filePath)) &#123;<br>      res.end(<br>        <span class="hljs-built_in">JSON</span>.stringify(&#123;<br>          <span class="hljs-attr">shouldUpload</span>: <span class="hljs-literal">false</span><br>        &#125;)<br>      );<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>      res.end(<br>        <span class="hljs-built_in">JSON</span>.stringify(&#123;<br>          <span class="hljs-attr">shouldUpload</span>: <span class="hljs-literal">true</span>,<br>          <span class="hljs-attr">uploadedList</span>: <span class="hljs-keyword">await</span> createUploadedList(fileHash)<br>        &#125;)<br>      );<br>    &#125;<br>  &#125;<br>&#125;;<br><br></code></pre></td></tr></table></figure></details><h2 id="二、客户端"><a href="#二、客户端" class="headerlink" title="二、客户端"></a>二、客户端</h2><p>前端使用Vue+elementUI展示界面，当点击上传按钮时，slice方法将源文件做切片处理，将切片放入数组中返回，使用 hash+index 给每个切片做标识，用于上传完成后合并切片。<br>调用uploadChunks上传所有的切片，将切片、切片hash、切片名filename放入FormData中，使用promise.all并发上传所有切片。</p><p>断点续传原理在于前后端需要记住已经上传的切片，继续上传的时候就可以跳过之前已经上传的部分。</p><p>实现的方案：</p><blockquote><p>服务端保存已经上传的切片hash，前端每次上传前都向服务端获取已经上传的切片。</p></blockquote><p>这里也可以在前端使用localStorage记录已经上传的切片的hash，但是存在问题，就是换一个浏览器就失去已经上传的切片的hash了。</p><p>客户端、服务端都需要生成文件和切片的hash，根据文件内容生成hash。使用spark-md5根据文件内容计算出文件的hash值。</p><p>当文件比较大的时候，读取文件内容计算hash是非常耗时的，会引起UI阻塞，导致页面假死，解决方式是使用web-worker在worker线程计算hash。</p><p>实例化web-worker，参数是一个js文件路径不能跨域，需要单独创建一个hash.js文件放在public中，在worker中不允许访问dom，使用importScripts函数导入外部脚本spark-md5</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// hash.js</span><br>self.importScripts(<span class="hljs-string">&quot;/spark-md5.min.js&quot;</span>); <span class="hljs-comment">// 导入脚本</span><br><br><span class="hljs-comment">// 生成文件 hash</span><br>self.onmessage = <span class="hljs-function"><span class="hljs-params">e</span> =&gt;</span> &#123;<br>  <span class="hljs-keyword">const</span> &#123; fileChunkList &#125; = e.data;<br>  <span class="hljs-keyword">const</span> spark = <span class="hljs-keyword">new</span> self.SparkMD5.ArrayBuffer();<br>  <span class="hljs-keyword">let</span> percentage = <span class="hljs-number">0</span>;<br>  <span class="hljs-keyword">let</span> count = <span class="hljs-number">0</span>;<br>  <span class="hljs-keyword">const</span> loadNext = <span class="hljs-function"><span class="hljs-params">index</span> =&gt;</span> &#123;<br>    <span class="hljs-keyword">const</span> reader = <span class="hljs-keyword">new</span> FileReader();<br>    reader.readAsArrayBuffer(fileChunkList[index].file);<br>    reader.onload = <span class="hljs-function"><span class="hljs-params">e</span> =&gt;</span> &#123;<br>      count++;<br>      spark.append(e.target.result);<br>      <span class="hljs-keyword">if</span> (count === fileChunkList.length) &#123;<br>        self.postMessage(&#123;<br>          <span class="hljs-attr">percentage</span>: <span class="hljs-number">100</span>,<br>          <span class="hljs-attr">hash</span>: spark.end()<br>        &#125;);<br>        self.close();<br>      &#125; <span class="hljs-keyword">else</span> &#123;<br>        percentage += <span class="hljs-number">100</span> / fileChunkList.length;<br>        self.postMessage(&#123;<br>          percentage<br>        &#125;);<br>        loadNext(count);<br>      &#125;<br>    &#125;;<br>  &#125;;<br>  loadNext(<span class="hljs-number">0</span>);<br>&#125;;<br><br></code></pre></td></tr></table></figure><p>1、template</p><details><summary>点我展示代码</summary><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">input</span></span><br><span class="hljs-tag">    <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;file&quot;</span></span><br><span class="hljs-tag">    <span class="hljs-attr">:disabled</span>=<span class="hljs-string">&quot;status !== Status.wait&quot;</span></span><br><span class="hljs-tag">    @<span class="hljs-attr">change</span>=<span class="hljs-string">&quot;handleFileChange&quot;</span></span><br><span class="hljs-tag">  /&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">el-button</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">&quot;handleUpload&quot;</span> <span class="hljs-attr">:disabled</span>=<span class="hljs-string">&quot;uploadDisabled&quot;</span></span><br><span class="hljs-tag">    &gt;</span>上传&lt;/el-button<br>  &gt;<br>  <span class="hljs-tag">&lt;<span class="hljs-name">el-button</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">&quot;handleResume&quot;</span> <span class="hljs-attr">v-if</span>=<span class="hljs-string">&quot;status === Status.pause&quot;</span></span><br><span class="hljs-tag">    &gt;</span>恢复&lt;/el-button<br>  &gt;<br>  <span class="hljs-tag">&lt;<span class="hljs-name">el-button</span></span><br><span class="hljs-tag">    <span class="hljs-attr">v-else</span></span><br><span class="hljs-tag">    <span class="hljs-attr">:disabled</span>=<span class="hljs-string">&quot;status !== Status.uploading || !container.hash&quot;</span></span><br><span class="hljs-tag">    @<span class="hljs-attr">click</span>=<span class="hljs-string">&quot;handlePause&quot;</span></span><br><span class="hljs-tag">    &gt;</span>暂停&lt;/el-button<br>  &gt;<br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span><br>  <span class="hljs-comment">&lt;!-- &lt;div&gt;计算文件 hash&lt;/div&gt;</span><br><span class="hljs-comment">  &lt;el-progress :percentage=&quot;hashPercentage&quot;&gt;&lt;/el-progress&gt; --&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>总进度<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">el-progress</span> <span class="hljs-attr">:percentage</span>=<span class="hljs-string">&quot;fakeUploadPercentage&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">el-progress</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">el-table</span> <span class="hljs-attr">:data</span>=<span class="hljs-string">&quot;data&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">el-table-column</span></span><br><span class="hljs-tag">    <span class="hljs-attr">prop</span>=<span class="hljs-string">&quot;hash&quot;</span></span><br><span class="hljs-tag">    <span class="hljs-attr">label</span>=<span class="hljs-string">&quot;切片hash&quot;</span></span><br><span class="hljs-tag">    <span class="hljs-attr">align</span>=<span class="hljs-string">&quot;center&quot;</span></span><br><span class="hljs-tag">  &gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">el-table-column</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">el-table-column</span> <span class="hljs-attr">label</span>=<span class="hljs-string">&quot;大小(KB)&quot;</span> <span class="hljs-attr">align</span>=<span class="hljs-string">&quot;center&quot;</span> <span class="hljs-attr">width</span>=<span class="hljs-string">&quot;120&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">template</span> <span class="hljs-attr">v-slot</span>=<span class="hljs-string">&quot;&#123; row &#125;&quot;</span>&gt;</span><br>      &#123;&#123; row.size | transformByte &#125;&#125;<br>    <span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">el-table-column</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">el-table-column</span> <span class="hljs-attr">label</span>=<span class="hljs-string">&quot;进度&quot;</span> <span class="hljs-attr">align</span>=<span class="hljs-string">&quot;center&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">template</span> <span class="hljs-attr">v-slot</span>=<span class="hljs-string">&quot;&#123; row &#125;&quot;</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">el-progress</span></span><br><span class="hljs-tag">        <span class="hljs-attr">:percentage</span>=<span class="hljs-string">&quot;row.percentage&quot;</span></span><br><span class="hljs-tag">        <span class="hljs-attr">color</span>=<span class="hljs-string">&quot;#909399&quot;</span></span><br><span class="hljs-tag">      &gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">el-progress</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">el-table-column</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">el-table</span>&gt;</span><br></code></pre></td></tr></table></figure></details><p>2、js部分：设置切片大小 考虑到通用性，简单封装了XMLHttpRequest, 实际使用可以隐藏掉hash进度条</p><details><summary>点我展示代码</summary><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br></pre></td><td class="code"><pre><code class="hljs js">&lt;script&gt;<br><span class="hljs-keyword">const</span> SIZE = <span class="hljs-number">100</span> * <span class="hljs-number">1024</span> * <span class="hljs-number">1024</span>; <span class="hljs-comment">// 切片大小</span><br><br><span class="hljs-keyword">const</span> Status = &#123;<br>  <span class="hljs-attr">wait</span>: <span class="hljs-string">&quot;wait&quot;</span>,<br>  <span class="hljs-attr">pause</span>: <span class="hljs-string">&quot;pause&quot;</span>,<br>  <span class="hljs-attr">uploading</span>: <span class="hljs-string">&quot;uploading&quot;</span><br>&#125;;<br><br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> &#123;<br>  <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;app&quot;</span>,<br>  <span class="hljs-attr">filters</span>: &#123;<br>    <span class="hljs-function"><span class="hljs-title">transformByte</span>(<span class="hljs-params">val</span>)</span> &#123;<br>      <span class="hljs-keyword">return</span> <span class="hljs-built_in">Number</span>((val / <span class="hljs-number">1024</span>).toFixed(<span class="hljs-number">0</span>));<br>    &#125;<br>  &#125;,<br>  <span class="hljs-attr">data</span>: <span class="hljs-function">() =&gt;</span> (&#123;<br>    Status,<br>    <span class="hljs-attr">container</span>: &#123;<br>      <span class="hljs-attr">file</span>: <span class="hljs-literal">null</span>,<br>      <span class="hljs-attr">hash</span>: <span class="hljs-string">&quot;&quot;</span>,<br>      <span class="hljs-attr">worker</span>: <span class="hljs-literal">null</span><br>    &#125;,<br>    <span class="hljs-attr">hashPercentage</span>: <span class="hljs-number">0</span>,<br>    <span class="hljs-attr">data</span>: [],<br>    <span class="hljs-attr">requestList</span>: [],<br>    <span class="hljs-attr">status</span>: Status.wait,<br>    <span class="hljs-comment">// 当暂停时会取消 xhr 导致进度条后退</span><br>    <span class="hljs-comment">// 为了避免这种情况，需要定义一个假的进度条</span><br>    <span class="hljs-attr">fakeUploadPercentage</span>: <span class="hljs-number">0</span><br>  &#125;),<br>  <span class="hljs-attr">computed</span>: &#123;<br>    <span class="hljs-function"><span class="hljs-title">uploadDisabled</span>(<span class="hljs-params"></span>)</span> &#123;<br>      <span class="hljs-keyword">return</span> (<br>        !<span class="hljs-built_in">this</span>.container.file ||<br>        [Status.pause, Status.uploading].includes(<span class="hljs-built_in">this</span>.status)<br>      );<br>    &#125;,<br>    <span class="hljs-function"><span class="hljs-title">uploadPercentage</span>(<span class="hljs-params"></span>)</span> &#123;<br>      <span class="hljs-keyword">if</span> (!<span class="hljs-built_in">this</span>.container.file || !<span class="hljs-built_in">this</span>.data.length) <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>      <span class="hljs-keyword">const</span> loaded = <span class="hljs-built_in">this</span>.data<br>        .map(<span class="hljs-function"><span class="hljs-params">item</span> =&gt;</span> item.size * item.percentage)<br>        .reduce(<span class="hljs-function">(<span class="hljs-params">acc, cur</span>) =&gt;</span> acc + cur);<br>      <span class="hljs-keyword">return</span> <span class="hljs-built_in">parseInt</span>((loaded / <span class="hljs-built_in">this</span>.container.file.size).toFixed(<span class="hljs-number">2</span>));<br>    &#125;<br>  &#125;,<br>  <span class="hljs-attr">watch</span>: &#123;<br>    <span class="hljs-function"><span class="hljs-title">uploadPercentage</span>(<span class="hljs-params">now</span>)</span> &#123;<br>      <span class="hljs-keyword">if</span> (now &gt; <span class="hljs-built_in">this</span>.fakeUploadPercentage) &#123;<br>        <span class="hljs-built_in">this</span>.fakeUploadPercentage = now;<br>      &#125;<br>    &#125;<br>  &#125;,<br>  <span class="hljs-attr">methods</span>: &#123;<br>    <span class="hljs-comment">// 暂停</span><br>    <span class="hljs-function"><span class="hljs-title">handlePause</span>(<span class="hljs-params"></span>)</span> &#123;<br>      <span class="hljs-built_in">this</span>.status = Status.pause;<br>      <span class="hljs-built_in">this</span>.resetData();<br>    &#125;,<br>    <span class="hljs-function"><span class="hljs-title">resetData</span>(<span class="hljs-params"></span>)</span> &#123;<br>      <span class="hljs-built_in">this</span>.requestList.forEach(<span class="hljs-function"><span class="hljs-params">xhr</span> =&gt;</span> xhr?.abort());<br>      <span class="hljs-built_in">this</span>.requestList = [];<br>      <span class="hljs-keyword">if</span> (<span class="hljs-built_in">this</span>.container.worker) &#123;<br>        <span class="hljs-built_in">this</span>.container.worker.onmessage = <span class="hljs-literal">null</span>;<br>      &#125;<br>    &#125;,<br>    <span class="hljs-keyword">async</span> <span class="hljs-function"><span class="hljs-title">handleResume</span>(<span class="hljs-params"></span>)</span> &#123;<br>      <span class="hljs-built_in">this</span>.status = Status.uploading;<br>      <span class="hljs-keyword">const</span> &#123; uploadedList &#125; = <span class="hljs-keyword">await</span> <span class="hljs-built_in">this</span>.verifyUpload(<br>        <span class="hljs-built_in">this</span>.container.file.name,<br>        <span class="hljs-built_in">this</span>.container.hash<br>      );<br>      <span class="hljs-keyword">await</span> <span class="hljs-built_in">this</span>.uploadChunks(uploadedList);<br>    &#125;,<br>    <span class="hljs-comment">// xhr</span><br>    <span class="hljs-function"><span class="hljs-title">request</span>(<span class="hljs-params">&#123;</span></span><br><span class="hljs-params"><span class="hljs-function">      url,</span></span><br><span class="hljs-params"><span class="hljs-function">      method = <span class="hljs-string">&quot;post&quot;</span>,</span></span><br><span class="hljs-params"><span class="hljs-function">      data,</span></span><br><span class="hljs-params"><span class="hljs-function">      headers = &#123;&#125;,</span></span><br><span class="hljs-params"><span class="hljs-function">      onProgress = e =&gt; e,</span></span><br><span class="hljs-params"><span class="hljs-function">      requestList</span></span><br><span class="hljs-params"><span class="hljs-function">    &#125;</span>)</span> &#123;<br>      <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-built_in">Promise</span>(<span class="hljs-function"><span class="hljs-params">resolve</span> =&gt;</span> &#123;<br>        <span class="hljs-keyword">const</span> xhr = <span class="hljs-keyword">new</span> XMLHttpRequest();<br>        xhr.upload.onprogress = onProgress;<br>        xhr.open(method, url);<br>        <span class="hljs-built_in">Object</span>.keys(headers).forEach(<span class="hljs-function"><span class="hljs-params">key</span> =&gt;</span><br>          xhr.setRequestHeader(key, headers[key])<br>        );<br>        xhr.send(data);<br>        xhr.onload = <span class="hljs-function"><span class="hljs-params">e</span> =&gt;</span> &#123;<br>          <span class="hljs-comment">// 将请求成功的 xhr 从列表中删除</span><br>          <span class="hljs-keyword">if</span> (requestList) &#123;<br>            <span class="hljs-keyword">const</span> xhrIndex = requestList.findIndex(<span class="hljs-function"><span class="hljs-params">item</span> =&gt;</span> item === xhr);<br>            requestList.splice(xhrIndex, <span class="hljs-number">1</span>);<br>          &#125;<br>          resolve(&#123;<br>            <span class="hljs-attr">data</span>: e.target.response<br>          &#125;);<br>        &#125;;<br>        <span class="hljs-comment">// 暴露当前 xhr 给外部</span><br>        requestList?.push(xhr);<br>      &#125;);<br>    &#125;,<br>    <span class="hljs-comment">// 生成文件切片</span><br>    <span class="hljs-function"><span class="hljs-title">createFileChunk</span>(<span class="hljs-params">file, size = SIZE</span>)</span> &#123;<br>      <span class="hljs-keyword">const</span> fileChunkList = [];<br>      <span class="hljs-keyword">let</span> cur = <span class="hljs-number">0</span>;<br>      <span class="hljs-keyword">while</span> (cur &lt; file.size) &#123;<br>        fileChunkList.push(&#123; <span class="hljs-attr">file</span>: file.slice(cur, cur + size) &#125;);<br>        cur += size;<br>      &#125;<br>      <span class="hljs-keyword">return</span> fileChunkList;<br>    &#125;,<br>    <span class="hljs-comment">// 生成文件 hash（web-worker）</span><br>    <span class="hljs-function"><span class="hljs-title">calculateHash</span>(<span class="hljs-params">fileChunkList</span>)</span> &#123;<br>      <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-built_in">Promise</span>(<span class="hljs-function"><span class="hljs-params">resolve</span> =&gt;</span> &#123;<br>        <span class="hljs-built_in">this</span>.container.worker = <span class="hljs-keyword">new</span> Worker(<span class="hljs-string">&quot;/hash.js&quot;</span>);<br>        <span class="hljs-built_in">this</span>.container.worker.postMessage(&#123; fileChunkList &#125;);<br>        <span class="hljs-built_in">this</span>.container.worker.onmessage = <span class="hljs-function"><span class="hljs-params">e</span> =&gt;</span> &#123;<br>          <span class="hljs-keyword">const</span> &#123; percentage, hash &#125; = e.data;<br>          <span class="hljs-built_in">this</span>.hashPercentage = percentage;<br>          <span class="hljs-keyword">if</span> (hash) &#123;<br>            resolve(hash);<br>          &#125;<br>        &#125;;<br>      &#125;);<br>    &#125;,<br>    <span class="hljs-function"><span class="hljs-title">handleFileChange</span>(<span class="hljs-params">e</span>)</span> &#123;<br>      <span class="hljs-keyword">const</span> [file] = e.target.files;<br>      <span class="hljs-keyword">if</span> (!file) <span class="hljs-keyword">return</span>;<br>      <span class="hljs-built_in">this</span>.resetData();<br>      <span class="hljs-built_in">Object</span>.assign(<span class="hljs-built_in">this</span>.$data, <span class="hljs-built_in">this</span>.$options.data());<br>      <span class="hljs-built_in">this</span>.container.file = file;<br>    &#125;,<br>    <span class="hljs-keyword">async</span> <span class="hljs-function"><span class="hljs-title">handleUpload</span>(<span class="hljs-params"></span>)</span> &#123;<br>      <span class="hljs-keyword">if</span> (!<span class="hljs-built_in">this</span>.container.file) <span class="hljs-keyword">return</span>;<br>      <span class="hljs-built_in">this</span>.status = Status.uploading;<br>      <span class="hljs-keyword">const</span> fileChunkList = <span class="hljs-built_in">this</span>.createFileChunk(<span class="hljs-built_in">this</span>.container.file);<br>      <span class="hljs-built_in">this</span>.container.hash = <span class="hljs-keyword">await</span> <span class="hljs-built_in">this</span>.calculateHash(fileChunkList);<br><br>      <span class="hljs-keyword">const</span> &#123; shouldUpload, uploadedList &#125; = <span class="hljs-keyword">await</span> <span class="hljs-built_in">this</span>.verifyUpload(<br>        <span class="hljs-built_in">this</span>.container.file.name,<br>        <span class="hljs-built_in">this</span>.container.hash<br>      );<br>      <span class="hljs-keyword">if</span> (!shouldUpload) &#123;<br>        <span class="hljs-built_in">this</span>.$message.success(<span class="hljs-string">&quot;秒传：上传成功&quot;</span>);<br>        <span class="hljs-built_in">this</span>.status = Status.wait;<br>        <span class="hljs-keyword">return</span>;<br>      &#125;<br><br>      <span class="hljs-built_in">this</span>.data = fileChunkList.map(<span class="hljs-function">(<span class="hljs-params">&#123; file &#125;, index</span>) =&gt;</span> (&#123;<br>        <span class="hljs-attr">fileHash</span>: <span class="hljs-built_in">this</span>.container.hash,<br>        index,<br>        <span class="hljs-attr">hash</span>: <span class="hljs-built_in">this</span>.container.hash + <span class="hljs-string">&quot;-&quot;</span> + index,<br>        <span class="hljs-attr">chunk</span>: file,<br>        <span class="hljs-attr">size</span>: file.size,<br>        <span class="hljs-attr">percentage</span>: uploadedList.includes(index) ? <span class="hljs-number">100</span> : <span class="hljs-number">0</span><br>      &#125;));<br><br>      <span class="hljs-keyword">await</span> <span class="hljs-built_in">this</span>.uploadChunks(uploadedList);<br>    &#125;,<br>    <span class="hljs-comment">// 上传切片，同时过滤已上传的切片</span><br>    <span class="hljs-keyword">async</span> <span class="hljs-function"><span class="hljs-title">uploadChunks</span>(<span class="hljs-params">uploadedList = []</span>)</span> &#123;<br>      <span class="hljs-keyword">const</span> requestList = <span class="hljs-built_in">this</span>.data<br>        .filter(<span class="hljs-function">(<span class="hljs-params">&#123; hash &#125;</span>) =&gt;</span> !uploadedList.includes(hash))<br>        .map(<span class="hljs-function">(<span class="hljs-params">&#123; chunk, hash, index &#125;</span>) =&gt;</span> &#123;<br>          <span class="hljs-keyword">const</span> formData = <span class="hljs-keyword">new</span> FormData();<br>          formData.append(<span class="hljs-string">&quot;chunk&quot;</span>, chunk);<br>          formData.append(<span class="hljs-string">&quot;hash&quot;</span>, hash);<br>          formData.append(<span class="hljs-string">&quot;filename&quot;</span>, <span class="hljs-built_in">this</span>.container.file.name);<br>          formData.append(<span class="hljs-string">&quot;fileHash&quot;</span>, <span class="hljs-built_in">this</span>.container.hash);<br>          <span class="hljs-keyword">return</span> &#123; formData, index &#125;;<br>        &#125;)<br>        .map(<span class="hljs-keyword">async</span> (&#123; formData, index &#125;) =&gt;<br>          <span class="hljs-built_in">this</span>.request(&#123;<br>            <span class="hljs-attr">url</span>: <span class="hljs-string">&quot;http://localhost:3001&quot;</span>,<br>            <span class="hljs-attr">data</span>: formData,<br>            <span class="hljs-attr">onProgress</span>: <span class="hljs-built_in">this</span>.createProgressHandler(<span class="hljs-built_in">this</span>.data[index]),<br>            <span class="hljs-attr">requestList</span>: <span class="hljs-built_in">this</span>.requestList<br>          &#125;)<br>        );<br>      <span class="hljs-keyword">await</span> <span class="hljs-built_in">Promise</span>.all(requestList);<br>      <span class="hljs-comment">// 之前上传的切片数量 + 本次上传的切片数量 = 所有切片数量时</span><br>      <span class="hljs-comment">// 合并切片</span><br>      <span class="hljs-keyword">if</span> (uploadedList.length + requestList.length === <span class="hljs-built_in">this</span>.data.length) &#123;<br>        <span class="hljs-keyword">await</span> <span class="hljs-built_in">this</span>.mergeRequest();<br>      &#125;<br>    &#125;,<br>    <span class="hljs-comment">// 通知服务端合并切片</span><br>    <span class="hljs-keyword">async</span> <span class="hljs-function"><span class="hljs-title">mergeRequest</span>(<span class="hljs-params"></span>)</span> &#123;<br>      <span class="hljs-keyword">await</span> <span class="hljs-built_in">this</span>.request(&#123;<br>        <span class="hljs-attr">url</span>: <span class="hljs-string">&quot;http://localhost:3001/merge&quot;</span>,<br>        <span class="hljs-attr">headers</span>: &#123;<br>          <span class="hljs-string">&quot;content-type&quot;</span>: <span class="hljs-string">&quot;application/json&quot;</span><br>        &#125;,<br>        <span class="hljs-attr">data</span>: <span class="hljs-built_in">JSON</span>.stringify(&#123;<br>          <span class="hljs-attr">size</span>: SIZE,<br>          <span class="hljs-attr">fileHash</span>: <span class="hljs-built_in">this</span>.container.hash,<br>          <span class="hljs-attr">filename</span>: <span class="hljs-built_in">this</span>.container.file.name<br>        &#125;)<br>      &#125;);<br>      <span class="hljs-built_in">this</span>.$message.success(<span class="hljs-string">&quot;上传成功&quot;</span>);<br>      <span class="hljs-built_in">this</span>.status = Status.wait;<br>    &#125;,<br>    <span class="hljs-comment">// 根据 hash 验证文件是否曾经已经被上传过</span><br>    <span class="hljs-comment">// 没有才进行上传</span><br>    <span class="hljs-keyword">async</span> <span class="hljs-function"><span class="hljs-title">verifyUpload</span>(<span class="hljs-params">filename, fileHash</span>)</span> &#123;<br>      <span class="hljs-keyword">const</span> &#123; data &#125; = <span class="hljs-keyword">await</span> <span class="hljs-built_in">this</span>.request(&#123;<br>        <span class="hljs-attr">url</span>: <span class="hljs-string">&quot;http://localhost:3001/verify&quot;</span>,<br>        <span class="hljs-attr">headers</span>: &#123;<br>          <span class="hljs-string">&quot;content-type&quot;</span>: <span class="hljs-string">&quot;application/json&quot;</span><br>        &#125;,<br>        <span class="hljs-attr">data</span>: <span class="hljs-built_in">JSON</span>.stringify(&#123;<br>          filename,<br>          fileHash<br>        &#125;)<br>      &#125;);<br>      <span class="hljs-keyword">return</span> <span class="hljs-built_in">JSON</span>.parse(data);<br>    &#125;,<br>    <span class="hljs-comment">// 用闭包保存每个 chunk 的进度数据</span><br>    <span class="hljs-function"><span class="hljs-title">createProgressHandler</span>(<span class="hljs-params">item</span>)</span> &#123;<br>      <span class="hljs-keyword">return</span> <span class="hljs-function"><span class="hljs-params">e</span> =&gt;</span> &#123;<br>        item.percentage = <span class="hljs-built_in">parseInt</span>(<span class="hljs-built_in">String</span>((e.loaded / e.total) * <span class="hljs-number">100</span>));<br>      &#125;;<br>    &#125;<br>  &#125;<br>&#125;;<br>&lt;/script&gt;<br><br></code></pre></td></tr></table></figure></details>]]></content>
      
      
      
        <tags>
            
            <tag> vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>54、个人GitHub图床使用webp格式的图片</title>
      <link href="/2022/01/24/54-image-host/"/>
      <url>/2022/01/24/54-image-host/</url>
      
        <content type="html"><![CDATA[<p>使用图床，将本地图片上传到个人GitHub image-host 转换成webp格式的图片链接。</p><span id="more"></span><h3 id="1、什么是webp？"><a href="#1、什么是webp？" class="headerlink" title="1、什么是webp？"></a>1、什么是webp？</h3><blockquote><p>WebP is  是由 Google 公司开发的一种可提供有损和无损压缩的图片格式，支持透明度，目前已支持动图。</p></blockquote><h3 id="2、PicX图床的使用"><a href="#2、PicX图床的使用" class="headerlink" title="2、PicX图床的使用"></a>2、PicX图床的使用</h3><p>PicX 是一款基于 GitHub API &amp; jsDelivr 开发的具有 CDN 加速功能的图床管理工具。只需选择一个 GitHub 仓库作为图床，然后在 PicX 官网 完成 Token 绑定和相应配置就能使用了。</p><p>配置链接：<a href="https://picx-docs.xpoet.cn/tutorial/get-start.html#%E8%BF%9B%E8%A1%8C%E5%9B%BE%E5%BA%8A%E9%85%8D%E7%BD%AE">https://picx-docs.xpoet.cn/tutorial/get-start.html#%E8%BF%9B%E8%A1%8C%E5%9B%BE%E5%BA%8A%E9%85%8D%E7%BD%AE</a></p><p><image src="https://cdn.jsdelivr.net/gh/HeyJudeYQ/Image-Host@master/image.1fp31abnh9sw.webp"></image></p><p>将本地图片上传至图床，上床成功后的图片会生成一个GitHub外链和cdn外链。</p><p><image src="https://cdn.jsdelivr.net/gh/HeyJudeYQ/Image-Host@master/image.27ywn4r0zskk.webp"></image></p>]]></content>
      
      
      
        <tags>
            
            <tag> cdn </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>53、vue使用装饰器descriptor</title>
      <link href="/2022/01/20/53-decorator/"/>
      <url>/2022/01/20/53-decorator/</url>
      
        <content type="html"><![CDATA[<p>decorator装饰器通过对类、对象、方法、属性进行修饰，对其添加一些其他行为，即对一段代码进行二次包装。<br>装饰器只能用于类和类的方法，不能用于函数，因为存在函数提升。</p><span id="more"></span><h2 id="一、使用方法："><a href="#一、使用方法：" class="headerlink" title="一、使用方法："></a>一、使用方法：</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> decorator = <span class="hljs-function">(<span class="hljs-params">target,name,descriptor</span>) =&gt;</span> &#123;<br>  <span class="hljs-keyword">var</span> oldValue = descriptor.value<br>  descriptor.value = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;<br>    <span class="hljs-keyword">return</span> oldValue.apply(<span class="hljs-built_in">this</span>,<span class="hljs-built_in">arguments</span>)<br>  &#125;<br>  <span class="hljs-keyword">return</span> descriptor<br>&#125;<br></code></pre></td></tr></table></figure><p>使用装饰器可以不需要关注代码内部的实现，增强了代码的可读性。</p><p>vue中使用装饰器：</p><p>项目中使用eslint，需要开启装饰器相关语法的检测。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// .eslintrc.js</span><br>  <span class="hljs-attr">parserOptions</span>: &#123;<br>    <span class="hljs-attr">parser</span>: <span class="hljs-string">&#x27;babel-eslint&#x27;</span>,<br>    <span class="hljs-attr">ecmaFeatures</span>:&#123;<br>      <span class="hljs-attr">legacyDecorators</span>: <span class="hljs-literal">true</span><br>    &#125;<br>  &#125;,<br></code></pre></td></tr></table></figure><h2 id="二、Vue项目使用Element-Ui组件库进行二次弹窗确认相关操作："><a href="#二、Vue项目使用Element-Ui组件库进行二次弹窗确认相关操作：" class="headerlink" title="二、Vue项目使用Element-Ui组件库进行二次弹窗确认相关操作："></a>二、Vue项目使用Element-Ui组件库进行二次弹窗确认相关操作：</h2><p>1、工具函数decorator.js</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 需安装element-ui</span><br><span class="hljs-keyword">import</span> &#123; MessageBox, Message &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;element-ui&#x27;</span><br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 确认框</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param <span class="hljs-type">&#123;String&#125;</span> <span class="hljs-variable">title</span></span> - 标题</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param <span class="hljs-type">&#123;String&#125;</span> <span class="hljs-variable">content</span></span> - 内容</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param <span class="hljs-type">&#123;String&#125;</span> <span class="hljs-variable">confirmButtonText</span></span> - 确认按钮名称</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param <span class="hljs-type">&#123;Function&#125;</span> <span class="hljs-variable">callback</span></span> - 确认按钮名称</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@returns</span></span><br><span class="hljs-comment">   **/</span><br><br><br><span class="hljs-keyword">export</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">confirm</span> (<span class="hljs-params">title, content, confirmButtonText = <span class="hljs-string">&#x27;确定&#x27;</span></span>) </span>&#123;<br>  <span class="hljs-keyword">return</span> <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">target, name, descriptor</span>) </span>&#123;<br>    <span class="hljs-comment">// target:test（）  </span><br>    <span class="hljs-comment">// name:test1   </span><br>    <span class="hljs-comment">// descriptor: 装饰器属性 </span><br>    <span class="hljs-comment">// 包括 ：configurable: true </span><br>    <span class="hljs-comment">// umerable: true</span><br>    <span class="hljs-comment">// value: ƒ () </span><br>    <span class="hljs-comment">// writable: true</span><br>    <span class="hljs-keyword">const</span> originValue = descriptor.value<br>    descriptor.value = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">...args</span>) </span>&#123;<br>      MessageBox.confirm(content, title, &#123;<br>        <span class="hljs-attr">dangerouslyUseHTMLString</span>: <span class="hljs-literal">true</span>,<br>        <span class="hljs-attr">distinguishCancelAndClose</span>: <span class="hljs-literal">true</span>,<br>        <span class="hljs-attr">confirmButtonText</span>: confirmButtonText<br>      &#125;).then(originValue.bind(<span class="hljs-built_in">this</span>, ...args)).catch(<span class="hljs-function"><span class="hljs-params">error</span> =&gt;</span> &#123;<br>        <span class="hljs-keyword">if</span> (error === <span class="hljs-string">&#x27;close&#x27;</span> || error === <span class="hljs-string">&#x27;cancel&#x27;</span>) &#123;<br>          Message.info(<span class="hljs-string">&#x27;用户取消操作&#x27;</span>)<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>          Message.info(error)<br>        &#125;<br>      &#125;)<br>    &#125;<br>    <span class="hljs-keyword">return</span> descriptor<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>2、页面引入装饰器函数</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">template</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;about&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>This is an about page<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>装饰器<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">button</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">&#x27;test&#x27;</span>&gt;</span>confirm<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">button</span>&gt;</span>cancel<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">import</span> &#123; confirm &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./decorator.js&#x27;</span><br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> &#123;<br>  <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;about&#x27;</span>,<br>  <span class="hljs-attr">methods</span>: &#123;<br>    @confirm(<span class="hljs-string">&#x27;删除&#x27;</span>, <span class="hljs-string">&#x27;确认删除?&#x27;</span>)<br>    test () &#123;<br>      <span class="hljs-comment">// do something  调用接口</span><br><br>      <span class="hljs-built_in">this</span>.$message.success(<span class="hljs-string">&#x27;success!!&#x27;</span>)<br>    &#125;<br><br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="三、前端API请求缓存"><a href="#三、前端API请求缓存" class="headerlink" title="三、前端API请求缓存"></a>三、前端API请求缓存</h2><p>前端 API 请求缓存是前端性能优化的一个方案。</p><h3 id="1、key值错误提示"><a href="#1、key值错误提示" class="headerlink" title="1、key值错误提示"></a>1、key值错误提示</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> generateKeyError = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Error</span>(<span class="hljs-string">&#x27;Can not generate key from name and argument&#x27;</span>)<br></code></pre></td></tr></table></figure><h3 id="2、生成key值"><a href="#2、生成key值" class="headerlink" title="2、生成key值"></a>2、生成key值</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">generateKey</span>(<span class="hljs-params">name,argument</span>)</span>&#123;<br>  <span class="hljs-comment">// 从argument 中获取数据然后变为数组</span><br>  <span class="hljs-keyword">const</span> params = <span class="hljs-built_in">Array</span>.from(argument).join(<span class="hljs-string">&#x27;,&#x27;</span>)<br>  <span class="hljs-keyword">try</span>&#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">`<span class="hljs-subst">$&#123;name&#125;</span>:<span class="hljs-subst">$&#123;params&#125;</span>`</span><br>  &#125;<span class="hljs-keyword">catch</span>&#123;<br>    <span class="hljs-keyword">return</span> generateKeyError<br>  &#125;<br>&#125;<br><br><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">decorate</span>(<span class="hljs-params">handleDescription,entryArgs</span>) </span>&#123;<br>  <span class="hljs-comment">// 判断当前最后数据是否是descriptor ，如果是descriptor,直接使用</span><br>  <span class="hljs-keyword">if</span>(isDescriptor(entryArgs[entryArgs.length - <span class="hljs-number">1</span>]))&#123;<br>    <span class="hljs-keyword">return</span> handleDescription(...entryArgs,[])<br>  &#125;<span class="hljs-keyword">else</span>&#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;<br>      <span class="hljs-keyword">return</span> handleDescription(...Array.prototype.slice.call(<span class="hljs-built_in">arguments</span>),entryArgs)<br>    &#125;<br>  &#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">handleApiCache</span>(<span class="hljs-params">target, name, descriptor, ...config</span>) </span>&#123;<br>    <span class="hljs-comment">// 拿到函数体并保存</span><br>    <span class="hljs-keyword">const</span> fn = descriptor.value<br>    <span class="hljs-comment">// 修改函数体</span><br>    descriptor.value = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123; <br>        <span class="hljs-keyword">const</span> key =  generateKey(name, <span class="hljs-built_in">arguments</span>)<br>        <span class="hljs-comment">// key无法生成，直接请求 服务端数据</span><br>        <span class="hljs-keyword">if</span> (key === generateKeyError)  &#123;<br>            <span class="hljs-comment">// 利用刚才保存的函数体进行请求</span><br>            <span class="hljs-keyword">return</span> fn.apply(<span class="hljs-literal">null</span>, <span class="hljs-built_in">arguments</span>)<br>        &#125;<br>        <span class="hljs-keyword">let</span> promise = ExpriesCache.get(key)<br>        <span class="hljs-keyword">if</span> (!promise) &#123;<br>            <span class="hljs-comment">// 设定promise</span><br>            promise = fn.apply(<span class="hljs-literal">null</span>, <span class="hljs-built_in">arguments</span>).catch(<span class="hljs-function"><span class="hljs-params">error</span> =&gt;</span> &#123;<br>                 <span class="hljs-comment">// 在请求回来后，如果出现问题，把promise从cache中删除</span><br>                ExpriesCache.delete(key)<br>                <span class="hljs-comment">// 返回错误</span><br>                <span class="hljs-keyword">return</span> <span class="hljs-built_in">Promise</span>.reject(error)<br>            &#125;)<br>            <span class="hljs-comment">// 使用 10s 缓存，10s之后再次get就会 获取null 而从服务端继续请求</span><br>            ExpriesCache.set(key, promise, config[<span class="hljs-number">0</span>])<br>        &#125;<br>        <span class="hljs-keyword">return</span> promise <br>    &#125;<br>    <span class="hljs-keyword">return</span> descriptor;<br>&#125;<br><br><span class="hljs-comment">// 制定 修饰器</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">ApiCache</span>(<span class="hljs-params">...args</span>) </span>&#123;<br>    <span class="hljs-keyword">return</span> decorate(handleApiCache, args)<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="3、api接口处使用ApiCache"><a href="#3、api接口处使用ApiCache" class="headerlink" title="3、api接口处使用ApiCache()"></a>3、api接口处使用ApiCache()</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Api</span></span>&#123;<br>  <span class="hljs-comment">// 缓存10s</span><br>  @ApiCache(<span class="hljs-number">10</span>)<br>  <span class="hljs-function"><span class="hljs-title">getData</span>(<span class="hljs-params">params1,params2</span>)</span>&#123;<br>    <span class="hljs-keyword">return</span> request.get(<span class="hljs-string">&#x27;/getList&#x27;</span>)<br>  &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>52、WebRTC音视频</title>
      <link href="/2022/01/19/52-webrtc/"/>
      <url>/2022/01/19/52-webrtc/</url>
      
        <content type="html"><![CDATA[<p>WebRTC (Web Real-Time Communications) 是一项实时通讯技术，它允许网络应用或者站点，在不借助中间媒介的情况下，建立浏览器之间点对点（Peer-to-Peer）的连接，实现视频流和（或）音频流或者其他任意数据的传输。WebRTC 包含的这些标准使用户在无需安装任何插件或者第三方的软件的情况下，创建点对点（Peer-to-Peer）的数据分享和电话会议成为可能。</p><span id="more"></span><h3 id="一、WebRTC-音视频采集-API：MediaDevices-getUserMedia"><a href="#一、WebRTC-音视频采集-API：MediaDevices-getUserMedia" class="headerlink" title="一、WebRTC 音视频采集 API：MediaDevices.getUserMedia()"></a>一、WebRTC 音视频采集 API：MediaDevices.getUserMedia()</h3><blockquote><p>MediaDevices.getUserMedia() 会提示用户给予使用媒体输入的许可，媒体输入会产生一个 MediaStream，里面包含了请求的媒体类型的轨道。此流可以包含一个视频轨道（来自硬件或者虚拟视频源，比如相机、视频采集设备和屏幕共享服务等等）、一个音频轨道（同样来自硬件或虚拟音频源，比如麦克风、A/D 转换器等等），也可能是其它轨道类型。</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> constraints = &#123;<br>  <span class="hljs-attr">video</span>: <span class="hljs-literal">true</span>,<br>  <span class="hljs-attr">audio</span>: <span class="hljs-literal">true</span>,<br>&#125;;<br><span class="hljs-comment">//   非安全模式（非https/localhost）下 navigator.mediaDevices 会返回 undefined</span><br><span class="hljs-keyword">try</span> &#123;<br>  <span class="hljs-keyword">const</span> stream = <span class="hljs-keyword">await</span> navigator.mediaDevices.getUserMedia(constraints);<br>  <span class="hljs-built_in">document</span>.querySelector(<span class="hljs-string">&quot;video&quot;</span>).srcObject = stream;<br>&#125; <span class="hljs-keyword">catch</span> (error) &#123;<br>  <span class="hljs-built_in">console</span>.error(error);<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="二、获取音视频设备输入输出列表-MediaDevices-enumerateDevices"><a href="#二、获取音视频设备输入输出列表-MediaDevices-enumerateDevices" class="headerlink" title="二、获取音视频设备输入输出列表:MediaDevices.enumerateDevices()"></a>二、获取音视频设备输入输出列表:MediaDevices.enumerateDevices()</h3><blockquote><p>MediaDevices 的方法 enumerateDevices() 请求一个可用的媒体输入和输出设备的列表，例如麦克风，摄像机，耳机设备等。 返回的 Promise (en-US) 完成时，会带有一个描述设备的 MediaDeviceInfo (en-US) 的数组。</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">try</span> &#123;<br>  <span class="hljs-keyword">const</span> devices = <span class="hljs-keyword">await</span> navigator.mediaDevices.enumerateDevices();<br>  <span class="hljs-built_in">this</span>.videoinputs = devices.filter(<span class="hljs-function">(<span class="hljs-params">device</span>) =&gt;</span> device.kind === <span class="hljs-string">&quot;videoinput&quot;</span>);<br>  <span class="hljs-built_in">this</span>.audiooutputs = devices.filter(<span class="hljs-function">(<span class="hljs-params">device</span>) =&gt;</span> device.kind === <span class="hljs-string">&quot;audiooutput&quot;</span>);<br>  <span class="hljs-built_in">this</span>.audioinputs = devices.filter(<span class="hljs-function">(<span class="hljs-params">device</span>) =&gt;</span> device.kind === <span class="hljs-string">&quot;audioinput&quot;</span>);<br>&#125; <span class="hljs-keyword">catch</span> (error) &#123;<br>  <span class="hljs-built_in">console</span>.error(error);<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="三、点对点媒体协商方法"><a href="#三、点对点媒体协商方法" class="headerlink" title="三、点对点媒体协商方法"></a>三、点对点媒体协商方法</h3><p>媒体协商方法：</p><p>1、createOffer：</p><blockquote><p>createOffer 方法会生成描述信息的一个 blob 对象，它会帮助连接到本地机器。当你已经找到一个远端的 PeerConnection 并且打算设置建立本地的 PeerConnection 时，你可以使用该方法。</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> pc = <span class="hljs-keyword">new</span> PeerConnection();<br>pc.addStream(video);<br>pc.createOffer(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">desc</span>)</span>&#123;<br>  pc.setLocalDescription(desc, <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>&#123;<br>    <span class="hljs-comment">// send the offer to a server that can negotiate with a remote client</span><br>  &#125;);<br>&#125;<br></code></pre></td></tr></table></figure><p>2、createAnswer：</p><blockquote><p>对从远方收到的 offer 进行回答。</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> pc = <span class="hljs-keyword">new</span> PeerConnection();<br>pc.setRemoteDescription(<span class="hljs-keyword">new</span> RTCSessionDescription(offer), <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<br>  pc.createAnswer(<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">answer</span>) </span>&#123;<br>    pc.setLocalDescription(answer, <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<br>      <span class="hljs-comment">// send the answer to the remote connection</span><br>    &#125;);<br>  &#125;);<br>&#125;);<br></code></pre></td></tr></table></figure><h3 id="四、服务端：Koa-socket-io"><a href="#四、服务端：Koa-socket-io" class="headerlink" title="四、服务端：Koa + socket.io"></a>四、服务端：Koa + socket.io</h3><p>1、server.js</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// server 端 server.js</span><br><span class="hljs-keyword">const</span> Koa = <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;koa&quot;</span>);<br><span class="hljs-keyword">const</span> socket = <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;socket.io&quot;</span>);<br><span class="hljs-keyword">const</span> http = <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;http&quot;</span>);<br><span class="hljs-keyword">const</span> app = <span class="hljs-keyword">new</span> Koa();<br><span class="hljs-keyword">const</span> httpServer = http.createServer(app.callback()).listen(<span class="hljs-number">3000</span>, <span class="hljs-function">() =&gt;</span> &#123;&#125;);<br>socket(httpServer).on(<span class="hljs-string">&quot;connection&quot;</span>, <span class="hljs-function">(<span class="hljs-params">sock</span>) =&gt;</span> &#123;<br>  <span class="hljs-comment">// ....</span><br>&#125;);<br><br><span class="hljs-comment">// client 端 socket.js</span><br><span class="hljs-keyword">import</span> io <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;socket.io-client&quot;</span>;<br><span class="hljs-keyword">const</span> socket = io.connect(<span class="hljs-built_in">window</span>.location.origin);<br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> socket;<br></code></pre></td></tr></table></figure><p>2、点对点分别连接信令服务器，信令服务器记录房间信息</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs js">socket(httpServer).on(<span class="hljs-string">&quot;connection&quot;</span>, <span class="hljs-function">(<span class="hljs-params">sock</span>) =&gt;</span> &#123;<br>  <span class="hljs-comment">// 用户离开房间</span><br>  sock.on(<span class="hljs-string">&quot;userLeave&quot;</span>, <span class="hljs-function">() =&gt;</span> &#123;<br>    <span class="hljs-comment">// ...</span><br>  &#125;);<br>  <span class="hljs-comment">// 检查房间是否可加入</span><br>  sock.on(<span class="hljs-string">&quot;checkRoom&quot;</span>, <span class="hljs-function">() =&gt;</span> &#123;<br>    <span class="hljs-comment">// ...</span><br>  &#125;);<br>  <span class="hljs-comment">// ....</span><br>&#125;);<br><span class="hljs-comment">// client 端 Room.vue</span><br><span class="hljs-keyword">import</span> socket <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;../utils/socket.js&quot;</span>;<br><br><span class="hljs-comment">// 服务端告知用户是否可加入房间</span><br>socket.on(<span class="hljs-string">&quot;checkRoomSuccess&quot;</span>, <span class="hljs-function">() =&gt;</span> &#123;<br>  <span class="hljs-comment">// ...</span><br>&#125;);<br><span class="hljs-comment">// 服务端告知用户成功加入房间</span><br>socket.on(<span class="hljs-string">&quot;joinRoomSuccess&quot;</span>, <span class="hljs-function">() =&gt;</span> &#123;<br>  <span class="hljs-comment">// ...</span><br>&#125;);<br><span class="hljs-comment">//....</span><br></code></pre></td></tr></table></figure><p>3、A 端作为发起方向接收方 B 端发起视频邀请</p><p>在得到 B 同意视频请求后，双方都会创建本地的 RTCPeerConnection，添加本地视频流，其中发送方会创建 offer 设置本地 sdp 信息描述，并通过信令服务器将自己的 SDP 信息发送给对端</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs js">socket.on(<span class="hljs-string">&quot;answerVideo&quot;</span>, <span class="hljs-keyword">async</span> (user) =&gt; &#123;<br>  VIDEO_VIEW.showInvideoModal();<br>  <span class="hljs-comment">// 创建本地视频流信息</span><br>  <span class="hljs-keyword">const</span> localStream = <span class="hljs-keyword">await</span> <span class="hljs-built_in">this</span>.createLocalVideoStream();<br>  <span class="hljs-built_in">this</span>.localStream = localStream;<br>  <span class="hljs-built_in">document</span>.querySelector(<span class="hljs-string">&quot;#echat-local&quot;</span>).srcObject = <span class="hljs-built_in">this</span>.localStream;<br>  <span class="hljs-built_in">this</span>.peer = <span class="hljs-keyword">new</span> RTCPeerConnection();<br>  <span class="hljs-built_in">this</span>.initPeerListen();<br>  <span class="hljs-built_in">this</span>.peer.addStream(<span class="hljs-built_in">this</span>.localStream);<br>  <span class="hljs-keyword">if</span> (user.sockId === <span class="hljs-built_in">this</span>.sockId) &#123;<br>    <span class="hljs-comment">// 接收方</span><br>  &#125; <span class="hljs-keyword">else</span> &#123;<br>    <span class="hljs-comment">// 发送方 创建 offer</span><br>    <span class="hljs-keyword">const</span> offer = <span class="hljs-keyword">await</span> <span class="hljs-built_in">this</span>.peer.createOffer(<span class="hljs-built_in">this</span>.offerOption);<br>    <span class="hljs-keyword">await</span> <span class="hljs-built_in">this</span>.peer.setLocalDescription(offer);<br>    socket.emit(<span class="hljs-string">&quot;receiveOffer&quot;</span>, &#123; <span class="hljs-attr">user</span>: <span class="hljs-built_in">this</span>.user, offer &#125;);<br>  &#125;<br>&#125;);<br></code></pre></td></tr></table></figure><p>4、收集自己的网络信息并发送给对方</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs js">initPeerListen () &#123;<br>      <span class="hljs-comment">// 收集自己的网络信息并发送给对端</span><br>      <span class="hljs-built_in">this</span>.peer.onicecandidate = <span class="hljs-function">(<span class="hljs-params">event</span>) =&gt;</span> &#123;<br>        <span class="hljs-keyword">if</span> (event.candidate) &#123; socket.emit(<span class="hljs-string">&#x27;addIceCandidate&#x27;</span>, &#123; <span class="hljs-attr">candidate</span>: event.candidate, <span class="hljs-attr">user</span>: <span class="hljs-built_in">this</span>.user &#125;); &#125;<br>      &#125;;<br>      <span class="hljs-comment">// ....</span><br>    &#125;<br><br></code></pre></td></tr></table></figure><p>5、当接收方 B 端通过信令服务器拿到对端发送方 A 端的含有 SDP 的 offer 信息后则会调用 setRemoteDescription 存储对端的 SDP 信息，创建及设置本地的 SDP 信息,并通过信令服务器传送含有本地 SDP 信息的 answer</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs js">socket.on(<span class="hljs-string">&quot;receiveOffer&quot;</span>, <span class="hljs-keyword">async</span> (offer) =&gt; &#123;<br>  <span class="hljs-keyword">await</span> <span class="hljs-built_in">this</span>.peer.setRemoteDescription(offer);<br>  <span class="hljs-keyword">const</span> answer = <span class="hljs-keyword">await</span> <span class="hljs-built_in">this</span>.peer.createAnswer();<br>  <span class="hljs-keyword">await</span> <span class="hljs-built_in">this</span>.peer.setLocalDescription(answer);<br>  socket.emit(<span class="hljs-string">&quot;receiveAnsewer&quot;</span>, &#123; answer, <span class="hljs-attr">user</span>: <span class="hljs-built_in">this</span>.user &#125;);<br>&#125;);<br></code></pre></td></tr></table></figure><p>6、当发起方 A 通过信令服务器接收到接收方 B 的 answer 信息后则也会调用 setRemoteDescription，这样双方就完成了 SDP 信息的交换</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs js">socket.on(<span class="hljs-string">&quot;receiveAnsewer&quot;</span>, <span class="hljs-function">(<span class="hljs-params">answer</span>) =&gt;</span> &#123;<br>  <span class="hljs-built_in">this</span>.peer.setRemoteDescription(answer);<br>&#125;);<br></code></pre></td></tr></table></figure><p>7、当双方 SDP 信息交换完成并且监听 icecandidate 收集到网络候选者通过信令服务器交换后，则会拿到彼此的视频流。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs js">socket.on(<span class="hljs-string">&quot;addIceCandidate&quot;</span>, <span class="hljs-keyword">async</span> (candidate) =&gt; &#123;<br>  <span class="hljs-keyword">await</span> <span class="hljs-built_in">this</span>.peer.addIceCandidate(candidate);<br>&#125;);<br><span class="hljs-built_in">this</span>.peer.onaddstream = <span class="hljs-function">(<span class="hljs-params">event</span>) =&gt;</span> &#123;<br>  <span class="hljs-comment">// 拿到对方的视频流</span><br>  <span class="hljs-built_in">document</span>.querySelector(<span class="hljs-string">&quot;#remote-video&quot;</span>).srcObject = event.stream;<br>&#125;;<br></code></pre></td></tr></table></figure><p>8、GitHub：<a href="https://github.com/HeyJudeYQ/webrtc">https://github.com/HeyJudeYQ/webrtc</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> webrtc </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>51、Vue项目中前端导出/导入Excel表格的实现</title>
      <link href="/2022/01/15/51-export-excel/"/>
      <url>/2022/01/15/51-export-excel/</url>
      
        <content type="html"><![CDATA[<p>后台管理系统中，通常有这样的需求:将当前 table 表格导出/导入 Excel 表格，实现方式通常为后端主导（后端使用插件，前端通过点击事件生成一个 a 标签，导出 Excel 表格）、前端主导（使用 xlsx、file-saver、script-loader 插件封装工具函数，通过点击事件，获取当前页面后台返回的表格数据)。</p><span id="more"></span><h2 id="一、前端导出-Excel-表格的实现"><a href="#一、前端导出-Excel-表格的实现" class="headerlink" title="一、前端导出 Excel 表格的实现"></a>一、前端导出 Excel 表格的实现</h2><h3 id="1、安装-plugin"><a href="#1、安装-plugin" class="headerlink" title="1、安装 plugin"></a>1、安装 plugin</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">npm install file-saver script-loader xlsx --save<br></code></pre></td></tr></table></figure><h3 id="2、Export2Excel-工具函数"><a href="#2、Export2Excel-工具函数" class="headerlink" title="2、Export2Excel 工具函数"></a>2、Export2Excel 工具函数</h3><details><summary>点我展示代码</summary><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">import</span> &#123; saveAs &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;file-saver&quot;</span>;<br><span class="hljs-keyword">import</span> XLSX <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;xlsx&quot;</span>;<br><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">generateArray</span>(<span class="hljs-params">table</span>) </span>&#123;<br>  <span class="hljs-keyword">var</span> out = [];<br>  <span class="hljs-keyword">var</span> rows = table.querySelectorAll(<span class="hljs-string">&quot;tr&quot;</span>);<br>  <span class="hljs-keyword">var</span> ranges = [];<br>  <span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> R = <span class="hljs-number">0</span>; R &lt; rows.length; ++R) &#123;<br>    <span class="hljs-keyword">var</span> outRow = [];<br>    <span class="hljs-keyword">var</span> row = rows[R];<br>    <span class="hljs-keyword">var</span> columns = row.querySelectorAll(<span class="hljs-string">&quot;td&quot;</span>);<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> C = <span class="hljs-number">0</span>; C &lt; columns.length; ++C) &#123;<br>      <span class="hljs-keyword">var</span> cell = columns[C];<br>      <span class="hljs-keyword">var</span> colspan = cell.getAttribute(<span class="hljs-string">&quot;colspan&quot;</span>);<br>      <span class="hljs-keyword">var</span> rowspan = cell.getAttribute(<span class="hljs-string">&quot;rowspan&quot;</span>);<br>      <span class="hljs-keyword">var</span> cellValue = cell.innerText;<br>      <span class="hljs-keyword">if</span> (cellValue !== <span class="hljs-string">&quot;&quot;</span> &amp;&amp; cellValue == +cellValue) cellValue = +cellValue;<br><br>      <span class="hljs-comment">//Skip ranges</span><br>      ranges.forEach(<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">range</span>) </span>&#123;<br>        <span class="hljs-keyword">if</span> (<br>          R &gt;= range.s.r &amp;&amp;<br>          R &lt;= range.e.r &amp;&amp;<br>          outRow.length &gt;= range.s.c &amp;&amp;<br>          outRow.length &lt;= range.e.c<br>        ) &#123;<br>          <span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> i = <span class="hljs-number">0</span>; i &lt;= range.e.c - range.s.c; ++i) outRow.push(<span class="hljs-literal">null</span>);<br>        &#125;<br>      &#125;);<br><br>      <span class="hljs-comment">//Handle Row Span</span><br>      <span class="hljs-keyword">if</span> (rowspan || colspan) &#123;<br>        rowspan = rowspan || <span class="hljs-number">1</span>;<br>        colspan = colspan || <span class="hljs-number">1</span>;<br>        ranges.push(&#123;<br>          <span class="hljs-attr">s</span>: &#123;<br>            <span class="hljs-attr">r</span>: R,<br>            <span class="hljs-attr">c</span>: outRow.length,<br>          &#125;,<br>          <span class="hljs-attr">e</span>: &#123;<br>            <span class="hljs-attr">r</span>: R + rowspan - <span class="hljs-number">1</span>,<br>            <span class="hljs-attr">c</span>: outRow.length + colspan - <span class="hljs-number">1</span>,<br>          &#125;,<br>        &#125;);<br>      &#125;<br><br>      <span class="hljs-comment">//Handle Value</span><br>      outRow.push(cellValue !== <span class="hljs-string">&quot;&quot;</span> ? cellValue : <span class="hljs-literal">null</span>);<br><br>      <span class="hljs-comment">//Handle Colspan</span><br>      <span class="hljs-keyword">if</span> (colspan) <span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> k = <span class="hljs-number">0</span>; k &lt; colspan - <span class="hljs-number">1</span>; ++k) outRow.push(<span class="hljs-literal">null</span>);<br>    &#125;<br>    out.push(outRow);<br>  &#125;<br>  <span class="hljs-keyword">return</span> [out, ranges];<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">datenum</span>(<span class="hljs-params">v, date1904</span>) </span>&#123;<br>  <span class="hljs-keyword">if</span> (date1904) v += <span class="hljs-number">1462</span>;<br>  <span class="hljs-keyword">var</span> epoch = <span class="hljs-built_in">Date</span>.parse(v);<br>  <span class="hljs-keyword">return</span> (epoch - <span class="hljs-keyword">new</span> <span class="hljs-built_in">Date</span>(<span class="hljs-built_in">Date</span>.UTC(<span class="hljs-number">1899</span>, <span class="hljs-number">11</span>, <span class="hljs-number">30</span>))) / (<span class="hljs-number">24</span> * <span class="hljs-number">60</span> * <span class="hljs-number">60</span> * <span class="hljs-number">1000</span>);<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">sheet_from_array_of_arrays</span>(<span class="hljs-params">data, opts</span>) </span>&#123;<br>  <span class="hljs-keyword">var</span> ws = &#123;&#125;;<br>  <span class="hljs-keyword">var</span> range = &#123;<br>    <span class="hljs-attr">s</span>: &#123;<br>      <span class="hljs-attr">c</span>: <span class="hljs-number">10000000</span>,<br>      <span class="hljs-attr">r</span>: <span class="hljs-number">10000000</span>,<br>    &#125;,<br>    <span class="hljs-attr">e</span>: &#123;<br>      <span class="hljs-attr">c</span>: <span class="hljs-number">0</span>,<br>      <span class="hljs-attr">r</span>: <span class="hljs-number">0</span>,<br>    &#125;,<br>  &#125;;<br>  <span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> R = <span class="hljs-number">0</span>; R != data.length; ++R) &#123;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> C = <span class="hljs-number">0</span>; C != data[R].length; ++C) &#123;<br>      <span class="hljs-keyword">if</span> (range.s.r &gt; R) range.s.r = R;<br>      <span class="hljs-keyword">if</span> (range.s.c &gt; C) range.s.c = C;<br>      <span class="hljs-keyword">if</span> (range.e.r &lt; R) range.e.r = R;<br>      <span class="hljs-keyword">if</span> (range.e.c &lt; C) range.e.c = C;<br>      <span class="hljs-keyword">var</span> cell = &#123;<br>        <span class="hljs-attr">v</span>: data[R][C],<br>      &#125;;<br>      <span class="hljs-keyword">if</span> (cell.v == <span class="hljs-literal">null</span>) <span class="hljs-keyword">continue</span>;<br>      <span class="hljs-keyword">var</span> cell_ref = XLSX.utils.encode_cell(&#123;<br>        <span class="hljs-attr">c</span>: C,<br>        <span class="hljs-attr">r</span>: R,<br>      &#125;);<br><br>      <span class="hljs-keyword">if</span> (<span class="hljs-keyword">typeof</span> cell.v === <span class="hljs-string">&quot;number&quot;</span>) cell.t = <span class="hljs-string">&quot;n&quot;</span>;<br>      <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (<span class="hljs-keyword">typeof</span> cell.v === <span class="hljs-string">&quot;boolean&quot;</span>) cell.t = <span class="hljs-string">&quot;b&quot;</span>;<br>      <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (cell.v <span class="hljs-keyword">instanceof</span> <span class="hljs-built_in">Date</span>) &#123;<br>        cell.t = <span class="hljs-string">&quot;n&quot;</span>;<br>        cell.z = XLSX.SSF._table[<span class="hljs-number">14</span>];<br>        cell.v = datenum(cell.v);<br>      &#125; <span class="hljs-keyword">else</span> cell.t = <span class="hljs-string">&quot;s&quot;</span>;<br><br>      ws[cell_ref] = cell;<br>    &#125;<br>  &#125;<br>  <span class="hljs-keyword">if</span> (range.s.c &lt; <span class="hljs-number">10000000</span>) ws[<span class="hljs-string">&quot;!ref&quot;</span>] = XLSX.utils.encode_range(range);<br>  <span class="hljs-keyword">return</span> ws;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">Workbook</span>(<span class="hljs-params"></span>) </span>&#123;<br>  <span class="hljs-keyword">if</span> (!(<span class="hljs-built_in">this</span> <span class="hljs-keyword">instanceof</span> Workbook)) <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> Workbook();<br>  <span class="hljs-built_in">this</span>.SheetNames = [];<br>  <span class="hljs-built_in">this</span>.Sheets = &#123;&#125;;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">s2ab</span>(<span class="hljs-params">s</span>) </span>&#123;<br>  <span class="hljs-keyword">var</span> buf = <span class="hljs-keyword">new</span> <span class="hljs-built_in">ArrayBuffer</span>(s.length);<br>  <span class="hljs-keyword">var</span> view = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Uint8Array</span>(buf);<br>  <span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> i = <span class="hljs-number">0</span>; i != s.length; ++i) view[i] = s.charCodeAt(i) &amp; <span class="hljs-number">0xff</span>;<br>  <span class="hljs-keyword">return</span> buf;<br>&#125;<br><br><span class="hljs-keyword">export</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">export_table_to_excel</span>(<span class="hljs-params">id</span>) </span>&#123;<br>  <span class="hljs-keyword">var</span> theTable = <span class="hljs-built_in">document</span>.getElementById(id);<br>  <span class="hljs-keyword">var</span> oo = generateArray(theTable);<br>  <span class="hljs-keyword">var</span> ranges = oo[<span class="hljs-number">1</span>];<br><br>  <span class="hljs-comment">/* original data */</span><br>  <span class="hljs-keyword">var</span> data = oo[<span class="hljs-number">0</span>];<br>  <span class="hljs-keyword">var</span> ws_name = <span class="hljs-string">&quot;SheetJS&quot;</span>;<br><br>  <span class="hljs-keyword">var</span> wb = <span class="hljs-keyword">new</span> Workbook(),<br>    ws = sheet_from_array_of_arrays(data);<br><br>  <span class="hljs-comment">/* add ranges to worksheet */</span><br>  <span class="hljs-comment">// ws[&#x27;!cols&#x27;] = [&#x27;apple&#x27;, &#x27;banan&#x27;];</span><br>  ws[<span class="hljs-string">&quot;!merges&quot;</span>] = ranges;<br><br>  <span class="hljs-comment">/* add worksheet to workbook */</span><br>  wb.SheetNames.push(ws_name);<br>  wb.Sheets[ws_name] = ws;<br><br>  <span class="hljs-keyword">var</span> wbout = XLSX.write(wb, &#123;<br>    <span class="hljs-attr">bookType</span>: <span class="hljs-string">&quot;xlsx&quot;</span>,<br>    <span class="hljs-attr">bookSST</span>: <span class="hljs-literal">false</span>,<br>    <span class="hljs-attr">type</span>: <span class="hljs-string">&quot;binary&quot;</span>,<br>  &#125;);<br><br>  saveAs(<br>    <span class="hljs-keyword">new</span> Blob([s2ab(wbout)], &#123;<br>      <span class="hljs-attr">type</span>: <span class="hljs-string">&quot;application/octet-stream&quot;</span>,<br>    &#125;),<br>    <span class="hljs-string">&quot;test.xlsx&quot;</span><br>  );<br>&#125;<br><br><span class="hljs-keyword">export</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">export_json_to_excel</span>(<span class="hljs-params">&#123;</span></span><br><span class="hljs-params"><span class="hljs-function">  multiHeader = [],</span></span><br><span class="hljs-params"><span class="hljs-function">  header,</span></span><br><span class="hljs-params"><span class="hljs-function">  data,</span></span><br><span class="hljs-params"><span class="hljs-function">  filename,</span></span><br><span class="hljs-params"><span class="hljs-function">  merges = [],</span></span><br><span class="hljs-params"><span class="hljs-function">  autoWidth = <span class="hljs-literal">true</span>,</span></span><br><span class="hljs-params"><span class="hljs-function">  bookType = <span class="hljs-string">&quot;xlsx&quot;</span>,</span></span><br><span class="hljs-params"><span class="hljs-function">&#125; = &#123;&#125;</span>) </span>&#123;<br>  <span class="hljs-comment">/* original data */</span><br>  filename = filename || <span class="hljs-string">&quot;excel-list&quot;</span>;<br>  data = [...data];<br>  data.unshift(header);<br><br>  <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> i = multiHeader.length - <span class="hljs-number">1</span>; i &gt; -<span class="hljs-number">1</span>; i--) &#123;<br>    data.unshift(multiHeader[i]);<br>  &#125;<br><br>  <span class="hljs-keyword">var</span> ws_name = <span class="hljs-string">&quot;SheetJS&quot;</span>;<br>  <span class="hljs-keyword">var</span> wb = <span class="hljs-keyword">new</span> Workbook(),<br>    ws = sheet_from_array_of_arrays(data);<br><br>  <span class="hljs-keyword">if</span> (merges.length &gt; <span class="hljs-number">0</span>) &#123;<br>    <span class="hljs-keyword">if</span> (!ws[<span class="hljs-string">&quot;!merges&quot;</span>]) ws[<span class="hljs-string">&quot;!merges&quot;</span>] = [];<br>    merges.forEach(<span class="hljs-function">(<span class="hljs-params">item</span>) =&gt;</span> &#123;<br>      ws[<span class="hljs-string">&quot;!merges&quot;</span>].push(XLSX.utils.decode_range(item));<br>    &#125;);<br>  &#125;<br><br>  <span class="hljs-keyword">if</span> (autoWidth) &#123;<br>    <span class="hljs-comment">/*设置worksheet每列的最大宽度*/</span><br>    <span class="hljs-keyword">const</span> colWidth = data.map(<span class="hljs-function">(<span class="hljs-params">row</span>) =&gt;</span><br>      row.map(<span class="hljs-function">(<span class="hljs-params">val</span>) =&gt;</span> &#123;<br>        <span class="hljs-comment">/*先判断是否为null/undefined*/</span><br>        <span class="hljs-keyword">if</span> (val == <span class="hljs-literal">null</span>) &#123;<br>          <span class="hljs-keyword">return</span> &#123;<br>            <span class="hljs-attr">wch</span>: <span class="hljs-number">10</span>,<br>          &#125;;<br>        &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (val.toString().charCodeAt(<span class="hljs-number">0</span>) &gt; <span class="hljs-number">255</span>) &#123;<br>          <span class="hljs-comment">/*再判断是否为中文*/</span><br>          <span class="hljs-keyword">return</span> &#123;<br>            <span class="hljs-attr">wch</span>: val.toString().length * <span class="hljs-number">2</span>,<br>          &#125;;<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>          <span class="hljs-keyword">return</span> &#123;<br>            <span class="hljs-attr">wch</span>: val.toString().length,<br>          &#125;;<br>        &#125;<br>      &#125;)<br>    );<br>    <span class="hljs-comment">/*以第一行为初始值*/</span><br>    <span class="hljs-keyword">let</span> result = colWidth[<span class="hljs-number">0</span>];<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> i = <span class="hljs-number">1</span>; i &lt; colWidth.length; i++) &#123;<br>      <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> j = <span class="hljs-number">0</span>; j &lt; colWidth[i].length; j++) &#123;<br>        <span class="hljs-keyword">if</span> (result[j][<span class="hljs-string">&quot;wch&quot;</span>] &lt; colWidth[i][j][<span class="hljs-string">&quot;wch&quot;</span>]) &#123;<br>          result[j][<span class="hljs-string">&quot;wch&quot;</span>] = colWidth[i][j][<span class="hljs-string">&quot;wch&quot;</span>];<br>        &#125;<br>      &#125;<br>    &#125;<br>    ws[<span class="hljs-string">&quot;!cols&quot;</span>] = result;<br>  &#125;<br><br>  <span class="hljs-comment">/* add worksheet to workbook */</span><br>  wb.SheetNames.push(ws_name);<br>  wb.Sheets[ws_name] = ws;<br><br>  <span class="hljs-keyword">var</span> wbout = XLSX.write(wb, &#123;<br>    <span class="hljs-attr">bookType</span>: bookType,<br>    <span class="hljs-attr">bookSST</span>: <span class="hljs-literal">false</span>,<br>    <span class="hljs-attr">type</span>: <span class="hljs-string">&quot;binary&quot;</span>,<br>  &#125;);<br>  saveAs(<br>    <span class="hljs-keyword">new</span> Blob([s2ab(wbout)], &#123;<br>      <span class="hljs-attr">type</span>: <span class="hljs-string">&quot;application/octet-stream&quot;</span>,<br>    &#125;),<br>    <span class="hljs-string">`<span class="hljs-subst">$&#123;filename&#125;</span>.<span class="hljs-subst">$&#123;bookType&#125;</span>`</span><br>  );<br>&#125;<br></code></pre></td></tr></table></figure></details><h3 id="3、导出函数"><a href="#3、导出函数" class="headerlink" title="3、导出函数"></a>3、导出函数</h3><p>a-button 为 ant-design-vue 的 button 组件</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">a-button</span></span><br><span class="hljs-tag">  <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;primary&quot;</span></span><br><span class="hljs-tag">  <span class="hljs-attr">icon</span>=<span class="hljs-string">&quot;export&quot;</span></span><br><span class="hljs-tag">  <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;select-bottom&quot;</span></span><br><span class="hljs-tag">  <span class="hljs-attr">:loading</span>=<span class="hljs-string">&quot;exportLoading&quot;</span></span><br><span class="hljs-tag">  @<span class="hljs-attr">click</span>=<span class="hljs-string">&quot;handleExport&quot;</span></span><br><span class="hljs-tag">  &gt;</span>导出<br><span class="hljs-tag">&lt;/<span class="hljs-name">a-button</span>&gt;</span><br></code></pre></td></tr></table></figure><p>handleExport 导出函数</p><blockquote><p>1、点击导出按钮，去加载在 vendor 文件夹中的 Export2Excel 模块<br>2、import 方法执行完毕返回一个 promise 对象，在 then 方法中我们可以拿到使用的模块对象（excel）<br>3、Excel 导出参数部分的 data，是一个严格的二维数组，header 为导出的数据表头，filename 为导出的文件名，bookType 为导出文件类型，autoWidth 为单元格是否要自适应宽度。</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-function"><span class="hljs-title">handleExport</span>(<span class="hljs-params"></span>)</span> &#123;<br>    <span class="hljs-comment">//由于是前端导出，所以只能导出当前页的数据</span><br>    <span class="hljs-built_in">this</span>.exportLoading = <span class="hljs-literal">true</span>;<br>      <span class="hljs-keyword">import</span>(<span class="hljs-string">&#x27;@/vendor/Export2Excel&#x27;</span>).then(<span class="hljs-function"><span class="hljs-params">excel</span> =&gt;</span> &#123;<br>        <span class="hljs-keyword">const</span> header = [],<br>          filterVal = [];<br>        <span class="hljs-built_in">this</span>.tableHead.forEach(<span class="hljs-function"><span class="hljs-params">item</span> =&gt;</span> &#123;<br>          <span class="hljs-keyword">if</span> (item.title != <span class="hljs-string">&#x27;操作&#x27;</span> &amp;&amp; item.title != <span class="hljs-string">&#x27;序号&#x27;</span>) &#123;<br>            header.push(item.title);<br>            filterVal.push(item.dataIndex);<br>          &#125;<br>        &#125;);<br>        <span class="hljs-keyword">const</span> data = formatJson(<span class="hljs-built_in">this</span>.tableData, filterVal);<br><br>        excel.export_json_to_excel(&#123;<br>          header,<br>          data,<br>          <span class="hljs-attr">filename</span>: <span class="hljs-string">&#x27;表单统计&#x27;</span><br>        &#125;);<br>        <span class="hljs-built_in">this</span>.exportLoading = <span class="hljs-literal">false</span>;<br>      &#125;);<br>    &#125;<br></code></pre></td></tr></table></figure><h2 id="二、前端导入-Excel-的实现"><a href="#二、前端导入-Excel-的实现" class="headerlink" title="二、前端导入 Excel 的实现"></a>二、前端导入 Excel 的实现</h2><h3 id="1、ant-design-vue-上传组件的使用"><a href="#1、ant-design-vue-上传组件的使用" class="headerlink" title="1、ant-design-vue 上传组件的使用"></a>1、ant-design-vue 上传组件的使用</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;file-wrapper relative&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">input</span></span><br><span class="hljs-tag">    <span class="hljs-attr">ref</span>=<span class="hljs-string">&quot;excel-upload&quot;</span></span><br><span class="hljs-tag">    <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;file&quot;</span></span><br><span class="hljs-tag">    <span class="hljs-attr">accept</span>=<span class="hljs-string">&quot;.xlsx, .xls&quot;</span></span><br><span class="hljs-tag">    @<span class="hljs-attr">change</span>=<span class="hljs-string">&quot;handleChange&quot;</span></span><br><span class="hljs-tag">    <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;display:none&quot;</span></span><br><span class="hljs-tag">  /&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">a-button</span></span><br><span class="hljs-tag">    <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;primary&quot;</span></span><br><span class="hljs-tag">    <span class="hljs-attr">icon</span>=<span class="hljs-string">&quot;file-excel&quot;</span></span><br><span class="hljs-tag">    <span class="hljs-attr">size</span>=<span class="hljs-string">&quot;large&quot;</span></span><br><span class="hljs-tag">    <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;z-index:99&quot;</span></span><br><span class="hljs-tag">    @<span class="hljs-attr">click</span>=<span class="hljs-string">&quot;handleUpload&quot;</span></span><br><span class="hljs-tag">    <span class="hljs-attr">:loading</span>=<span class="hljs-string">&quot;loading&quot;</span></span><br><span class="hljs-tag">  &gt;</span><br>    上传Excel<br>  <span class="hljs-tag">&lt;/<span class="hljs-name">a-button</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;text&quot;</span>&gt;</span>请选择Excel上传 支持(xlsx,xls)格式<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-comment">&lt;!-- table组件 tableData:[]  tableHead:[] --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">a-card</span></span><br><span class="hljs-tag">  <span class="hljs-attr">:hoverable</span>=<span class="hljs-string">&quot;true&quot;</span></span><br><span class="hljs-tag">  <span class="hljs-attr">:bordered</span>=<span class="hljs-string">&quot;false&quot;</span></span><br><span class="hljs-tag">  <span class="hljs-attr">v-if</span>=<span class="hljs-string">&quot;tableHead.length &gt; 0&quot;</span></span><br><span class="hljs-tag">  <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;margin-top:30px&quot;</span></span><br><span class="hljs-tag">&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">standard-table</span></span><br><span class="hljs-tag">    <span class="hljs-attr">:pagination</span>=<span class="hljs-string">&quot;false&quot;</span></span><br><span class="hljs-tag">    <span class="hljs-attr">:tableData</span>=<span class="hljs-string">&quot;tableData&quot;</span></span><br><span class="hljs-tag">    <span class="hljs-attr">:tableHead</span>=<span class="hljs-string">&quot;tableHead&quot;</span></span><br><span class="hljs-tag">  /&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">a-card</span>&gt;</span><br></code></pre></td></tr></table></figure><!-- 样式 --><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-class">.file-wrapper</span> &#123;<br>  <span class="hljs-attribute">width</span>: <span class="hljs-number">100%</span>;<br>  <span class="hljs-attribute">height</span>: <span class="hljs-number">350px</span>;<br>  <span class="hljs-attribute">line-height</span>: <span class="hljs-number">350px</span>;<br>  <span class="hljs-attribute">text-align</span>: center;<br>  <span class="hljs-attribute">background</span>: <span class="hljs-number">#e6ecf4</span>;<br>  <span class="hljs-selector-class">.text</span> &#123;<br>    <span class="hljs-attribute">position</span>: absolute;<br>    <span class="hljs-attribute">top</span>: <span class="hljs-number">50px</span>;<br>    <span class="hljs-attribute">left</span>: <span class="hljs-number">50%</span>;<br>    <span class="hljs-attribute">transform</span>: <span class="hljs-built_in">translateX</span>(-<span class="hljs-number">50%</span>);<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="2、导入函数"><a href="#2、导入函数" class="headerlink" title="2、导入函数"></a>2、导入函数</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 引入xlsx table组件</span><br><span class="hljs-keyword">import</span> XLSX <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;xlsx&quot;</span>;<br><span class="hljs-keyword">import</span> standardTable <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;@/components/standardTable/index&quot;</span>;<br></code></pre></td></tr></table></figure><details><summary>点我展示代码</summary><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-function"><span class="hljs-title">handleChange</span>(<span class="hljs-params">e</span>)</span> &#123;<br>  <span class="hljs-keyword">const</span> file = e.target.files[<span class="hljs-number">0</span>];<br>  <span class="hljs-keyword">if</span> (!file) <span class="hljs-keyword">return</span>;<br>  <span class="hljs-comment">//判断格式</span><br>  <span class="hljs-keyword">if</span> (!<span class="hljs-built_in">this</span>.isExcel(file)) &#123;<br>    <span class="hljs-built_in">this</span>.$message.warning(<span class="hljs-string">&#x27;只能选择xlxs,xls文件&#x27;</span>);<br>    <span class="hljs-keyword">return</span>;<br>  &#125;<br>  <span class="hljs-comment">//判断大小</span><br>  <span class="hljs-keyword">if</span> (file.size / <span class="hljs-number">1024</span> / <span class="hljs-number">1024</span> &gt; <span class="hljs-number">1</span>) &#123;<br>    <span class="hljs-built_in">this</span>.$message.warning(<span class="hljs-string">&#x27;上传文件大小不能超过1M&#x27;</span>);<br>    <span class="hljs-keyword">return</span>;<br>  &#125;<br>  <span class="hljs-built_in">this</span>.loading = <span class="hljs-literal">true</span>;<br><br>  <span class="hljs-keyword">const</span> reader = <span class="hljs-keyword">new</span> FileReader();<br>  reader.readAsArrayBuffer(file);<br>  reader.onload = <span class="hljs-function"><span class="hljs-params">e</span> =&gt;</span> &#123;<br>    <span class="hljs-keyword">const</span> data = e.target.result;<br>    <span class="hljs-keyword">const</span> workbook = XLSX.read(data, &#123; <span class="hljs-attr">type</span>: <span class="hljs-string">&#x27;array&#x27;</span> &#125;);<br>    <span class="hljs-keyword">const</span> firstSheetName = workbook.SheetNames[<span class="hljs-number">0</span>];<br>    <span class="hljs-keyword">const</span> worksheet = workbook.Sheets[firstSheetName];<br><br>    <span class="hljs-built_in">setTimeout</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>      <span class="hljs-built_in">this</span>.loading = <span class="hljs-literal">false</span>;<br>      <span class="hljs-keyword">const</span> head = <span class="hljs-built_in">this</span>.getHeaderRow(worksheet);<br>      <span class="hljs-built_in">this</span>.tableHead = head.map(<span class="hljs-function"><span class="hljs-params">item</span> =&gt;</span> &#123;<br>        <span class="hljs-keyword">return</span> &#123;<br>          <span class="hljs-attr">title</span>: item,<br>          <span class="hljs-attr">dataIndex</span>: item<br>        &#125;;<br>      &#125;);<br>      <span class="hljs-keyword">const</span> tableData = XLSX.utils.sheet_to_json(worksheet);<br>      tableData.forEach(<span class="hljs-function"><span class="hljs-params">item</span> =&gt;</span> &#123;<br>        item.id = <span class="hljs-built_in">parseInt</span>(<span class="hljs-built_in">Math</span>.random(<span class="hljs-number">0</span>, <span class="hljs-number">1</span>) * <span class="hljs-number">10000</span>);<br>      &#125;);<br>      <span class="hljs-built_in">this</span>.tableData = tableData;<br>    &#125;, <span class="hljs-number">500</span>);<br>  &#125;;<br>&#125;,<br><br><span class="hljs-function"><span class="hljs-title">generateData</span>(<span class="hljs-params">&#123; header, results &#125;</span>)</span> &#123;<br>  <span class="hljs-built_in">this</span>.excelData.header = header;<br>  <span class="hljs-built_in">this</span>.excelData.results = results;<br>  <span class="hljs-built_in">this</span>.onSuccess &amp;&amp; <span class="hljs-built_in">this</span>.onSuccess(<span class="hljs-built_in">this</span>.excelData);<br>&#125;,<br><br><span class="hljs-comment">//获取表头</span><br><span class="hljs-function"><span class="hljs-title">getHeaderRow</span>(<span class="hljs-params">sheet</span>)</span> &#123;<br>  <span class="hljs-keyword">const</span> headers = [];<br>  <span class="hljs-keyword">const</span> range = XLSX.utils.decode_range(sheet[<span class="hljs-string">&#x27;!ref&#x27;</span>]);<br>  <span class="hljs-keyword">let</span> C;<br>  <span class="hljs-keyword">const</span> R = range.s.r;<br><br>  <span class="hljs-keyword">for</span> (C = range.s.c; C &lt;= range.e.c; ++C) &#123;<br>    <span class="hljs-keyword">const</span> cell = sheet[XLSX.utils.encode_cell(&#123; <span class="hljs-attr">c</span>: C, <span class="hljs-attr">r</span>: R &#125;)];<br>    <span class="hljs-keyword">let</span> hdr = <span class="hljs-string">&#x27;UNKNOWN &#x27;</span> + C;<br>    <span class="hljs-keyword">if</span> (cell &amp;&amp; cell.t) hdr = XLSX.utils.format_cell(cell);<br>    headers.push(hdr);<br>  &#125;<br>  <span class="hljs-keyword">return</span> headers;<br>&#125;,<br><br><span class="hljs-function"><span class="hljs-title">handleUpload</span>(<span class="hljs-params"></span>)</span> &#123;<br>  <span class="hljs-built_in">this</span>.$refs[<span class="hljs-string">&#x27;excel-upload&#x27;</span>].click();<br>&#125;,<br><span class="hljs-comment">// 文件类型</span><br><span class="hljs-function"><span class="hljs-title">isExcel</span>(<span class="hljs-params">file</span>)</span> &#123;<br>  <span class="hljs-keyword">return</span> <span class="hljs-regexp">/\.(xlsx|xls|csv)$/</span>.test(file.name);<br>&#125;<br><br></code></pre></td></tr></table></figure></details><h2 id="三、table-子组件"><a href="#三、table-子组件" class="headerlink" title="三、table 子组件"></a>三、table 子组件</h2><details><summary>点我展示代码</summary><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;tableCommon-wrapper&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">a-table</span></span><br><span class="hljs-tag">    <span class="hljs-attr">:columns</span>=<span class="hljs-string">&quot;tableHead&quot;</span></span><br><span class="hljs-tag">    <span class="hljs-attr">:dataSource</span>=<span class="hljs-string">&quot;tableData&quot;</span></span><br><span class="hljs-tag">    <span class="hljs-attr">:loading</span>=<span class="hljs-string">&quot;loading&quot;</span></span><br><span class="hljs-tag">    <span class="hljs-attr">:pagination</span>=<span class="hljs-string">&quot;pagination&quot;</span></span><br><span class="hljs-tag">    <span class="hljs-attr">:row-selection</span>=<span class="hljs-string">&quot;rowSelection&quot;</span></span><br><span class="hljs-tag">    @<span class="hljs-attr">change</span>=<span class="hljs-string">&quot;handleTableChange&quot;</span></span><br><span class="hljs-tag">    <span class="hljs-attr">rowKey</span>=<span class="hljs-string">&quot;id&quot;</span></span><br><span class="hljs-tag">    <span class="hljs-attr">:scroll</span>=<span class="hljs-string">&quot;scroll&quot;</span></span><br><span class="hljs-tag">  &gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">template</span></span><br><span class="hljs-tag">      <span class="hljs-attr">slot-scope</span>=<span class="hljs-string">&quot;text, record, index&quot;</span></span><br><span class="hljs-tag">      <span class="hljs-attr">:slot</span>=<span class="hljs-string">&quot;slot&quot;</span></span><br><span class="hljs-tag">      <span class="hljs-attr">v-for</span>=<span class="hljs-string">&quot;slot in Object.keys($scopedSlots).filter(key =&gt; key !== &#x27;expandedRowRender&#x27;)&quot;</span></span><br><span class="hljs-tag">    &gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">slot</span> <span class="hljs-attr">:name</span>=<span class="hljs-string">&quot;slot&quot;</span> <span class="hljs-attr">v-bind</span>=<span class="hljs-string">&quot;&#123; text, record, index &#125;&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">slot</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">a-table</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> &#123;<br>  <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;standardTable&quot;</span>,<br>  <span class="hljs-attr">props</span>: &#123;<br>    <span class="hljs-attr">tableHead</span>: &#123;<br>      <span class="hljs-attr">type</span>: <span class="hljs-built_in">Array</span>,<br>      <span class="hljs-attr">required</span>: <span class="hljs-literal">true</span>,<br>    &#125;,<br>    <span class="hljs-attr">tableData</span>: &#123;<br>      <span class="hljs-attr">type</span>: <span class="hljs-built_in">Array</span>,<br>      <span class="hljs-attr">required</span>: <span class="hljs-literal">true</span>,<br>    &#125;,<br>    <span class="hljs-attr">loading</span>: &#123;<br>      <span class="hljs-attr">type</span>: <span class="hljs-built_in">Boolean</span>,<br>      <span class="hljs-attr">default</span>: <span class="hljs-literal">false</span>,<br>    &#125;,<br>    <span class="hljs-attr">pagination</span>: &#123;<br>      <span class="hljs-attr">type</span>: <span class="hljs-built_in">Boolean</span> | <span class="hljs-built_in">Object</span>,<br>    &#125;,<br>    <span class="hljs-attr">rowSelection</span>: &#123;<br>      <span class="hljs-attr">type</span>: <span class="hljs-built_in">Object</span>,<br>    &#125;,<br>    <span class="hljs-attr">scroll</span>: &#123;<br>      <span class="hljs-attr">type</span>: <span class="hljs-built_in">Object</span>,<br>    &#125;,<br>  &#125;,<br>  <span class="hljs-attr">methods</span>: &#123;<br>    <span class="hljs-function"><span class="hljs-title">handleTableChange</span>(<span class="hljs-params">val</span>)</span> &#123;<br>      <span class="hljs-built_in">this</span>.$emit(<span class="hljs-string">&quot;changeCurrent&quot;</span>, val.current);<br>    &#125;,<br>  &#125;,<br>&#125;;<br></code></pre></td></tr></table></figure></details>]]></content>
      
      
      
        <tags>
            
            <tag> vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>50、CountTo:数字动态滚动</title>
      <link href="/2022/01/13/50-count-to/"/>
      <url>/2022/01/13/50-count-to/</url>
      
        <content type="html"><![CDATA[<p>vue使用vue-count-to实现数字的动态滚动功能，适用于数据可视化大屏项目中使用数字滚动。</p><span id="more"></span><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 1、安装vue-count-to</span><br>npm isntall vue-count-to<br><span class="hljs-comment">// 2、组件内引入、注册 startVal endVal 类型为Number</span><br><br></code></pre></td></tr></table></figure><p>代码如下：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">template</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">countTo</span> <span class="hljs-attr">:startVal</span>=<span class="hljs-string">&#x27;startVal&#x27;</span> <span class="hljs-attr">:endVal</span>=<span class="hljs-string">&#x27;number&#x27;</span> <span class="hljs-attr">:duration</span>=<span class="hljs-string">&#x27;3000&#x27;</span> <span class="hljs-attr">:decimals</span>=<span class="hljs-string">&#x27;0&#x27;</span>  <span class="hljs-attr">:autoplay</span>=<span class="hljs-string">true</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">countTo</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript"></span><br><span class="javascript"><span class="hljs-keyword">import</span> countTo <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;vue-count-to&#x27;</span>;</span><br><span class="javascript">  <span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span>&#123;</span><br><span class="javascript">    <span class="hljs-attr">components</span>:&#123;countTo&#125;,</span><br><span class="javascript">    <span class="hljs-attr">props</span>:&#123;</span><br><span class="javascript">      <span class="hljs-attr">number</span>: [<span class="hljs-built_in">Number</span>, <span class="hljs-built_in">String</span>],</span><br><span class="javascript">      <span class="hljs-attr">startVal</span>:&#123;</span><br><span class="javascript">        <span class="hljs-attr">type</span>:<span class="hljs-built_in">Number</span>,</span><br><span class="javascript">        <span class="hljs-attr">default</span>:<span class="hljs-number">0</span></span><br><span class="javascript">      &#125;</span><br><span class="javascript">    &#125;</span><br><span class="javascript">  &#125;</span><br><span class="javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> dev </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>49、websocket实现客户端和服务端的通信</title>
      <link href="/2022/01/03/49-websocket/"/>
      <url>/2022/01/03/49-websocket/</url>
      
        <content type="html"><![CDATA[<p>WebSocket 是 HTML5 开始提供的一种在单个 TCP 连接上进行全双工通讯的协议。传统的http协议，通信只能由客户端发起。websocket实现了客户端和服务端的双向平等对话，websocket最大的特点：服务器可以主动向用户推送信息，客户端也可以主动向服务端发送信息。</p><span id="more"></span><h2 id="一、websocket特点："><a href="#一、websocket特点：" class="headerlink" title="一、websocket特点："></a>一、websocket特点：</h2><blockquote><p>1、建立在 TCP 协议之上，服务器端的实现比较容易。<br>2、与 HTTP 协议有着良好的兼容性，默认端口也是80和443。并且握手阶段采用 HTTP 协议，因此握手时不容易屏蔽，能通过各种 HTTP 代理服务器。<br>3、数据格式比较轻量，性能开销小，通信高效。<br>4、可以发送文本，也可以发送二进制数据。<br>5、没有同源限制，客户端可以与任意服务器通信。<br>6、全双工(通信允许数据在两个方向上同时传输，它在能力上相当于两个单工通信方式的结合,例如指 A→B 的同时 B→A ，是瞬时同步的)<br>7、协议标识符是ws（如果加密，则为wss），服务器网址就是 URL。</p></blockquote><p>初始化websocket<br>1、创建websocket实例，参数为url<br>2、连接 websocket.onopen<br>3、server响应数据触发 websocket.onmessage<br>4、关闭websocket，websocket.onclose</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 构造函数 参数为url</span><br><span class="hljs-keyword">const</span> wsurl = <span class="hljs-string">&quot;ws://localhost:8080&quot;</span>;<br><span class="hljs-keyword">var</span> ws = <span class="hljs-keyword">new</span> Websocket(wsurl);<br><br><span class="hljs-comment">// 连接状态readState 1  准备好发送和接受数据了</span><br>ws.onopen = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;<br>  ws.send(<span class="hljs-string">&#x27;hello server! websocket is open now!&#x27;</span>)<br>&#125;<br><br><span class="hljs-comment">// 通过客户端的事件   发送信息给服务端</span><br>ws.send(<span class="hljs-string">&#x27;hello websocket&#x27;</span>);<br><br><span class="hljs-comment">// 发生错误</span><br>ws.onerror = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">event</span>)</span>&#123;<br>  <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;websocket error observed&quot;</span>,event)<br>&#125;<br><br><span class="hljs-comment">// readState CLOSED  关闭websocket</span><br>ws.onclose = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">event</span>)</span>&#123;<br>  <span class="hljs-keyword">let</span> status_code = event.status;<br>  <span class="hljs-keyword">let</span> msg = event.msg;<br>  <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;websocket is closed now&quot;</span>)<br>&#125;<br><br><span class="hljs-comment">// 响应数据的接收</span><br>ws.onmessage = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">event</span>)</span>&#123;<br>  <span class="hljs-keyword">let</span> data = event.data;<br>&#125;<br><br></code></pre></td></tr></table></figure><ul><li>路由改变，需要断开websocket连接，节省服务器开支。</li></ul><h2 id="二、心跳机制"><a href="#二、心跳机制" class="headerlink" title="二、心跳机制"></a>二、心跳机制</h2><blockquote><p>websocket在连接关闭的情况下触发onclose事件，连接异常触发onerror事件。网络状态不好的情况，onclose事件的触发灵敏度不高，可能会造成断网很久触发onclose事件，客户端又出现重新连接，客户端实时界面不友好。</p></blockquote><p>为了解决上面的情况，使用心跳重连机制，客户端在websocket连接成功后，执行心跳函数，首先向服务器发送’ping‘信息，服务器收到信息会返回’pong’信息。一定时间内，客户端收到服务器返回的信息，则表示连接正常，重置心跳函数；客户端在一定时间内没有收到心跳函数，表明没有连接成功，客户端关闭websocket,再执行重连操作。</p><p>解决方式：</p><details><summary>点我展示代码</summary><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">import</span> &#123; mapActions, mapState &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;vuex&#x27;</span>;<br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> &#123;<br>    <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;Websocket&#x27;</span>,<br>    <span class="hljs-function"><span class="hljs-title">data</span>(<span class="hljs-params"></span>)</span> &#123;<br>        <span class="hljs-keyword">return</span> &#123;<br>            <span class="hljs-comment">// 是否正在重连</span><br>            <span class="hljs-attr">lockReconnect</span>: <span class="hljs-literal">false</span>,<br>            <span class="hljs-attr">socket</span>: <span class="hljs-literal">null</span>,<br>            <span class="hljs-attr">reconnectTimeout</span>: <span class="hljs-literal">null</span>,<br>            <span class="hljs-attr">timeout</span>: <span class="hljs-number">10</span> * <span class="hljs-number">1000</span>,<br>            <span class="hljs-attr">timer</span>: <span class="hljs-literal">null</span>,<br>            <span class="hljs-attr">serverTimer</span>: <span class="hljs-literal">null</span><br>        &#125;;<br>    &#125;,<br>    <span class="hljs-attr">computed</span>: &#123;<br>        ...mapState([<span class="hljs-string">&#x27;userInfo&#x27;</span>]),<br>        <span class="hljs-function"><span class="hljs-title">wsuri</span>(<span class="hljs-params"></span>)</span> &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-string">`<span class="hljs-subst">$&#123;process.env.VUE_APP_WEBSOCKET_URI&#125;</span><span class="hljs-subst">$&#123;<span class="hljs-built_in">this</span>.userInfo.tenantId&#125;</span>;<span class="hljs-subst">$&#123;<span class="hljs-built_in">this</span>.userInfo.userId&#125;</span>`</span>;<br>        &#125;<br>    &#125;,<br>    <span class="hljs-keyword">async</span> <span class="hljs-function"><span class="hljs-title">mounted</span>(<span class="hljs-params"></span>)</span> &#123;<br>        <span class="hljs-keyword">await</span> <span class="hljs-built_in">this</span>.getUserInfo();<br>        <span class="hljs-built_in">this</span>.initWebSocket();<br>    &#125;,<br>    <span class="hljs-function"><span class="hljs-title">destroyed</span>(<span class="hljs-params"></span>)</span> &#123;<br>        <span class="hljs-built_in">this</span>.socket.close();<br>    &#125;,<br>    <span class="hljs-attr">methods</span>: &#123;<br>        ...mapActions([<span class="hljs-string">&#x27;getUserInfo&#x27;</span>]),<br>        <span class="hljs-function"><span class="hljs-title">start</span>(<span class="hljs-params">ws</span>)</span> &#123;<br>            <span class="hljs-built_in">this</span>.reset();<br>            <span class="hljs-built_in">this</span>.timer = <span class="hljs-built_in">setTimeout</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>                <span class="hljs-comment">// console.log(&#x27;发送心跳,后端收到后，返回一个心跳消息&#x27;)</span><br>                <span class="hljs-comment">// onmessage拿到返回的心跳就说明连接正常</span><br>                ws.send(<span class="hljs-string">&#x27;ping&#x27;</span>);<br>                <span class="hljs-built_in">this</span>.serverTimer = <span class="hljs-built_in">setTimeout</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>                    <span class="hljs-comment">// 如果超过一定时间还没响应(响应后触发重置)，说明后端断开了</span><br>                    ws.close();<br>                &#125;, <span class="hljs-built_in">this</span>.timeout);<br>            &#125;, <span class="hljs-built_in">this</span>.timeout);<br>        &#125;,<br>        <span class="hljs-function"><span class="hljs-title">reset</span>(<span class="hljs-params"></span>)</span> &#123;<br>            <span class="hljs-built_in">this</span>.serverTimer &amp;&amp; <span class="hljs-built_in">clearTimeout</span>(<span class="hljs-built_in">this</span>.serverTimer);<br>            <span class="hljs-built_in">this</span>.timer &amp;&amp; <span class="hljs-built_in">clearTimeout</span>(<span class="hljs-built_in">this</span>.timer);<br>        &#125;,<br>        <span class="hljs-function"><span class="hljs-title">reconnect</span>(<span class="hljs-params"></span>)</span> &#123;<br>            <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;尝试重连&#x27;</span>);<br>            <span class="hljs-keyword">if</span> (<span class="hljs-built_in">this</span>.lockReconnect) &#123;<br>                <span class="hljs-keyword">return</span>;<br>            &#125;<br>            <span class="hljs-built_in">this</span>.lockReconnect = <span class="hljs-literal">true</span>;<br>            <span class="hljs-built_in">this</span>.reconnectTimeout &amp;&amp; <span class="hljs-built_in">clearTimeout</span>(<span class="hljs-built_in">this</span>.reconnectTimeout);<br>            <span class="hljs-built_in">this</span>.reconnectTimeout = <span class="hljs-built_in">setTimeout</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>                <span class="hljs-built_in">this</span>.initWebSocket();<br>                <span class="hljs-built_in">this</span>.lockReconnect = <span class="hljs-literal">false</span>;<br>            &#125;, <span class="hljs-number">4</span> * <span class="hljs-number">1000</span>);<br>        &#125;,<br>        <span class="hljs-comment">// 初始化websocket</span><br>        <span class="hljs-function"><span class="hljs-title">initWebSocket</span>(<span class="hljs-params"></span>)</span> &#123;<br>            <span class="hljs-keyword">try</span> &#123;<br>                <span class="hljs-keyword">if</span> (<span class="hljs-string">&#x27;WebSocket&#x27;</span> <span class="hljs-keyword">in</span> <span class="hljs-built_in">window</span>) &#123;<br>                    <span class="hljs-built_in">this</span>.socket = <span class="hljs-keyword">new</span> WebSocket(<span class="hljs-built_in">this</span>.wsuri);<br>                &#125; <span class="hljs-keyword">else</span> &#123;<br>                    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;您的浏览器不支持websocket&#x27;</span>);<br>                &#125;<br>                <span class="hljs-built_in">this</span>.socket.onopen = <span class="hljs-built_in">this</span>.websocketOnOpen;<br>                <span class="hljs-built_in">this</span>.socket.onerror = <span class="hljs-built_in">this</span>.websocketOnError;<br>                <span class="hljs-built_in">this</span>.socket.onmessage = <span class="hljs-built_in">this</span>.websocketOnMessage;<br>                <span class="hljs-built_in">this</span>.socket.onclose = <span class="hljs-built_in">this</span>.websocketClose;<br>            &#125; <span class="hljs-keyword">catch</span> (e) &#123;<br>                <span class="hljs-built_in">this</span>.reconnect();<br>            &#125;<br>        &#125;,<br>        <span class="hljs-function"><span class="hljs-title">websocketOnOpen</span>(<span class="hljs-params"></span>)</span> &#123;<br>            <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;WebSocket连接成功&#x27;</span>, <span class="hljs-built_in">this</span>.socket.readyState);<br>            <span class="hljs-built_in">this</span>.start(<span class="hljs-built_in">this</span>.socket);<br>            <span class="hljs-built_in">this</span>.websocketSend();<br>        &#125;,<br>        <span class="hljs-function"><span class="hljs-title">websocketOnError</span>(<span class="hljs-params">e</span>)</span> &#123;<br>            <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;WebSocket连接发生错误&#x27;</span>, e);<br>            <span class="hljs-built_in">this</span>.reconnect();<br>        &#125;,<br>        <span class="hljs-function"><span class="hljs-title">websocketOnMessage</span>(<span class="hljs-params">e</span>)</span> &#123;<br>            <span class="hljs-keyword">if</span> (e.data === <span class="hljs-string">&#x27;pong&#x27;</span>) &#123;<br>                <span class="hljs-comment">// 消息获取成功，重置心跳</span><br>                <span class="hljs-built_in">this</span>.start(<span class="hljs-built_in">this</span>.socket);<br>            &#125;<br>        &#125;,<br>        <span class="hljs-function"><span class="hljs-title">websocketClose</span>(<span class="hljs-params">e</span>)</span> &#123;<br>            <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;connection closed (&#x27;</span> + e.code + <span class="hljs-string">&#x27;)&#x27;</span>);<br>            <span class="hljs-built_in">this</span>.reconnect();<br>        &#125;,<br>        <span class="hljs-function"><span class="hljs-title">websocketSend</span>(<span class="hljs-params"></span>)</span> &#123;<br>            <span class="hljs-built_in">this</span>.socket.send(<span class="hljs-string">&#x27;ping&#x27;</span>);<br>        &#125;<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure></details>]]></content>
      
      
      
        <tags>
            
            <tag> websocket </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>48、用hook处理组件内定时器</title>
      <link href="/2022/01/01/48-hook/"/>
      <url>/2022/01/01/48-hook/</url>
      
        <content type="html"><![CDATA[<p>vue 项目使用 hook 处理组件内定时器的方式。一般是使用生命周期钩子函数beforeDestory来销毁定时器。从Vue源码的lifecycle.js中发现了一种拓展方法，可以提升代码的简洁性，而且还可以减少data里无用变量的定义。</p><span id="more"></span><h2 id="一、使用生命周期函数处理定时器"><a href="#一、使用生命周期函数处理定时器" class="headerlink" title="一、使用生命周期函数处理定时器"></a>一、使用生命周期函数处理定时器</h2><p>通常处理组件内定时器的步骤是下面这样的</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span>&#123;<br>    <span class="hljs-function"><span class="hljs-title">mounted</span>(<span class="hljs-params"></span>)</span>&#123;<br>        <span class="hljs-built_in">this</span>.timer = <span class="hljs-built_in">setInterval</span>（() =&gt;&#123;<br>            <span class="hljs-comment">// do something</span><br>        &#125;,<span class="hljs-number">1000</span>）<br>    &#125;,<br>    <span class="hljs-function"><span class="hljs-title">beforeDestory</span>(<span class="hljs-params"></span>)</span>&#123;<br>        <span class="hljs-built_in">clearInterval</span>(<span class="hljs-built_in">this</span>.timer);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="二、使用-hook-处理定时器"><a href="#二、使用-hook-处理定时器" class="headerlink" title="二、使用 hook 处理定时器"></a>二、使用 hook 处理定时器</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span>&#123;<br>    <span class="hljs-function"><span class="hljs-title">mounted</span>(<span class="hljs-params"></span>)</span>&#123;<br>        <span class="hljs-keyword">const</span> timer = <span class="hljs-built_in">setInterval</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>            <span class="hljs-comment">// do something</span><br>        &#125;,<span class="hljs-number">1000</span>);<br>        <span class="hljs-built_in">this</span>.$once(<span class="hljs-string">&#x27;hook:beforeDestory&#x27;</span>,<span class="hljs-function">()=&gt;</span> <span class="hljs-built_in">clearInterval</span>(timer);)<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="三、适用场景"><a href="#三、适用场景" class="headerlink" title="三、适用场景:"></a>三、适用场景:</h2><p>处理可视化图表的时候，我们需要在数据渲染到页面之前让页面有 loading 动画，mounted 挂载之后停止 loading，beforeUpdate 时开始 loading，updated 之后停止 loading。</p><p>使用 hook 处理:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs tempalte">&lt;v-chart&gt;<br>  @hook:mounted=&quot;loading = false&quot; @hook:beforeUpdated=&quot;loading = true&quot;<br>  @hook:updated=&quot;loading = false&quot; :data=&quot;data&quot;<br>&lt;/v-chart&gt;<br></code></pre></td></tr></table></figure><h2 id="四、补充说明：如何实现父组件监听子组件生命周期？"><a href="#四、补充说明：如何实现父组件监听子组件生命周期？" class="headerlink" title="四、补充说明：如何实现父组件监听子组件生命周期？"></a>四、补充说明：如何实现父组件监听子组件生命周期？</h2><h3 id="1、方法一：-emit"><a href="#1、方法一：-emit" class="headerlink" title="1、方法一：$emit"></a>1、方法一：$emit</h3><p>父组件给子组件传递多个回调函数，依赖子组件在自身的生命周期李通过vm.$emit的方式，调用父组件生命的回调函数。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-comment">&lt;!-- 父组件 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">template</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">Child</span> @<span class="hljs-attr">mounted</span>=<span class="hljs-string">&quot;onMounted&quot;</span></span><br><span class="hljs-tag">            @<span class="hljs-attr">updated</span>=<span class="hljs-string">&quot;onUpdated&quot;</span></span><br><span class="hljs-tag">            @<span class="hljs-attr">beforeDestory</span>=<span class="hljs-string">&quot;beforeDestory&quot;</span></span><br><span class="hljs-tag">        &gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">Child</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span><br></code></pre></td></tr></table></figure><p>子组件：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-function"><span class="hljs-title">mounted</span>(<span class="hljs-params"></span>)</span>&#123;<br>    <span class="hljs-built_in">this</span>.$emit(<span class="hljs-string">&#x27;mounted&#x27;</span>)<br>&#125;,<br><span class="hljs-function"><span class="hljs-title">updated</span>(<span class="hljs-params"></span>)</span>&#123;<br>    <span class="hljs-built_in">this</span>.$emit(<span class="hljs-string">&#x27;updated&#x27;</span>)<br>&#125;,<br><span class="hljs-function"><span class="hljs-title">beforeDestory</span>(<span class="hljs-params"></span>)</span>&#123;<br>    <span class="hljs-built_in">this</span>.$emit(<span class="hljs-string">&#x27;beforeDestory&#x27;</span>)<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="2、方法二：-hook"><a href="#2、方法二：-hook" class="headerlink" title="2、方法二：@hook"></a>2、方法二：@hook</h3><p>父组件模板</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">template</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">Child</span> @<span class="hljs-attr">hook:mounted</span>=<span class="hljs-string">&quot;onMounted&quot;</span></span><br><span class="hljs-tag">            @<span class="hljs-attr">hook:updated</span>=<span class="hljs-string">&quot;onUpdated&quot;</span></span><br><span class="hljs-tag">            @<span class="hljs-attr">hook:beforeDestory</span>=<span class="hljs-string">&quot;beforeDestory&quot;</span></span><br><span class="hljs-tag">        &gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">Child</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span><br></code></pre></td></tr></table></figure><p>vue源码的lifecycle.js中，Vue的生命周期各个阶段都会去调用一个callHook函数，这个函数支持2个参数：实例vm和生命周期钩子名称,callHook里面执行了vm.$emit(‘hook:’+hook)。</p><p>lifecycle.js源码片段（这个文件在Vue源码的src/core/instance/lifecycle.js）</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// callHook函数</span><br><span class="hljs-keyword">export</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">callHook</span> (<span class="hljs-params">vm: Component, hook: string</span>) </span>&#123;<br>  <span class="hljs-comment">// #7573 disable dep collection when invoking lifecycle hooks</span><br>  pushTarget()<br>  <span class="hljs-keyword">const</span> handlers = vm.$options[hook]<br>  <span class="hljs-keyword">const</span> info = <span class="hljs-string">`<span class="hljs-subst">$&#123;hook&#125;</span> hook`</span><br>  <span class="hljs-keyword">if</span> (handlers) &#123;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> i = <span class="hljs-number">0</span>, j = handlers.length; i &lt; j; i++) &#123;<br>      invokeWithErrorHandling(handlers[i], vm, <span class="hljs-literal">null</span>, vm, info)<br>    &#125;<br>  &#125;<br>  <span class="hljs-keyword">if</span> (vm._hasHookEvent) &#123;<br>    vm.$emit(<span class="hljs-string">&#x27;hook:&#x27;</span> + hook)<br>  &#125;<br>  popTarget()<br>&#125;<br><br></code></pre></td></tr></table></figure><p>@hook原理：</p><blockquote><p>当我们在子组件上传了对应的@hook:mounted钩子，也就执行了vm.$on(‘hook:mounted’),vue实例在生命周期里本身就会执行vm.$emit(‘hook:mounted’),也触发了我们绑定给子组件的回调函数。</p></blockquote>]]></content>
      
      
      
        <tags>
            
            <tag> vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>47、git提交规范</title>
      <link href="/2021/12/22/47-git/"/>
      <url>/2021/12/22/47-git/</url>
      
        <content type="html"><![CDATA[<p>使用commitizen和cz-customizable规范代码提交</p><span id="more"></span><h3 id="1-安装commitizen和cz-customizable"><a href="#1-安装commitizen和cz-customizable" class="headerlink" title="1.安装commitizen和cz-customizable"></a>1.安装commitizen和cz-customizable</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs js">npm install -g commitizen@<span class="hljs-number">4.2</span><span class="hljs-number">.4</span><br>npm i cz-customizable@<span class="hljs-number">6.3</span><span class="hljs-number">.0</span> --save-dev<br><br></code></pre></td></tr></table></figure><h3 id="2-在package-json中进行新增"><a href="#2-在package-json中进行新增" class="headerlink" title="2.在package.json中进行新增"></a>2.在package.json中进行新增</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-string">&quot;config&quot;</span>: &#123;<br>  <span class="hljs-string">&quot;commitizen&quot;</span>: &#123;<br>    <span class="hljs-string">&quot;path&quot;</span>: <span class="hljs-string">&quot;node_modules/cz-customizable&quot;</span><br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="3-在根目录下新建-cz-config-js文件并写入配置-之后就可以用-git-cz-来代替-git-commit"><a href="#3-在根目录下新建-cz-config-js文件并写入配置-之后就可以用-git-cz-来代替-git-commit" class="headerlink" title="3.在根目录下新建.cz-config.js文件并写入配置 之后就可以用 git cz 来代替 git commit"></a>3.在根目录下新建.cz-config.js文件并写入配置 之后就可以用 git cz 来代替 git commit</h3><h3 id="4-使用husky进行强制git代码提交规范"><a href="#4-使用husky进行强制git代码提交规范" class="headerlink" title="4.使用husky进行强制git代码提交规范"></a>4.使用husky进行强制git代码提交规范</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs js">npm install --save-dev @commitlint/config-conventional@<span class="hljs-number">12.1</span><span class="hljs-number">.4</span> @commitlint/cli@<span class="hljs-number">12.1</span><span class="hljs-number">.4</span><br>npm install husky@<span class="hljs-number">7.0</span><span class="hljs-number">.1</span> --save-dev<br>npx husky install<br></code></pre></td></tr></table></figure><h3 id="5-在package-json中新增指令"><a href="#5-在package-json中新增指令" class="headerlink" title="5.在package.json中新增指令"></a>5.在package.json中新增指令</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-string">&quot;prepare&quot;</span>: <span class="hljs-string">&quot;husky install&quot;</span><br></code></pre></td></tr></table></figure><h3 id="6-并执行"><a href="#6-并执行" class="headerlink" title="6.并执行"></a>6.并执行</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js">npm run prepare<br></code></pre></td></tr></table></figure><h3 id="7-新增husky配置文件-并往里面写入"><a href="#7-新增husky配置文件-并往里面写入" class="headerlink" title="7.新增husky配置文件 并往里面写入"></a>7.新增husky配置文件 并往里面写入</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs js">npx husky add .husky/commit-msg<br>npx --no-install commitlint --edit<br></code></pre></td></tr></table></figure><h3 id="8、husky规范"><a href="#8、husky规范" class="headerlink" title="8、husky规范"></a>8、husky规范</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// commitlint.config.js</span><br><span class="hljs-built_in">module</span>.exports = &#123;<br>  <span class="hljs-comment">// 继承的规则</span><br>  <span class="hljs-attr">extends</span>: [<span class="hljs-string">&#x27;@commitlint/config-conventional&#x27;</span>],<br>  <span class="hljs-comment">// 定义规则类型</span><br>  <span class="hljs-attr">rules</span>: &#123;<br>    <span class="hljs-comment">// type 类型定义，表示 git 提交的 type 必须在以下类型范围内</span><br>    <span class="hljs-string">&#x27;type-enum&#x27;</span>: [<br>      <span class="hljs-number">2</span>,<br>      <span class="hljs-string">&#x27;always&#x27;</span>,<br>      [<br>        <span class="hljs-string">&#x27;feat&#x27;</span>, <span class="hljs-comment">// 新功能 feature</span><br>        <span class="hljs-string">&#x27;fix&#x27;</span>, <span class="hljs-comment">// 修复 bug</span><br>        <span class="hljs-string">&#x27;docs&#x27;</span>, <span class="hljs-comment">// 文档注释</span><br>        <span class="hljs-string">&#x27;style&#x27;</span>, <span class="hljs-comment">// 代码格式(不影响代码运行的变动)</span><br>        <span class="hljs-string">&#x27;refactor&#x27;</span>, <span class="hljs-comment">// 重构(既不增加新功能，也不是修复bug)</span><br>        <span class="hljs-string">&#x27;perf&#x27;</span>, <span class="hljs-comment">// 性能优化</span><br>        <span class="hljs-string">&#x27;test&#x27;</span>, <span class="hljs-comment">// 增加测试</span><br>        <span class="hljs-string">&#x27;chore&#x27;</span>, <span class="hljs-comment">// 构建过程或辅助工具的变动</span><br>        <span class="hljs-string">&#x27;revert&#x27;</span>, <span class="hljs-comment">// 回退</span><br>        <span class="hljs-string">&#x27;build&#x27;</span> <span class="hljs-comment">// 打包</span><br>      ]<br>    ],<br>    <span class="hljs-comment">// subject 大小写不做校验</span><br>    <span class="hljs-string">&#x27;subject-case&#x27;</span>: [<span class="hljs-number">0</span>]<br>  &#125;<br>&#125;<br><br><br></code></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>46、解决GitHub Pages绑定阿里域名CNAME消失</title>
      <link href="/2021/10/28/46-url/"/>
      <url>/2021/10/28/46-url/</url>
      
        <content type="html"><![CDATA[<p>hexo主题使用的是Claudia,部署到GitHub Pages时，CNAME会消失。</p><span id="more"></span><p>解决方式：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">// 1 cd source<br>touch CNAME<br><br>// 2 输入阿里域名<br>issummer.cn<br><br>// 3 部署<br>hexo g &amp;&amp; hexo d<br></code></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>45、自定义input唤起键盘</title>
      <link href="/2021/10/20/45-input/"/>
      <url>/2021/10/20/45-input/</url>
      
        <content type="html"><![CDATA[<p>自定义 input 唤起键盘。移动端页面自定义 input 唤起键盘 return，有时需要将换行键改为搜索，为了达到更好的用户体验。<br>在 html5 中，我们可以将 input 的 type 修改为 search，这样修改之后，我们的安卓手机会变成搜索或者搜索符号、IOS 则会变成换行。</p><span id="more"></span><p>1、安卓手机</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;search&quot;</span> <span class="hljs-attr">placeholder</span>=<span class="hljs-string">&quot;请输入你要搜索的内容&quot;</span> <span class="hljs-attr">v-model</span>=<span class="hljs-string">&quot;value&quot;</span> /&gt;</span><br></code></pre></td></tr></table></figure><p>2、苹果 IOS 手机</p><p>与安卓手机不同的是，我们需要在外层包裹一个 form</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">from</span> <span class="hljs-attr">action</span>=<span class="hljs-string">&quot;javascript:return true&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;search&quot;</span> <span class="hljs-attr">placeholder</span>=<span class="hljs-string">&quot;请输入你要搜索的内容&quot;</span> <span class="hljs-attr">v-model</span>=<span class="hljs-string">&quot;value&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">form</span>&gt;</span><br></code></pre></td></tr></table></figure><p>3、修改 search 的默认样式</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-tag">input</span><span class="hljs-selector-attr">[type=<span class="hljs-string">&quot;search&quot;</span>]</span> &#123;<br>  -webkit-appearance: none;<br>&#125;<br><span class="hljs-selector-tag">input</span>::-webkit-search-cancel-button &#123;<br>  display: none; // 关闭按钮<br>&#125;<br></code></pre></td></tr></table></figure><p>4、禁止输入法弹出的方法</p><blockquote><p>readonly 属性的使用</p></blockquote><p>点击输入框触发 focus 事件弹出时间 picker，将选择的开始时间、结束时间都显示在输入框里，这里加入只读 readonly 属性可以避免输入法的弹出。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">v-model</span>=<span class="hljs-string">&quot;startDate&quot;</span> <span class="hljs-attr">readonly</span> @<span class="hljs-attr">focus</span>=<span class="hljs-string">&quot;openStartPicker&quot;</span> /&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">v-model</span>=<span class="hljs-string">&quot;endDate&quot;</span> <span class="hljs-attr">readonly</span> @<span class="hljs-attr">focus</span>=<span class="hljs-string">&quot;openEndPicker&quot;</span> /&gt;</span><br></code></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> dev </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>44、vue3 v-model</title>
      <link href="/2021/10/14/44-vue3-4-v-model/"/>
      <url>/2021/10/14/44-vue3-4-v-model/</url>
      
        <content type="html"><![CDATA[<p>v-model 在 Vue2 版本的本质上不过是语法糖，v-model 会忽略所有表单元素的 value、checked、selected attribute 的初始值而总是将 Vue 实例的数据作为数据来源，v-model 在内部为不同的输入元素使用不同的 property 并抛出不同的事件：<br>text 和 textarea 元素使用 value property 和 input 事件；<br>checkbox 和 radio 使用 checked property 和 change 事件；<br>select 字段将 value 作为 prop 并将 change 作为事件。<br>Vue3 版本的 v-model 做了修改。</p><span id="more"></span><h2 id="1、实现方法一"><a href="#1、实现方法一" class="headerlink" title="1、实现方法一"></a>1、实现方法一</h2><blockquote><p>1、将内部原生 <code>input</code> 元素的 <code>value</code> attribute（属性） 绑定到 <code>modelValue</code> prop</p><p>2、输入新的值时在 <code>input</code> 元素上触发 <code>update:modelValue</code> 事件</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs js">&lt;script setup&gt;<br>defineProps([<span class="hljs-string">&#x27;modelValue&#x27;</span>])<br>defineEmits([<span class="hljs-string">&#x27;update:modelValue&#x27;</span>])<br>&lt;/script&gt;<br><br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">template</span>&gt;</span></span><br><span class="xml">  <span class="hljs-tag">&lt;<span class="hljs-name">input</span></span></span><br><span class="hljs-tag"><span class="xml">    <span class="hljs-attr">:value</span>=<span class="hljs-string">&quot;modelValue&quot;</span></span></span><br><span class="hljs-tag"><span class="xml">    @<span class="hljs-attr">input</span>=<span class="hljs-string">&quot;$emit(&#x27;update:modelValue&#x27;, $event.target.value)&quot;</span></span></span><br><span class="hljs-tag"><span class="xml">  /&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span></span><br><br></code></pre></td></tr></table></figure><h2 id="2、实现方法二："><a href="#2、实现方法二：" class="headerlink" title="2、实现方法二："></a>2、实现方法二：</h2><p>利用计算属性:watch 具有 get 和 set 方法，get 方法需要返回 modelValue prop ,而 set 方法触发相应的事件。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs js">&lt;script setup&gt;<br><span class="hljs-keyword">import</span> &#123; computed &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;vue&#x27;</span><br><br><span class="hljs-keyword">const</span> props = defineProps([<span class="hljs-string">&#x27;modelValue&#x27;</span>])<br><span class="hljs-keyword">const</span> emit = defineEmits([<span class="hljs-string">&#x27;update:modelValue&#x27;</span>])<br><br><span class="hljs-keyword">const</span> value = computed(&#123;<br>  <span class="hljs-function"><span class="hljs-title">get</span>(<span class="hljs-params"></span>)</span> &#123;<br>    <span class="hljs-keyword">return</span> props.modelValue<br>  &#125;,<br>  <span class="hljs-function"><span class="hljs-title">set</span>(<span class="hljs-params">value</span>)</span> &#123;<br>    emit(<span class="hljs-string">&#x27;update:modelValue&#x27;</span>, value)<br>  &#125;<br>&#125;)<br>&lt;/script&gt;<br><br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">template</span>&gt;</span></span><br><span class="xml">  <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">v-model</span>=<span class="hljs-string">&quot;value&quot;</span> /&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span></span><br></code></pre></td></tr></table></figure><h2 id="3、多个-v-model-绑定"><a href="#3、多个-v-model-绑定" class="headerlink" title="3、多个 v-model 绑定"></a>3、多个 v-model 绑定</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs js">&lt;script setup&gt;<br>defineProps(&#123;<br>  <span class="hljs-attr">firstName</span>: <span class="hljs-built_in">String</span>,<br>  <span class="hljs-attr">lastName</span>: <span class="hljs-built_in">String</span><br>&#125;)<br><br>defineEmits([<span class="hljs-string">&#x27;update:firstName&#x27;</span>, <span class="hljs-string">&#x27;update:lastName&#x27;</span>])<br>&lt;/script&gt;<br><br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">template</span>&gt;</span></span><br><span class="xml">  <span class="hljs-tag">&lt;<span class="hljs-name">input</span></span></span><br><span class="hljs-tag"><span class="xml">    <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span></span></span><br><span class="hljs-tag"><span class="xml">    <span class="hljs-attr">:value</span>=<span class="hljs-string">&quot;firstName&quot;</span></span></span><br><span class="hljs-tag"><span class="xml">    @<span class="hljs-attr">input</span>=<span class="hljs-string">&quot;$emit(&#x27;update:firstName&#x27;, $event.target.value)&quot;</span></span></span><br><span class="hljs-tag"><span class="xml">  /&gt;</span></span><br><span class="xml">  <span class="hljs-tag">&lt;<span class="hljs-name">input</span></span></span><br><span class="hljs-tag"><span class="xml">    <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span></span></span><br><span class="hljs-tag"><span class="xml">    <span class="hljs-attr">:value</span>=<span class="hljs-string">&quot;lastName&quot;</span></span></span><br><span class="hljs-tag"><span class="xml">    @<span class="hljs-attr">input</span>=<span class="hljs-string">&quot;$emit(&#x27;update:lastName&#x27;, $event.target.value)&quot;</span></span></span><br><span class="hljs-tag"><span class="xml">  /&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span></span><br><br></code></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">UserName</span> <span class="hljs-attr">v-model:first-name</span>=<span class="hljs-string">&quot;first&quot;</span> <span class="hljs-attr">v-model:last-name</span>=<span class="hljs-string">&quot;last&quot;</span> /&gt;</span><br></code></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> vue3 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>43、vue3-emits</title>
      <link href="/2021/10/11/43-vue3-3-emits/"/>
      <url>/2021/10/11/43-vue3-3-emits/</url>
      
        <content type="html"><![CDATA[<p>自定义事件不使用 emit:[‘event name’],会出现连续执行 2 次的一个 bug。</p><span id="more"></span><h2 id="一、问题复现"><a href="#一、问题复现" class="headerlink" title="一、问题复现"></a>一、问题复现</h2><p>Emits.vue</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">template</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">div</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">&quot;$emit(&#x27;click&#x27;)&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>自定义事件<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span><br></code></pre></td></tr></table></figure><p>使用 Emits.vue</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">Emits</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">&quot;handleClick&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">Emits</span>&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">import</span> Emits <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;./Emits.vue&quot;</span>;<br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> &#123;<br>  <span class="hljs-attr">components</span>: &#123;<br>    Emits,<br>  &#125;,<br>  <span class="hljs-attr">methods</span>: &#123;<br>    <span class="hljs-function"><span class="hljs-title">handleClick</span>(<span class="hljs-params"></span>)</span>&#123;<br>      <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;click me&quot;</span>);<br>    &#125;<br>  &#125;,<br>&#125;;<br></code></pre></td></tr></table></figure><p>点击自定义事件，会打印2次click me</p><h2 id="二、解决方法："><a href="#二、解决方法：" class="headerlink" title="二、解决方法："></a>二、解决方法：</h2><h4 id="方法1、在Emits-vue中加入以下代码"><a href="#方法1、在Emits-vue中加入以下代码" class="headerlink" title="方法1、在Emits.vue中加入以下代码"></a>方法1、在Emits.vue中加入以下代码</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js">emits:[<span class="hljs-string">&#x27;click&#x27;</span>]<br></code></pre></td></tr></table></figure><h4 id="方法2、不要使用原生事件名称"><a href="#方法2、不要使用原生事件名称" class="headerlink" title="方法2、不要使用原生事件名称"></a>方法2、不要使用原生事件名称</h4><p>Emits.vue</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">template</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">div</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">&quot;$emit(&#x27;my-click&#x27;)&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">p</span> &gt;</span>自定义事件<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span><br><br></code></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs js">&lt;script&gt;<br>  <span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> &#123;<br>    <span class="hljs-attr">emits</span>:[<span class="hljs-string">&#x27;my-click&#x27;</span>]<br>  &#125;<br>&lt;/script&gt;<br><br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">style</span> <span class="hljs-attr">scoped</span>&gt;</span></span><br><span class="xml"></span><br><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span></span><br></code></pre></td></tr></table></figure><p>引用处：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">Emits</span> @<span class="hljs-attr">my-click</span>=<span class="hljs-string">&quot;handleClick&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">Emits</span>&gt;</span><br></code></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> vue3 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>42、vue3-传送门：teleport</title>
      <link href="/2021/10/02/42-vue3-2-teleport/"/>
      <url>/2021/10/02/42-vue3-2-teleport/</url>
      
        <content type="html"><![CDATA[<p>teleport: 是一个内置组件，它可以将一个组件内部的一部分模板“传送”到该组件的 DOM 结构外层的位置去。</p><span id="more"></span><h2 id="一、teleport应用场景"><a href="#一、teleport应用场景" class="headerlink" title="一、teleport应用场景"></a>一、teleport应用场景</h2><p>一个组件模板的一部分在逻辑上从属于该组件，但从整个应用视图的角度来看，它在 DOM 中应该被渲染在整个 Vue 应用外部的其他地方，最常见的例子就是全屏的模态框。</p><h2 id="二、模态框弹窗组件"><a href="#二、模态框弹窗组件" class="headerlink" title="二、模态框弹窗组件"></a>二、模态框弹窗组件</h2><p>新建ModalButton.vue组件</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">template</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">button</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">&quot;modalOpen = true&quot;</span>&gt;</span>弹出窗口<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">teleport</span> <span class="hljs-attr">to</span>=<span class="hljs-string">&#x27;body&#x27;</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">v-if</span>=<span class="hljs-string">&quot;modalOpen&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;modal&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>我是弹窗<br>          父元素为body<br>          <span class="hljs-tag">&lt;<span class="hljs-name">button</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">&quot;modalOpen=false&quot;</span>&gt;</span>关闭窗口<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>      <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">teleport</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> &#123;<br>  <span class="hljs-comment">// vue3兼容data写法</span><br>  <span class="hljs-function"><span class="hljs-title">data</span>(<span class="hljs-params"></span>)</span> &#123;<br>    <span class="hljs-keyword">return</span> &#123;<br>      <span class="hljs-attr">modalOpen</span>:<span class="hljs-literal">true</span><br>    &#125;<br>  &#125;,<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs css"><br><span class="hljs-selector-class">.modal</span>&#123;<br>  <span class="hljs-attribute">position</span>: absolute;<br>  <span class="hljs-attribute">top</span>: <span class="hljs-number">0</span>;<br>  <span class="hljs-attribute">left</span>:<span class="hljs-number">0</span>;<br>  <span class="hljs-attribute">right</span>:<span class="hljs-number">0</span>;<br>  <span class="hljs-attribute">bottom</span>: <span class="hljs-number">0</span>;<br>  <span class="hljs-attribute">background-color</span>: <span class="hljs-built_in">rgba</span>(<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0.5</span>);<br>  <span class="hljs-attribute">display</span>: flex;<br>  <span class="hljs-attribute">flex-direction</span>: column;<br>  <span class="hljs-attribute">align-items</span>: center;<br>  <span class="hljs-attribute">justify-content</span>: center;<br>&#125;<br><span class="hljs-selector-class">.modal</span> <span class="hljs-selector-tag">div</span>&#123;<br>  <span class="hljs-attribute">display</span>: flex;<br>  <span class="hljs-attribute">flex-direction</span>: column;<br>  <span class="hljs-attribute">align-items</span>: center;<br>  <span class="hljs-attribute">justify-content</span>: center;<br>  <span class="hljs-attribute">background-color</span>: <span class="hljs-number">#fff</span>;<br>  <span class="hljs-attribute">width</span>: <span class="hljs-number">300px</span>;<br>  <span class="hljs-attribute">height</span>: <span class="hljs-number">300px</span>;<br>  <span class="hljs-attribute">padding</span>: <span class="hljs-number">5px</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="三、ModalButton组件的应用"><a href="#三、ModalButton组件的应用" class="headerlink" title="三、ModalButton组件的应用"></a>三、ModalButton组件的应用</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">ModalButton</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">ModalButton</span>&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 加上文件类型后缀，不然会出现404 NOT FOUND</span><br><span class="hljs-keyword">import</span> ModalButton <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;./ModalButton.vue&quot;</span>;<br>components:&#123;<br>    ModalButton<br>&#125;,  <br></code></pre></td></tr></table></figure><p>当弹窗显示的时候，审查元素.modal与#app位于body下的同一层级</p>]]></content>
      
      
      
        <tags>
            
            <tag> vue3 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>41、vue3-起始和新特性</title>
      <link href="/2021/09/25/41-vue3-1-start/"/>
      <url>/2021/09/25/41-vue3-1-start/</url>
      
        <content type="html"><![CDATA[<p>使用 vite 创建项目，以及 vue3 的 composition API 的使用</p><span id="more"></span><h2 id="一、创建项目（vue-cli-vite）"><a href="#一、创建项目（vue-cli-vite）" class="headerlink" title="一、创建项目（vue-cli + vite）"></a>一、创建项目（vue-cli + vite）</h2><p>使用 vite 可以更加快速的启动项目</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs js">npm init vite-app &lt;project-name&gt;<br><br>cd project-name<br><br>npm install &amp;&amp; npm run dev<br></code></pre></td></tr></table></figure><h2 id="二、main-js"><a href="#二、main-js" class="headerlink" title="二、main.js"></a>二、main.js</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">import</span> &#123; createApp &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;vue&quot;</span>;<br><span class="hljs-keyword">import</span> App <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;./App.vue&quot;</span>;<br><span class="hljs-keyword">import</span> <span class="hljs-string">&quot;./index.css&quot;</span>;<br><br>createApp(App).mount(<span class="hljs-string">&quot;#app&quot;</span>);<br></code></pre></td></tr></table></figure><h2 id="三、组合式-API：composition-API"><a href="#三、组合式-API：composition-API" class="headerlink" title="三、组合式 API：composition API"></a>三、组合式 API：composition API</h2><blockquote><p>composition api 为 Vue 应用提供更好的逻辑复用和代码组织。</p></blockquote><p>setup()钩子是在组件中使用组合式 API 的入口，通常只在以下情况下使用：</p><p>1、需要在非单文件组件中使用组合式 API 时。</p><p>2、需要在基于选项式 API 的组件中集成基于组合式 API 的代码时。</p><h4 id="（一）、基本使用"><a href="#（一）、基本使用" class="headerlink" title="（一）、基本使用"></a>（一）、基本使用</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs js">&lt;script&gt;<br><span class="hljs-keyword">import</span> &#123; ref &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;vue&#x27;</span><br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> &#123;<br>  <span class="hljs-function"><span class="hljs-title">setup</span>(<span class="hljs-params"></span>)</span> &#123;<br>    <span class="hljs-keyword">const</span> count = ref(<span class="hljs-number">0</span>)<br><br>    <span class="hljs-comment">// 返回值会暴露给模板和其他的选项式 API 钩子</span><br>    <span class="hljs-keyword">return</span> &#123;<br>      count<br>    &#125;<br>  &#125;,<br><br>  <span class="hljs-function"><span class="hljs-title">mounted</span>(<span class="hljs-params"></span>)</span> &#123;<br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">this</span>.count) <span class="hljs-comment">// 0</span><br>  &#125;<br>&#125;<br>&lt;/script&gt;<br></code></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">template</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">button</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">&quot;count++&quot;</span>&gt;</span>&#123;&#123; count &#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span><br></code></pre></td></tr></table></figure><blockquote><blockquote><p>Tip： setup() 自身并不含对组件实例的访问权，即在 setup() 中访问 this 会是 undefined。你可以在选项式 API 中访问组合式 API 暴露的值，但反过来则不行。</p></blockquote></blockquote><h4 id="（二）、创建响应式对象"><a href="#（二）、创建响应式对象" class="headerlink" title="（二）、创建响应式对象"></a>（二）、创建响应式对象</h4><p>方法1、</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>&#123;&#123; data.counter &#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>&#123;&#123; data.doubleCounter &#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">import</span> &#123; computed,reactive,onMounted,onUnmounted,ref,toRefs,watch&#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;vue&quot;</span>;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> &#123;<br>  <span class="hljs-function"><span class="hljs-title">setup</span>(<span class="hljs-params"></span>)</span> &#123;<br>    <span class="hljs-keyword">const</span> data = reactive(&#123;<br>      <span class="hljs-attr">counter</span>: <span class="hljs-number">1</span>,<br>      <span class="hljs-attr">doubleCounter</span>: computed(<span class="hljs-function">() =&gt;</span> data.counter * <span class="hljs-number">2</span>),<br>    &#125;);<br><br>    <span class="hljs-keyword">const</span> msg1 = ref(<span class="hljs-string">&quot;some message&quot;</span>);<br>    <span class="hljs-comment">// setup 最早有onMounted 无created beforeCreate</span><br><br>    &#125;,<br>    <span class="hljs-keyword">let</span> timer;<br>    onMounted(<span class="hljs-function">() =&gt;</span> &#123;<br>      timer = <span class="hljs-built_in">setInterval</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>        data.counter++;<br>      &#125;, <span class="hljs-number">1000</span>);<br>    &#125;);<br>    onUnmounted(<span class="hljs-function">() =&gt;</span> &#123;<br>      <span class="hljs-built_in">clearInterval</span>(timer);<br>    &#125;);<br>    <span class="hljs-keyword">return</span> &#123; data, msg1 &#125;;<br>  &#125;,<br>&#125;;<br></code></pre></td></tr></table></figure><p>方法 2：toRefs:解构/展开返回响应式对象</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>&#123;&#123; msg1 &#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>&#123;&#123; counter &#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>&#123;&#123; doubleCounter &#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&quot;desc&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">import</span> &#123; computed,reactive,onMounted,onUnmounted,ref,toRefs,watch&#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;vue&quot;</span>;<br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> &#123;<br>  <span class="hljs-function"><span class="hljs-title">setup</span>(<span class="hljs-params"></span>)</span> &#123;<br>    <span class="hljs-comment">// useCounter函数使用了toRefs  所以我们可以展开使用counter doubleCounter</span><br>    <span class="hljs-keyword">const</span> &#123; counter, doubleCounter &#125; = useCounter();<br><br>    <span class="hljs-comment">// 单值响应式</span><br>    <span class="hljs-keyword">const</span> msg1 = ref(<span class="hljs-string">&quot;some message&quot;</span>);<br><br>    <span class="hljs-comment">// 使用元素</span><br>    <span class="hljs-keyword">const</span> desc = ref(<span class="hljs-literal">null</span>);<br><br>    <span class="hljs-comment">// watch 侦听器</span><br>    watch(counter, <span class="hljs-function">(<span class="hljs-params">val, oldVal</span>) =&gt;</span> &#123;<br>      <span class="hljs-comment">// 这里需要加上desc.value</span><br>      <span class="hljs-keyword">const</span> p = desc.value;<br>      p.textContent = <span class="hljs-string">`counter change from <span class="hljs-subst">$&#123;oldVal&#125;</span> to <span class="hljs-subst">$&#123;val&#125;</span>`</span>;<br>    &#125;);<br>    <span class="hljs-keyword">return</span> &#123; counter, doubleCounter, msg1, desc &#125;;<br>  &#125;,<br>&#125;;<br><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">useCounter</span>(<span class="hljs-params"></span>) </span>&#123;<br>  <span class="hljs-keyword">const</span> data = reactive(&#123;<br>    <span class="hljs-attr">counter</span>: <span class="hljs-number">1</span>,<br>    <span class="hljs-attr">doubleCounter</span>: computed(<span class="hljs-function">() =&gt;</span> data.counter * <span class="hljs-number">2</span>),<br>  &#125;);<br><br>  <span class="hljs-comment">// setup 最早有onMounted 无created</span><br>  <span class="hljs-keyword">let</span> timer;<br>  onMounted(<span class="hljs-function">() =&gt;</span> &#123;<br>    timer = <span class="hljs-built_in">setInterval</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>      data.counter++;<br>    &#125;, <span class="hljs-number">1000</span>);<br>  &#125;);<br>  onUnmounted(<span class="hljs-function">() =&gt;</span> &#123;<br>    <span class="hljs-built_in">clearInterval</span>(timer);<br>  &#125;);<br>  <span class="hljs-keyword">return</span> toRefs(data);<br>&#125;<br></code></pre></td></tr></table></figure><h5 id="三-、单值响应式声明：ref"><a href="#三-、单值响应式声明：ref" class="headerlink" title="(三)、单值响应式声明：ref"></a>(三)、单值响应式声明：ref</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> msg1 = ref(<span class="hljs-string">&quot;some msg&quot;</span>);<br></code></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> vue3 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>40、初识egg.js</title>
      <link href="/2021/06/20/40-egg/"/>
      <url>/2021/06/20/40-egg/</url>
      
        <content type="html"><![CDATA[<p>egg.js的使用,包括项目的创建、内置ctx对象、路由、controller控制层、post请求。</p><span id="more"></span><h3 id="1、创建-启动项目"><a href="#1、创建-启动项目" class="headerlink" title="1、创建/启动项目"></a>1、创建/启动项目</h3><p>直接使用下面的方式，无法创建项目</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 无法创建项目</span><br>npm init egg --type=simple<br><br><span class="hljs-comment">// 需要在后面指定淘宝源</span><br>npm init egg --type=simple -r=https:<span class="hljs-comment">//registry.npm.taobao.org</span><br><br>npm run dev<br></code></pre></td></tr></table></figure><h3 id="2、内置的ctx对象"><a href="#2、内置的ctx对象" class="headerlink" title="2、内置的ctx对象"></a>2、内置的ctx对象</h3><blockquote><p>ctx这个对象非常重要，请求来的参数，返回去的消息都需要通过ctx这个对象获取或者设置</p></blockquote><blockquote><p>ctx是继承koa的context对象通过设置ctx.body， 可以改变返回信息</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs js">ctx &#123; <span class="hljs-attr">request</span>: <br>   &#123; <span class="hljs-attr">method</span>: <span class="hljs-string">&#x27;GET&#x27;</span>,<br>     <span class="hljs-attr">url</span>: <span class="hljs-string">&#x27;/&#x27;</span>,<br>     <span class="hljs-attr">header</span>: <br>      &#123; <span class="hljs-attr">host</span>: <span class="hljs-string">&#x27;127.0.0.1:7001&#x27;</span>,<br>        <span class="hljs-attr">connection</span>: <span class="hljs-string">&#x27;keep-alive&#x27;</span>,<br>        <span class="hljs-attr">pragma</span>: <span class="hljs-string">&#x27;no-cache&#x27;</span>,<br>        <span class="hljs-string">&#x27;cache-control&#x27;</span>: <span class="hljs-string">&#x27;no-cache&#x27;</span>,<br>        <span class="hljs-string">&#x27;sec-ch-ua&#x27;</span>: <span class="hljs-string">&#x27;&quot; Not;A Brand&quot;;v=&quot;99&quot;, &quot;Google Chrome&quot;;v=&quot;97&quot;, &quot;Chromium&quot;;v=&quot;97&quot;&#x27;</span>,<br>        <span class="hljs-string">&#x27;sec-ch-ua-mobile&#x27;</span>: <span class="hljs-string">&#x27;?0&#x27;</span>,<br>        <span class="hljs-string">&#x27;sec-ch-ua-platform&#x27;</span>: <span class="hljs-string">&#x27;&quot;macOS&quot;&#x27;</span>,<br>        <span class="hljs-string">&#x27;upgrade-insecure-requests&#x27;</span>: <span class="hljs-string">&#x27;1&#x27;</span>,<br>        <span class="hljs-string">&#x27;user-agent&#x27;</span>: <span class="hljs-string">&#x27;Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/97.0.4692.71 Safari/537.36&#x27;</span>,<br>        <span class="hljs-attr">accept</span>: <span class="hljs-string">&#x27;text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.9&#x27;</span>,<br>        <span class="hljs-string">&#x27;sec-fetch-site&#x27;</span>: <span class="hljs-string">&#x27;none&#x27;</span>,<br>        <span class="hljs-string">&#x27;sec-fetch-mode&#x27;</span>: <span class="hljs-string">&#x27;navigate&#x27;</span>,<br>        <span class="hljs-string">&#x27;sec-fetch-user&#x27;</span>: <span class="hljs-string">&#x27;?1&#x27;</span>,<br>        <span class="hljs-string">&#x27;sec-fetch-dest&#x27;</span>: <span class="hljs-string">&#x27;document&#x27;</span>,<br>        <span class="hljs-string">&#x27;accept-encoding&#x27;</span>: <span class="hljs-string">&#x27;gzip, deflate, br&#x27;</span>,<br>        <span class="hljs-string">&#x27;accept-language&#x27;</span>: <span class="hljs-string">&#x27;zh-CN,zh;q=0.9,en;q=0.8&#x27;</span>,<br>        <span class="hljs-attr">cookie</span>: <span class="hljs-string">&#x27;csrfToken=DpyybUjAh9JRzrCgx3itQifi&#x27;</span> &#125; &#125;,<br>  <span class="hljs-attr">response</span>: &#123; <span class="hljs-attr">status</span>: <span class="hljs-number">404</span>, <span class="hljs-attr">message</span>: <span class="hljs-string">&#x27;Not Found&#x27;</span>, <span class="hljs-attr">header</span>: &#123;&#125; &#125;,<br>  <span class="hljs-attr">app</span>: <br>   &#123; <span class="hljs-attr">env</span>: <span class="hljs-string">&#x27;local&#x27;</span>,<br>     <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;eggjs&#x27;</span>,<br>     <span class="hljs-attr">baseDir</span>: <span class="hljs-string">&#x27;/Users/yq/Desktop/express&#x27;</span>,<br>     <span class="hljs-attr">subdomainOffset</span>: <span class="hljs-number">2</span>,<br>     <span class="hljs-attr">config</span>: <span class="hljs-string">&#x27;&lt;egg config&gt;&#x27;</span>,<br>     <span class="hljs-attr">controller</span>: <span class="hljs-string">&#x27;&lt;egg controller&gt;&#x27;</span>,<br>     <span class="hljs-attr">httpclient</span>: <span class="hljs-string">&#x27;&lt;egg httpclient&gt;&#x27;</span>,<br>     <span class="hljs-attr">loggers</span>: <span class="hljs-string">&#x27;&lt;egg loggers&gt;&#x27;</span>,<br>     <span class="hljs-attr">middlewares</span>: <span class="hljs-string">&#x27;&lt;egg middlewares&gt;&#x27;</span>,<br>     <span class="hljs-attr">router</span>: <span class="hljs-string">&#x27;&lt;egg router&gt;&#x27;</span>,<br>     <span class="hljs-attr">serviceClasses</span>: <span class="hljs-string">&#x27;&lt;egg serviceClasses&gt;&#x27;</span> &#125;,<br>  <span class="hljs-attr">originalUrl</span>: <span class="hljs-string">&#x27;/&#x27;</span>,<br>  <span class="hljs-attr">req</span>: <span class="hljs-string">&#x27;&lt;original node req&gt;&#x27;</span>,<br>  <span class="hljs-attr">res</span>: <span class="hljs-string">&#x27;&lt;original node res&gt;&#x27;</span>,<br>  <span class="hljs-attr">socket</span>: <span class="hljs-string">&#x27;&lt;original node socket&gt;&#x27;</span> &#125;<br><br></code></pre></td></tr></table></figure><h3 id="3、路由"><a href="#3、路由" class="headerlink" title="3、路由"></a>3、路由</h3><p>在controller的home.js中写一个新的路由,</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">async</span> <span class="hljs-function"><span class="hljs-title">list</span>(<span class="hljs-params"></span>)</span>&#123;<br>    <span class="hljs-keyword">const</span> &#123; ctx &#125; = <span class="hljs-built_in">this</span><br>    ctx.body = &#123;<br>        <span class="hljs-attr">code</span>:<span class="hljs-number">200</span>,<br>        <span class="hljs-attr">data</span>:[<br>            &#123;<br>                <span class="hljs-attr">id</span>:<span class="hljs-string">&#x27;1&#x27;</span>,<br>                <span class="hljs-attr">name</span>:<span class="hljs-string">&#x27;jude&#x27;</span><br>            &#125;,<br>            &#123;<br>                <span class="hljs-attr">id</span>:<span class="hljs-string">&#x27;2&#x27;</span>,<br>                <span class="hljs-attr">name</span>:<span class="hljs-string">&#x27;summer&#x27;</span><br>            &#125;<br>        ],<br>        <span class="hljs-attr">msg</span>:<span class="hljs-string">&#x27;success&#x27;</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>在router.js中匹配新写的路由</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js">router.get(<span class="hljs-string">&#x27;/list&#x27;</span>,controller.home.list)<br></code></pre></td></tr></table></figure><p>打开127.0.0.1:7001/list即可看到效果</p><h3 id="4、Controller控制层"><a href="#4、Controller控制层" class="headerlink" title="4、Controller控制层"></a>4、Controller控制层</h3><p>在controller新建一个user.js</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-meta">&#x27;use strict&#x27;</span><br><br><span class="hljs-keyword">const</span> Controller = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;egg&#x27;</span>).Controller<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">UserController</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Controller</span> </span>&#123;<br>    <span class="hljs-keyword">async</span> <span class="hljs-function"><span class="hljs-title">info</span>(<span class="hljs-params"></span>)</span>&#123;<br>        <span class="hljs-keyword">const</span> &#123;ctx&#125; = <span class="hljs-built_in">this</span><br>        ctx.body = &#123;<br>            <span class="hljs-attr">code</span>:<span class="hljs-number">200</span>,<br>            <span class="hljs-attr">data</span>:&#123;<br>                <span class="hljs-attr">id</span>:<span class="hljs-string">&#x27;1&#x27;</span>,<br>                <span class="hljs-attr">name</span>:<span class="hljs-string">&quot;jude&quot;</span><br>                <span class="hljs-attr">age</span>:<span class="hljs-number">29</span>,<br>                <span class="hljs-attr">gender</span>:<span class="hljs-string">&quot;man&quot;</span><br>            &#125;<br>            <span class="hljs-attr">msg</span>::<span class="hljs-string">&quot;success&quot;</span><br>        &#125;<br>    &#125;<br>&#125;<br><br><span class="hljs-built_in">module</span>.exports = UserController<br></code></pre></td></tr></table></figure><p>配置新的路由</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js">router.get(<span class="hljs-string">&#x27;/user/info&#x27;</span>,controller.user.info)<br></code></pre></td></tr></table></figure><p>打开127.0.0.1:7001/user/info 即可看到效果</p><h3 id="5、post请求及配置CSRF跨域"><a href="#5、post请求及配置CSRF跨域" class="headerlink" title="5、post请求及配置CSRF跨域"></a>5、post请求及配置CSRF跨域</h3><p>安装跨域插件</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js">npm install egg-cors --save<br></code></pre></td></tr></table></figure><p>配置config下的plugin.js和config.default.js</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">// plugin.js<br>moduel.exports = &#123;<br>    cors:&#123;<br>        enable:true,<br>        package:&#x27;egg-cors&#x27;<br>    &#125;<br>&#125;<br><br>// config.default.js<br>config.security = &#123;<br>    csrf:&#123;<br>        enable:true<br>    &#125;,<br>    domainWhiteList:[]<br>&#125;<br>config.cors = &#123;<br>    origin:&quot;*&quot;,<br>    allowMethods:&#x27;GET,PUT,POST,DELETE.PATCH&#x27;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="6、创建post请求"><a href="#6、创建post请求" class="headerlink" title="6、创建post请求"></a>6、创建post请求</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// user.js</span><br><span class="hljs-keyword">async</span> <span class="hljs-function"><span class="hljs-title">createUser</span>(<span class="hljs-params"></span>)</span>&#123;<br>    <span class="hljs-keyword">const</span> &#123;ctx &#125; = <span class="hljs-built_in">this</span><br>    <span class="hljs-keyword">const</span> result = &#123;<br>        <span class="hljs-attr">username</span>:ctx.request.body.username,<br>        <span class="hljs-attr">age</span>:ctx.request.body.age<br>    &#125;<br>    ctx.body = &#123;<br>        <span class="hljs-attr">code</span>:<span class="hljs-number">200</span>,<br>        <span class="hljs-attr">data</span>:result,<br>        <span class="hljs-attr">msg</span>:<span class="hljs-string">&#x27;success&#x27;</span><br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p>此时，打开ApiPost工具，选择post请求，输入请求地址+参数信息，即可看到响应信息。</p>]]></content>
      
      
      
        <tags>
            
            <tag> egg </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>39、堆和栈、变量复制、深拷贝与浅拷贝</title>
      <link href="/2021/05/25/39-stack-heap/"/>
      <url>/2021/05/25/39-stack-heap/</url>
      
        <content type="html"><![CDATA[<p>栈（stack）：主要存放的是基本类型的变量和对象的应用，其优势是存储速度比堆快，缺点是存在栈中的数据大小与生存期必须是确定的，缺乏灵活性。   </p><p>堆（heap）：用于引用类型（复杂数据类型：如数组对象、object对象）分配空间，运行时动态分配内存，存储速度较慢。</p><span id="more"></span><p>JavaScript中，内存分为三种类型：代码空间、栈空间、堆空间，其中代码空间用于存放可执行代码。</p><h2 id="一、堆栈内存空间"><a href="#一、堆栈内存空间" class="headerlink" title="一、堆栈内存空间"></a>一、堆栈内存空间</h2><h3 id="1、栈内存空间"><a href="#1、栈内存空间" class="headerlink" title="1、栈内存空间"></a>1、栈内存空间</h3><blockquote><p>用栈作为数据结构在内存中所申请的空间。</p></blockquote><h3 id="2、栈的特点："><a href="#2、栈的特点：" class="headerlink" title="2、栈的特点："></a>2、栈的特点：</h3><p>1、后进先出，最后添加进栈的元素最先出</p><p>2、访问栈底元素，必须拿掉它上面的元素</p><p><image src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/5631876df7b34b1cbe19f10ff5fe7b1a~tplv-k3u1fbpfcp-watermark.awebp"></image></p><p>js7种基本数据类型变量保存在栈内存中，因为基本数据类型占用空间小、大小固定，通过值来访问，属于被频繁使用的数据。</p><h3 id="3、闭包"><a href="#3、闭包" class="headerlink" title="3、闭包"></a>3、闭包</h3><blockquote><p>闭包中的基本数据类型变量是保存在堆内存里的，当函数执行完弹出调用栈后，返回内部函数的一个应用，这时候函数的变量就会转移到堆上，因此内部函数依然能访问到上一层函数的变量。</p></blockquote><h2 id="二、堆内存空间"><a href="#二、堆内存空间" class="headerlink" title="二、堆内存空间"></a>二、堆内存空间</h2><blockquote><p>用堆作为数据结构在内存中所申请的空间。<br>通常情况下，我们所说的堆数据结构指的就是二叉堆。</p></blockquote><h3 id="1、二叉堆的特点："><a href="#1、二叉堆的特点：" class="headerlink" title="1、二叉堆的特点："></a>1、二叉堆的特点：</h3><p>1、它是一颗完全二叉树</p><p>2、二叉堆不是最小堆就是最大堆</p><h3 id="2、引用数据类型"><a href="#2、引用数据类型" class="headerlink" title="2、引用数据类型"></a>2、引用数据类型</h3><blockquote><p>引用数据类型存储在堆内存中，引用数据类型占据空间大、大小不固定，如果存储在栈中，将影响程序的运行性能。<br>引用数据类型会在栈中存储一个指针，这个指针指向堆内存空间中该实体的起始地址。<br>当解释器寻找引用值时，会先检索其在栈中的地址，取得地址后，从堆中获得实体。</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 基本数据类型-栈内存</span><br><span class="hljs-keyword">let</span> name = <span class="hljs-string">&quot;大白&quot;</span>;<br><span class="hljs-comment">// 基本数据类型-栈内存</span><br><span class="hljs-keyword">let</span> age = <span class="hljs-number">20</span>;<br><span class="hljs-comment">// 基本数据类型-栈内存</span><br><span class="hljs-keyword">let</span> info = <span class="hljs-literal">null</span>;<br><span class="hljs-comment">// 对象指针存放在栈内存中，指针指向的对象放在堆内存中</span><br><span class="hljs-keyword">let</span> msgObj = &#123;<span class="hljs-attr">msg</span>: <span class="hljs-string">&quot;测试&quot;</span>, <span class="hljs-attr">id</span>: <span class="hljs-number">5</span>&#125;;<br><span class="hljs-comment">// 数组的指针存放在栈内存中，指针指向的数组存放在堆内存中</span><br><span class="hljs-keyword">let</span> ages = [<span class="hljs-number">19</span>, <span class="hljs-number">22</span>, <span class="hljs-number">57</span>]<br><br></code></pre></td></tr></table></figure><p>上面代码中：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">1、创建了两个变量msgObj、ages，它们的值都是引用类型(object、array)<br>2、堆内存空间采用二叉堆作为数据结构，msgObj与ages的具体值会存在堆内存空间中<br>3、存储完成后，堆内存空间会返回这两个值的引用地址(指针)<br>4、拿到引用地址后，这个引用地址会和它的变量名对应起来，存放在栈内存空间中<br>5、在查找变量msgObj与ages的具体值时，会先从栈内存空间中获取它的引用地址<br>6、获取到引用地址后，通过引用地址在堆内存空间的二叉堆中查找到对应的值。<br></code></pre></td></tr></table></figure><p>堆内存空间中的object，表示的是存储在空间中的其他对象的引用值</p><p><image src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/18fbd5bf395a42e5b6757c84a4768be7~tplv-k3u1fbpfcp-watermark.awebp"></image></p><h3 id="3、栈内存空间与堆内存的区别"><a href="#3、栈内存空间与堆内存的区别" class="headerlink" title="3、栈内存空间与堆内存的区别"></a>3、栈内存空间与堆内存的区别</h3><blockquote><p>堆内存空间：相当于一个采用二叉堆作为数据结构的容器。<br>堆内存：指的是一个引用类型的具体值<br>堆内存存在于堆内存空间中</p></blockquote><h2 id="三、变量复制"><a href="#三、变量复制" class="headerlink" title="三、变量复制"></a>三、变量复制</h2><h3 id="1、基本数据类型的复制"><a href="#1、基本数据类型的复制" class="headerlink" title="1、基本数据类型的复制"></a>1、基本数据类型的复制</h3><p>下面代码中，name、alias都是基本类型，值存储在栈内存，分别有各自独立的栈空间，因此修改了alias的值，name是不受影响的。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">let</span> name =<span class="hljs-string">&#x27;jude&#x27;</span><br><span class="hljs-keyword">let</span> alias = name<br>alias = <span class="hljs-string">&#x27;summer&#x27;</span><br><br><span class="hljs-built_in">console</span>.log(name) <span class="hljs-comment">// jude</span><br><span class="hljs-built_in">console</span>.log(alias) <span class="hljs-comment">// summer</span><br></code></pre></td></tr></table></figure><p>相当于复制前是这样的：</p><blockquote><p>name | jude</p></blockquote><p>复制后：</p><blockquote><p>alias | jude<br>name  | jude</p></blockquote><p>修改后:</p><blockquote><p>alias | summer<br>name  | jude</p></blockquote><h3 id="2、引用类型的复制"><a href="#2、引用类型的复制" class="headerlink" title="2、引用类型的复制"></a>2、引用类型的复制</h3><p>下面代码中，info、book都是引用类型，它们引用存在栈内存，值存在堆内存，它们的值指向同一块堆内存，栈内存中会复制一份相同的引用。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">let</span> book = &#123;<span class="hljs-attr">title</span>:<span class="hljs-string">&#x27;book&#x27;</span>,<span class="hljs-attr">id</span>:<span class="hljs-number">1</span>&#125;<br><span class="hljs-keyword">let</span> info = book<br>info.title = <span class="hljs-string">&#x27;javascript&#x27;</span><br><span class="hljs-built_in">console</span>.log(book.title) <span class="hljs-comment">// javascript</span><br></code></pre></td></tr></table></figure><h2 id="四、深拷贝与浅拷贝"><a href="#四、深拷贝与浅拷贝" class="headerlink" title="四、深拷贝与浅拷贝"></a>四、深拷贝与浅拷贝</h2><h3 id="1、浅拷贝："><a href="#1、浅拷贝：" class="headerlink" title="1、浅拷贝："></a>1、浅拷贝：</h3><blockquote><p>引用数据类型在复制时，改了其中一个数据的值，另一个数据的值也会跟着改变，这种拷贝方式我们称为浅拷贝。</p></blockquote><h4 id="1-1-Object-asign"><a href="#1-1-Object-asign" class="headerlink" title="1.1 Object.asign()"></a>1.1 Object.asign()</h4><blockquote><p>Object.assign() 方法可以把任意多个的源对象自身的可枚举属性拷贝给目标对象，然后返回目标对象。</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">let</span> obj1 = &#123; <span class="hljs-attr">person</span>: &#123;<span class="hljs-attr">name</span>: <span class="hljs-string">&quot;kobe&quot;</span>, <span class="hljs-attr">age</span>: <span class="hljs-number">41</span>&#125;,<span class="hljs-attr">sports</span>:<span class="hljs-string">&#x27;basketball&#x27;</span> &#125;;<br><span class="hljs-keyword">let</span> obj2 = <span class="hljs-built_in">Object</span>.assign(&#123;&#125;, obj1);<br>obj2.person.name = <span class="hljs-string">&quot;wade&quot;</span>;<br>obj2.sports = <span class="hljs-string">&#x27;football&#x27;</span><br><span class="hljs-built_in">console</span>.log(obj1); <span class="hljs-comment">// &#123; person: &#123; name: &#x27;wade&#x27;, age: 41 &#125;, sports: &#x27;basketball&#x27; &#125;</span><br></code></pre></td></tr></table></figure><h4 id="1-2-扩展运算符"><a href="#1-2-扩展运算符" class="headerlink" title="1.2 扩展运算符"></a>1.2 扩展运算符</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">let</span> obj1 = &#123; <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;Kobe&#x27;</span>, <span class="hljs-attr">address</span>:&#123;<span class="hljs-attr">x</span>:<span class="hljs-number">100</span>,<span class="hljs-attr">y</span>:<span class="hljs-number">100</span>&#125;&#125;<br><span class="hljs-keyword">let</span> obj2= &#123;... obj1&#125;<br>obj1.address.x = <span class="hljs-number">200</span>;<br>obj1.name = <span class="hljs-string">&#x27;wade&#x27;</span><br><span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;obj2&#x27;</span>,obj2) <span class="hljs-comment">// obj2 &#123; name: &#x27;Kobe&#x27;, address: &#123; x: 200, y: 100 &#125; &#125;</span><br></code></pre></td></tr></table></figure><h4 id="1-3-Array-prototype-concat-Array-ptototype-slice"><a href="#1-3-Array-prototype-concat-Array-ptototype-slice" class="headerlink" title="1.3 Array.prototype.concat()/Array.ptototype.slice()"></a>1.3 Array.prototype.concat()/Array.ptototype.slice()</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">let</span> arr = [<span class="hljs-number">1</span>, <span class="hljs-number">3</span>, &#123;<br>    <span class="hljs-attr">username</span>: <span class="hljs-string">&#x27;kobe&#x27;</span><br>&#125;];<br><span class="hljs-keyword">let</span> arr2 = arr.concat();    <br>arr2[<span class="hljs-number">2</span>].username = <span class="hljs-string">&#x27;wade&#x27;</span>;<br><span class="hljs-built_in">console</span>.log(arr); <span class="hljs-comment">//[ 1, 3, &#123; username: &#x27;wade&#x27; &#125; ]</span><br><br><br><span class="hljs-keyword">let</span> arr = [<span class="hljs-number">1</span>, <span class="hljs-number">3</span>, &#123;<br>    <span class="hljs-attr">username</span>: <span class="hljs-string">&#x27; kobe&#x27;</span><br>&#125;];<br><span class="hljs-keyword">let</span> arr3 = arr.slice();<br>arr3[<span class="hljs-number">2</span>].username = <span class="hljs-string">&#x27;wade&#x27;</span><br><span class="hljs-built_in">console</span>.log(arr); <span class="hljs-comment">// [ 1, 3, &#123; username: &#x27;wade&#x27; &#125; ]</span><br><br></code></pre></td></tr></table></figure><h3 id="2、深拷贝："><a href="#2、深拷贝：" class="headerlink" title="2、深拷贝："></a>2、深拷贝：</h3><blockquote><p>引用类型复制到新的变量后，二者是独立的，不会因为一个的改变而影响到另一个<br>实际上就是重新在堆内存中开辟一块新的空间，把原对象的数据拷贝到这个新地址空间里来</p></blockquote><h4 id="2-1-深拷贝方法1："><a href="#2-1-深拷贝方法1：" class="headerlink" title="2.1 深拷贝方法1："></a>2.1 深拷贝方法1：</h4><blockquote><p>将对象转一遍JSON，缺点是只能转化一般常见的数据，function、undefined、正则等类型无法通过这种方法变回来。</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> data = &#123; <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;jude&quot;</span> &#125;;<br><span class="hljs-keyword">const</span> obj = <span class="hljs-built_in">JSON</span>.parse(<span class="hljs-built_in">JSON</span>.stringify(data));<br>obj.age = <span class="hljs-number">20</span>;<br><span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;data = &quot;</span>, data);<span class="hljs-comment">// data = &#123; name:&quot;jude&quot;&#125;</span><br><span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;obj = &quot;</span>, obj);<span class="hljs-comment">// obj = &#123;name:&#x27;jude&#x27;,age:20&#125;</span><br></code></pre></td></tr></table></figure><h4 id="2-2-深拷贝方法2："><a href="#2-2-深拷贝方法2：" class="headerlink" title="2.2 深拷贝方法2："></a>2.2 深拷贝方法2：</h4><blockquote><p>手动去写循环遍历</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> data = [&#123; <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;jude&quot;</span> &#125;];<br><span class="hljs-keyword">let</span> obj = data.map(<span class="hljs-function"><span class="hljs-params">item</span> =&gt;</span> item);<br>obj.push(&#123; <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;summer&quot;</span> &#125;);<br><span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;data = &quot;</span>, data);<span class="hljs-comment">// data = [&#123;name:&#x27;jude&#x27;&#125;]</span><br><span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;obj = &quot;</span>, obj);<span class="hljs-comment">// obj = [&#123;name:&#x27;jude&#x27;,name:&#x27;summer&#x27;&#125;]</span><br><br></code></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> js </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>38、Vue项目中的window.resize</title>
      <link href="/2021/05/19/38-resize/"/>
      <url>/2021/05/19/38-resize/</url>
      
        <content type="html"><![CDATA[<p>Vue项目中使用ECharts可视化图表时，图表自适应大小。根据窗口大小自动改变ECharts图表的宽度。</p><span id="more"></span><h3 id="一、防抖函数"><a href="#一、防抖函数" class="headerlink" title="一、防抖函数"></a>一、防抖函数</h3><p>页面频繁使用window.resize函数会使得页面非常卡顿，需要使用debounce防抖函数（无论触发了多少次回调，都只执行最后一次）。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 函数防抖</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param <span class="hljs-type">&#123;Function&#125;</span> <span class="hljs-variable">func</span></span></span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param <span class="hljs-type">&#123;number&#125;</span> <span class="hljs-variable">delay</span></span></span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param <span class="hljs-type">&#123;boolean&#125;</span> <span class="hljs-variable">immediate</span></span></span><br><span class="hljs-comment"> * <span class="hljs-doctag">@return <span class="hljs-type">&#123;*&#125;</span></span></span><br><span class="hljs-comment"> */</span><br><br><span class="hljs-keyword">export</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">debounce</span>(<span class="hljs-params">func, delay, immediate = <span class="hljs-literal">false</span></span>) </span>&#123;<br>  <span class="hljs-keyword">let</span> timer,context = <span class="hljs-built_in">this</span>;<br>  <span class="hljs-keyword">return</span> <span class="hljs-function">(<span class="hljs-params">...args</span>) =&gt;</span> &#123;<br>    <span class="hljs-keyword">if</span> (immediate) &#123;<br>      func.apply(context, args);<br>      immediate = <span class="hljs-literal">false</span>;<br>      <span class="hljs-keyword">return</span>;<br>    &#125;<br>    <span class="hljs-built_in">clearTimeout</span>(timer);<br>    timer = <span class="hljs-built_in">setTimeout</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>      func.apply(context, args);<br>    &#125;, delay);<br>  &#125;;<br>&#125;<br><br></code></pre></td></tr></table></figure><h3 id="二、resize函数"><a href="#二、resize函数" class="headerlink" title="二、resize函数"></a>二、resize函数</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 工具函数的引入</span><br><span class="hljs-keyword">import</span> &#123; debounce &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@/utils/index.js&#x27;</span>;<br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> &#123;<br>  <span class="hljs-function"><span class="hljs-title">data</span>(<span class="hljs-params"></span>)</span> &#123;<br>    <span class="hljs-keyword">return</span> &#123;<br>      <span class="hljs-attr">myChart</span>: <span class="hljs-literal">null</span>,<br>      <span class="hljs-attr">resizeHandler</span>: <span class="hljs-literal">null</span><br>    &#125;;<br>  &#125;,<br>  <span class="hljs-attr">computed</span>: &#123;<br>    <span class="hljs-comment">// 侧边栏的收缩</span><br>    <span class="hljs-function"><span class="hljs-title">open</span>(<span class="hljs-params"></span>)</span> &#123;<br>      <span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>.$store.state.setting.open;<br>    &#125;<br>  &#125;,<br>  <span class="hljs-function"><span class="hljs-title">mounted</span>(<span class="hljs-params"></span>)</span> &#123;<br>    <span class="hljs-built_in">this</span>.resizeHandler = debounce(<span class="hljs-function">() =&gt;</span> &#123;<br>      <span class="hljs-keyword">if</span> (<span class="hljs-built_in">this</span>.myChart) &#123;<br>        <span class="hljs-built_in">this</span>.myChart.resize();<br>      &#125;<br>    &#125;, <span class="hljs-number">100</span>);<br>    <span class="hljs-built_in">this</span>.initResizeEvent();<br>  &#125;,<br><br>  <span class="hljs-attr">methods</span>: &#123;<br>    <span class="hljs-comment">//监听resize</span><br>    <span class="hljs-function"><span class="hljs-title">initResizeEvent</span>(<span class="hljs-params"></span>)</span> &#123;<br>      <span class="hljs-built_in">window</span>.addEventListener(<span class="hljs-string">&#x27;resize&#x27;</span>, <span class="hljs-built_in">this</span>.resizeHandler);<br>    &#125;,<br>    <span class="hljs-comment">//移除resize</span><br>    <span class="hljs-function"><span class="hljs-title">destroyResizeEvent</span>(<span class="hljs-params"></span>)</span> &#123;<br>      <span class="hljs-built_in">window</span>.removeEventListener(<span class="hljs-string">&#x27;resize&#x27;</span>, <span class="hljs-built_in">this</span>.resizeHandler);<br>    &#125;<br>  &#125;,<br><br>  <span class="hljs-function"><span class="hljs-title">beforeDestroy</span>(<span class="hljs-params"></span>)</span> &#123;<br>    <span class="hljs-built_in">this</span>.destroyResizeEvent();<br>    <span class="hljs-keyword">if</span> (!<span class="hljs-built_in">this</span>.myChart) &#123;<br>      <span class="hljs-keyword">return</span>;<br>    &#125;<br>    <span class="hljs-built_in">this</span>.myChart.dispose();<br>    <span class="hljs-built_in">this</span>.myChart.off(<span class="hljs-string">&#x27;click&#x27;</span>);<br>    <span class="hljs-built_in">this</span>.myChart = <span class="hljs-literal">null</span>;<br>  &#125;,<br><br>  <span class="hljs-function"><span class="hljs-title">activated</span>(<span class="hljs-params"></span>)</span> &#123;<br>    <span class="hljs-built_in">this</span>.initResizeEvent();<br>    <span class="hljs-keyword">if</span> (<span class="hljs-built_in">this</span>.myChart) &#123;<br>      <span class="hljs-built_in">this</span>.myChart.resize();<br>    &#125;<br>  &#125;,<br><br>  <span class="hljs-function"><span class="hljs-title">deactivated</span>(<span class="hljs-params"></span>)</span> &#123;<br>    <span class="hljs-built_in">this</span>.destroyResizeEvent();<br>  &#125;,<br>  <span class="hljs-attr">watch</span>: &#123;<br>    <span class="hljs-function"><span class="hljs-title">open</span>(<span class="hljs-params"></span>)</span> &#123;<br>      <span class="hljs-keyword">if</span> (<span class="hljs-built_in">this</span>.myChart) &#123;<br>        <span class="hljs-built_in">this</span>.myChart.resize();<br>      &#125;<br>    &#125;<br>  &#125;<br>&#125;;<br><br></code></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> dev </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>37、typescript基础</title>
      <link href="/2021/05/15/37-typescript/"/>
      <url>/2021/05/15/37-typescript/</url>
      
        <content type="html"><![CDATA[<p>typescript基础知识,包括typescript的安装、函数、数组、字符串等。</p><span id="more"></span><h3 id="1、typescript的安装"><a href="#1、typescript的安装" class="headerlink" title="1、typescript的安装"></a>1、typescript的安装</h3><blockquote><p>1、安装node</p></blockquote><blockquote><p>2、安装typescript</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">sudo npm install typescript -g  //(mac 则需要添加sudo window则不需要)<br>tsc -v // 查看版本号<br></code></pre></td></tr></table></figure><blockquote><p>3、hello world</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">#</span><span class="bash"> 初始化项目</span><br>npm init -y<br><span class="hljs-meta">#</span><span class="bash"> typescript配置文件</span><br>tsc --init<br><span class="hljs-meta">#</span><span class="bash"> 安装@<span class="hljs-built_in">type</span>/node(解决模块声明问题)</span><br>npm install @types/node --save-dev<br><span class="hljs-meta">#</span><span class="bash"> 创建helloworld.ts文件</span><br>touch helloworld.ts<br></code></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> a:<span class="hljs-built_in">String</span> = <span class="hljs-string">&#x27;hello world&#x27;</span><br><span class="hljs-built_in">console</span>.log(a)<br></code></pre></td></tr></table></figure><blockquote><p>4、将helloworld.ts转换成helloworld.js</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell">tsc helloworld.ts  //将ts文件转换成js文件<br><span class="hljs-meta">#</span><span class="bash"> 运行helloworld.js</span><br>node helloworld.js  // 打印结果hello world<br></code></pre></td></tr></table></figure><h3 id="2、typescript函数的定义方式"><a href="#2、typescript函数的定义方式" class="headerlink" title="2、typescript函数的定义方式"></a>2、typescript函数的定义方式</h3><p>1、函数声明<br>    使用function和函数名来定义一个函数</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs ts"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">search</span>(<span class="hljs-params">time:<span class="hljs-built_in">number</span></span>) : <span class="hljs-title">string</span> </span>&#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;终于找到了丢失&#x27;</span> + time + <span class="hljs-string">&#x27;天的dog--小七&#x27;</span><br>&#125;<br><span class="hljs-keyword">var</span> time = <span class="hljs-number">1</span><br><span class="hljs-keyword">var</span> result : <span class="hljs-built_in">string</span> = search(time)<br><span class="hljs-built_in">console</span>.log(result)  <span class="hljs-comment">// 终于找到了丢失一天的dog--小七</span><br></code></pre></td></tr></table></figure><p>2、函数表达式<br>    将函数赋值给一个变量，变量名就是函数名。通过变量名来调用函数</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs ts"><span class="hljs-keyword">var</span> Adc = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">n1:<span class="hljs-built_in">number</span>,n2:<span class="hljs-built_in">number</span></span>) : <span class="hljs-title">number</span> </span>&#123;<br>    <span class="hljs-keyword">return</span> n1++ + ++n2<br>&#125;<br><span class="hljs-built_in">console</span>.log(Adc(<span class="hljs-number">2</span>,<span class="hljs-number">3</span>))  <span class="hljs-comment">// 6</span><br></code></pre></td></tr></table></figure><p>3、箭头函数<br>    typescript是支持ES6的。</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs ts"><span class="hljs-keyword">var</span> Jungle = (n1:<span class="hljs-built_in">number</span>,<span class="hljs-attr">n2</span>:<span class="hljs-built_in">number</span>) : <span class="hljs-function"><span class="hljs-params">number</span> =&gt;</span> &#123;<br>    <span class="hljs-keyword">return</span> n1 * n2<br>&#125;<br><span class="hljs-built_in">console</span>.log(Jungle(<span class="hljs-number">12</span>,<span class="hljs-number">2</span>) <span class="hljs-comment">// 24</span><br></code></pre></td></tr></table></figure><pre><code>将ts文件转换为js文件：tsc function.ts  =&gt;  生成function.js  =&gt; 运行function.js,node function.js</code></pre><h3 id="3、typescript函数作用域"><a href="#3、typescript函数作用域" class="headerlink" title="3、typescript函数作用域"></a>3、typescript函数作用域</h3><blockquote><p>typescript也是有全局变量和局部变量的</p></blockquote><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs ts"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">star</span>(<span class="hljs-params"></span>):<span class="hljs-title">void</span></span>&#123;<br><span class="hljs-keyword">var</span> Jay = <span class="hljs-string">&#x27;周杰伦&#x27;</span><br>    <span class="hljs-built_in">console</span>.log(Jay)  <span class="hljs-comment">// 周杰伦</span><br>&#125;<br>star()<br><span class="hljs-built_in">console</span>.log(star) <span class="hljs-comment">// [Function:star]</span><br><br><span class="hljs-keyword">var</span> JayChou = <span class="hljs-string">&#x27;周杰伦&#x27;</span>  <span class="hljs-comment">// 此时JayChou是全局变量</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">superstar</span>(<span class="hljs-params"></span>):<span class="hljs-title">void</span></span>&#123;<br><span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;青花瓷是&#x27;</span> + JayChou + <span class="hljs-string">&#x27;演唱的！&#x27;</span>) <span class="hljs-comment">// 青花瓷是周杰伦演唱的！</span><br>&#125;<br>superstar()<br><span class="hljs-built_in">console</span>.log(JayChou) <span class="hljs-comment">// 周杰伦</span><br></code></pre></td></tr></table></figure><p><img src="https://img2018.cnblogs.com/blog/1912711/202001/1912711-20200119154050226-530021968.png"></p><h3 id="4、typescript数组"><a href="#4、typescript数组" class="headerlink" title="4、typescript数组"></a>4、typescript数组</h3><blockquote><p>ts中数据分为值类型和引用类型。</p></blockquote><p>1、什么是引用类型？</p><blockquote><p>引用类型是一种复合类型，引用类型中封装了很多属性，可以通过变量名和属性名来获取属性值或者调用属性的方法。</p></blockquote><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs ts"><span class="hljs-keyword">let</span> Jude = &#123;<br>    <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;Jude&#x27;</span>,<br>    <span class="hljs-attr">age</span>: <span class="hljs-number">28</span>,<br>    <span class="hljs-attr">saySomething</span>: <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<br>        <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;行到水穷处，坐看云起时！&#x27;</span>);<br>    &#125;<br>&#125;<br><span class="hljs-built_in">console</span>.log(Jude.name) <span class="hljs-comment">// Jude</span><br></code></pre></td></tr></table></figure><p>2、元祖– 一种特殊的数组</p><p>数组中允许含有多种类型的元素</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs ts"><span class="hljs-keyword">let</span> arr : [<span class="hljs-built_in">number</span>,<span class="hljs-built_in">string</span>]<br>arr = [<span class="hljs-number">123</span>,<span class="hljs-string">&#x27;123&#x27;</span>]<br><span class="hljs-comment">// console.log(arr) // [123,&#x27;123]</span><br></code></pre></td></tr></table></figure><p>当我们写成这个样子，是会报错的</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs ts"><span class="hljs-keyword">let</span> arr : [<span class="hljs-built_in">number</span>,sting]<br>arr = [<span class="hljs-string">&#x27;123&#x27;</span>,<span class="hljs-number">123</span>]<br></code></pre></td></tr></table></figure><pre><code>error1: Type &#39;string&#39; is not assignable to type &#39;number&#39;. error2: Type &#39;number&#39; is not assignable to type &#39;string&#39;.</code></pre><p><img src="https://img2018.cnblogs.com/blog/1912711/202001/1912711-20200119172755771-1404695424.png"></p><h3 id="5、typescript字符串"><a href="#5、typescript字符串" class="headerlink" title="5、typescript字符串"></a>5、typescript字符串</h3><p>1、Typescript中字符串的两种类型：</p><blockquote><p>基本类型字符串：由单引号或者双引号’包裹的’一串字符;</p></blockquote><blockquote><p>引用类型字符串：由new实例化的String类型。</p></blockquote><p>2、基本类型的字符串可以直接使用引用类型的属性和方法</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs ts"><span class="hljs-keyword">let</span> Jude: <span class="hljs-built_in">string</span> = <span class="hljs-string">&#x27;YQ&#x27;</span><br><span class="hljs-keyword">let</span> JudeYQ: <span class="hljs-built_in">String</span> = <span class="hljs-keyword">new</span> <span class="hljs-built_in">String</span>(<span class="hljs-string">&#x27;JudeYQ&#x27;</span>)<br><span class="hljs-built_in">console</span>.log(Jude) <span class="hljs-comment">// YQ</span><br><span class="hljs-built_in">console</span>.log(JudeYQ) <span class="hljs-comment">// [String:&#x27;JudeYQ&#x27;]</span><br><span class="hljs-comment">// 基本类型的字符串可以直接使用引用类型的属性和方法</span><br><span class="hljs-built_in">console</span>.log(Jude.length) <span class="hljs-comment">// 2</span><br><span class="hljs-built_in">console</span>.log(JudeYQ.length)  <span class="hljs-comment">// 6</span><br></code></pre></td></tr></table></figure><p>3、字符串常用的方法</p><blockquote><p>字符串查找 indexOf()和lastIndexOf()，二者返回的都是字符串的下标。</p></blockquote><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs ts"><span class="hljs-keyword">let</span> word:<span class="hljs-built_in">string</span> = <span class="hljs-string">&#x27;西虹人瘦，燃烧我的卡路里&#x27;</span><br><span class="hljs-keyword">let</span> Calorie: <span class="hljs-built_in">string</span> = <span class="hljs-string">&#x27;卡路里&#x27;</span><br><span class="hljs-built_in">console</span>.log(word.indexOf(Calorie)) <span class="hljs-comment">// 9</span><br><span class="hljs-keyword">let</span> ST:<span class="hljs-built_in">string</span> = <span class="hljs-string">&#x27;沈腾&#x27;</span><br><span class="hljs-built_in">console</span>.log(word.indexOf(ST)) <span class="hljs-comment">// -1 没有查找到返回-1</span><br><span class="hljs-built_in">console</span>.log(word.lastIndexOf(Calorie)) <span class="hljs-comment">// 9 从字符串尾部开始查找字符串的位置 和indexOf（）返回的都是字符串下标</span><br><br></code></pre></td></tr></table></figure><blockquote><p>字符串的截取， substring()</p></blockquote><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs ts"><span class="hljs-comment">// 字符串的截取</span><br><span class="hljs-built_in">console</span>.log(word.substring(<span class="hljs-number">9</span>)) <span class="hljs-comment">// 卡路里</span><br><span class="hljs-built_in">console</span>.log(word.substring(<span class="hljs-number">9</span>,<span class="hljs-number">12</span>)) <span class="hljs-comment">// 卡路里</span><br></code></pre></td></tr></table></figure><p>3、字符串的替换,replace()</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ts"><span class="hljs-built_in">console</span>.log(word.replace(Calorie,<span class="hljs-string">&#x27;腹肌&#x27;</span>))  <span class="hljs-comment">// 西虹人瘦，燃烧我的腹肌</span><br></code></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> typescript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>36、父子组件的创建和挂载顺序</title>
      <link href="/2021/05/09/36-component-mounted/"/>
      <url>/2021/05/09/36-component-mounted/</url>
      
        <content type="html"><![CDATA[<span id="more"></span><p>1、创建过程自上而下，挂载过程自下而上</p><p>父组件 created<br>子组件created<br>子组件mounted<br>父组件mounted</p><p>2、原因：</p><p>Vue创建过程是一个递归过程，先创建父组件，有子组件就会创建子组件，因此创建时先有父组件再有子组件；子组件首次创建会添加mounted钩子到队列，等到patch结束再执行他们，可见子组件的mounted钩子是先进入到队列中的，因此等到patch结束执行这些钩子时也先执行。</p>]]></content>
      
      
      
        <tags>
            
            <tag> vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>34、iTerms、Node版本管理工具、nrm等的使用方法</title>
      <link href="/2021/05/02/34-tool/"/>
      <url>/2021/05/02/34-tool/</url>
      
        <content type="html"><![CDATA[<p>一些开发过程中需要使用的工具整理</p><span id="more"></span><h2 id="iTerm2"><a href="#iTerm2" class="headerlink" title="iTerm2"></a>iTerm2</h2><p>快捷键</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">commond + t              // 新建标签页<br>commond + w              // 关闭标签<br>commond + enter          // 切换全屏(第一次切换至全屏，再commond + enter恢复到之前窗口) <br>commond + 左右方向键       // 切换标签<br>commond + +              // 窗口和字体变大<br>commond + -              // 窗口和字体变小<br></code></pre></td></tr></table></figure><h2 id="Node版本管理工具"><a href="#Node版本管理工具" class="headerlink" title="Node版本管理工具"></a>Node版本管理工具</h2><p>在开发的工程中，我们可能需要经常切换node版本来应对不同的开发环境，所以需要经常使用不同版本的node。</p><p>一、安装npm插件n ,通过n模块来管理node版本</p><p>1、全局安装n模块</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">npm instlal -g n <br></code></pre></td></tr></table></figure><p>2、安装当前稳定版本</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">n stable或者sudo n stable<br></code></pre></td></tr></table></figure><p>3、安装最新版本的</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">n latest或者sudo n latest<br></code></pre></td></tr></table></figure><p>4、安装指定版本的node</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">n v8.16.0<br></code></pre></td></tr></table></figure><p>5、卸载指定的node版本</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">n rm v8.16.0<br></code></pre></td></tr></table></figure><p>二、使用nvm管理node版本<br>1、安装nvm </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">brew install nvm<br></code></pre></td></tr></table></figure><p>2、使用nvm安装node版本</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">// 安装最新版本<br>nvm isntall node<br>// 安装指定版本<br>nvm install 8.16.0<br></code></pre></td></tr></table></figure><p>3、查看所有版本</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">nvm ls<br></code></pre></td></tr></table></figure><p>4、切换node版本</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">// 使用最新版本<br>nvm use node       <br>// 使用指定版本<br>nvm use 8.16.0<br></code></pre></td></tr></table></figure><p>通常我会使用第二种方式<br>例如：</p><p>我在一个项目中使用的是<code>node@6.13.2</code>,</p><p>新项目使用的是<code>node@8.16.0</code>,</p><p>先要安装<code>node@8.16.0   nvm install 8.16.0</code></p><p>然后<code>nvm use 8.16.0</code></p><p>5、卸载指定版本的node</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">nvm uninstall  v6.13.2<br></code></pre></td></tr></table></figure><p>6、设置系统默认的node版本</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">nvm alias default v8.16.0<br></code></pre></td></tr></table></figure><p>这样使用的node的默认版本为8.16.0</p><h2 id="nrm切换npm源"><a href="#nrm切换npm源" class="headerlink" title="nrm切换npm源"></a>nrm切换npm源</h2><p>因为在使用npm下载插件的过程中速度太慢了（npm源在国外），所以找到一个切换源的方法：nrm。</p><p>一、切换成淘宝源</p><p>1、config命令的使用</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">npm config set registry https://registry.npm.taobao.org<br></code></pre></td></tr></table></figure><p>2、命令行指定</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">npm i node --registry https://registry.npm.taobao.org info underscore <br></code></pre></td></tr></table></figure><p>3、编辑~/.npmrc，加入以下内容：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">registry = https://registry.npm.taobao.org<br></code></pre></td></tr></table></figure><p>二、nrm的使用</p><blockquote><p>nrm是一个可以切换、添加/删除/测试源的工具</p></blockquote><p>1、全局安装nrm</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">npm install -g nrm  // mac如果出现权限问题，加上sudo<br></code></pre></td></tr></table></figure><p>2、安装完成，查看所有的可用源</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">nrm ls<br></code></pre></td></tr></table></figure><p>3、添加源</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">nrm add 源的名称  https:// 地址<br></code></pre></td></tr></table></figure><p>4、删除原</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">nrm del 源的名字<br></code></pre></td></tr></table></figure><p>5、切换到某个源</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">nrm use 源的名字<br></code></pre></td></tr></table></figure><p>6、测试源速度</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">nrm test<br></code></pre></td></tr></table></figure><p>例如，我需要使用淘宝源，只需nrm use taobao就可以了，cnpm不要使用，容易出现莫名其妙的错误。</p><h2 id="前端常用的linux命令"><a href="#前端常用的linux命令" class="headerlink" title="前端常用的linux命令"></a>前端常用的linux命令</h2><p>常用的Linux命令</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">1、vim test.html   创建新的文件 <br>   vim + 文件名.后缀<br>2、ls     查看当前文件夹下的文件<br>    ls -a  列出所有文件，包括隐藏文件<br>    ls -1  每行列出一个文件，以单列形式列出<br>3、cat test.html  将该文件内容打印显示出来<br>   cat test1.html<br>   cat test2.html<br>   cat test1.html     test2.html&gt;test3.html<br>   cat test3.html   将多个文件合并到目标文件中。<br><br>   cat test1.html<br>   cat test2.html<br>   cat test1.html test2.html&gt;&gt;test4.html  将几个文件附加到目录文件中<br>4、mv   移动或重命名文件和目录<br>mv file1.txt file2.txt   将file1文件命名为file2<br>用法：<br> cat 1.txt<br> mv 1.txt 2.txt<br> mv file1.txt file2  将file1文本移动到file2目录  <br>5、touch  file   命令用于修改文件或者目录的时间属性，包括存取时间和更改时间。若文件不存在，系统会建立一个新的空白文件。<br> touch newfile<br>6、mkdir file    创建文件夹<br>7、cd ../  返回当前文件夹的上一层<br> cd /    返回到根目录下<br>8、rm -rf folder  删除文件夹<br></code></pre></td></tr></table></figure><h2 id="eslint的配置"><a href="#eslint的配置" class="headerlink" title="eslint的配置"></a>eslint的配置</h2><p>常用的配置</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">module.exports = &#123;<br>  root: true,<br>  env: &#123;<br>    node: true<br>  &#125;,<br>  &#x27;extends&#x27;: [<br>    &#x27;plugin:vue/essential&#x27;,<br>    &#x27;@vue/standard&#x27;<br>  ],<br>  rules: &#123;<br>    &#x27;no-console&#x27;: process.env.NODE_ENV === &#x27;production&#x27; ? &#x27;error&#x27; : &#x27;off&#x27;, // 生产环境 无console.log<br>    &#x27;no-debugger&#x27;: process.env.NODE_ENV === &#x27;production&#x27; ? &#x27;error&#x27; : &#x27;off&#x27;, // 生产环境 无debugger<br>    &#x27;indent&#x27;: &#x27;off&#x27;,<br>    // 函数定义时括号前面要不要有空格<br>    &#x27;space-before-function-paren&#x27;: &#x27;off&#x27;<br>  &#125;,<br>  parserOptions: &#123;<br>    parser: &#x27;babel-eslint&#x27;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="git提交代码"><a href="#git提交代码" class="headerlink" title="git提交代码"></a>git提交代码</h2><p>一、初始化本地仓库，提交代码，提交到远程git仓库</p><p>1、初始化代码仓库</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">git init<br></code></pre></td></tr></table></figure><p>2、将当前目录下的所有文件放到暂存区</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">git add .<br></code></pre></td></tr></table></figure><p>3、查看文件状态</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">git status<br></code></pre></td></tr></table></figure><p>4、添加提交的描述信息</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">git commit -m &quot;提交的描述信息&quot;<br></code></pre></td></tr></table></figure><p>5、远程仓库地址</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">git remote add origin &quot;远程仓库地址&quot;<br></code></pre></td></tr></table></figure><p>6、推送到远程仓库</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">git push -u origin master<br></code></pre></td></tr></table></figure><p>二、创建分支，提交代码到分支</p><p>1、创建切换分支</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">git checkout -b dev  dev为分支名称<br>git add .<br>git commit -m &#x27;描述&#x27;<br>git push --set-upstream origin dev1   将分支推送到远程仓库<br>切换到主分支<br>git checkout master<br>git merge dev  将dev合并到主分支<br>git push origin master  推送到远程仓库<br></code></pre></td></tr></table></figure><p>三、克隆指定分支</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">git clone -b master git@gitee.com:username/projectname.git<br>git clone -b admin git@gitee.com:username/projectname.git<br></code></pre></td></tr></table></figure><p>四、git reflog</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">查看所有分支的所有操作记录（包括已经被删除的 commit 记录和 reset 的操作）<br>执行 git reset --hard HEAD~1，退回到上一个版本，用git log则是看不出来被删除的commitid，用git reflog则可以看到被删除的commitid，我们就可以买后悔药，恢复到被删除的那个版本。<br></code></pre></td></tr></table></figure><h2 id="vscode快捷键"><a href="#vscode快捷键" class="headerlink" title="vscode快捷键"></a>vscode快捷键</h2><table><thead><tr><th>快捷键</th><th>功能</th></tr></thead><tbody><tr><td>commond + B</td><td>显示/隐藏侧边栏</td></tr><tr><td>commond + shift + p</td><td>显示命令窗口</td></tr><tr><td>commond +</td><td>创建多个编辑器</td></tr><tr><td>commond + 1、2</td><td>聚焦到第1、第2个编辑器</td></tr><tr><td>commond + J 或者 Ctrl + `</td><td>显示隐藏控制台</td></tr><tr><td>commond + W</td><td>关闭当前文件</td></tr><tr><td>option + 左右方向键</td><td>单词之间移动光标</td></tr><tr><td>commond + 左右方向键</td><td>移动光标至最前、最后</td></tr><tr><td>commond + shift + \</td><td>代码块之间移动光标</td></tr></tbody></table><blockquote><p>fileheader插件的使用</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">commond+shift+p -&gt; fileheader -&gt; enter<br><br>/*<br> * @Author: Jude <br> * @Date: 2020-07-24 16:39:41 <br> * @Last Modified by: Jude<br> * @Last Modified time: 2020-07-24 16:40:34<br> */<br></code></pre></td></tr></table></figure><h2 id="Markdown语法"><a href="#Markdown语法" class="headerlink" title="Markdown语法"></a>Markdown语法</h2><p>Markdown标题</p><p>使用#号标记，使用 # 号可表示 1-6 级标题，一级标题对应一个 # 号，二级标题对应两个 # 号，以此类推。</p><p>1、Markdown段落</p><p>段落的换行是使用两个以上空格加上回车。</p><blockquote><p>字体:</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">*斜体文本*<br></code></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">_斜体文本_<br></code></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">**粗体文本**<br></code></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">__粗体文本__<br></code></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">***粗斜体文本***<br></code></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">___粗斜体文本___<br></code></pre></td></tr></table></figure><blockquote><p>分割线</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">***<br><br>* * *<br><br>*****<br><br>- - -<br><br>----------<br></code></pre></td></tr></table></figure><blockquote><p>删除线、下划线、脚注</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">~~删除线~~<br>&lt;u&gt;下划线&lt;/u&gt;<br>[^Vue]:Vuejs是目前最流行的web开发框架之一。<br></code></pre></td></tr></table></figure><p>2、Markdown列表</p><p>Markdown 支持有序列表和无序列表。</p><p>（1）、无序列表使用星号(*)、加号(+)或是减号(-)作为列表标记，这些标记后面要添加一个空格，然后再填写内容：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">* 第一项<br>* 第二项<br>* 第三项<br><br>+ 第一项<br>+ 第二项<br>+ 第三项<br><br><br>- 第一项<br>- 第二项<br>- 第三项<br></code></pre></td></tr></table></figure><p>（2）、有序列表：有序列表使用数字并加上 . 号来表示。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">1. 第一项<br>2. 第二项<br>3. 第三项<br></code></pre></td></tr></table></figure><p>（3）、列表嵌套：列表嵌套只需在子列表中的选项前面添加四个空格即可</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">1. 第一项：<br>    - 第一项嵌套的第一个元素<br>    - 第一项嵌套的第二个元素<br>2. 第二项：<br>    - 第二项嵌套的第一个元素<br>    - 第二项嵌套的第二个元素<br></code></pre></td></tr></table></figure><p>4、Markdown区块</p><p>Markdown 区块引用是在段落开头使用 &gt; 符号 ，然后后面紧跟一个空格符号</p><blockquote><p>区块的嵌套</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">&gt; 最外层<br>&gt; &gt; 第一层嵌套<br>&gt; &gt; &gt; 第二层嵌套<br></code></pre></td></tr></table></figure><blockquote><p>区块中使用列表</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">&gt; 区块中使用列表<br>&gt; 1. 第一项<br>&gt; 2. 第二项<br>&gt; + 第一项<br>&gt; + 第二项<br>&gt; + 第三项<br></code></pre></td></tr></table></figure><blockquote><p>列表中使用区块</p></blockquote><p>如果要在列表项目内放进区块，那么就需要在 &gt; 前添加四个空格的缩进</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">* 第一项<br>    &gt; vuejs<br>    &gt; JavaScript框架<br>* 第二项<br></code></pre></td></tr></table></figure><p>5、Markdown链接和图片</p><blockquote><p>链接</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">[链接名称](链接地址)<br><br>或者<br><br>&lt;链接地址&gt;<br></code></pre></td></tr></table></figure><blockquote><p>图片</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">![alt 属性文本](图片地址)<br><br>![alt 属性文本](图片地址 &quot;可选标题&quot;)<br><br>![RUNOOB 图标](http://static.runoob.com/images/runoob-logo.png)<br><br>![RUNOOB 图标](http://static.runoob.com/images/runoob-logo.png &quot;RUNOOB&quot;)<br></code></pre></td></tr></table></figure><p>6、Markdown表格</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">|  表头   | 表头  |<br>|  ----  | ----  |<br>| 单元格  | 单元格 |<br>| 单元格  | 单元格 |<br></code></pre></td></tr></table></figure><p>我们可以设置表格的对齐方式：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">-: 设置内容和标题栏居右对齐。<br><br>:- 设置内容和标题栏居左对齐。<br><br>:-: 设置内容和标题栏居中对齐。<br></code></pre></td></tr></table></figure><h2 id="HBuilder真机调试"><a href="#HBuilder真机调试" class="headerlink" title="HBuilder真机调试"></a>HBuilder真机调试</h2><p>1、小米手机开发者模式如何打开（MIUI 11.0.4）</p><p>步骤：设置–我的设备–全部参数–（点击）MINI版本;</p><p>2、手机连接Mac：</p><p>Mac的关于本机–系统报告–USB–你所连接的device–厂商ID</p><p>3、打开Mac终端：</p><p>在终端执行如下命令：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">echo xxxxxx &gt;&gt; ~/.android/adb_usb.ini （“xxxxxx”为厂商ID);<br></code></pre></td></tr></table></figure><p>4、重启HBuilderX;</p><p>这里如果出现了问题需要切换到HBuilderX自带的adb目录；</p><p>路径为：/Applications/HBuilderX-Alpha.app/Contents/HBuilderX/plugins/launcher/tools/adbs</p><p>在adbs目录下运行Terminal，输入：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">./adb kill-server<br></code></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> tool </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>35、数组方法</title>
      <link href="/2021/05/02/35-array/"/>
      <url>/2021/05/02/35-array/</url>
      
        <content type="html"><![CDATA[<p>js 常用数组方法整理,包括常用的数组常用方法、高阶函数 forEach、filter、map。</p><span id="more"></span><h3 id="1、常用数组方法"><a href="#1、常用数组方法" class="headerlink" title="1、常用数组方法"></a>1、常用数组方法</h3><details><summary>点击展示代码</summary><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 1、删除数组的最后一项  pop()</span><br><span class="hljs-keyword">var</span> fruits = [<span class="hljs-string">&quot;Banana&quot;</span>, <span class="hljs-string">&quot;Orange&quot;</span>, <span class="hljs-string">&quot;Apple&quot;</span>, <span class="hljs-string">&quot;Mango&quot;</span>];<br>fruits.pop();<br><span class="hljs-built_in">console</span>.log(fruits); <span class="hljs-comment">// &quot;Banana&quot;, &quot;Orange&quot;, &quot;Apple&quot;</span><br><br><span class="hljs-keyword">var</span> x = fruits.pop(); <span class="hljs-comment">// Mango</span><br><br><span class="hljs-comment">// 2、数组结尾添加一个新元素  push()</span><br><span class="hljs-keyword">var</span> fruits = [<span class="hljs-string">&quot;Banana&quot;</span>, <span class="hljs-string">&quot;Orange&quot;</span>, <span class="hljs-string">&quot;Apple&quot;</span>, <span class="hljs-string">&quot;Mango&quot;</span>];<br>fruits.push(<span class="hljs-string">&quot;Kiwi&quot;</span>); <span class="hljs-comment">//&quot;Banana&quot;, &quot;Orange&quot;, &quot;Apple&quot;, &quot;Mango&quot;,&quot;Kiwi&quot;</span><br><br><span class="hljs-keyword">var</span> x = fruits.push(<span class="hljs-string">&quot;Kiwi&quot;</span>); <span class="hljs-comment">// 5</span><br><br><span class="hljs-comment">// 3、删除数组第一个元素    shift()</span><br><span class="hljs-keyword">var</span> fruits = [<span class="hljs-string">&quot;Banana&quot;</span>, <span class="hljs-string">&quot;Orange&quot;</span>, <span class="hljs-string">&quot;Apple&quot;</span>, <span class="hljs-string">&quot;Mango&quot;</span>];<br>fruits.shift(); <span class="hljs-comment">// &quot;Orange&quot;, &quot;Apple&quot;, &quot;Mango&quot;</span><br><br><span class="hljs-comment">// 4、数组开头返回一个新元素   返回新数组长度   unshift()</span><br><span class="hljs-keyword">var</span> fruits = [<span class="hljs-string">&quot;Banana&quot;</span>, <span class="hljs-string">&quot;Orange&quot;</span>, <span class="hljs-string">&quot;Apple&quot;</span>, <span class="hljs-string">&quot;Mango&quot;</span>];<br>fruits.unshift(<span class="hljs-string">&quot;Lemon&quot;</span>); <span class="hljs-comment">//&quot;Lemon&quot; &quot;Banana&quot;, &quot;Orange&quot;, &quot;Apple&quot;, &quot;Mango&quot;</span><br><br><span class="hljs-comment">// 5、删除元素 delete  会留下数组未定义的空洞  可以使用pop shift替代</span><br><span class="hljs-keyword">var</span> fruits = [<span class="hljs-string">&quot;Banana&quot;</span>, <span class="hljs-string">&quot;Orange&quot;</span>, <span class="hljs-string">&quot;Apple&quot;</span>, <span class="hljs-string">&quot;Mango&quot;</span>];<br><span class="hljs-keyword">delete</span> fruits[<span class="hljs-number">0</span>]; <span class="hljs-comment">// empty,&quot;Orange&quot;, &quot;Apple&quot;, &quot;Mango&quot;</span><br><br><span class="hljs-comment">// 6、拼接数组  splice()  第一个参数 2 定义了应添加新元素的位置   第二个参数 定义应删除多少元素  其余参数  定义要添加的新元素  返回一个包含已删除项的数组</span><br><span class="hljs-keyword">var</span> fruits = [<span class="hljs-string">&quot;Banana&quot;</span>, <span class="hljs-string">&quot;Orange&quot;</span>, <span class="hljs-string">&quot;Apple&quot;</span>, <span class="hljs-string">&quot;Mango&quot;</span>];<br>fruits.splice(<span class="hljs-number">2</span>, <span class="hljs-number">0</span>, <span class="hljs-string">&quot;Lemon&quot;</span>, <span class="hljs-string">&quot;Kiwi&quot;</span>); <span class="hljs-comment">// &quot;Banana&quot;, &quot;Orange&quot;, &quot;Lemon&quot;, &quot;Kiwi&quot;, &quot;Apple&quot;, &quot;Mango&quot;</span><br>fruits.splice(<span class="hljs-number">2</span>, <span class="hljs-number">2</span>, <span class="hljs-string">&quot;Lemon&quot;</span>, <span class="hljs-string">&quot;Kiwi&quot;</span>); <span class="hljs-comment">// &quot;Banana&quot;, &quot;Orange&quot;, &quot;Lemon&quot;, &quot;Kiwi&quot;,</span><br><br><span class="hljs-comment">// 7、删除元素 splice()  在数组中不留“空洞”的情况下移除元素</span><br><span class="hljs-keyword">var</span> fruits = [<span class="hljs-string">&quot;Banana&quot;</span>, <span class="hljs-string">&quot;Orange&quot;</span>, <span class="hljs-string">&quot;Apple&quot;</span>, <span class="hljs-string">&quot;Mango&quot;</span>];<br>fruits.splice(<span class="hljs-number">0</span>, <span class="hljs-number">1</span>); <span class="hljs-comment">//&quot;Orange&quot;, &quot;Apple&quot;, &quot;Mango&quot;</span><br><br><span class="hljs-comment">// 8、合并数组 concat()</span><br><span class="hljs-keyword">var</span> myGirls = [<span class="hljs-string">&quot;Cecilie&quot;</span>, <span class="hljs-string">&quot;Lone&quot;</span>];<br><span class="hljs-keyword">var</span> myBoys = [<span class="hljs-string">&quot;Emil&quot;</span>, <span class="hljs-string">&quot;Tobias&quot;</span>, <span class="hljs-string">&quot;Linus&quot;</span>];<br><span class="hljs-keyword">var</span> myChildren = myGirls.concat(myBoys);<br><br><span class="hljs-comment">// 9、裁剪数组 slice()   源数组不会删除任何元素   第一个参数  开始选取的元素  第二个参数  结束参数为止（不包含）</span><br><span class="hljs-keyword">var</span> fruits = [<span class="hljs-string">&quot;Banana&quot;</span>, <span class="hljs-string">&quot;Orange&quot;</span>, <span class="hljs-string">&quot;Lemon&quot;</span>, <span class="hljs-string">&quot;Apple&quot;</span>, <span class="hljs-string">&quot;Mango&quot;</span>];<br><span class="hljs-keyword">var</span> citrus = fruits.slice(<span class="hljs-number">1</span>); <span class="hljs-comment">// &quot;Orange&quot;, &quot;Lemon&quot;, &quot;Apple&quot;, &quot;Mango&quot;</span><br><br><span class="hljs-keyword">var</span> fruits = [<span class="hljs-string">&quot;Banana&quot;</span>, <span class="hljs-string">&quot;Orange&quot;</span>, <span class="hljs-string">&quot;Lemon&quot;</span>, <span class="hljs-string">&quot;Apple&quot;</span>, <span class="hljs-string">&quot;Mango&quot;</span>];<br><span class="hljs-keyword">var</span> citrus = fruits.slice(<span class="hljs-number">1</span>, <span class="hljs-number">3</span>); <span class="hljs-comment">// &quot;Orange&quot;, &quot;Lemon&quot;   第2个元素 到 第4个元素  截取结果为第2个和第3个元素</span><br><br><span class="hljs-comment">// 10、数组元素结合成字符串 join() 和 toString()</span><br><span class="hljs-keyword">var</span> fruits = [<span class="hljs-string">&quot;Banana&quot;</span>, <span class="hljs-string">&quot;Orange&quot;</span>, <span class="hljs-string">&quot;Apple&quot;</span>, <span class="hljs-string">&quot;Mango&quot;</span>];<br>fruits.join(<span class="hljs-string">&quot;,&quot;</span>); <span class="hljs-comment">// Banana,Orange,Apple,Mango</span><br>fruits.toString(); <span class="hljs-comment">// Banana,Orange,Apple,Mango</span><br></code></pre></td></tr></table></figure></details><h3 id="2、高阶函数"><a href="#2、高阶函数" class="headerlink" title="2、高阶函数"></a>2、高阶函数</h3><h4 id="1、forEach"><a href="#1、forEach" class="headerlink" title="1、forEach"></a>1、forEach</h4><blockquote><p>forEach()方法对数组的每个元素执行一次给定的函数。</p></blockquote><p>for example：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> array = [<span class="hljs-string">&quot;a&quot;</span>, <span class="hljs-string">&quot;b&quot;</span>, <span class="hljs-string">&quot;c&quot;</span>];<br>array.forEach(<span class="hljs-function">(<span class="hljs-params">e</span>) =&gt;</span> &#123;<br>  <span class="hljs-built_in">console</span>.log(e); <span class="hljs-comment">// &#x27;a&#x27; &#x27;b&#x27; &#x27;c&#x27;</span><br>&#125;);<br></code></pre></td></tr></table></figure><p>语法：arr.forEach(callback(currentValue [, index [, array]])[, thisArg])</p><p>参数介绍：</p><pre><code>callback：为数组中的每个元素执行的函数，该函数接收1~3个参数currentValue：数组中正在处理的当前元素index: 数组中正在处理的当前元素的索引array: forEach()正在操作的数组   数组对象本身thisArg：可选参数。当执行回调函数callback时，用作this的值。</code></pre><p>常见用法：</p><h5 id="（1）稀疏数组"><a href="#（1）稀疏数组" class="headerlink" title="（1）稀疏数组"></a>（1）稀疏数组</h5><blockquote><p>不对未初始化的值进行任何操作</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> arratSpace = [<span class="hljs-number">1</span>, <span class="hljs-number">3</span>, , <span class="hljs-number">7</span>];<br><span class="hljs-keyword">let</span> numCallbackRuns = <span class="hljs-number">0</span>;<br>arratSpace.forEach(<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">e</span>) </span>&#123;<br>  <span class="hljs-built_in">console</span>.log(e);<br>  numCallbackRuns++;<br>&#125;);<br><br><span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;numCallbackRuns:&quot;</span>, numCallbackRuns);<br></code></pre></td></tr></table></figure><h5 id="2-for-循环转换成-forEach"><a href="#2-for-循环转换成-forEach" class="headerlink" title="(2)for 循环转换成 forEach"></a>(2)for 循环转换成 forEach</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> items = [<span class="hljs-string">&quot;1&quot;</span>, <span class="hljs-string">&quot;2&quot;</span>, <span class="hljs-string">&quot;3&quot;</span>, <span class="hljs-string">&quot;4&quot;</span>];<br><span class="hljs-keyword">const</span> copy = [];<br><br><span class="hljs-comment">//for循环</span><br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> i = <span class="hljs-number">0</span>; i &lt; items.length; i++) &#123;<br>  copey.push(items[i]);<br>&#125;<br><br><span class="hljs-comment">// forEach</span><br>items.forEach(<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">itme</span>) </span>&#123;<br>  copy.push(item);<br>&#125;);<br></code></pre></td></tr></table></figure><h5 id="3-thisArg-使用箭头函数-thisArg-参数会被忽略，因为箭头函数绑定了-this-值"><a href="#3-thisArg-使用箭头函数-thisArg-参数会被忽略，因为箭头函数绑定了-this-值" class="headerlink" title="(3)thisArg 使用箭头函数 thisArg 参数会被忽略，因为箭头函数绑定了 this 值"></a>(3)thisArg 使用箭头函数 thisArg 参数会被忽略，因为箭头函数绑定了 this 值</h5><h5 id="4-对象复制器函数"><a href="#4-对象复制器函数" class="headerlink" title="(4)对象复制器函数"></a>(4)对象复制器函数</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">copy</span>(<span class="hljs-params">obj</span>) </span>&#123;<br>  <span class="hljs-keyword">const</span> copy = <span class="hljs-built_in">Object</span>.create(<span class="hljs-built_in">Object</span>.getPrototypeOf(obj));<br>  <span class="hljs-keyword">const</span> propNames = <span class="hljs-built_in">Object</span>.getOwnPropertyNames(obj);<br><br>  propNames.forEach(<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">name</span>) </span>&#123;<br>    <span class="hljs-keyword">const</span> desc = <span class="hljs-built_in">Object</span>.getOwnPropertyDescriptor(obj, name);<br>    <span class="hljs-built_in">Object</span>.defineProperty(copy, name, desc);<br>  &#125;);<br><br>  <span class="hljs-keyword">return</span> copy;<br>&#125;<br><br><span class="hljs-keyword">const</span> obj1 = &#123; <span class="hljs-attr">a</span>: <span class="hljs-number">1</span>, <span class="hljs-attr">b</span>: <span class="hljs-number">2</span> &#125;;<br><br><span class="hljs-keyword">const</span> obj2 = copy(obj1); <span class="hljs-comment">// obj2看起来和obj1一模一样</span><br></code></pre></td></tr></table></figure><h5 id="5-数组在迭代时被修改了，则其他元素会被跳过"><a href="#5-数组在迭代时被修改了，则其他元素会被跳过" class="headerlink" title="(5)数组在迭代时被修改了，则其他元素会被跳过"></a>(5)数组在迭代时被修改了，则其他元素会被跳过</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> words = [<span class="hljs-string">&quot;one&quot;</span>, <span class="hljs-string">&quot;two&quot;</span>, <span class="hljs-string">&quot;three&quot;</span>, <span class="hljs-string">&quot;four&quot;</span>];<br>words.forEach(<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">word</span>) </span>&#123;<br>  <span class="hljs-built_in">console</span>.log(word);<br>  <span class="hljs-keyword">if</span> (word === <span class="hljs-string">&quot;two&quot;</span>) &#123;<br>    words.shift();<br>  &#125;<br>&#125;);<br></code></pre></td></tr></table></figure><h5 id="6-promise-或-async-函数的使用"><a href="#6-promise-或-async-函数的使用" class="headerlink" title="(6)promise 或 async 函数的使用"></a>(6)promise 或 async 函数的使用</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">let</span> ratings = [<span class="hljs-number">5</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>];<br><br><span class="hljs-keyword">let</span> sum = <span class="hljs-number">0</span>;<br><br><span class="hljs-keyword">let</span> sumFunction = <span class="hljs-keyword">async</span> <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">a, b</span>) </span>&#123;<br>  <span class="hljs-keyword">return</span> a + b;<br>&#125;;<br><br>ratings.forEach(<span class="hljs-keyword">async</span> <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">rating</span>) </span>&#123;<br>  sum = <span class="hljs-keyword">await</span> sumFunction(sum, rating);<br>&#125;);<br><br><span class="hljs-built_in">console</span>.log(sum); <span class="hljs-comment">// 0</span><br></code></pre></td></tr></table></figure><h3 id="2、filter"><a href="#2、filter" class="headerlink" title="2、filter"></a>2、filter</h3><blockquote><p>filter()创建一个新数组，其包含通过所提供函数实现的测试的所有元素。 返回满足条件的新数组，不满足则返回空数组。</p></blockquote><p>for example</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> words = [<span class="hljs-string">&quot;111&quot;</span>, <span class="hljs-string">&quot;222&quot;</span>, <span class="hljs-string">&quot;333333&quot;</span>, <span class="hljs-string">&quot;4444444&quot;</span>, <span class="hljs-string">&quot;55555555&quot;</span>];<br><span class="hljs-keyword">const</span> result = words.filter(<span class="hljs-function">(<span class="hljs-params">word</span>) =&gt;</span> &#123;<br>  word.length &gt; <span class="hljs-number">5</span>;<br>&#125;);<br><br><span class="hljs-built_in">console</span>.log(result); <span class="hljs-comment">// 333333  4444444    55555555</span><br></code></pre></td></tr></table></figure><p>语法：var newArray = arr.filter(callback(element[, index[, array]])[, thisArg])</p><p>参数：<br>callback:用来测试数组的每个元素的函数。返回 true 表示该元素通过测试，保留该元素，false 则不保留。</p><pre><code>element:数组中当前正在处理的元素index:正在处理的元素在数组中的索引array:调用filter的数组本身thisArg:执行callback时，用于this的值</code></pre><p>返回值：</p><pre><code>一个新的、由通过测试的元素组成的数组，如果没有任何数组元素通过测试，则返回空数组。</code></pre><p>用法：</p><h4 id="（1-筛选排除所有较小的值"><a href="#（1-筛选排除所有较小的值" class="headerlink" title="（1)筛选排除所有较小的值"></a>（1)筛选排除所有较小的值</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">isBig</span>(<span class="hljs-params">e</span>) </span>&#123;<br>  <span class="hljs-keyword">return</span> e &gt;= <span class="hljs-number">10</span>;<br>&#125;<br><span class="hljs-keyword">var</span> filterd = [<span class="hljs-number">3</span>, <span class="hljs-number">6</span>, <span class="hljs-number">9</span>, <span class="hljs-number">14</span>, <span class="hljs-number">32</span>].filter(isBig);<br><span class="hljs-comment">// [14,32]</span><br></code></pre></td></tr></table></figure><h4 id="2-过滤-JSON-中的无效条目"><a href="#2-过滤-JSON-中的无效条目" class="headerlink" title="(2)过滤 JSON 中的无效条目"></a>(2)过滤 JSON 中的无效条目</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> arr = [<br>  &#123; <span class="hljs-attr">id</span>: <span class="hljs-number">12</span> &#125;,<br>  &#123; <span class="hljs-attr">id</span>: -<span class="hljs-number">1</span> &#125;,<br>  &#123; <span class="hljs-attr">id</span>: <span class="hljs-number">0</span> &#125;,<br>  &#123; <span class="hljs-attr">id</span>: <span class="hljs-number">3</span> &#125;,<br>  &#123; <span class="hljs-attr">id</span>: <span class="hljs-number">14.4</span> &#125;,<br>  &#123;&#125;,<br>  &#123; <span class="hljs-attr">id</span>: <span class="hljs-literal">null</span> &#125;,<br>  &#123; <span class="hljs-attr">id</span>: <span class="hljs-literal">NaN</span> &#125;,<br>  &#123; <span class="hljs-attr">id</span>: <span class="hljs-string">&quot;undefined&quot;</span> &#125;,<br>];<br><span class="hljs-keyword">var</span> entries = <span class="hljs-number">0</span>;<br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">isNumber</span>(<span class="hljs-params">obj</span>) </span>&#123;<br>  <span class="hljs-keyword">return</span> obj !== <span class="hljs-literal">undefined</span> &amp;&amp; <span class="hljs-keyword">typeof</span> obj === <span class="hljs-string">&quot;number&quot;</span> &amp;&amp; !<span class="hljs-built_in">isNaN</span>(obj);<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">filterID</span>(<span class="hljs-params">item</span>) </span>&#123;<br>  <span class="hljs-keyword">if</span> (isNumber(item.id) &amp;&amp; item.id !== <span class="hljs-number">0</span>) &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>  &#125;<br>  entries++;<br>  <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>&#125;<br><span class="hljs-keyword">var</span> arrId = arr.filter(filterID);<br><span class="hljs-built_in">console</span>.log(arrId); <span class="hljs-comment">// [&#123;id:12&#125;,&#123;id:-1&#125;,&#123;id:3&#125;,&#123;id:14.4&#125;]</span><br><span class="hljs-built_in">console</span>.log(entries); <span class="hljs-comment">// 5</span><br></code></pre></td></tr></table></figure><h4 id="3-在数组中搜索：根据搜索条件来过滤数组内容"><a href="#3-在数组中搜索：根据搜索条件来过滤数组内容" class="headerlink" title="(3)在数组中搜索：根据搜索条件来过滤数组内容"></a>(3)在数组中搜索：根据搜索条件来过滤数组内容</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> fruits [<span class="hljs-string">&#x27;apple&#x27;</span>,<span class="hljs-string">&#x27;banana&#x27;</span>,<span class="hljs-string">&#x27;grapes&#x27;</span>,<span class="hljs-string">&#x27;mango&#x27;</span>,<span class="hljs-string">&#x27;orange&#x27;</span>]<br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">filterItems</span>(<span class="hljs-params">query</span>)</span>&#123;<br>    <span class="hljs-keyword">return</span> fruits.filter(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">e</span>)</span>&#123;<br>        <span class="hljs-keyword">return</span> e.toLowerCase().indexOf(query.toLowerCase()) &gt; -<span class="hljs-number">1</span><br>    &#125;)<br>&#125;<br><br><span class="hljs-built_in">console</span>.log(filterItem(<span class="hljs-string">&#x27;ap&#x27;</span>))   <span class="hljs-comment">// [&#x27;apple&#x27;,&#x27;grapes&#x27;]</span><br><span class="hljs-built_in">console</span>.log(filterItem(<span class="hljs-string">&#x27;an&#x27;</span>))   <span class="hljs-comment">// [&#x27;banana&#x27;,&#x27;mango&#x27;,&#x27;orange&#x27;]</span><br></code></pre></td></tr></table></figure><p>上面是 es5 的写法，下面是 es6 的写法</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> fruits [<span class="hljs-string">&#x27;apple&#x27;</span>,<span class="hljs-string">&#x27;banana&#x27;</span>,<span class="hljs-string">&#x27;grapes&#x27;</span>,<span class="hljs-string">&#x27;mango&#x27;</span>,<span class="hljs-string">&#x27;orange&#x27;</span>]<br><span class="hljs-keyword">const</span> filterItems = <span class="hljs-function">(<span class="hljs-params">query</span>) =&gt;</span>&#123;<br>    <span class="hljs-keyword">return</span> fruits.filter(<span class="hljs-function">(<span class="hljs-params">e</span>) =&gt;</span><br>        e.toLowerCase().indexOf(query,toLowerCase()) &gt; -<span class="hljs-number">1</span><br>    )<br>&#125;<br><span class="hljs-built_in">console</span>.log(filterItem(<span class="hljs-string">&#x27;ap&#x27;</span>))   <span class="hljs-comment">// [&#x27;apple&#x27;,&#x27;grapes&#x27;]</span><br><span class="hljs-built_in">console</span>.log(filterItem(<span class="hljs-string">&#x27;an&#x27;</span>))   <span class="hljs-comment">// [&#x27;banana&#x27;,&#x27;mango&#x27;,&#x27;orange&#x27;]</span><br></code></pre></td></tr></table></figure><h3 id="3、map"><a href="#3、map" class="headerlink" title="3、map"></a>3、map</h3><blockquote><p>map()方法创建一个新数组，其结果是该数组中的每个元素是调用一次提供的函数后的返回值。 原数组不会改变</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> array = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>];<br><span class="hljs-keyword">const</span> maps = array.map(<span class="hljs-function">(<span class="hljs-params">x</span>) =&gt;</span> x * <span class="hljs-number">2</span>);<br><span class="hljs-built_in">console</span>.log(maps); <span class="hljs-comment">// 2 4 6 8</span><br></code></pre></td></tr></table></figure><p>用法：</p><h4 id="1-格式化数组中的对象"><a href="#1-格式化数组中的对象" class="headerlink" title="(1)格式化数组中的对象"></a>(1)格式化数组中的对象</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> array = [<br>  &#123; <span class="hljs-attr">key</span>: <span class="hljs-number">1</span>, <span class="hljs-attr">value</span>: <span class="hljs-number">10</span> &#125;,<br>  &#123; <span class="hljs-attr">key</span>: <span class="hljs-number">2</span>, <span class="hljs-attr">value</span>: <span class="hljs-number">20</span> &#125;,<br>  &#123; <span class="hljs-attr">key</span>: <span class="hljs-number">3</span>, <span class="hljs-attr">value</span>: <span class="hljs-number">30</span> &#125;,<br>];<br><br><span class="hljs-keyword">var</span> formatterArray = array.map(<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">obj</span>) </span>&#123;<br>  <span class="hljs-keyword">var</span> o = &#123;&#125;;<br>  o[obj.key] = obj.value;<br>  <span class="hljs-keyword">return</span> o;<br>&#125;);<br><span class="hljs-built_in">console</span>.log(formatterArray); <span class="hljs-comment">// [&#123;1:10&#125;,&#123;2:20&#125;,&#123;3:30&#125;]</span><br></code></pre></td></tr></table></figure><h4 id="2-使用包含一个参数的函数来构建一个数字数组"><a href="#2-使用包含一个参数的函数来构建一个数字数组" class="headerlink" title="(2)使用包含一个参数的函数来构建一个数字数组"></a>(2)使用包含一个参数的函数来构建一个数字数组</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> numbers = [<span class="hljs-number">1</span>, <span class="hljs-number">4</span>, <span class="hljs-number">9</span>];<br><span class="hljs-keyword">var</span> double = numbers.map(<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">item</span>) </span>&#123;<br>  <span class="hljs-keyword">return</span> item * <span class="hljs-number">2</span>;<br>&#125;);<br><span class="hljs-built_in">console</span>.log(double); <span class="hljs-comment">// [2,8,18]</span><br></code></pre></td></tr></table></figure><h2 id="includes比indexOf好在哪里？"><a href="#includes比indexOf好在哪里？" class="headerlink" title="includes比indexOf好在哪里？"></a>includes比indexOf好在哪里？</h2><blockquote><p>includes可以检测NaN，indexOf不能，includes内部使用了Number.isNaN对NaN进行了匹配</p></blockquote>]]></content>
      
      
      
        <tags>
            
            <tag> array </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>33、时间格式化</title>
      <link href="/2021/04/28/33-time/"/>
      <url>/2021/04/28/33-time/</url>
      
        <content type="html"><![CDATA[<p>获取时间格式的方式、封装的一些函数方法</p><span id="more"></span><h2 id="一、常用时间格式"><a href="#一、常用时间格式" class="headerlink" title="一、常用时间格式"></a>一、常用时间格式</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 2021/3/10</span><br><span class="hljs-keyword">let</span> time = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Date</span>().toLocaleDateString();<br><span class="hljs-comment">// 上午10:30:00</span><br><span class="hljs-keyword">let</span> times = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Date</span>().toLocaleTimeString();<br><span class="hljs-comment">// 获取当前年份    2021年</span><br><span class="hljs-keyword">let</span> year = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Date</span>().getFullYear();<br><span class="hljs-comment">// 获取当前月份  月份需要+1   3月份</span><br><span class="hljs-keyword">let</span> month = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Date</span>().getMonth()+<span class="hljs-number">1</span>;<br><span class="hljs-comment">// 获取当前月份日期   10号</span><br><span class="hljs-keyword">let</span> day = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Date</span>().getDate();<br><span class="hljs-comment">// 获取当前星期几   三</span><br><span class="hljs-keyword">let</span> week = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Date</span>().getDay();<br><span class="hljs-comment">// 获取当前季度   一季度</span><br><span class="hljs-keyword">let</span> season =  <span class="hljs-built_in">Math</span>.floor((<span class="hljs-built_in">this</span>.getMonth()+<span class="hljs-number">3</span>)/<span class="hljs-number">3</span>);<br></code></pre></td></tr></table></figure><h2 id="二、Vue3获取当前时间：格式：YYYY-MM-DD-hh-mm-ss"><a href="#二、Vue3获取当前时间：格式：YYYY-MM-DD-hh-mm-ss" class="headerlink" title="二、Vue3获取当前时间：格式：YYYY-MM-DD hh:mm:ss"></a>二、Vue3获取当前时间：格式：YYYY-MM-DD hh:mm:ss</h2><h4 id="1、封装工具函数："><a href="#1、封装工具函数：" class="headerlink" title="1、封装工具函数："></a>1、封装工具函数：</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">import</span> &#123; ref, onMounted, onUnmounted &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;vue&#x27;</span><br><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">dateFilter</span> (<span class="hljs-params">v</span>) </span>&#123;<br>  <span class="hljs-keyword">let</span> m = v.getMonth() + <span class="hljs-number">1</span><br>  m = m &lt; <span class="hljs-number">10</span> ? <span class="hljs-string">&#x27;0&#x27;</span> + m : m<br>  <span class="hljs-keyword">let</span> d = v.getDate()<br>  d = d &lt; <span class="hljs-number">10</span> ? <span class="hljs-string">&#x27;0&#x27;</span> + d : d<br>  <span class="hljs-keyword">return</span> v.getFullYear() + <span class="hljs-string">&#x27;-&#x27;</span> + m + <span class="hljs-string">&#x27;-&#x27;</span> + d<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">timeFilter</span> (<span class="hljs-params">v</span>) </span>&#123;<br>  <span class="hljs-keyword">let</span> h = v.getHours()<br>  h = h &lt; <span class="hljs-number">10</span> ? <span class="hljs-string">&#x27;0&#x27;</span> + h : h<br>  <span class="hljs-keyword">let</span> m = v.getMinutes()<br>  m = m &lt; <span class="hljs-number">10</span> ? <span class="hljs-string">&#x27;0&#x27;</span> + m : m<br>  <span class="hljs-keyword">let</span> s = v.getSeconds()<br>  s = s &lt; <span class="hljs-number">10</span> ? <span class="hljs-string">&#x27;0&#x27;</span> + s : s<br>  <span class="hljs-keyword">return</span> h + <span class="hljs-string">&#x27;:&#x27;</span> + m + <span class="hljs-string">&#x27;:&#x27;</span> + s<br>&#125;<br><br><span class="hljs-keyword">export</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">clock</span> (<span class="hljs-params"></span>) </span>&#123;<br>  <span class="hljs-keyword">let</span> now = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Date</span>()<br>  <span class="hljs-keyword">const</span> date = ref(dateFilter(now))<br>  <span class="hljs-keyword">const</span> time = ref(timeFilter(now))<br>  <span class="hljs-keyword">let</span> task<br>  <span class="hljs-keyword">const</span> start = <span class="hljs-function">() =&gt;</span> &#123;<br>    task = <span class="hljs-built_in">setInterval</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>      now = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Date</span>()<br>      date.value = dateFilter(now)<br>      time.value = timeFilter(now)<br>    &#125;, <span class="hljs-number">1000</span>)<br>  &#125;<br>  onMounted(start)<br>  onUnmounted(<span class="hljs-function">() =&gt;</span> &#123;<br>    task &amp;&amp; <span class="hljs-built_in">clearInterval</span>(task)<br>  &#125;)<br>  <span class="hljs-keyword">return</span> &#123;<br>    date,<br>    time,<br>    start<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="2、模板页面中使用"><a href="#2、模板页面中使用" class="headerlink" title="2、模板页面中使用"></a>2、模板页面中使用</h4><p>template:</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">template</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;time&quot;</span>&gt;</span><br>    &#123;&#123; date &#125;&#125; &#123;&#123; time &#125;&#125;<br>  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span><br></code></pre></td></tr></table></figure><p>javascript:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs js">&lt;script&gt;<br>  <span class="hljs-keyword">import</span> &#123; clock <span class="hljs-keyword">as</span> useClock &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;../../utils/clock&#x27;</span><br><br>  <span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> &#123;<br>    <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;time&#x27;</span>,<br>    setup () &#123;<br>      <span class="hljs-keyword">const</span> &#123; date, time &#125; = useClock()<br><br>      <span class="hljs-keyword">return</span> &#123;<br>        date,<br>        time<br>      &#125;<br>    &#125;<br>  &#125;<br>&lt;/script&gt;<br><br></code></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> time </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>32、javascript -- 对象</title>
      <link href="/2021/04/14/32-javascript-simple3/"/>
      <url>/2021/04/14/32-javascript-simple3/</url>
      
        <content type="html"><![CDATA[<p>对象类型和原始类型的不同之处？函数参数是对象会发生什么问题？</p><span id="more"></span><p>在 JS 中，除了原始类型那么其他的都是对象类型了。<br>对象类型和原始类型不同的是：<br>原始类型存储的是值，对象类型存储的是地址（指针）。<br>当你创建了一个对象类型的时候，计算机会在内存中帮我们开辟一个空间来存放值，<br>但是我们需要找到这个空间，这个空间会拥有一个地址（指针）。</p><h2 id="一、字符串方法"><a href="#一、字符串方法" class="headerlink" title="一、字符串方法"></a>一、字符串方法</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 将字符串的字母转换成小写</span><br><span class="hljs-keyword">const</span> str = <span class="hljs-string">&quot;Hello world&quot;</span>;<br>arr = str.split(<span class="hljs-string">&quot;&quot;</span>).map(<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">item</span>) </span>&#123;<br>  <span class="hljs-keyword">return</span> (item + <span class="hljs-string">&quot;&quot;</span>).toLowerCase();<br>&#125;);<br>lowerStr = arr.join(<span class="hljs-string">&quot;&quot;</span>);<br><span class="hljs-built_in">console</span>.log(lowerStr);<br><br><span class="hljs-comment">// 挑出大写字母</span><br><span class="hljs-keyword">const</span> str = <span class="hljs-string">&quot;Permission is &quot;</span>;<br>reg = <span class="hljs-regexp">/[A-Z]/g</span>;<br><span class="hljs-built_in">console</span>.log(str.match(reg).join(<span class="hljs-string">&quot;&quot;</span>));<br></code></pre></td></tr></table></figure><h2 id="js-数据类型"><a href="#js-数据类型" class="headerlink" title="js 数据类型"></a>js 数据类型</h2><p>基本数据类型：</p><blockquote><p>Number，String，Boolean，null，undefined，symbol，bigint</p></blockquote><p>引用数据类型:</p><blockquote><p>object function</p></blockquote><blockquote><p>基本数据类型是直接存储在栈中的简单数据段，占据空间小、大小固定，属于被频繁使用的数据。栈是存储基 本类型值和执行代码的空间。</p><p>引用数据类型是存储在堆内存中，占据空间大、大小不固定。引用数据类型在栈中存储了指针，该指针指向堆 中该实体的起始地址，当解释器寻找引用值时，会检索其在栈中的地址，取得地址后从堆中获得实体。</p></blockquote><p>基本数据类型和引用数据类型的区别：</p><blockquote><ol><li>堆比栈空间大，栈比堆运行速度快。</li><li>堆内存是无序存储，可以根据引用直接获取。</li><li>基础数据类型比较稳定，而且相对来说占用的内存小。</li><li>引用数据类型大小是动态的，而且是无限的。</li></ol></blockquote><p>Object.assign()：合并对象 Object.assign(target, …sources)</p><blockquote><ol><li>Object.assign 会将 source 里面的可枚举属性复制到 target，如果和 target 的已有属性重名，则会覆盖。</li><li>后续的 source 会覆盖前面的 source 的同名属性。</li><li>Object.assign 复制的是属性值，如果属性值是一个引用类型，那么复制的其实是引用地址，就会存在引用共享的问题。</li></ol></blockquote><p>Constructor:</p><blockquote><p>创建的每个函数都有一个 prototype（原型）对象，这个属性是一个指针，指向一个对象。在默认情况下，所有原型对象都会自动获得一个 constructor（构造函数）属性，这个属性是一个指向 prototype 属性所在函数的指针。当调用构造函数创建一个新实例后，该实例的内部将包含一个指针（继承自构造函数的 prototype），指向构造函数的原型对象。注意当将构造函数的 prototype 设置为等于一个以对象字面量形式创建的新对象时，constructor 属性不再指向该构造函数。</p></blockquote><p>map 和 forEach 区别</p><p>相同点：</p><blockquote><ol><li>都是循环遍历数组中的每一项</li><li>每次执行匿名函数都支持三个参数，参数分别为 item（当前每一项），index（索引值），arr（原数组）</li><li>匿名函数中的 this 都是指向 window</li><li>只能遍历数组</li></ol></blockquote><p>不同点：</p><blockquote><ol><li>map()会分配内存空间存储新数组并返回，forEach()不会返回数据。</li><li>forEach()允许 callback 更改原始数组的元素。map()返回新的数组。</li></ol></blockquote><p>for…of:</p><blockquote><p>es6 新增的一个遍历方法，但<strong>只限于迭代器(iterator)</strong>, 所以普通的对象用 for..of 遍历<br>是会报错的。</p><p>包括 Array, Map, Set, String, TypedArray, arguments 对象</p></blockquote><p>indexOf str.indexOf(searchValue [, fromIndex]) searchValue：要被查找的字符串值。</p><blockquote><p>查找的字符串 searchValue 的<strong>第一次</strong>出现的索引，如果没有找到，则返回-1。</p><p>若被查找的字符串 searchValue 是一个空字符串，则返回 fromIndex。如果 fromIndex 值为空，或者 fromIndex 值小于被查找的字符串的长度，返回值和以下的 fromIndex 值一样。</p><p>如果 fromIndex 值大于等于字符串的长度，将会直接返回字符串的长度（str.length）</p><p>严格区分大小写</p><p>在使用 indexOf 检索数组时，用‘===’去匹配，意味着会检查数据类型</p></blockquote><p>Iframe 的优缺点？</p><p>优点：</p><blockquote><ol><li>iframe 能够原封不动的把嵌入的网页展现出来。</li><li>如果有多个网页引用 iframe，那么你只需要修改 iframe 的内容，就可以实现调用的每一个页面内容的更改，方便快捷。</li><li>网页如果为了统一风格，头部和版本都是一样的，就可以写成一个页面，用 iframe 来嵌套，可以增加代码的可重用。</li><li>如果遇到加载缓慢的第三方内容如图标和广告，这些问题可以由 iframe 来解决。</li></ol></blockquote><p>缺点：</p><blockquote><ol><li>iframe 会阻塞主页面的 onload 事件；</li><li>iframe 和主页面共享连接池，而浏览器对相同域的连接有限制，所以会影响页面的并行加载。会产生很多页面，不容易管理。</li><li>iframe 框架结构有时会让人感到迷惑，如果框架个数多的话，可能会出现上下、左右滚动条，会分散访问者的注意力，用户体验度差。</li><li>代码复杂，无法被一些搜索引擎索引到，这一点很关键，现在的搜索引擎爬虫还不能很好的处理 iframe 中的内容，所以使用 iframe 会不利于搜索引擎优化（SEO）。</li><li>很多的移动设备无法完全显示框架，设备兼容性差。</li><li>iframe 框架页面会增加服务器的 http 请求，对于大型网站是不可取的。</li></ol></blockquote><p>作用域：</p><blockquote><p>作用域就是一个独立的地盘，让变量不会外泄、暴露出去。也就是说作用域最大的用处就是隔离变量，不同作用域下同名变量不会有冲突。</p><p><strong>ES6 之前 JavaScript 没有块级作用域,只有全局作用域和函数作用域</strong>。ES6 的到来，为我们提供了‘块级作用域’,可通过新增命令 let 和 const 来体现。</p></blockquote><p>js 的 arguments 相关问题</p><blockquote><p>在 js 中，我们在调用有参数的函数时，当往这个调用的有参函数传参时，js 会把所传的参数全部存到一个叫 arguments 的对象里面。它是一个<strong>类数组数据由来</strong></p><p>Javascrip 中每个函数都会有一个 Arguments 对象实例 arguments，引用着函数的实参。它是寄生在 js 函数当中的，不能显式创建，arguments 对象只有函数开始时才可用</p></blockquote><p>instanceof 原理：判断实例属于什么类型</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 实现方法</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">new_instance_of</span>(<span class="hljs-params">leftVaule, rightVaule</span>) </span>&#123;<br>  <span class="hljs-keyword">let</span> rightProto = rightVaule.prototype; <span class="hljs-comment">// 取右表达式的 prototype 值</span><br>  leftVaule = leftVaule.__proto__; <span class="hljs-comment">// 取左表达式的__proto__值</span><br>  <span class="hljs-keyword">while</span> (<span class="hljs-literal">true</span>) &#123;<br>    <span class="hljs-keyword">if</span> (leftVaule === <span class="hljs-literal">null</span>) &#123;<br>      <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>    &#125;<br>    <span class="hljs-keyword">if</span> (leftVaule === rightProto) &#123;<br>      <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>    &#125;<br>    leftVaule = leftVaule.__proto__;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>数组去重：</p><p>1、es6 Set 方法</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">unique</span>(<span class="hljs-params">arr</span>) </span>&#123;<br>  <span class="hljs-keyword">return</span> <span class="hljs-built_in">Array</span>.from(<span class="hljs-keyword">new</span> <span class="hljs-built_in">Set</span>(arr));<br>&#125;<br><span class="hljs-comment">// 无法去除 &#123;&#125; 空对象</span><br><br><span class="hljs-comment">// 简写</span><br>[...new <span class="hljs-built_in">Set</span>(arr)];<br></code></pre></td></tr></table></figure><p>2、es5 利用 for 循环嵌套，然后 splice 去重</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">unique</span>(<span class="hljs-params">arr</span>) </span>&#123;<br>  <span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> i = <span class="hljs-number">0</span>; i &lt; arr.length; i++) &#123;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> j = i + <span class="hljs-number">1</span>; j &lt; arr.length; j++) &#123;<br>      <span class="hljs-keyword">if</span> (arr[i] == arr[j]) &#123;<br>        <span class="hljs-comment">//第一个等同于第二个，splice方法删除第二个</span><br>        arr.splice(j, <span class="hljs-number">1</span>);<br>        j--;<br>      &#125;<br>    &#125;<br>  &#125;<br>  <span class="hljs-keyword">return</span> arr;<br>&#125;<br><span class="hljs-keyword">var</span> arr = [<br>  <span class="hljs-number">1</span>,<br>  <span class="hljs-number">1</span>,<br>  <span class="hljs-string">&quot;true&quot;</span>,<br>  <span class="hljs-string">&quot;true&quot;</span>,<br>  <span class="hljs-literal">true</span>,<br>  <span class="hljs-literal">true</span>,<br>  <span class="hljs-number">15</span>,<br>  <span class="hljs-number">15</span>,<br>  <span class="hljs-literal">false</span>,<br>  <span class="hljs-literal">false</span>,<br>  <span class="hljs-literal">undefined</span>,<br>  <span class="hljs-literal">undefined</span>,<br>  <span class="hljs-literal">null</span>,<br>  <span class="hljs-literal">null</span>,<br>  <span class="hljs-literal">NaN</span>,<br>  <span class="hljs-literal">NaN</span>,<br>  <span class="hljs-string">&quot;NaN&quot;</span>,<br>  <span class="hljs-number">0</span>,<br>  <span class="hljs-number">0</span>,<br>  <span class="hljs-string">&quot;a&quot;</span>,<br>  <span class="hljs-string">&quot;a&quot;</span>,<br>  &#123;&#125;,<br>  &#123;&#125;,<br>];<br><span class="hljs-built_in">console</span>.log(unique(arr)); <span class="hljs-comment">//[1, &quot;true&quot;, 15, false, undefined, NaN, NaN, &quot;NaN&quot;, &quot;a&quot;, &#123;…&#125;, &#123;…&#125;]     //NaN和&#123;&#125;没有去重，两个null直接消失了</span><br></code></pre></td></tr></table></figure><p>3、indexOf</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">unique</span>(<span class="hljs-params">arr</span>) </span>&#123;<br>  <span class="hljs-keyword">if</span> (!<span class="hljs-built_in">Array</span>.isArray(arr)) &#123;<br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;type error!&quot;</span>);<br>    <span class="hljs-keyword">return</span>;<br>  &#125;<br>  <span class="hljs-keyword">var</span> array = [];<br>  <span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> i = <span class="hljs-number">0</span>; i &lt; arr.length; i++) &#123;<br>    <span class="hljs-keyword">if</span> (array.indexOf(arr[i]) === -<span class="hljs-number">1</span>) &#123;<br>      array.push(arr[i]);<br>    &#125;<br>  &#125;<br>  <span class="hljs-keyword">return</span> array;<br>&#125;<br><span class="hljs-keyword">var</span> arr = [<br>  <span class="hljs-number">1</span>,<br>  <span class="hljs-number">1</span>,<br>  <span class="hljs-string">&quot;true&quot;</span>,<br>  <span class="hljs-string">&quot;true&quot;</span>,<br>  <span class="hljs-literal">true</span>,<br>  <span class="hljs-literal">true</span>,<br>  <span class="hljs-number">15</span>,<br>  <span class="hljs-number">15</span>,<br>  <span class="hljs-literal">false</span>,<br>  <span class="hljs-literal">false</span>,<br>  <span class="hljs-literal">undefined</span>,<br>  <span class="hljs-literal">undefined</span>,<br>  <span class="hljs-literal">null</span>,<br>  <span class="hljs-literal">null</span>,<br>  <span class="hljs-literal">NaN</span>,<br>  <span class="hljs-literal">NaN</span>,<br>  <span class="hljs-string">&quot;NaN&quot;</span>,<br>  <span class="hljs-number">0</span>,<br>  <span class="hljs-number">0</span>,<br>  <span class="hljs-string">&quot;a&quot;</span>,<br>  <span class="hljs-string">&quot;a&quot;</span>,<br>  &#123;&#125;,<br>  &#123;&#125;,<br>];<br><span class="hljs-built_in">console</span>.log(unique(arr));<br><span class="hljs-comment">// [1, &quot;true&quot;, true, 15, false, undefined, null, NaN, NaN, &quot;NaN&quot;, 0, &quot;a&quot;, &#123;…&#125;, &#123;…&#125;]  //NaN、&#123;&#125;没有去重</span><br></code></pre></td></tr></table></figure><p>4、sort</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">unique</span>(<span class="hljs-params">arr</span>) </span>&#123;<br>  <span class="hljs-keyword">if</span> (!<span class="hljs-built_in">Array</span>.isArray(arr)) &#123;<br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;type error!&quot;</span>);<br>    <span class="hljs-keyword">return</span>;<br>  &#125;<br>  arr = arr.sort();<br>  <span class="hljs-keyword">var</span> arrry = [arr[<span class="hljs-number">0</span>]];<br>  <span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> i = <span class="hljs-number">1</span>; i &lt; arr.length; i++) &#123;<br>    <span class="hljs-keyword">if</span> (arr[i] !== arr[i - <span class="hljs-number">1</span>]) &#123;<br>      arrry.push(arr[i]);<br>    &#125;<br>  &#125;<br>  <span class="hljs-keyword">return</span> arrry;<br>&#125;<br><span class="hljs-keyword">var</span> arr = [<br>  <span class="hljs-number">1</span>,<br>  <span class="hljs-number">1</span>,<br>  <span class="hljs-string">&quot;true&quot;</span>,<br>  <span class="hljs-string">&quot;true&quot;</span>,<br>  <span class="hljs-literal">true</span>,<br>  <span class="hljs-literal">true</span>,<br>  <span class="hljs-number">15</span>,<br>  <span class="hljs-number">15</span>,<br>  <span class="hljs-literal">false</span>,<br>  <span class="hljs-literal">false</span>,<br>  <span class="hljs-literal">undefined</span>,<br>  <span class="hljs-literal">undefined</span>,<br>  <span class="hljs-literal">null</span>,<br>  <span class="hljs-literal">null</span>,<br>  <span class="hljs-literal">NaN</span>,<br>  <span class="hljs-literal">NaN</span>,<br>  <span class="hljs-string">&quot;NaN&quot;</span>,<br>  <span class="hljs-number">0</span>,<br>  <span class="hljs-number">0</span>,<br>  <span class="hljs-string">&quot;a&quot;</span>,<br>  <span class="hljs-string">&quot;a&quot;</span>,<br>  &#123;&#125;,<br>  &#123;&#125;,<br>];<br><span class="hljs-built_in">console</span>.log(unique(arr));<br><span class="hljs-comment">// [0, 1, 15, &quot;NaN&quot;, NaN, NaN, &#123;…&#125;, &#123;…&#125;, &quot;a&quot;, false, null, true, &quot;true&quot;, undefined]      //NaN、&#123;&#125;没有去重</span><br></code></pre></td></tr></table></figure><p>5、includes</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">unique</span>(<span class="hljs-params">arr</span>) </span>&#123;<br>  <span class="hljs-keyword">if</span> (!<span class="hljs-built_in">Array</span>.isArray(arr)) &#123;<br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;type error!&quot;</span>);<br>    <span class="hljs-keyword">return</span>;<br>  &#125;<br>  <span class="hljs-keyword">var</span> array = [];<br>  <span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> i = <span class="hljs-number">0</span>; i &lt; arr.length; i++) &#123;<br>    <span class="hljs-keyword">if</span> (!array.includes(arr[i])) &#123;<br>      <span class="hljs-comment">//includes 检测数组是否有某个值</span><br>      array.push(arr[i]);<br>    &#125;<br>  &#125;<br>  <span class="hljs-keyword">return</span> array;<br>&#125;<br><span class="hljs-keyword">var</span> arr = [<br>  <span class="hljs-number">1</span>,<br>  <span class="hljs-number">1</span>,<br>  <span class="hljs-string">&quot;true&quot;</span>,<br>  <span class="hljs-string">&quot;true&quot;</span>,<br>  <span class="hljs-literal">true</span>,<br>  <span class="hljs-literal">true</span>,<br>  <span class="hljs-number">15</span>,<br>  <span class="hljs-number">15</span>,<br>  <span class="hljs-literal">false</span>,<br>  <span class="hljs-literal">false</span>,<br>  <span class="hljs-literal">undefined</span>,<br>  <span class="hljs-literal">undefined</span>,<br>  <span class="hljs-literal">null</span>,<br>  <span class="hljs-literal">null</span>,<br>  <span class="hljs-literal">NaN</span>,<br>  <span class="hljs-literal">NaN</span>,<br>  <span class="hljs-string">&quot;NaN&quot;</span>,<br>  <span class="hljs-number">0</span>,<br>  <span class="hljs-number">0</span>,<br>  <span class="hljs-string">&quot;a&quot;</span>,<br>  <span class="hljs-string">&quot;a&quot;</span>,<br>  &#123;&#125;,<br>  &#123;&#125;,<br>];<br><span class="hljs-built_in">console</span>.log(unique(arr));<br><span class="hljs-comment">//[1, &quot;true&quot;, true, 15, false, undefined, null, NaN, &quot;NaN&quot;, 0, &quot;a&quot;, &#123;…&#125;, &#123;…&#125;]     //&#123;&#125;没有去重</span><br></code></pre></td></tr></table></figure><p>6、<strong>hasOwnProperty</strong>:利用 hasOwnProperty 判断是否存在对象属性</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">unique</span>(<span class="hljs-params">arr</span>) </span>&#123;<br>  <span class="hljs-keyword">var</span> obj = &#123;&#125;;<br>  <span class="hljs-keyword">return</span> arr.filter(<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">item, index, arr</span>) </span>&#123;<br>    <span class="hljs-keyword">return</span> obj.hasOwnProperty(<span class="hljs-keyword">typeof</span> item + item)<br>      ? <span class="hljs-literal">false</span><br>      : (obj[<span class="hljs-keyword">typeof</span> item + item] = <span class="hljs-literal">true</span>);<br>  &#125;);<br>&#125;<br><span class="hljs-keyword">var</span> arr = [<br>  <span class="hljs-number">1</span>,<br>  <span class="hljs-number">1</span>,<br>  <span class="hljs-string">&quot;true&quot;</span>,<br>  <span class="hljs-string">&quot;true&quot;</span>,<br>  <span class="hljs-literal">true</span>,<br>  <span class="hljs-literal">true</span>,<br>  <span class="hljs-number">15</span>,<br>  <span class="hljs-number">15</span>,<br>  <span class="hljs-literal">false</span>,<br>  <span class="hljs-literal">false</span>,<br>  <span class="hljs-literal">undefined</span>,<br>  <span class="hljs-literal">undefined</span>,<br>  <span class="hljs-literal">null</span>,<br>  <span class="hljs-literal">null</span>,<br>  <span class="hljs-literal">NaN</span>,<br>  <span class="hljs-literal">NaN</span>,<br>  <span class="hljs-string">&quot;NaN&quot;</span>,<br>  <span class="hljs-number">0</span>,<br>  <span class="hljs-number">0</span>,<br>  <span class="hljs-string">&quot;a&quot;</span>,<br>  <span class="hljs-string">&quot;a&quot;</span>,<br>  &#123;&#125;,<br>  &#123;&#125;,<br>];<br><span class="hljs-built_in">console</span>.log(unique(arr));<br><span class="hljs-comment">//[1, &quot;true&quot;, true, 15, false, undefined, null, NaN, &quot;NaN&quot;, 0, &quot;a&quot;, &#123;…&#125;]   //所有的都去重了</span><br></code></pre></td></tr></table></figure><p>7、filter</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">unique</span>(<span class="hljs-params">arr</span>) </span>&#123;<br>  <span class="hljs-keyword">return</span> arr.filter(<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">item, index, arr</span>) </span>&#123;<br>    <span class="hljs-comment">//当前元素，在原始数组中的第一个索引==当前索引值，否则返回当前元素</span><br>    <span class="hljs-keyword">return</span> arr.indexOf(item, <span class="hljs-number">0</span>) === index;<br>  &#125;);<br>&#125;<br><span class="hljs-keyword">var</span> arr = [<br>  <span class="hljs-number">1</span>,<br>  <span class="hljs-number">1</span>,<br>  <span class="hljs-string">&quot;true&quot;</span>,<br>  <span class="hljs-string">&quot;true&quot;</span>,<br>  <span class="hljs-literal">true</span>,<br>  <span class="hljs-literal">true</span>,<br>  <span class="hljs-number">15</span>,<br>  <span class="hljs-number">15</span>,<br>  <span class="hljs-literal">false</span>,<br>  <span class="hljs-literal">false</span>,<br>  <span class="hljs-literal">undefined</span>,<br>  <span class="hljs-literal">undefined</span>,<br>  <span class="hljs-literal">null</span>,<br>  <span class="hljs-literal">null</span>,<br>  <span class="hljs-literal">NaN</span>,<br>  <span class="hljs-literal">NaN</span>,<br>  <span class="hljs-string">&quot;NaN&quot;</span>,<br>  <span class="hljs-number">0</span>,<br>  <span class="hljs-number">0</span>,<br>  <span class="hljs-string">&quot;a&quot;</span>,<br>  <span class="hljs-string">&quot;a&quot;</span>,<br>  &#123;&#125;,<br>  &#123;&#125;,<br>];<br><span class="hljs-built_in">console</span>.log(unique(arr));<br><span class="hljs-comment">//[1, &quot;true&quot;, true, 15, false, undefined, null, &quot;NaN&quot;, 0, &quot;a&quot;, &#123;…&#125;, &#123;…&#125;]</span><br></code></pre></td></tr></table></figure><p>8、递归去重</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">unique</span>(<span class="hljs-params">arr</span>) </span>&#123;<br>  <span class="hljs-keyword">var</span> array = arr;<br>  <span class="hljs-keyword">var</span> len = array.length;<br><br>  array.sort(<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">a, b</span>) </span>&#123;<br>    <span class="hljs-comment">//排序后更加方便去重</span><br>    <span class="hljs-keyword">return</span> a - b;<br>  &#125;);<br><br>  <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">loop</span>(<span class="hljs-params">index</span>) </span>&#123;<br>    <span class="hljs-keyword">if</span> (index &gt;= <span class="hljs-number">1</span>) &#123;<br>      <span class="hljs-keyword">if</span> (array[index] === array[index - <span class="hljs-number">1</span>]) &#123;<br>        array.splice(index, <span class="hljs-number">1</span>);<br>      &#125;<br>      loop(index - <span class="hljs-number">1</span>); <span class="hljs-comment">//递归loop，然后数组去重</span><br>    &#125;<br>  &#125;<br>  loop(len - <span class="hljs-number">1</span>);<br>  <span class="hljs-keyword">return</span> array;<br>&#125;<br><span class="hljs-keyword">var</span> arr = [<br>  <span class="hljs-number">1</span>,<br>  <span class="hljs-number">1</span>,<br>  <span class="hljs-string">&quot;true&quot;</span>,<br>  <span class="hljs-string">&quot;true&quot;</span>,<br>  <span class="hljs-literal">true</span>,<br>  <span class="hljs-literal">true</span>,<br>  <span class="hljs-number">15</span>,<br>  <span class="hljs-number">15</span>,<br>  <span class="hljs-literal">false</span>,<br>  <span class="hljs-literal">false</span>,<br>  <span class="hljs-literal">undefined</span>,<br>  <span class="hljs-literal">undefined</span>,<br>  <span class="hljs-literal">null</span>,<br>  <span class="hljs-literal">null</span>,<br>  <span class="hljs-literal">NaN</span>,<br>  <span class="hljs-literal">NaN</span>,<br>  <span class="hljs-string">&quot;NaN&quot;</span>,<br>  <span class="hljs-number">0</span>,<br>  <span class="hljs-number">0</span>,<br>  <span class="hljs-string">&quot;a&quot;</span>,<br>  <span class="hljs-string">&quot;a&quot;</span>,<br>  &#123;&#125;,<br>  &#123;&#125;,<br>];<br><span class="hljs-built_in">console</span>.log(unique(arr));<br><span class="hljs-comment">//[1, &quot;a&quot;, &quot;true&quot;, true, 15, false, 1, &#123;…&#125;, null, NaN, NaN, &quot;NaN&quot;, 0, &quot;a&quot;, &#123;…&#125;, undefined]</span><br></code></pre></td></tr></table></figure><p>9、Map 数据结构去重</p><blockquote><p>创建一个空 Map 数据结构，遍历需要去重的数组，把数组的每一个元素作为 key 存到 Map 中。由于 Map 中不会出现相同的 key 值，所以最终得到的就是去重后的结果。</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">arrayNonRepeatfy</span>(<span class="hljs-params">arr</span>) </span>&#123;<br>  <span class="hljs-keyword">let</span> map = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Map</span>();<br>  <span class="hljs-keyword">let</span> array = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Array</span>(); <span class="hljs-comment">// 数组用于返回结果</span><br>  <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> i = <span class="hljs-number">0</span>; i &lt; arr.length; i++) &#123;<br>    <span class="hljs-keyword">if</span> (map.has(arr[i])) &#123;<br>      <span class="hljs-comment">// 如果有该key值</span><br>      map.set(arr[i], <span class="hljs-literal">true</span>);<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>      map.set(arr[i], <span class="hljs-literal">false</span>); <span class="hljs-comment">// 如果没有该key值</span><br>      array.push(arr[i]);<br>    &#125;<br>  &#125;<br>  <span class="hljs-keyword">return</span> array;<br>&#125;<br><span class="hljs-keyword">var</span> arr = [<br>  <span class="hljs-number">1</span>,<br>  <span class="hljs-number">1</span>,<br>  <span class="hljs-string">&quot;true&quot;</span>,<br>  <span class="hljs-string">&quot;true&quot;</span>,<br>  <span class="hljs-literal">true</span>,<br>  <span class="hljs-literal">true</span>,<br>  <span class="hljs-number">15</span>,<br>  <span class="hljs-number">15</span>,<br>  <span class="hljs-literal">false</span>,<br>  <span class="hljs-literal">false</span>,<br>  <span class="hljs-literal">undefined</span>,<br>  <span class="hljs-literal">undefined</span>,<br>  <span class="hljs-literal">null</span>,<br>  <span class="hljs-literal">null</span>,<br>  <span class="hljs-literal">NaN</span>,<br>  <span class="hljs-literal">NaN</span>,<br>  <span class="hljs-string">&quot;NaN&quot;</span>,<br>  <span class="hljs-number">0</span>,<br>  <span class="hljs-number">0</span>,<br>  <span class="hljs-string">&quot;a&quot;</span>,<br>  <span class="hljs-string">&quot;a&quot;</span>,<br>  &#123;&#125;,<br>  &#123;&#125;,<br>];<br><span class="hljs-built_in">console</span>.log(unique(arr));<br><span class="hljs-comment">//[1, &quot;a&quot;, &quot;true&quot;, true, 15, false, 1, &#123;…&#125;, null, NaN, NaN, &quot;NaN&quot;, 0, &quot;a&quot;, &#123;…&#125;, undefined]</span><br></code></pre></td></tr></table></figure><p>10、<strong>利用 reduce+includes</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">unique</span>(<span class="hljs-params">arr</span>) </span>&#123;<br>  <span class="hljs-keyword">return</span> arr.reduce(<br>    <span class="hljs-function">(<span class="hljs-params">prev, cur</span>) =&gt;</span> (prev.includes(cur) ? prev : [...prev, cur]),<br>    []<br>  );<br>&#125;<br><span class="hljs-keyword">var</span> arr = [<br>  <span class="hljs-number">1</span>,<br>  <span class="hljs-number">1</span>,<br>  <span class="hljs-string">&quot;true&quot;</span>,<br>  <span class="hljs-string">&quot;true&quot;</span>,<br>  <span class="hljs-literal">true</span>,<br>  <span class="hljs-literal">true</span>,<br>  <span class="hljs-number">15</span>,<br>  <span class="hljs-number">15</span>,<br>  <span class="hljs-literal">false</span>,<br>  <span class="hljs-literal">false</span>,<br>  <span class="hljs-literal">undefined</span>,<br>  <span class="hljs-literal">undefined</span>,<br>  <span class="hljs-literal">null</span>,<br>  <span class="hljs-literal">null</span>,<br>  <span class="hljs-literal">NaN</span>,<br>  <span class="hljs-literal">NaN</span>,<br>  <span class="hljs-string">&quot;NaN&quot;</span>,<br>  <span class="hljs-number">0</span>,<br>  <span class="hljs-number">0</span>,<br>  <span class="hljs-string">&quot;a&quot;</span>,<br>  <span class="hljs-string">&quot;a&quot;</span>,<br>  &#123;&#125;,<br>  &#123;&#125;,<br>];<br><span class="hljs-built_in">console</span>.log(unique(arr));<br><span class="hljs-comment">// [1, &quot;true&quot;, true, 15, false, undefined, null, NaN, &quot;NaN&quot;, 0, &quot;a&quot;, &#123;…&#125;, &#123;…&#125;]</span><br></code></pre></td></tr></table></figure><p>null 和 undefined 的区别</p><blockquote><p>undefined 表示一个变量自然的、最原始的状态值，而 null 则表示一个变量被人为的设置为空对象，而不是原始状态。所以，在实际使用过程中，为了保证变量所代表的语义，不要对一个变量显式的赋值 undefined，当需要释放一个对象时，直接赋值为 null 即可。</p></blockquote><p>undefined:</p><ol><li>声明了一个变量，但没有赋值</li><li>访问对象上不存在的属性</li><li>函数定义了形参，但没有传递实参</li><li>使用 void 对表达式求值</li></ol><p>null:空值</p><blockquote><p><strong>表示 一个对象被人为的重置为空对象，而非一个变量最原始的状态 。</strong> 在内存里的表示就是，栈中的变量没有指向堆中的内存对象</p></blockquote><p>typeof null 为什么是 object？</p><blockquote><p>null 有属于自己的类型 Null，而不属于 Object 类型，typeof 之所以会判定为 Object 类型，是因为 JavaScript 数据类型在底层都是以二进制的形式表示的，<strong>二进制的前三位为 0 会被 typeof 判断为对象类型</strong>，而 null 的二进制位恰好都是 0 ，因此，null 被误判断为 Object 类型。</p></blockquote><p>类数组转换为数组的方法：</p><blockquote><ul><li>使用 Array.from()</li><li>使用 Array.prototype.slice.call()</li><li>使用 Array.prototype.forEach()进行属性遍历并组成新的数组</li></ul><p>// 转换后的数组长度由 length 属性决定。索引不连续时转换结果是连续的，会自动补位。</p></blockquote><p>数组转树</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">arrayToTree</span>(<span class="hljs-params">array</span>) </span>&#123;<br>  <span class="hljs-keyword">let</span> root = array[<span class="hljs-number">0</span>];<br>  array.shift();<br>  <span class="hljs-keyword">let</span> tree = &#123;<br>    <span class="hljs-attr">id</span>: root.id,<br>    <span class="hljs-attr">val</span>: root.val,<br>    <span class="hljs-attr">children</span>: array.length &gt; <span class="hljs-number">0</span> ? toTree(root.id, array) : [],<br>  &#125;;<br>  <span class="hljs-keyword">return</span> tree;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">toTree</span>(<span class="hljs-params">parenId, array</span>) </span>&#123;<br>  <span class="hljs-keyword">let</span> children = [];<br>  <span class="hljs-keyword">let</span> len = array.length;<br>  <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> i = <span class="hljs-number">0</span>; i &lt; len; i++) &#123;<br>    <span class="hljs-keyword">let</span> node = array[i];<br>    <span class="hljs-keyword">if</span> (node.parentId === parenId) &#123;<br>      children.push(&#123;<br>        <span class="hljs-attr">id</span>: node.id,<br>        <span class="hljs-attr">val</span>: node.val,<br>        <span class="hljs-attr">children</span>: toTree(node.id, array),<br>      &#125;);<br>    &#125;<br>  &#125;<br>  <span class="hljs-keyword">return</span> children;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="Set、Map、WeakSet-和-WeakMap-的区别"><a href="#Set、Map、WeakSet-和-WeakMap-的区别" class="headerlink" title="Set、Map、WeakSet 和 WeakMap 的区别"></a>Set、Map、WeakSet 和 WeakMap 的区别</h4><blockquote><p><strong>Set</strong></p><ol><li>成员不能重复；</li><li>只有键值，没有键名，有点类似数组；</li><li>可以遍历，方法有 add、delete、has</li></ol><p><strong>WeakSet</strong></p><ol><li>成员都是对象（引用）；</li><li>成员都是弱引用，随时可以消失（不计入垃圾回收机制）。可以用来保存 DOM 节点，不容易造成内存泄露；</li><li>不能遍历，方法有 add、delete、has；</li></ol><p><strong>Map</strong></p><ol><li>本质上是键值对的集合，类似集合；</li><li>可以遍历，方法很多，可以跟各种数据格式转换；</li></ol><p><strong>WeakMap</strong></p><ol><li>只接收对象为键名（null 除外），不接受其他类型的值作为键名；</li><li>键名指向的对象，不计入垃圾回收机制；</li><li>不能遍历，方法同 get、set、has、delete；</li></ol></blockquote><p>造成内存泄漏的情况</p><blockquote><ol><li>意外的全局变量；</li><li>闭包；</li><li>未被清空的定时器；</li><li>未被销毁的事件监听；</li><li>DOM 引用；</li></ol></blockquote><p>数据类型的判断方法：</p><blockquote><ol><li> 使用 typeof 检测当需要判断变量是否是 number, string, boolean, function, undefined 等类型时，可以使用 typeof 进行判断。</li><li> 使用 instanceof 检测 instanceof 运算符与 typeof 运算符相似，用于识别正在处理的对象的类型。与 typeof 方法不同的是，instanceof 方法要求开发者明确地确认对象为某特定类型。</li><li> 使用 constructor 检测 constructor 本来是原型对象上的属性，指向构造函数。但是根据实例对象寻找属性的顺序，若实例对象上没有实例属性或方法时，就去原型链上寻找，因此，实例对象也是能使用 constructor 属性的。</li></ol></blockquote><p>什么是 promise 和 async await 以及它们的区别</p><blockquote><p><strong>Promise</strong> 是异步编程的一种解决方案，比传统的解决方案——回调函数和事件——更合理和更强大，简单地说，Promise 好比容器，里面存放着一些未来才会执行完毕（异步）的事件的结果，而这些结果一旦生成是无法改变的</p><p><strong>async await</strong>也是异步编程的一种解决方案，他遵循的是 Generator 函数的语法糖，他拥有内置执行器，不需要额外的调用直接会自动执行并输出结果，它返回的是一个 Promise 对象。</p></blockquote><p>区别：</p><blockquote><ol><li>Promise 的出现解决了传统 callback 函数导致的“地域回调”问题，但它的语法导致了它向纵向发展行成了一个回调链，遇到复杂的业务场景，这样的语法显然也是不美观的。而 async await 代码看起来会简洁些，使得异步代码看起来像同步代码，await 的本质是可以提供等同于”同步效果“的等待异步返回能力的语法糖，只有这一句代码执行完，才会执行下一句。</li><li>async await 与 Promise 一样，是非阻塞的。</li><li>async await 是基于 Promise 实现的，可以说是改良版的 Promise，它不能用于普通的回调函数。</li></ol></blockquote><p>js 实现 sleep</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">sleep</span>(<span class="hljs-params">time</span>) </span>&#123;<br>  <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-built_in">Promise</span>(<span class="hljs-function">(<span class="hljs-params">resolve</span>) =&gt;</span> <span class="hljs-built_in">setTimeout</span>(resolve, time));<br>&#125;<br><br><span class="hljs-keyword">const</span> t1 = +<span class="hljs-keyword">new</span> <span class="hljs-built_in">Date</span>();<br>sleep(<span class="hljs-number">3000</span>).then(<span class="hljs-function">() =&gt;</span> &#123;<br>  <span class="hljs-keyword">const</span> t2 = +<span class="hljs-keyword">new</span> <span class="hljs-built_in">Date</span>();<br>  <span class="hljs-built_in">console</span>.log(t2 - t1);<br>&#125;);<br></code></pre></td></tr></table></figure><blockquote><p>优点：这种方式实际上是用了 setTimeout，没有形成进程阻塞，不会造成性能和负载问题。</p><p>缺点：虽然不像 callback 套那么多层，但仍不怎么美观，而且当我们需要在某过程中需要停止执行（或者在中途返回了错误的值），还必须得层层判断后跳出，非常麻烦，而且这种异步并不是那么彻底，还是看起来别扭</p></blockquote><p><strong>Event Loop</strong>执行顺序</p><blockquote><ol><li>所有任务都在主线程上执行，形成一个执行栈(Execution Context Stack)</li><li>在主线程之外还存在一个任务队列(Task Queen),系统把异步任务放到任务队列中，然后主线程继续执行后续的任务</li><li>一旦执行栈中所有的任务执行完毕，系统就会读取任务队列。如果这时异步任务已结束等待状态，就会从任务队列进入执行栈，恢复执行</li><li>主线程不断重复上面的第三步</li></ol></blockquote><p>宏任务 Macrotask 宏任务是指 Event Loop 在<strong>每个阶段</strong>执行的任务</p><p>微任务 Microtask 微任务是指 Event Loop 在<strong>每个阶段之间</strong>执行的任务</p><p>宏任务队列包含任务: A1, A2 , A3</p><p>微任务队列包含任务: B1, B2 , B3</p><p>执行顺序为，首先执行宏任务队列开头的任务，也就是 A1 任务，执行完毕后，在执行微任务队列里的所有任务，也就是依次执行 B1, B2 , B3，执行完后清空微任务队中的任务，接着执行宏任务中的第二个任务 A2，依次循环。</p><p>宏任务 Macrotask 队列真实包含任务：</p><blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">script(主程序代码),setTimeout, setInterval, setImmediate, I/O, UI rendering<br></code></pre></td></tr></table></figure></blockquote><p>微任务 Microtask 队列真实包含任务:</p><blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">process.nextTick, Promises, Object.observe, MutationObserver<br></code></pre></td></tr></table></figure></blockquote><p>执行顺序：</p><blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">script(主程序代码)—&gt;process.nextTick—&gt;Promises...——&gt;setTimeout——&gt;setInterval——&gt;setImmediate——&gt; I/O——&gt;UI rendering<br></code></pre></td></tr></table></figure></blockquote><p>示例：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-built_in">console</span>.time(<span class="hljs-string">&quot;start&quot;</span>);<br><br><span class="hljs-built_in">setTimeout</span>(<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<br>  <span class="hljs-built_in">console</span>.log(<span class="hljs-number">2</span>);<br>&#125;, <span class="hljs-number">10</span>);<br><br>setImmediate(<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<br>  <span class="hljs-built_in">console</span>.log(<span class="hljs-number">1</span>);<br>&#125;);<br><br><span class="hljs-keyword">new</span> <span class="hljs-built_in">Promise</span>(<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">resolve</span>) </span>&#123;<br>  <span class="hljs-built_in">console</span>.log(<span class="hljs-number">3</span>);<br>  resolve();<br>  <span class="hljs-built_in">console</span>.log(<span class="hljs-number">4</span>);<br>&#125;).then(<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<br>  <span class="hljs-built_in">console</span>.log(<span class="hljs-number">5</span>);<br>  <span class="hljs-built_in">console</span>.timeEnd(<span class="hljs-string">&quot;start&quot;</span>);<br>&#125;);<br><br><span class="hljs-built_in">console</span>.log(<span class="hljs-number">6</span>);<br><br>process.nextTick(<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<br>  <span class="hljs-built_in">console</span>.log(<span class="hljs-number">7</span>);<br>&#125;);<br><br><span class="hljs-built_in">console</span>.log(<span class="hljs-number">8</span>);<br></code></pre></td></tr></table></figure><p>结果：3——&gt;4——&gt;6——&gt;8——&gt;7——&gt;5——&gt;start: XXXXms——&gt;1——&gt;2</p>]]></content>
      
      
      
        <tags>
            
            <tag> js </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>31、解决点击手机虚拟返回键退出应用</title>
      <link href="/2021/03/23/31-back/"/>
      <url>/2021/03/23/31-back/</url>
      
        <content type="html"><![CDATA[<p>如何解决安卓手机点击虚拟返回键退出当前应用。</p><span id="more"></span><p>一、问题描述：</p><p>最近的项目是使用Vue全家桶+HBuilder打包开发一个移动端APP。<br>在测试的时候发现，当安卓手机使用虚拟按钮的时候，点击虚拟按钮的返回键，APP会直接退出。<br>这是因为安卓手机自带back虚拟按键，如果不修改其默认事件，点一下app就退出了，<br>所以需要修改这个按键默认事件事件的代码。</p><p>二、解决办法：</p><p>在index.html中加入一个script，加上如下代码：</p><details><summary>点我展示代码</summary><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs javascript">&lt;script&gt;<br>    <span class="hljs-built_in">document</span>.addEventListener(<span class="hljs-string">&#x27;plusready&#x27;</span>, <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<br>        <span class="hljs-keyword">var</span> first = <span class="hljs-literal">null</span>;<br>        <span class="hljs-keyword">var</span> webview = plus.webview.currentWebview();<br>        plus.key.addEventListener(<span class="hljs-string">&#x27;backbutton&#x27;</span>, <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<br>            webview.canBack(<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">e</span>) </span>&#123;<br>                <span class="hljs-keyword">if</span> (e.canBack) &#123;<br>                    webview.back(); <span class="hljs-comment">//这里不建议修改自己跳转的路径  </span><br>                &#125; <span class="hljs-keyword">else</span> &#123;<br>                    <span class="hljs-comment">//首次按键，提示‘再按一次退出应用’  </span><br>                    <span class="hljs-keyword">if</span> (!first) &#123;<br>                      first = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Date</span>().getTime(); <span class="hljs-comment">//获取第一次点击的时间戳  </span><br>                      plus.nativeUI.toast(<span class="hljs-string">&quot;再按一次退出应用&quot;</span>, &#123;<br>                        <span class="hljs-attr">duration</span>: <span class="hljs-string">&#x27;short&#x27;</span><br>                      &#125;); <span class="hljs-comment">//通过H5+ API 调用Android 上的toast 提示框  </span><br>                      <span class="hljs-built_in">setTimeout</span>(<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<br>                        first = <span class="hljs-literal">null</span>;<br>                      &#125;, <span class="hljs-number">1000</span>);<br>                    &#125; <span class="hljs-keyword">else</span> &#123;<br>                        <span class="hljs-comment">// 获取第二次点击的时间戳, 两次之差 小于 1000ms 说明1s点击了两次, </span><br>                      <span class="hljs-keyword">if</span> (<span class="hljs-keyword">new</span> <span class="hljs-built_in">Date</span>().getTime() - first &lt; <span class="hljs-number">1000</span>) &#123;  <br>                        plus.runtime.quit(); <span class="hljs-comment">//退出应用  </span><br>              &#125;<br>            &#125;<br>          &#125;<br>        &#125;)<br>      &#125;);<br>    &#125;);<br>    &lt;/script&gt;<br></code></pre></td></tr></table></figure></details>]]></content>
      
      
      
        <tags>
            
            <tag> dev </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>30、v-for 和 v-if 优先级</title>
      <link href="/2021/03/16/30-v-for-v-if/"/>
      <url>/2021/03/16/30-v-for-v-if/</url>
      
        <content type="html"><![CDATA[<p>v-for 和 v-if 优先级在vue2.x和vue3.x是相反的。</p><span id="more"></span><p>1、实践中，不应该将v-for和v-if放在一起</p><p>2、Vue2中，v-for的优先级是高于v-if，把他们放在一起，输出的渲染函数中可以看出会先执行循环再判断条件，哪怕我们只渲染列表中一小部分元素，也得在每次重渲染的时候遍历整个列表，这样会比较浪费性能；而在Vue3中则跟Vue2完全相反，v-if的优先级是高于v-for的，所以v-if执行时，它调用的变量哈不存在，会导致异常。</p><p>3、2种场景的应用：<br>（1）为了过滤列表肿的项目（v-for=”user in users” v-if=”user.isActive”   ）。这种情况，我们可以使用计算属性，定义一个activeUsers，让其返回过滤后的列表即可（“users.filter(u =&gt; u.isActive)”）<br>  (2)为了避免渲染本应该被隐藏的列表（v-for=”user in users” v-if=”shouldShowUsers”）。此时v-if移动到容器元素上（比如ul ol）或者外面包一层template即可</p><p>4、Vue文档明确指出v-if和v-for不要同事用在同一个元素上。</p>]]></content>
      
      
      
        <tags>
            
            <tag> vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>29、Vue-虚拟DOM</title>
      <link href="/2021/03/12/29-vdom/"/>
      <url>/2021/03/12/29-vdom/</url>
      
        <content type="html"><![CDATA[<span id="more"></span><p>虚拟DOM其实就是一棵模拟JavaScript对象作为基础的树，用对象属性来描述节点，实际上它只是一层对真实DOM的抽象。<br>最终可以通过一系列操作使这棵树映射到真实环境上。</p>]]></content>
      
      
      
        <tags>
            
            <tag> vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>28、vue组件化实践之插槽（二）</title>
      <link href="/2021/02/24/28-vue-component2/"/>
      <url>/2021/02/24/28-vue-component2/</url>
      
        <content type="html"><![CDATA[<p>插槽：插槽语法是Vue 实现的内容分发 API，用于复合组件开发。该技术在通用组件库开发中有大量应用。</p><span id="more"></span><h3 id="一、匿名插槽"><a href="#一、匿名插槽" class="headerlink" title="一、匿名插槽"></a>一、匿名插槽</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// comp1</span><br>&lt;div&gt;<br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">slot</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">slot</span>&gt;</span></span><br>&lt;/div&gt;<br><br><span class="hljs-comment">// parent</span><br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">comp</span>&gt;</span>hello<span class="hljs-tag">&lt;/<span class="hljs-name">comp</span>&gt;</span></span><br></code></pre></td></tr></table></figure><h3 id="二、具名插槽"><a href="#二、具名插槽" class="headerlink" title="二、具名插槽"></a>二、具名插槽</h3><blockquote><p>内容分发到子组件指定位置</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// comp2</span><br>&lt;div&gt;<br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">slot</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">slot</span>&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">slot</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;content&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">slot</span>&gt;</span></span><br>&lt;/div&gt;<br><br><span class="hljs-comment">// parent</span><br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">comp</span>&gt;</span></span><br><span class="xml">// 默认插槽用default做参数 具名插槽用插槽名做参数</span><br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">template</span> <span class="hljs-attr">v-slot:default</span>&gt;</span>具名插槽<span class="hljs-tag">&lt;/<span class="hljs-name">tempalte</span>&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">template</span> <span class="hljs-attr">v-slot:content</span>&gt;</span>内容...<span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">comp</span>&gt;</span></span><br></code></pre></td></tr></table></figure><h3 id="三、作用域插槽"><a href="#三、作用域插槽" class="headerlink" title="三、作用域插槽"></a>三、作用域插槽</h3><blockquote><p>分发内容要用到子组件中的数据</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs js">&lt;div&gt;<br>    <span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">slot</span> <span class="hljs-attr">:foo</span>=<span class="hljs-string">&quot;foo&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">slot</span>&gt;</span></span><br>&lt;/div&gt;<br><br><span class="hljs-comment">// parent</span><br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">comp</span>&gt;</span></span><br><span class="xml">// 把v-slot的值指定为作用域上下文对象</span><br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">tempalte</span> <span class="hljs-attr">v-slot:default</span>=<span class="hljs-string">&quot;slotProps&quot;</span>&gt;</span></span><br><span class="xml">    来自子组件数据：&#123;&#123;slotProps.foo&#125;&#125;</span><br><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">tempalte</span>&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">comp</span>&gt;</span></span><br></code></pre></td></tr></table></figure><h3 id="四、实例代码"><a href="#四、实例代码" class="headerlink" title="四、实例代码"></a>四、实例代码</h3><p>子组件代码如下：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 子组件 Layout.vue</span><br>&lt;template&gt;<br>  <span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span></span><br><span class="xml">    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;header&quot;</span>&gt;</span></span><br><span class="xml">      <span class="hljs-tag">&lt;<span class="hljs-name">slot</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;header&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">slot</span>&gt;</span></span><br><span class="xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="xml">    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;body&quot;</span>&gt;</span></span><br><span class="xml">      <span class="hljs-tag">&lt;<span class="hljs-name">slot</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">slot</span>&gt;</span></span><br><span class="xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="xml">    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;footer&quot;</span>&gt;</span></span><br><span class="xml">      <span class="hljs-tag">&lt;<span class="hljs-name">slot</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;footer&quot;</span> <span class="hljs-attr">:fc</span>=<span class="hljs-string">&quot;footerContent&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">slot</span>&gt;</span></span><br><span class="xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="xml">  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>&lt;/template&gt;<br><br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="javascript"><span class="xml">  <span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> &#123;</span></span><br><span class="javascript"><span class="xml">    <span class="hljs-function"><span class="hljs-title">data</span>(<span class="hljs-params"></span>)</span> &#123;</span></span><br><span class="javascript"><span class="xml">      <span class="hljs-keyword">return</span> &#123;</span></span><br><span class="javascript"><span class="xml">        <span class="hljs-attr">remark</span>: [</span></span><br><span class="javascript"><span class="xml">          <span class="hljs-string">&#x27;好好学习，天天向上&#x27;</span>,</span></span><br><span class="javascript"><span class="xml">          <span class="hljs-string">&#x27;学习永远不晚&#x27;</span>,</span></span><br><span class="javascript"><span class="xml">          <span class="hljs-string">&#x27;学习知识要善于思考,思考,再思考&#x27;</span>,</span></span><br><span class="javascript"><span class="xml">          <span class="hljs-string">&#x27;学习的敌人是自己的满足,要认真学习一点东西,必须从不自满开始&#x27;</span>,</span></span><br><span class="javascript"><span class="xml">          <span class="hljs-string">&#x27;构成我们学习最大障碍的是已知的东西,而不是未知的东西&#x27;</span>,</span></span><br><span class="javascript"><span class="xml">          <span class="hljs-string">&#x27;在今天和明天之间,有一段很长的时间;趁你还有精神的时候,学习迅速办事&#x27;</span>,</span></span><br><span class="javascript"><span class="xml">          <span class="hljs-string">&#x27;三人行必有我师焉；择其善者而从之，其不善者而改之&#x27;</span></span></span><br><span class="javascript"><span class="xml">        ]</span></span><br><span class="javascript"><span class="xml">      &#125;</span></span><br><span class="javascript"><span class="xml">    &#125;,</span></span><br><span class="javascript"><span class="xml">    <span class="hljs-attr">computed</span>: &#123;</span></span><br><span class="javascript"><span class="xml">      <span class="hljs-function"><span class="hljs-title">footerContent</span>(<span class="hljs-params"></span>)</span> &#123;</span></span><br><span class="javascript"><span class="xml">        <span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>.remark[<span class="hljs-keyword">new</span> <span class="hljs-built_in">Date</span>().getDay() - <span class="hljs-number">1</span>] </span></span><br><span class="javascript"><span class="xml">      &#125;</span></span><br><span class="javascript"><span class="xml">    &#125;,</span></span><br><span class="javascript"><span class="xml">  &#125;</span></span><br><span class="javascript"><span class="xml"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br><br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">style</span> <span class="hljs-attr">scoped</span>&gt;</span><span class="css"></span></span><br><span class="css"><span class="xml"><span class="hljs-selector-class">.header</span> &#123;</span></span><br><span class="css"><span class="xml">  <span class="hljs-attribute">background-color</span>: <span class="hljs-built_in">rgb</span>(<span class="hljs-number">252</span>, <span class="hljs-number">175</span>, <span class="hljs-number">175</span>);</span></span><br><span class="css"><span class="xml">&#125;</span></span><br><span class="css"><span class="xml"><span class="hljs-selector-class">.body</span> &#123;</span></span><br><span class="css"><span class="xml">  <span class="hljs-attribute">display</span>: flex;</span></span><br><span class="css"><span class="xml">  <span class="hljs-attribute">background-color</span>: <span class="hljs-built_in">rgb</span>(<span class="hljs-number">144</span>, <span class="hljs-number">250</span>, <span class="hljs-number">134</span>);</span></span><br><span class="css"><span class="xml">  <span class="hljs-attribute">min-height</span>: <span class="hljs-number">100px</span>;</span></span><br><span class="css"><span class="xml">  <span class="hljs-attribute">align-items</span>: center;</span></span><br><span class="css"><span class="xml">  <span class="hljs-attribute">justify-content</span>: center;</span></span><br><span class="css"><span class="xml">&#125;</span></span><br><span class="css"><span class="xml"><span class="hljs-selector-class">.footer</span> &#123;</span></span><br><span class="css"><span class="xml">  <span class="hljs-attribute">background-color</span>: <span class="hljs-built_in">rgb</span>(<span class="hljs-number">114</span>, <span class="hljs-number">116</span>, <span class="hljs-number">255</span>);</span></span><br><span class="css"><span class="xml">&#125;</span></span><br><span class="css"><span class="xml"></span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span></span><br></code></pre></td></tr></table></figure><p>父组件代码如下：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">//父组件 index.vue</span><br>&lt;template&gt;<br>  <span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span></span><br><span class="xml">    <span class="hljs-tag">&lt;<span class="hljs-name">h2</span>&gt;</span>插槽<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span></span><br><span class="xml">    <span class="hljs-comment">&lt;!-- 插槽 --&gt;</span></span><br><span class="xml">    <span class="hljs-tag">&lt;<span class="hljs-name">Layout</span>&gt;</span></span><br><span class="xml">      <span class="hljs-comment">&lt;!-- 具名插槽 --&gt;</span></span><br><span class="xml">      <span class="hljs-tag">&lt;<span class="hljs-name">template</span> <span class="hljs-attr">v-slot:header</span>&gt;</span>全栈工程师<span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span></span><br><span class="xml">      <span class="hljs-comment">&lt;!-- 匿名插槽 --&gt;</span></span><br><span class="xml">      <span class="hljs-tag">&lt;<span class="hljs-name">template</span>&gt;</span>content...<span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span></span><br><span class="xml">      <span class="hljs-comment">&lt;!-- 作用域插槽 --&gt;</span></span><br><span class="xml">      <span class="hljs-tag">&lt;<span class="hljs-name">template</span> <span class="hljs-attr">v-slot:footer</span>=<span class="hljs-string">&quot;&#123;fc&#125;&quot;</span>&gt;</span>&#123;&#123;fc&#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span></span><br><span class="xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">Layout</span>&gt;</span></span><br><span class="xml">  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>&lt;/template&gt;<br><br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="javascript"><span class="xml">  <span class="hljs-keyword">import</span> Layout <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@/components/slots/Layout.vue&#x27;</span></span></span><br><span class="javascript"><span class="xml">  </span></span><br><span class="javascript"><span class="xml">  <span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> &#123;</span></span><br><span class="javascript"><span class="xml">    <span class="hljs-attr">components</span>: &#123;</span></span><br><span class="javascript"><span class="xml">      Layout</span></span><br><span class="javascript"><span class="xml">    &#125;,</span></span><br><span class="javascript"><span class="xml">  &#125;</span></span><br><span class="javascript"><span class="xml"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br><br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">style</span> <span class="hljs-attr">scoped</span>&gt;</span></span><br><span class="xml"></span><br><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span></span><br></code></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>27、vue组件化实践之组件通信（一）</title>
      <link href="/2021/02/20/27-vue-component/"/>
      <url>/2021/02/20/27-vue-component/</url>
      
        <content type="html"><![CDATA[<p>vue组件系统提供了一种抽象，让我们可以使用独立可复用的组件来构建大型应用，任意类型的应用界 面都可以抽象为一个组件树。组件化能提高开发效率，方便重复使用，简化调试步骤，提升项目可维护性，便于多人协同开发。</p><span id="more"></span><h3 id="一、组件通信常用方式"><a href="#一、组件通信常用方式" class="headerlink" title="一、组件通信常用方式"></a>一、组件通信常用方式</h3><p>1、props</p><blockquote><p>父组件传给子组件</p></blockquote><p>父子组件交互，props和$emit</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// child</span><br><span class="hljs-attr">props</span>:&#123;<span class="hljs-attr">msg</span>:<span class="hljs-built_in">String</span>&#125;<br><span class="hljs-comment">// parent</span><br>&lt;HelloWorld msg=<span class="hljs-string">&quot;hello vue&quot;</span> /&gt;<br></code></pre></td></tr></table></figure><p>2、自定义事件</p><blockquote><p>子传父</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">//child</span><br><span class="hljs-built_in">this</span>.$emit(<span class="hljs-string">&#x27;add&#x27;</span>,good)<br><span class="hljs-comment">// parent</span><br>&lt;Cart @add=<span class="hljs-string">&quot;cartAdd($event)&quot;</span>&gt;&lt;/Cart&gt;<br></code></pre></td></tr></table></figure><p>3、eventBus事件总线</p><blockquote><p>任意两个组件之间的传值常用事件总线或者vuex</p></blockquote><p>4、$parent和$root</p><blockquote><p>兄弟组件之间通信可通过共同父辈搭桥，$parent或$root</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// brother1</span><br><span class="hljs-built_in">this</span>.$parent.$on(<span class="hljs-string">&#x27;foo&#x27;</span>,handle)<br><span class="hljs-comment">// brother2</span><br><span class="hljs-built_in">this</span>.$parent.$emit(<span class="hljs-string">&#x27;foo&#x27;</span>)<br></code></pre></td></tr></table></figure><p>5、$children</p><blockquote><p>父组件可通过$children访问子组件实现父子通信</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// parent</span><br><span class="hljs-built_in">this</span>.$children[<span class="hljs-number">0</span>].xx=<span class="hljs-string">&#x27;xxx&#x27;</span><br></code></pre></td></tr></table></figure><p>6、$attrs、$listeners</p><blockquote><p>包含了父作用域中不作为 prop 被识别 (且获取) 的特性绑定 ( class 和 style 除外)。当一个组件没有 声明任何 prop 时，这里会包含所有父作用域的绑定 ( class 和 style 除外)，并且可以通过 v- bind=”$attrs” 传入内部组件——在创建高级别的组件时非常有用。</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// child:未在props中声明foo</span><br>&lt;p&gt;&#123;&#123;$attrs.foo&#125;&#125;&lt;/p&gt;<br><span class="hljs-comment">// parent</span><br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">HelloWorld</span> <span class="hljs-attr">foo</span>=<span class="hljs-string">&quot;foo&quot;</span>&gt;</span></span><br></code></pre></td></tr></table></figure><p>7、refs</p><blockquote><p>获取子节点引用</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// parent</span><br>&lt;HelloWorld ref=<span class="hljs-string">&quot;wrap&quot;</span>&gt;<br><span class="hljs-function"><span class="hljs-title">mounted</span>(<span class="hljs-params"></span>)</span>&#123;<br>    <span class="hljs-built_in">this</span>.$refs.wrap.xx = <span class="hljs-string">&quot;xxx&quot;</span><br>&#125;<br></code></pre></td></tr></table></figure><p>8、provide/inject</p><blockquote><p>能够实现祖先和后代之间的传值</p></blockquote>]]></content>
      
      
      
        <tags>
            
            <tag> vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>26、关于v-for的key值为什么不能是index？</title>
      <link href="/2021/02/14/26-v-for-index/"/>
      <url>/2021/02/14/26-v-for-index/</url>
      
        <content type="html"><![CDATA[<p>从实际的案例发现到在使用 v-for 时，将 key 值写成了 index，出现的问题。与其使用 index 作为 key ，不如完全不写 key，因为他们的性能是一样。比如一个列表长度为 10，用 index 作为 key ，各 item 的 key 值依次就是 0-9， 然后 reverse() 一下，列表的的 key 还是 0-9。在依次 patch 这 10 个 item 的时候，sameVnode() 全部返回真（因为 tag 和 key 都一样）。再看另外一种情况，如果不写 key ， 那这 10 个 item 的 key 全部是 undefined, 在 sameVnode() 也是全部返回真（因为 tag 相同，key 也相同：key 都是 undefined）。所以得出结论，如果使用 index 作为 key，不如干脆不写 key 了，还能省下代码。</p><span id="more"></span><h3 id="一、案例-bug-复现"><a href="#一、案例-bug-复现" class="headerlink" title="一、案例 bug 复现"></a>一、案例 bug 复现</h3><p>父组件代码：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 父组件</span><br>&lt;Child<br>    v-<span class="hljs-keyword">for</span>=<span class="hljs-string">&quot;(item,index) in list&quot;</span><br>    :key=<span class="hljs-string">&quot;index&quot;</span><br>    :count=<span class="hljs-string">&quot;item.count&quot;</span><br>    :name=<span class="hljs-string">&quot;item.name&quot;</span><br>    @<span class="hljs-keyword">delete</span>=<span class="hljs-string">&quot;handleDelete(index)&quot;</span><br>/&gt;<br><br><span class="hljs-comment">// data</span><br>list:[<br>    &#123;<br>        <span class="hljs-attr">count</span>:<span class="hljs-number">1</span>,<br>        <span class="hljs-attr">name</span>:<span class="hljs-string">&quot;1&quot;</span><br>    &#125;,<br>    &#123;<br>        <span class="hljs-attr">count</span>:<span class="hljs-number">2</span>,<br>        <span class="hljs-attr">name</span>:<span class="hljs-string">&quot;2&quot;</span><br>    &#125;,<br>       &#123;<br>        <span class="hljs-attr">count</span>:<span class="hljs-number">3</span>,<br>        <span class="hljs-attr">name</span>:<span class="hljs-string">&quot;3&quot;</span><br>    &#125;,<br>]<br><span class="hljs-comment">// method</span><br><span class="hljs-function"><span class="hljs-title">handelDelete</span>(<span class="hljs-params">index</span>)</span>&#123;<br>    <span class="hljs-built_in">this</span>.list.splice(index,<span class="hljs-number">1</span>)<br>&#125;<br></code></pre></td></tr></table></figure><p>子组件代码：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 子组件</span><br>&lt;div&gt;<br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span></span><br><span class="xml">    &#123;&#123;name&#125;&#125;</span><br><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span></span><br>count：&#123;&#123; innerCount &#125;&#125;<br>&lt;button @click=<span class="hljs-string">&quot;$emit(&#x27;delete)&quot;</span>&gt;&lt;<span class="hljs-regexp">/button&gt;delete&lt;/</span>button&gt;<br>&lt;/div&gt;<br><span class="hljs-comment">// props</span><br>props:&#123;<br>    <span class="hljs-attr">count</span>:&#123;<br>        <span class="hljs-attr">type</span>:<span class="hljs-built_in">Number</span>,<br>        <span class="hljs-attr">default</span>:<span class="hljs-number">0</span><br>    &#125;,<br>    <span class="hljs-attr">name</span>:&#123;<br>        <span class="hljs-attr">type</span>:<span class="hljs-built_in">String</span>,<br>        <span class="hljs-attr">default</span>:<span class="hljs-string">&#x27;&#x27;</span><br>    &#125;<br>&#125;<br><span class="hljs-comment">// data</span><br><span class="hljs-function"><span class="hljs-title">data</span>(<span class="hljs-params"></span>)</span>&#123;<br>    retrun&#123;<br>        <span class="hljs-comment">// 子组件下面的这行代码定义了自己的状态，无法使用index作为key值</span><br>        <span class="hljs-attr">innerCount</span>:<span class="hljs-built_in">this</span>.count<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p>当删除的时候，看上去是成功了，其实存在问题。加上排序也是存在问题。</p><p>将 v-for 里面的 key 换成 item 后，是正常的。</p><p>Vue 官网的描述：</p><blockquote><p>当 Vue 正在更新使用 v-for 渲染的元素列表时，它默认使用“就地更新”的策略。如果数据项的顺序被改变，Vue 将不会移动 DOM 元素来匹配数据项的顺序，而是就地更新每个元素，并且确保它们在每个索引位置正确渲染。</p></blockquote><blockquote><p>这个默认的模式是高效的，但是只适用于不依赖子组件装填或临时 DOM 状态的列表渲染输出。</p></blockquote><h3 id="二、总结"><a href="#二、总结" class="headerlink" title="二、总结"></a>二、总结</h3><p>写列表渲染时，依赖子组件状态或者临时 DOM 状态的情况，如果存在删除、增加、排序这样的功能，不能将 index 作为 key 值。</p><p>这里还包括 diff 算法…(待添加)</p>]]></content>
      
      
      
        <tags>
            
            <tag> vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>25、vue使用hls.js处理m3u8格式的视频</title>
      <link href="/2021/01/08/25-hls/"/>
      <url>/2021/01/08/25-hls/</url>
      
        <content type="html"><![CDATA[<p>m3u8 文件是指 UTF-8 编码格式的 m3u 文件。m3u 文件是记录了一个索引纯文本文件,打开它时播放软件并不是播放它,而是根据它的索引找到对应的音视频文件的网络地址进行在线播放。</p><span id="more"></span><blockquote><p>HLS 与 M3U8 HLS(全称:Http Live Streaming)是由 Apple 公司定义的用于实时流传输的协议</p></blockquote><p>公司项目中使用了视频监控功能，需要在系统内显示 m3u8 格式的视频。</p><p>1、安装 hls.js 插件或者使用 CDN 引入</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs js">npm install hls.js --save<br><span class="hljs-comment">// 或者</span><br>&lt;script src=<span class="hljs-string">&quot;https://cdn.jsdelivr.net/npm/hls.js@latest&quot;</span>&gt;&lt;/script&gt;<br></code></pre></td></tr></table></figure><p>2、业务代码如下：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">video</span></span><br><span class="hljs-tag">  <span class="hljs-attr">ref</span>=<span class="hljs-string">&quot;video&quot;</span></span><br><span class="hljs-tag">  <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;myVideo2&quot;</span></span><br><span class="hljs-tag">  <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;video-js vjs-default-skin vjs-big-play-centered&quot;</span></span><br><span class="hljs-tag">  <span class="hljs-attr">autoplay</span>=<span class="hljs-string">&quot;autoplay&quot;</span></span><br><span class="hljs-tag">  <span class="hljs-attr">controls</span></span><br><span class="hljs-tag">  <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;width: 100%; height: 280px; margin-top: 5px&quot;</span></span><br><span class="hljs-tag">&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">video</span>&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">import</span> Hls <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;hls.js&quot;</span>;<br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> &#123;<br>  <span class="hljs-function"><span class="hljs-title">data</span>(<span class="hljs-params"></span>)</span> &#123;<br>    <span class="hljs-keyword">return</span> &#123;<br>      <span class="hljs-attr">hls</span>: <span class="hljs-literal">null</span>,<br>    &#125;;<br>  &#125;,<br>  <span class="hljs-attr">methods</span>: &#123;<br>    <span class="hljs-function"><span class="hljs-title">getStream</span>(<span class="hljs-params">source</span>)</span> &#123;<br>      <span class="hljs-keyword">if</span> (Hls.isSupported()) &#123;<br>        <span class="hljs-built_in">this</span>.hls = <span class="hljs-keyword">new</span> Hls();<br>        <span class="hljs-built_in">this</span>.hls.loadSource(source);<br>        <span class="hljs-built_in">this</span>.hls.attachMedia(<span class="hljs-built_in">this</span>.$refs.video);<br>        <span class="hljs-built_in">this</span>.hls.on(Hls.Events.MANIFEST_PARSED, <span class="hljs-function">() =&gt;</span> &#123;<br>          <span class="hljs-built_in">this</span>.$refs.video.play();<br>        &#125;);<br>        <span class="hljs-built_in">this</span>.hls.on(Hls.Events.ERROR, <span class="hljs-function">(<span class="hljs-params">event, data</span>) =&gt;</span> &#123;<br>          <span class="hljs-built_in">this</span>.$message(<span class="hljs-string">&quot;视频加载失败&quot;</span>);<br>        &#125;);<br>      &#125;<span class="hljs-keyword">else</span>&#123;<br>        <span class="hljs-built_in">this</span>.$message(<span class="hljs-string">&quot;格式不支持&quot;</span>)<br>      &#125;<br>    &#125;,<br>  &#125;,<br>  <span class="hljs-comment">// 从接口获取的视频资源应当写在mounted里面，否则容易出现进入视频页面的时候，视频加载不出来的现象</span><br>  <span class="hljs-function"><span class="hljs-title">mounted</span>(<span class="hljs-params"></span>)</span> &#123;<br>    <span class="hljs-built_in">this</span>.$service.get(<span class="hljs-string">&quot;demo/test&quot;</span>).then(<span class="hljs-function">(<span class="hljs-params">res</span>) =&gt;</span> &#123;<br>      <span class="hljs-built_in">this</span>.getStream(res.data[<span class="hljs-number">1</span>].hls);<br>    &#125;);<br>  &#125;,<br>&#125;;<br></code></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> dev </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>24、CSS3：linear-gradient线性渐变和radial-gradient径向渐变的使用</title>
      <link href="/2020/08/12/24-css3-linear-gradient/"/>
      <url>/2020/08/12/24-css3-linear-gradient/</url>
      
        <content type="html"><![CDATA[<p>linear-gradient() 函数用于创建一个表示两种或多种颜色线性渐变的图片。</p><p>创建一个线性渐变，需要指定两种颜色，还可以实现不同方向（指定为一个角度）的渐变效果，如果不指定方向，默认从上到下渐变。</p><span id="more"></span><p>radial-gradient()径向渐变由它的中心定义。</p><p>为了创建一个径向渐变，你也必须至少定义两种颜色节点。颜色节点即你想要呈现平稳过渡的颜色。同时，你也可以指定渐变的中心、形状（圆形或椭圆形）、大小。默认情况下，渐变的中心是 center（表示在中心点），渐变的形状是 ellipse（表示椭圆形），渐变的大小是 farthest-corner（表示到最远的角落）。</p><h3 id="一、使用方法"><a href="#一、使用方法" class="headerlink" title="一、使用方法"></a>一、使用方法</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs html">// html<br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;box&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-class">.box</span>&#123; <br>    <span class="hljs-attribute">width</span>:<span class="hljs-number">100px</span>;<br>    <span class="hljs-attribute">height</span>:<span class="hljs-number">100px</span>;<br>    <span class="hljs-comment">/* 线性渐变 */</span><br>    <span class="hljs-comment">/* 从上到下 由黄色变为红色变为蓝色 */</span><br>    <span class="hljs-attribute">background</span>:<span class="hljs-built_in">linear-gradient</span>(yellow,red,blue);<br>    <span class="hljs-comment">/* 渐变轴为45度，从蓝色渐变到红色 */</span><br>    <span class="hljs-attribute">background</span>:<span class="hljs-built_in">linear-gradient</span>(<span class="hljs-number">45deg</span>, blue, red);<br>    <span class="hljs-comment">/* 从右下到左上、从蓝色渐变到红色 */</span><br>    <span class="hljs-attribute">background</span>:<span class="hljs-built_in">linear-gradient</span>(to left top, blue, red);<br>    <span class="hljs-comment">/* 从下到上，从蓝色开始渐变、到高度40%位置是绿色渐变开始、最后以红色结束 */</span><br>    <span class="hljs-attribute">background</span>:<span class="hljs-built_in">linear-gradient</span>(<span class="hljs-number">0deg</span>, blue, green <span class="hljs-number">40%</span>, red); &#125;<br><br>    <span class="hljs-comment">/* 径向渐变 */</span><br>    <span class="hljs-comment">/* 中心红色 红色周围为黄色 周边为绿色  */</span><br>    <span class="hljs-attribute">background-image</span>: <span class="hljs-built_in">radial-gradient</span>(red, yellow, green)<br><br></code></pre></td></tr></table></figure><h3 id="二、不同浏览器的支持"><a href="#二、不同浏览器的支持" class="headerlink" title="二、不同浏览器的支持"></a>二、不同浏览器的支持</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;box&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>// css<br>.box&#123; <br>    <span class="hljs-comment">&lt;!-- chrome --&gt;</span><br>    background: -webkit-linear-gradient(to right, red, green); <br>    <span class="hljs-comment">&lt;!-- Opera --&gt;</span><br>    background:-o-linear-gradient(to right,to right, red, green); <br>    <span class="hljs-comment">&lt;!-- Firefox --&gt;</span><br>    background:-moz-linear-gradient (to right, to right, red, green); <br><br>    background:linear-gradient(to right, to right, red, green); &#125;<br></code></pre></td></tr></table></figure><h3 id="三、语法"><a href="#三、语法" class="headerlink" title="三、语法"></a>三、语法</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-comment">/* linear-gradient 线性渐变 */</span><br><span class="hljs-attribute">background-image</span>: <span class="hljs-built_in">linear-gradient</span>(direction, color-stop1, color-stop2, ...);<br><span class="hljs-comment">/* radial-gradient 径向渐变*/</span><br><span class="hljs-attribute">background-image</span>: <span class="hljs-built_in">radial-gradient</span>(shape size at position, start-color, ..., last-color);<br><br></code></pre></td></tr></table></figure><h3 id="四、实际应用"><a href="#四、实际应用" class="headerlink" title="四、实际应用"></a>四、实际应用</h3><p>如dashboard首页有四个盒子，每个盒子的背景渐变色是不同的，使用scss css预处理器的写法。</p><h4 id="1、mixin-scss"><a href="#1、mixin-scss" class="headerlink" title="1、mixin.scss"></a>1、mixin.scss</h4><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-comment">/*  */</span><br><span class="hljs-keyword">@mixin</span> cardBg($leftColor, $rightColor) &#123;<br>  <span class="hljs-attribute">background</span>: <span class="hljs-built_in">-webkit-linear-gradient</span>(to right, $leftColor, $rightColor);<br>  <span class="hljs-attribute">background</span>: <span class="hljs-built_in">-o-linear-gradient</span>(to right, $leftColor, $rightColor);<br>  <span class="hljs-attribute">background</span>: -moz-linear-gradient (to right, $leftColor, $rightColor);<br>  <span class="hljs-attribute">background</span>: <span class="hljs-built_in">linear-gradient</span>(to right, $leftColor, $rightColor);<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="2、页面引入mixin-scss"><a href="#2、页面引入mixin-scss" class="headerlink" title="2、页面引入mixin.scss"></a>2、页面引入mixin.scss</h4><blockquote><p>下面的@include 是调用mixin的cardBg变量</p></blockquote><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-keyword">@import</span> <span class="hljs-string">&#x27;&#x27;</span>./mixin.scss<br><br>.cardList-wrapper&#123;<br>    <span class="hljs-attribute">box-sizing</span>:border-box;<br>    heitht:<span class="hljs-number">150px</span>;<br>    <span class="hljs-attribute">padding</span>:<span class="hljs-number">15px</span> <span class="hljs-number">15px</span> <span class="hljs-number">0</span>;<br>    <span class="hljs-attribute">border-radius</span>:<span class="hljs-number">6px</span>;<br>    <span class="hljs-attribute">cursor</span>:pointer;<br>    <span class="hljs-attribute">margin-bottom</span>:<span class="hljs-number">25px</span>;<br>    <span class="hljs-attribute">box-shadow</span>:<span class="hljs-number">3px</span> <span class="hljs-number">5px</span> <span class="hljs-number">15px</span> <span class="hljs-built_in">rgba</span>(<span class="hljs-number">40</span>,<span class="hljs-number">40</span>,<span class="hljs-number">40</span>,<span class="hljs-number">0.36</span>);<br>    <span class="hljs-comment">/* 第一个盒子 */</span><br>    &amp;<span class="hljs-selector-class">.card-item-one</span>&#123;<br>        <span class="hljs-keyword">@include</span> cardBg(#<span class="hljs-number">5171</span>fd,#c97afd);<br>        &amp;<span class="hljs-selector-pseudo">:hover</span>&#123;<br>            <span class="hljs-attribute">box-shadow</span>:<span class="hljs-number">0</span> <span class="hljs-number">5px</span> <span class="hljs-number">10px</span> <span class="hljs-number">#c97afd</span>;<br>        &#125;<br>    &#125;<br>    <span class="hljs-comment">/* 第二个盒子 */</span><br>    &amp;<span class="hljs-selector-class">.card-item-two</span> &#123;<br>      <span class="hljs-keyword">@include</span> cardBg(#<span class="hljs-number">3</span>dadf6, #<span class="hljs-number">737</span>bfc);<br>       &amp;<span class="hljs-selector-pseudo">:hover</span> &#123;<br>        <span class="hljs-attribute">box-shadow</span>: <span class="hljs-number">0</span> <span class="hljs-number">5px</span> <span class="hljs-number">10px</span> <span class="hljs-number">#737bfc</span>;<br>      &#125;<br>    &#125;<br>    <span class="hljs-comment">/* 第三个盒子 */</span><br>    &amp;<span class="hljs-selector-class">.card-item-three</span> &#123;<br>      <span class="hljs-keyword">@include</span> cardBg(#ea677c, #ef9b5f);<br>       &amp;<span class="hljs-selector-pseudo">:hover</span> &#123;<br>        <span class="hljs-attribute">box-shadow</span>: <span class="hljs-number">0</span> <span class="hljs-number">5px</span> <span class="hljs-number">10px</span> <span class="hljs-number">#ef9b5f</span>;<br>      &#125;<br>    &#125;<br>    <span class="hljs-comment">/* 第四个盒子 */</span><br>    &amp;<span class="hljs-selector-class">.card-item-four</span> &#123;<br>      <span class="hljs-keyword">@include</span> cardBg(#<span class="hljs-number">42</span>d79b, #a6e25f);<br>       &amp;<span class="hljs-selector-pseudo">:hover</span> &#123;<br>        <span class="hljs-attribute">box-shadow</span>: <span class="hljs-number">0</span> <span class="hljs-number">5px</span> <span class="hljs-number">10px</span> <span class="hljs-number">#a6e25f</span>;<br>      &#125;<br>    &#125;<br>    <span class="hljs-comment">/* 四个盒子在hover时都会变大一些 */</span><br>    &amp;<span class="hljs-selector-pseudo">:hover</span> &#123;<br>      <span class="hljs-attribute">transform</span>: <span class="hljs-built_in">scale</span>(<span class="hljs-number">1.03</span>);<br>      <span class="hljs-attribute">transition</span>: all <span class="hljs-number">0.1s</span> ease-out;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> css </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>23、百度地图动画（轨迹动画）</title>
      <link href="/2020/04/30/23-bmap-animate/"/>
      <url>/2020/04/30/23-bmap-animate/</url>
      
        <content type="html"><![CDATA[<p>百度地图动画及轨迹动画</p><span id="more"></span><h3 id="一、百度地图动画"><a href="#一、百度地图动画" class="headerlink" title="一、百度地图动画"></a>一、百度地图动画</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;allmap&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;tools&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;start&quot;</span>&gt;</span>播放动画<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;end&quot;</span>&gt;</span>停止播放<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></td></tr></table></figure><details><summary>点我展开js代码</summary><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> bmap = <span class="hljs-keyword">new</span> BMapGL.Map(<span class="hljs-string">&quot;allmap&quot;</span>); <span class="hljs-comment">// 创建Map实例</span><br>bmap.centerAndZoom(<span class="hljs-keyword">new</span> BMapGL.Point(<span class="hljs-number">116.414</span>, <span class="hljs-number">39.915</span>), <span class="hljs-number">20</span>); <span class="hljs-comment">// 初始化地图，设置中心点坐标和地图级别</span><br>bmap.enableScrollWheelZoom(<span class="hljs-literal">true</span>); <span class="hljs-comment">// 开启鼠标滚轮缩放</span><br>bmap.setTilt(<span class="hljs-number">20</span>); <span class="hljs-comment">// 设置地图初始倾斜角度</span><br><span class="hljs-keyword">var</span> keyFrames = [<br>  &#123;<br>    <span class="hljs-attr">center</span>: <span class="hljs-keyword">new</span> BMapGL.Point(<span class="hljs-number">116.307092</span>, <span class="hljs-number">40.054922</span>),<br>    <span class="hljs-attr">zoom</span>: <span class="hljs-number">20</span>,<br>    <span class="hljs-attr">tilt</span>: <span class="hljs-number">50</span>,<br>    <span class="hljs-attr">heading</span>: <span class="hljs-number">0</span>,<br>    <span class="hljs-attr">percentage</span>: <span class="hljs-number">0</span>,<br>  &#125;,<br>  &#123;<br>    <span class="hljs-attr">center</span>: <span class="hljs-keyword">new</span> BMapGL.Point(<span class="hljs-number">116.307631</span>, <span class="hljs-number">40.055391</span>),<br>    <span class="hljs-attr">zoom</span>: <span class="hljs-number">21</span>,<br>    <span class="hljs-attr">tilt</span>: <span class="hljs-number">70</span>,<br>    <span class="hljs-attr">heading</span>: <span class="hljs-number">0</span>,<br>    <span class="hljs-attr">percentage</span>: <span class="hljs-number">0.1</span>,<br>  &#125;,<br>  &#123;<br>    <span class="hljs-attr">center</span>: <span class="hljs-keyword">new</span> BMapGL.Point(<span class="hljs-number">116.306858</span>, <span class="hljs-number">40.057887</span>),<br>    <span class="hljs-attr">zoom</span>: <span class="hljs-number">21</span>,<br>    <span class="hljs-attr">tilt</span>: <span class="hljs-number">70</span>,<br>    <span class="hljs-attr">heading</span>: <span class="hljs-number">0</span>,<br>    <span class="hljs-attr">percentage</span>: <span class="hljs-number">0.25</span>,<br>  &#125;,<br>  &#123;<br>    <span class="hljs-attr">center</span>: <span class="hljs-keyword">new</span> BMapGL.Point(<span class="hljs-number">116.306858</span>, <span class="hljs-number">40.057887</span>),<br>    <span class="hljs-attr">zoom</span>: <span class="hljs-number">21</span>,<br>    <span class="hljs-attr">tilt</span>: <span class="hljs-number">70</span>,<br>    <span class="hljs-attr">heading</span>: -<span class="hljs-number">90</span>,<br>    <span class="hljs-attr">percentage</span>: <span class="hljs-number">0.35</span>,<br>  &#125;,<br>  &#123;<br>    <span class="hljs-attr">center</span>: <span class="hljs-keyword">new</span> BMapGL.Point(<span class="hljs-number">116.307904</span>, <span class="hljs-number">40.058118</span>),<br>    <span class="hljs-attr">zoom</span>: <span class="hljs-number">21</span>,<br>    <span class="hljs-attr">tilt</span>: <span class="hljs-number">70</span>,<br>    <span class="hljs-attr">heading</span>: -<span class="hljs-number">90</span>,<br>    <span class="hljs-attr">percentage</span>: <span class="hljs-number">0.45</span>,<br>  &#125;,<br>  &#123;<br>    <span class="hljs-attr">center</span>: <span class="hljs-keyword">new</span> BMapGL.Point(<span class="hljs-number">116.307904</span>, <span class="hljs-number">40.058118</span>),<br>    <span class="hljs-attr">zoom</span>: <span class="hljs-number">21</span>,<br>    <span class="hljs-attr">tilt</span>: <span class="hljs-number">70</span>,<br>    <span class="hljs-attr">heading</span>: -<span class="hljs-number">180</span>,<br>    <span class="hljs-attr">percentage</span>: <span class="hljs-number">0.55</span>,<br>  &#125;,<br>  &#123;<br>    <span class="hljs-attr">center</span>: <span class="hljs-keyword">new</span> BMapGL.Point(<span class="hljs-number">116.308902</span>, <span class="hljs-number">40.055954</span>),<br>    <span class="hljs-attr">zoom</span>: <span class="hljs-number">21</span>,<br>    <span class="hljs-attr">tilt</span>: <span class="hljs-number">70</span>,<br>    <span class="hljs-attr">heading</span>: -<span class="hljs-number">180</span>,<br>    <span class="hljs-attr">percentage</span>: <span class="hljs-number">0.75</span>,<br>  &#125;,<br>  &#123;<br>    <span class="hljs-attr">center</span>: <span class="hljs-keyword">new</span> BMapGL.Point(<span class="hljs-number">116.308902</span>, <span class="hljs-number">40.055954</span>),<br>    <span class="hljs-attr">zoom</span>: <span class="hljs-number">21</span>,<br>    <span class="hljs-attr">tilt</span>: <span class="hljs-number">70</span>,<br>    <span class="hljs-attr">heading</span>: -<span class="hljs-number">270</span>,<br>    <span class="hljs-attr">percentage</span>: <span class="hljs-number">0.85</span>,<br>  &#125;,<br>  &#123;<br>    <span class="hljs-attr">center</span>: <span class="hljs-keyword">new</span> BMapGL.Point(<span class="hljs-number">116.307779</span>, <span class="hljs-number">40.055754</span>),<br>    <span class="hljs-attr">zoom</span>: <span class="hljs-number">21</span>,<br>    <span class="hljs-attr">tilt</span>: <span class="hljs-number">70</span>,<br>    <span class="hljs-attr">heading</span>: -<span class="hljs-number">360</span>,<br>    <span class="hljs-attr">percentage</span>: <span class="hljs-number">0.95</span>,<br>  &#125;,<br>  &#123;<br>    <span class="hljs-attr">center</span>: <span class="hljs-keyword">new</span> BMapGL.Point(<span class="hljs-number">116.307092</span>, <span class="hljs-number">40.054922</span>),<br>    <span class="hljs-attr">zoom</span>: <span class="hljs-number">20</span>,<br>    <span class="hljs-attr">tilt</span>: <span class="hljs-number">50</span>,<br>    <span class="hljs-attr">heading</span>: -<span class="hljs-number">360</span>,<br>    <span class="hljs-attr">percentage</span>: <span class="hljs-number">1</span>,<br>  &#125;,<br>];<br><span class="hljs-keyword">var</span> opts = &#123;<br>  <span class="hljs-attr">duration</span>: <span class="hljs-number">10000</span>, <span class="hljs-comment">// 设置每次迭代动画持续时间</span><br>  <span class="hljs-attr">delay</span>: <span class="hljs-number">3000</span>, <span class="hljs-comment">// 设置动画延迟开始时间</span><br>  <span class="hljs-attr">interation</span>: <span class="hljs-string">&quot;INFINITE&quot;</span>, <span class="hljs-comment">// 设置动画迭代次数</span><br>&#125;;<br><span class="hljs-keyword">var</span> animation = <span class="hljs-keyword">new</span> BMapGL.ViewAnimation(keyFrames, opts); <span class="hljs-comment">// 初始化动画实例</span><br>animation.addEventListener(<span class="hljs-string">&quot;animationstart&quot;</span>, <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">e</span>) </span>&#123;<br>  <span class="hljs-comment">// 监听动画开始事件</span><br>  <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;start&quot;</span>);<br>&#125;);<br>animation.addEventListener(<span class="hljs-string">&quot;animationiterations&quot;</span>, <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">e</span>) </span>&#123;<br>  <span class="hljs-comment">// 监听动画迭代事件</span><br>  <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;onanimationiterations&quot;</span>);<br>&#125;);<br>animation.addEventListener(<span class="hljs-string">&quot;animationend&quot;</span>, <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">e</span>) </span>&#123;<br>  <span class="hljs-comment">// 监听动画结束事件</span><br>  <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;end&quot;</span>);<br>&#125;);<br>animation.addEventListener(<span class="hljs-string">&quot;animationcancel&quot;</span>, <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">e</span>) </span>&#123;<br>  <span class="hljs-comment">// 监听动画中途被终止事件</span><br>  <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;cancel&quot;</span>);<br>&#125;);<br><span class="hljs-built_in">document</span>.getElementById(<span class="hljs-string">&quot;start&quot;</span>).addEventListener(<span class="hljs-string">&quot;click&quot;</span>, <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<br>  bmap.startViewAnimation(animation); <span class="hljs-comment">// 开始播放动画</span><br>&#125;);<br><span class="hljs-built_in">document</span>.getElementById(<span class="hljs-string">&quot;end&quot;</span>).addEventListener(<span class="hljs-string">&quot;click&quot;</span>, <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<br>  bmap.cancelViewAnimation(animation); <span class="hljs-comment">// 强制停止动画</span><br>&#125;);<br></code></pre></td></tr></table></figure></details><h3 id="二、百度地图轨迹动画"><a href="#二、百度地图轨迹动画" class="headerlink" title="二、百度地图轨迹动画"></a>二、百度地图轨迹动画</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs js">&lt;scrip<br>  type=<span class="hljs-string">&quot;text/javascript&quot;</span><br>  src=<span class="hljs-string">&quot;https://api.map.baidu.com/library/TrackAnimation/src/TrackAnimation_min.js&quot;</span><br>&gt;&lt;/scrip&gt;<br></code></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;allmap&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;tools&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;start&quot;</span>&gt;</span>播放动画<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;end&quot;</span>&gt;</span>停止播放<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></td></tr></table></figure><details><summary>点我展开js代码</summary><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> bmap = <span class="hljs-keyword">new</span> BMapGL.Map(<span class="hljs-string">&quot;allmap&quot;</span>); <span class="hljs-comment">// 创建Map实例</span><br>bmap.centerAndZoom(<span class="hljs-keyword">new</span> BMapGL.Point(<span class="hljs-number">116.297611</span>, <span class="hljs-number">40.047363</span>), <span class="hljs-number">17</span>); <span class="hljs-comment">// 初始化地图，设置中心点坐标和地图级别</span><br>bmap.enableScrollWheelZoom(<span class="hljs-literal">true</span>); <span class="hljs-comment">// 开启鼠标滚轮缩放</span><br><span class="hljs-keyword">var</span> path = [<br>  &#123;<br>    <span class="hljs-attr">lng</span>: <span class="hljs-number">116.297611</span>,<br>    <span class="hljs-attr">lat</span>: <span class="hljs-number">40.047363</span>,<br>  &#125;,<br>  &#123;<br>    <span class="hljs-attr">lng</span>: <span class="hljs-number">116.302839</span>,<br>    <span class="hljs-attr">lat</span>: <span class="hljs-number">40.048219</span>,<br>  &#125;,<br>  &#123;<br>    <span class="hljs-attr">lng</span>: <span class="hljs-number">116.308301</span>,<br>    <span class="hljs-attr">lat</span>: <span class="hljs-number">40.050566</span>,<br>  &#125;,<br>  &#123;<br>    <span class="hljs-attr">lng</span>: <span class="hljs-number">116.305732</span>,<br>    <span class="hljs-attr">lat</span>: <span class="hljs-number">40.054957</span>,<br>  &#125;,<br>  &#123;<br>    <span class="hljs-attr">lng</span>: <span class="hljs-number">116.304754</span>,<br>    <span class="hljs-attr">lat</span>: <span class="hljs-number">40.057953</span>,<br>  &#125;,<br>  &#123;<br>    <span class="hljs-attr">lng</span>: <span class="hljs-number">116.306487</span>,<br>    <span class="hljs-attr">lat</span>: <span class="hljs-number">40.058312</span>,<br>  &#125;,<br>  &#123;<br>    <span class="hljs-attr">lng</span>: <span class="hljs-number">116.307223</span>,<br>    <span class="hljs-attr">lat</span>: <span class="hljs-number">40.056379</span>,<br>  &#125;,<br>];<br><span class="hljs-keyword">var</span> point = [];<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> i = <span class="hljs-number">0</span>; i &lt; path.length; i++) &#123;<br>  point.push(<span class="hljs-keyword">new</span> BMapGL.Point(path[i].lng, path[i].lat));<br>&#125;<br><span class="hljs-keyword">var</span> pl = <span class="hljs-keyword">new</span> BMapGL.Polyline(point);<br><span class="hljs-keyword">var</span> trackAni = <span class="hljs-keyword">new</span> BMapGLLib.TrackAnimation(bmap, pl, &#123;<br>  <span class="hljs-attr">overallView</span>: <span class="hljs-literal">true</span>, <span class="hljs-comment">// 动画完成后自动调整视野到总览</span><br>  <span class="hljs-attr">tilt</span>: <span class="hljs-number">30</span>, <span class="hljs-comment">// 轨迹播放的角度，默认为55</span><br>  <span class="hljs-attr">duration</span>: <span class="hljs-number">20000</span>, <span class="hljs-comment">// 动画持续时长，默认为10000，单位ms</span><br>  <span class="hljs-attr">delay</span>: <span class="hljs-number">3000</span>, <span class="hljs-comment">// 动画开始的延迟，默认0，单位ms</span><br>&#125;);<br><span class="hljs-built_in">document</span>.getElementById(<span class="hljs-string">&quot;start&quot;</span>).addEventListener(<span class="hljs-string">&quot;click&quot;</span>, <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<br>  trackAni.start();<br>&#125;);<br><span class="hljs-built_in">document</span>.getElementById(<span class="hljs-string">&quot;end&quot;</span>).addEventListener(<span class="hljs-string">&quot;click&quot;</span>, <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<br>  trackAni.cancel(); <span class="hljs-comment">// 强制停止动画</span><br>&#125;);<br></code></pre></td></tr></table></figure></details>]]></content>
      
      
      
        <tags>
            
            <tag> bmap </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>22、百度地图LBS云检索</title>
      <link href="/2020/04/29/22-bmap/"/>
      <url>/2020/04/29/22-bmap/</url>
      
        <content type="html"><![CDATA[<p>百度地图自定义叠加层</p><span id="more"></span><blockquote><p>LBS 云服务提供海量位置数据的实时存储功能，JavaScript API 支持将用户上传到 LBS 云里的位置数据实时渲染成图层</p></blockquote><p>1、安装 vue-baidu-map</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">npm install vue-baidu-map<br></code></pre></td></tr></table></figure><p>2、具体业务代码如下:</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">baidu-map</span></span><br><span class="hljs-tag">  <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;container&quot;</span></span><br><span class="hljs-tag">  <span class="hljs-attr">:scroll-wheel-zoom</span>=<span class="hljs-string">&quot;true&quot;</span></span><br><span class="hljs-tag">  <span class="hljs-attr">:zoom</span>=<span class="hljs-string">&quot;zoom&quot;</span></span><br><span class="hljs-tag">  <span class="hljs-attr">center</span>=<span class="hljs-string">&quot;上海&quot;</span></span><br><span class="hljs-tag">  <span class="hljs-attr">:ak</span>=<span class="hljs-string">&quot;selfKey&quot;</span></span><br><span class="hljs-tag">  <span class="hljs-attr">inertial-dragging</span></span><br><span class="hljs-tag">  @<span class="hljs-attr">ready</span>=<span class="hljs-string">&quot;mapReady&quot;</span></span><br><span class="hljs-tag">&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">baidu-map</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;menu-search&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">el-input</span> <span class="hljs-attr">placeholder</span>=<span class="hljs-string">&quot;请输入站点名称&quot;</span> <span class="hljs-attr">v-model</span>=<span class="hljs-string">&quot;site_name&quot;</span> <span class="hljs-attr">clearable</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">el-button</span> <span class="hljs-attr">slot</span>=<span class="hljs-string">&quot;append&quot;</span> <span class="hljs-attr">icon</span>=<span class="hljs-string">&quot;el-icon-search&quot;</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">&quot;search&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">el-button</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">el-input</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></td></tr></table></figure><details><summary>点我展开js代码</summary><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br></pre></td><td class="code"><pre><code class="hljs js">&lt;script&gt;<br><span class="hljs-comment">// 在组件中引入vue-baidu-map</span><br><span class="hljs-keyword">import</span> BaiduMap <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;vue-baidu-map/components/map/Map.vue&quot;</span>;<br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span>&#123;<br>    <span class="hljs-attr">components</span>:&#123;BaiduMap&#125;,<br>    <span class="hljs-function"><span class="hljs-title">data</span>(<span class="hljs-params"></span>)</span>&#123;<br>        <span class="hljs-keyword">return</span>&#123;<br>            <span class="hljs-attr">site_name</span>:<span class="hljs-string">&#x27;&#x27;</span>,<br>            <span class="hljs-attr">center</span>:&#123;<span class="hljs-attr">lng</span>:<span class="hljs-number">121.532325</span>,<span class="hljs-attr">lat</span>:<span class="hljs-number">31.232742</span>&#125;,<br>            <span class="hljs-attr">selfKey</span>:<span class="hljs-string">&#x27;QloR7bQpWed3VDLbtcxi2NmgUcvXxcbx&#x27;</span>,<br>            <span class="hljs-attr">point</span>:<span class="hljs-string">&#x27;&#x27;</span>,<br>            <span class="hljs-attr">zoom</span>:<span class="hljs-number">15</span><br>        &#125;<br>    &#125;,<br>    <span class="hljs-function"><span class="hljs-title">mounted</span>(<span class="hljs-params"></span>)</span>&#123;<br>        <span class="hljs-built_in">this</span>.mapReady()<br>    &#125;,<br>    <span class="hljs-attr">methods</span>:&#123;<br>        <span class="hljs-function"><span class="hljs-title">mapReady</span>(<span class="hljs-params"></span>)</span>&#123;<br>            <span class="hljs-keyword">var</span> map = <span class="hljs-keyword">new</span> BMap.Map(<span class="hljs-string">&quot;container&quot;</span>)<br>            map.centerAndZoom(<span class="hljs-keyword">new</span> BMap.Point(<span class="hljs-built_in">this</span>.center.lng,ths.center.lat),<span class="hljs-number">10</span>)<br>            map.enableScrollWheelZoom()<br>                  <span class="hljs-comment">/**</span><br><span class="hljs-comment">       *params   q:检索关键字</span><br><span class="hljs-comment">       *params   tags：空格分割的多字符</span><br><span class="hljs-comment">       *params   filter:过滤条件</span><br><span class="hljs-comment">       */</span><br>            <span class="hljs-keyword">var</span> customLayer;<br>            customLayer = <span class="hljs-keyword">new</span> BMap.CustomLayer(&#123;<br>                <span class="hljs-attr">geotableId</span>: <span class="hljs-number">183323</span>,<br>                <span class="hljs-attr">q</span>: <span class="hljs-string">&quot;&quot;</span>,<br>                <span class="hljs-attr">tags</span>: <span class="hljs-string">&quot;&quot;</span>,<br>                <span class="hljs-attr">filter</span>: <span class="hljs-string">&quot;&quot;</span>,<br>            &#125;);<br>            map.addTileLayer(customLayer);<br>            <span class="hljs-comment">// 热点图层</span><br>            customLayer.addEventListener(<span class="hljs-string">&quot;onhotspotclick&quot;</span>, callback);<br>            <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">callback</span>(<span class="hljs-params">e</span>) </span>&#123;<br>                <span class="hljs-keyword">var</span> customPoi = e.customPoi;<br>                <span class="hljs-keyword">var</span> content =<br>                    <span class="hljs-string">&#x27;&lt;p style=&quot;margin:0;line-height:40px;&quot;&gt;地址：&#x27;</span> +<br>                     customPoi.address +<br>                    <span class="hljs-string">&quot;&lt;br/&gt;&quot;</span> +<br>                    <span class="hljs-string">&#x27;&lt;a style=&quot;color:#3398DB&quot; href=&quot;./monitor/index&quot;&gt;查看橇装站点实时监控画面&lt;/a&gt;&#x27;</span> +<br>                    <span class="hljs-string">&quot;&lt;/p&gt;&quot;</span>;<br>                <span class="hljs-keyword">var</span> BMapLib = <span class="hljs-built_in">window</span>.BMapLib;<br>                <span class="hljs-keyword">var</span> searchInfoWindow = <span class="hljs-keyword">new</span> BMapLib.SearchInfoWindow(map, content, &#123;<br>                        <span class="hljs-attr">title</span>: customPoi.title,<br>                        <span class="hljs-attr">width</span>: <span class="hljs-number">200</span>,<br>                        <span class="hljs-attr">height</span>: <span class="hljs-number">100</span>,<br>                        <span class="hljs-attr">panel</span>: <span class="hljs-string">&quot;panel&quot;</span>,<br>                        <span class="hljs-attr">enableAutoPan</span>: <span class="hljs-literal">true</span>,<br>                        <span class="hljs-attr">enableSendToPhone</span>: <span class="hljs-literal">false</span>,<br>                        <span class="hljs-attr">searchTypes</span>: [],<br>                &#125;);<br>                <span class="hljs-keyword">var</span> point = <span class="hljs-keyword">new</span> BMap.Point(customPoi.point.lng, customPoi.point.lat);<br>                searchInfoWindow.open(point);<br>            &#125;<br>        &#125;,<br>          <span class="hljs-function"><span class="hljs-title">search</span>(<span class="hljs-params"></span>)</span> &#123;<br>                <span class="hljs-keyword">var</span> map = <span class="hljs-keyword">new</span> BMap.Map(<span class="hljs-string">&quot;container&quot;</span>);<br>                map.centerAndZoom(<span class="hljs-keyword">new</span> BMap.Point(<span class="hljs-built_in">this</span>.center.lng, <span class="hljs-built_in">this</span>.center.lat), <span class="hljs-number">10</span>);<br>                map.enableScrollWheelZoom();<br>                <span class="hljs-keyword">var</span> customLayer;<br>                customLayer = <span class="hljs-keyword">new</span> BMap.CustomLayer(&#123;<br>                    <span class="hljs-attr">geotableId</span>: <span class="hljs-number">183323</span>,<br>                    <span class="hljs-attr">q</span>: <span class="hljs-built_in">this</span>.site_name || <span class="hljs-string">&quot;新西北物流园&quot;</span>,<br>                    <span class="hljs-attr">tags</span>: <span class="hljs-string">&quot;&quot;</span>,<br>                    <span class="hljs-attr">filter</span>: <span class="hljs-string">&quot;&quot;</span>,<br>                &#125;);<br>                <span class="hljs-comment">// 添加自定义图层</span><br>                map.addTileLayer(customLayer);<br><br>                <span class="hljs-comment">// var mapDom = document.getElementById(&quot;container&quot;)</span><br>                <span class="hljs-comment">// mapDom.addEventListener(&quot;click&quot;, function () &#123;</span><br>                <span class="hljs-comment">//   window.location.href = &quot;./monitor/index&quot;;</span><br>                <span class="hljs-comment">// &#125;);</span><br>                <span class="hljs-comment">// 热点图层</span><br>                customLayer.addEventListener(<span class="hljs-string">&quot;onhotspotclick&quot;</span>, callback);<br>                <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">callback</span>(<span class="hljs-params">e</span>) </span>&#123;<br>                    <span class="hljs-keyword">var</span> customPoi = e.customPoi;<br>                    <span class="hljs-keyword">var</span> content =<br>                    <span class="hljs-string">&#x27;&lt;p style=&quot;margin:0;line-height:40px;&quot;&gt;地址：&#x27;</span> +<br>                    customPoi.address +<br>                    <span class="hljs-string">&quot;&lt;br/&gt;&quot;</span> +<br>                    <span class="hljs-string">&#x27;&lt;a style=&quot;color:#3398DB&quot; href=&quot;./monitor/index&quot;&gt;查看橇装站点实时监控画面&lt;/a&gt;&#x27;</span> +<br>                    <span class="hljs-string">&quot;&lt;/p&gt;&quot;</span>;<br>                    <span class="hljs-keyword">var</span> BMapLib = <span class="hljs-built_in">window</span>.BMapLib;<br>                    <span class="hljs-comment">// console.log(&quot;BMapLib&quot;, BMapLib);</span><br>                    <span class="hljs-keyword">var</span> searchInfoWindow = <span class="hljs-keyword">new</span> BMapLib.SearchInfoWindow(map, content, &#123;<br>                    <span class="hljs-attr">title</span>: customPoi.title,<br>                    <span class="hljs-attr">width</span>: <span class="hljs-number">200</span>,<br>                    <span class="hljs-attr">height</span>: <span class="hljs-number">100</span>,<br>                    <span class="hljs-attr">panel</span>: <span class="hljs-string">&quot;panel&quot;</span>,<br>                    <span class="hljs-attr">enableAutoPan</span>: <span class="hljs-literal">true</span>,<br>                    <span class="hljs-attr">enableSendToPhone</span>: <span class="hljs-literal">false</span>,<br>                    <span class="hljs-attr">searchTypes</span>: [],<br>                    &#125;);<br>                    <span class="hljs-keyword">var</span> point = <span class="hljs-keyword">new</span> BMap.Point(customPoi.point.lng, customPoi.point.lat);<br>                    searchInfoWindow.open(point);<br>                &#125;<br>    &#125;,<br>    &#125;<br>&#125;<br>&lt;/script&gt;<br><br>&lt;/details&gt;<br><br></code></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> bmap </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>21、v-charts的options</title>
      <link href="/2020/04/28/21-v-charts/"/>
      <url>/2020/04/28/21-v-charts/</url>
      
        <content type="html"><![CDATA[<p>v-charts 的 options 使用 getOptions()而不是使用一个变量</p><span id="more"></span><blockquote><p>使用 getOptions()是为了获取数据之后才进行渲染数据，v-chart 的 options 可以直接绑定一个变量,在请求数据的时候，更新变量，图表需要进行重新渲染</p></blockquote><p>这里的 getOptions()也可以写在 computed 里面的。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">template</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">v-charts</span> <span class="hljs-attr">:options</span>=<span class="hljs-string">&quot;getOptions()&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span><br></code></pre></td></tr></table></figure><details><summary>点我展示js代码</summary><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-function"><span class="hljs-title">getOptions</span>(<span class="hljs-params"></span>)</span> &#123;<br>       <span class="hljs-keyword">return</span> &#123;<br>         <span class="hljs-attr">grid</span>: &#123;<br>           <span class="hljs-attr">left</span>: <span class="hljs-number">0</span>,<br>           <span class="hljs-attr">right</span>: <span class="hljs-number">0</span>,<br>           <span class="hljs-attr">top</span>: <span class="hljs-number">0</span>,<br>           <span class="hljs-attr">bottom</span>: <span class="hljs-number">0</span><br>         &#125;,<br>         <span class="hljs-attr">xAxis</span>: &#123;<br>           <span class="hljs-attr">type</span>: <span class="hljs-string">&#x27;value&#x27;</span>,<br>           <span class="hljs-attr">show</span>: <span class="hljs-literal">false</span><br>         &#125;,<br>         <span class="hljs-attr">yAxis</span>: &#123;<br>           <span class="hljs-attr">type</span>: <span class="hljs-string">&#x27;category&#x27;</span>,<br>           <span class="hljs-attr">show</span>: <span class="hljs-literal">false</span><br>         &#125;,<br>         <span class="hljs-attr">series</span>: [&#123;<br>           <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;上月平台用户数&#x27;</span>,<br>           <span class="hljs-attr">type</span>: <span class="hljs-string">&#x27;bar&#x27;</span>,<br>           <span class="hljs-attr">stack</span>: <span class="hljs-string">&#x27;总量&#x27;</span>,<br>           <span class="hljs-attr">data</span>: [<span class="hljs-built_in">this</span>.userLastMonth],<br>           <span class="hljs-attr">barWidth</span>: <span class="hljs-number">10</span>,<br>           <span class="hljs-attr">itemStyle</span>: &#123;<br>             <span class="hljs-attr">color</span>: <span class="hljs-string">&#x27;#45c946&#x27;</span><br>           &#125;<br>         &#125;, &#123;<br>           <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;今日平台用户数&#x27;</span>,<br>           <span class="hljs-attr">type</span>: <span class="hljs-string">&#x27;bar&#x27;</span>,<br>           <span class="hljs-attr">stack</span>: <span class="hljs-string">&#x27;总量&#x27;</span>,<br>           <span class="hljs-attr">data</span>: [<span class="hljs-built_in">this</span>.userTodayNumber],<br>           <span class="hljs-attr">itemStyle</span>: &#123;<br>             <span class="hljs-attr">color</span>: <span class="hljs-string">&#x27;#eee&#x27;</span><br>           &#125;<br>         &#125;, &#123;<br>           <span class="hljs-attr">type</span>: <span class="hljs-string">&#x27;custom&#x27;</span>,<br>           <span class="hljs-attr">stack</span>: <span class="hljs-string">&#x27;总量&#x27;</span>,<br>           <span class="hljs-attr">data</span>: [<span class="hljs-built_in">this</span>.userLastMonth],<br>           <span class="hljs-attr">renderItem</span>: <span class="hljs-function">(<span class="hljs-params">params, api</span>) =&gt;</span> &#123;<br>             <span class="hljs-keyword">const</span> value = api.value(<span class="hljs-number">0</span>)<br>             <span class="hljs-keyword">const</span> endPoint = api.coord([value, <span class="hljs-number">0</span>])<br>             <span class="hljs-keyword">return</span> &#123;<br>               <span class="hljs-attr">type</span>: <span class="hljs-string">&#x27;group&#x27;</span>,<br>               <span class="hljs-attr">position</span>: endPoint,<br>               <span class="hljs-attr">children</span>: [&#123;<br>                 <span class="hljs-attr">type</span>: <span class="hljs-string">&#x27;path&#x27;</span>,<br>                 <span class="hljs-attr">shape</span>: &#123;<br>                   <span class="hljs-attr">d</span>: <span class="hljs-string">&#x27;M1024 255.996 511.971 767.909 0 255.996 1024 255.996z&#x27;</span>,<br>                   <span class="hljs-attr">x</span>: -<span class="hljs-number">5</span>,<br>                   <span class="hljs-attr">y</span>: -<span class="hljs-number">20</span>,<br>                   <span class="hljs-attr">width</span>: <span class="hljs-number">10</span>,<br>                   <span class="hljs-attr">height</span>: <span class="hljs-number">10</span>,<br>                   <span class="hljs-attr">layout</span>: <span class="hljs-string">&#x27;cover&#x27;</span><br>                 &#125;,<br>                 <span class="hljs-attr">style</span>: &#123;<br>                   <span class="hljs-attr">fill</span>: <span class="hljs-string">&#x27;#45c946&#x27;</span><br>                 &#125;<br>               &#125;, &#123;<br>                 <span class="hljs-attr">type</span>: <span class="hljs-string">&#x27;path&#x27;</span>,<br>                 <span class="hljs-attr">shape</span>: &#123;<br>                   <span class="hljs-attr">d</span>: <span class="hljs-string">&#x27;M0 767.909l512.029-511.913L1024 767.909 0 767.909z&#x27;</span>,<br>                   <span class="hljs-attr">x</span>: -<span class="hljs-number">5</span>,<br>                   <span class="hljs-attr">y</span>: <span class="hljs-number">10</span>,<br>                   <span class="hljs-attr">width</span>: <span class="hljs-number">10</span>,<br>                   <span class="hljs-attr">height</span>: <span class="hljs-number">10</span>,<br>                   <span class="hljs-attr">layout</span>: <span class="hljs-string">&#x27;cover&#x27;</span><br>                 &#125;,<br>                 <span class="hljs-attr">style</span>: &#123;<br>                   <span class="hljs-attr">fill</span>: <span class="hljs-string">&#x27;#45c946&#x27;</span><br>                 &#125;<br>               &#125;]<br>             &#125;<br>           &#125;<br>         &#125;]<br>       &#125;<br>     &#125;<br></code></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> v-charts </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>20、axios的封装</title>
      <link href="/2020/04/23/20-axios/"/>
      <url>/2020/04/23/20-axios/</url>
      
        <content type="html"><![CDATA[<blockquote><p>axios 基于 promise 的 http 库 特性：拦截请求和响应、取消请求、转换 json、客户端防御 XSRF</p></blockquote><span id="more"></span><p>当后端接口报了 500 错误时被 axios 拦截了但确并未返回一个 promise，导致业务代码中未捕获此错误。</p><p>所以记住：</p><blockquote><p>在每个 promise 链条中必须返回 promise，否则调用结果可能和你预期不一样。</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs js">service.interceptors.response.use(<br>  <span class="hljs-function">(<span class="hljs-params">response</span>) =&gt;</span> &#123;<br>    <span class="hljs-keyword">if</span> (response.status === <span class="hljs-number">200</span> &amp;&amp; response.data) &#123;<br>      <span class="hljs-keyword">return</span> response.data;<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>      <span class="hljs-keyword">return</span> <span class="hljs-built_in">Promise</span>.reject(<span class="hljs-keyword">new</span> <span class="hljs-built_in">Error</span>(<span class="hljs-string">&quot;请求失败&quot;</span>));<br>    &#125;<br>  &#125;,<br>  <span class="hljs-function">(<span class="hljs-params">error</span>) =&gt;</span> &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-built_in">Promise</span>.reject(error);<br>  &#125;<br>);<br></code></pre></td></tr></table></figure><h3 id="1、axios-的安装"><a href="#1、axios-的安装" class="headerlink" title="1、axios 的安装"></a>1、axios 的安装</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js">npm install axios<br></code></pre></td></tr></table></figure><h3 id="2、在-request-文件夹-http-js"><a href="#2、在-request-文件夹-http-js" class="headerlink" title="2、在 request 文件夹 http.js"></a>2、在 request 文件夹 http.js</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// http.js</span><br><span class="hljs-keyword">import</span> axios <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;axios&quot;</span>;<br><span class="hljs-keyword">import</span> QS <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;qs&quot;</span>; <span class="hljs-comment">// 序列化post类型的数据</span><br><span class="hljs-keyword">import</span> &#123; Toast &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;vant&quot;</span>; <span class="hljs-comment">// 引入vant组件库的toast组件</span><br></code></pre></td></tr></table></figure><h3 id="3、环境的切换-请求超时-post-请求头设置"><a href="#3、环境的切换-请求超时-post-请求头设置" class="headerlink" title="3、环境的切换/请求超时/post 请求头设置"></a>3、环境的切换/请求超时/post 请求头设置</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 环境的切换</span><br><span class="hljs-keyword">if</span> (process.env.NODE_ENV == <span class="hljs-string">&quot;development&quot;</span>) &#123;<br>  axios.defaults.baseURL = <span class="hljs-string">&quot;https://www.baidu.com&quot;</span>;<br>&#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (process.env.NODE_ENV == <span class="hljs-string">&quot;debug&quot;</span>) &#123;<br>  axios.defaults.baseURL = <span class="hljs-string">&quot;https://www.ceshi.com&quot;</span>;<br>&#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (process.env.NODE_ENV == <span class="hljs-string">&quot;production&quot;</span>) &#123;<br>  axios.defaults.baseURL = <span class="hljs-string">&quot;https://www.production.com&quot;</span>;<br>&#125;<br><br>axios.defaults.timeout = <span class="hljs-number">10000</span>;<br><br>axios.defaults.headers.post[<span class="hljs-string">&quot;Content-Type&quot;</span>] =<br>  <span class="hljs-string">&quot;application/x-www-form-urlencoded;charset=UTF-8&quot;</span>;<br></code></pre></td></tr></table></figure><h3 id="4、请求拦截-响应拦截"><a href="#4、请求拦截-响应拦截" class="headerlink" title="4、请求拦截 响应拦截"></a>4、请求拦截 响应拦截</h3><details><summary>点击展示代码</summary><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 先导入vuex,因为我们要使用到里面的状态对象</span><br><span class="hljs-comment">// vuex的路径根据自己的路径去写</span><br><span class="hljs-keyword">import</span> store <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@/store/index&#x27;</span>;<br><br><span class="hljs-comment">// 请求拦截器</span><br>axios.interceptors.request.use(<br>    <span class="hljs-function"><span class="hljs-params">config</span> =&gt;</span> &#123;<br>        <span class="hljs-comment">// 每次发送请求之前判断vuex中是否存在token</span><br>        <span class="hljs-comment">// 如果存在，则统一在http请求的header都加上token，这样后台根据token判断你的登录情况</span><br>        <span class="hljs-comment">// 即使本地存在token，也有可能token是过期的，所以在响应拦截器中要对返回状态进行判断</span><br>        <span class="hljs-keyword">const</span> token = store.state.token;<br>        token &amp;&amp; (config.headers.Authorization = token);<br>        <span class="hljs-keyword">return</span> config;<br>    &#125;,<br>    <span class="hljs-function"><span class="hljs-params">error</span> =&gt;</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">Promise</span>.error(error);<br>    &#125;<br>)<br><br><span class="hljs-comment">// 响应拦截器</span><br>axios.interceptors.response.use(<br>    <span class="hljs-function"><span class="hljs-params">response</span> =&gt;</span> &#123;<br>        <span class="hljs-comment">// 如果返回的状态码为200，说明接口请求成功，可以正常拿到数据</span><br>        <span class="hljs-comment">// 否则的话抛出错误</span><br>        <span class="hljs-keyword">if</span> (response.status === <span class="hljs-number">200</span>) &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-built_in">Promise</span>.resolve(response);<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-built_in">Promise</span>.reject(response);<br>        &#125;<br>    &#125;,<br>    <span class="hljs-comment">// 服务器状态码不是2开头的的情况</span><br>    <span class="hljs-comment">// 这里可以跟你们的后台开发人员协商好统一的错误状态码</span><br>    <span class="hljs-comment">// 然后根据返回的状态码进行一些操作，例如登录过期提示，错误提示等等</span><br>    <span class="hljs-comment">// 下面列举几个常见的操作，其他需求可自行扩展</span><br>    <span class="hljs-function"><span class="hljs-params">error</span> =&gt;</span> &#123;<br>        <span class="hljs-keyword">if</span> (error.response.status) &#123;<br>            <span class="hljs-keyword">switch</span> (error.response.status) &#123;<br>                <span class="hljs-comment">// 401: 未登录</span><br>                <span class="hljs-comment">// 未登录则跳转登录页面，并携带当前页面的路径</span><br>                <span class="hljs-comment">// 在登录成功后返回当前页面，这一步需要在登录页操作。</span><br>                <span class="hljs-keyword">case</span> <span class="hljs-number">401</span>:<br>                    router.replace(&#123;<br>                        <span class="hljs-attr">path</span>: <span class="hljs-string">&#x27;/login&#x27;</span>,<br>                        <span class="hljs-attr">query</span>: &#123;<br>                            <span class="hljs-attr">redirect</span>: router.currentRoute.fullPath<br>                        &#125;<br>                    &#125;);<br>                    <span class="hljs-keyword">break</span>;<br>                <span class="hljs-comment">// 403 token过期</span><br>                <span class="hljs-comment">// 登录过期对用户进行提示</span><br>                <span class="hljs-comment">// 清除本地token和清空vuex中token对象</span><br>                <span class="hljs-comment">// 跳转登录页面</span><br>                <span class="hljs-keyword">case</span> <span class="hljs-number">403</span>:<br>                     Toast(&#123;<br>                        <span class="hljs-attr">message</span>: <span class="hljs-string">&#x27;登录过期，请重新登录&#x27;</span>,<br>                        <span class="hljs-attr">duration</span>: <span class="hljs-number">1000</span>,<br>                        <span class="hljs-attr">forbidClick</span>: <span class="hljs-literal">true</span><br>                    &#125;);<br>                    <span class="hljs-comment">// 清除token</span><br>                    <span class="hljs-built_in">localStorage</span>.removeItem(<span class="hljs-string">&#x27;token&#x27;</span>);<br>                    store.commit(<span class="hljs-string">&#x27;loginSuccess&#x27;</span>, <span class="hljs-literal">null</span>);<br>                    <span class="hljs-comment">// 跳转登录页面，并将要浏览的页面fullPath传过去，登录成功后跳转需要访问的页面</span><br>                    <span class="hljs-built_in">setTimeout</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>                        router.replace(&#123;<br>                            <span class="hljs-attr">path</span>: <span class="hljs-string">&#x27;/login&#x27;</span>,<br>                            <span class="hljs-attr">query</span>: &#123;<br>                                <span class="hljs-attr">redirect</span>: router.currentRoute.fullPath<br>                            &#125;<br>                        &#125;);<br>                    &#125;, <span class="hljs-number">1000</span>);<br>                    <span class="hljs-keyword">break</span>;<br><br>                <span class="hljs-comment">// 404请求不存在</span><br>                <span class="hljs-keyword">case</span> <span class="hljs-number">404</span>:<br>                    Toast(&#123;<br>                        <span class="hljs-attr">message</span>: <span class="hljs-string">&#x27;网络请求不存在&#x27;</span>,<br>                        <span class="hljs-attr">duration</span>: <span class="hljs-number">1500</span>,<br>                        <span class="hljs-attr">forbidClick</span>: <span class="hljs-literal">true</span><br>                    &#125;);<br>                    <span class="hljs-keyword">break</span>;<br>                <span class="hljs-comment">// 其他错误，直接抛出错误提示</span><br>                <span class="hljs-keyword">default</span>:<br>                    Toast(&#123;<br>                        <span class="hljs-attr">message</span>: error.response.data.message,<br>                        <span class="hljs-attr">duration</span>: <span class="hljs-number">1500</span>,<br>                        <span class="hljs-attr">forbidClick</span>: <span class="hljs-literal">true</span><br>                    &#125;);<br>            &#125;<br>            <span class="hljs-keyword">return</span> <span class="hljs-built_in">Promise</span>.reject(error.response);<br>        &#125;<br>    &#125;<br>&#125;);<br></code></pre></td></tr></table></figure></details><h3 id="5、get、post-请求的封装"><a href="#5、get、post-请求的封装" class="headerlink" title="5、get、post 请求的封装"></a>5、get、post 请求的封装</h3><blockquote><p>get 方法：我们通过定义一个 get 函数，get 函数有两个参数，第一个参数表示我们要请求的 url 地址，第二个参数是我们要携带的请求参数。get 函数返回一个 promise 对象，当 axios 其请求成功时 resolve 服务器返回 值，请求失败时 reject 错误值。最后通过 export 抛出 get 函数。</p></blockquote><details><summary>点击展示代码</summary><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * get方法，对应get请求</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param <span class="hljs-type">&#123;String&#125;</span> </span>url [请求的url地址]</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param <span class="hljs-type">&#123;Object&#125;</span> </span>params [请求时携带的参数]</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">export</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">get</span>(<span class="hljs-params">url, params</span>) </span>&#123;<br>  <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-built_in">Promise</span>(<span class="hljs-function">(<span class="hljs-params">resolve, reject</span>) =&gt;</span> &#123;<br>    axios<br>      .get(url, &#123;<br>        <span class="hljs-attr">params</span>: params,<br>      &#125;)<br>      .then(<span class="hljs-function">(<span class="hljs-params">res</span>) =&gt;</span> &#123;<br>        resolve(res.data);<br>      &#125;)<br>      .catch(<span class="hljs-function">(<span class="hljs-params">err</span>) =&gt;</span> &#123;<br>        reject(err.data);<br>      &#125;);<br>  &#125;);<br>&#125;<br></code></pre></td></tr></table></figure></details><blockquote><p>原理同 get 基本一样，但是要注意的是，post 方法必须要使用对提交从参数对象进行序列化的操作，所以这里我们通过 node 的 qs 模块来序列化我们的参数。这个很重要，如果没有序列化操作，后台是拿不到你提交的数据的。这就是文章开头我们 import QS from ‘qs’;的原因</p></blockquote><details><summary>点击展示代码</summary><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * post方法，对应post请求</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param <span class="hljs-type">&#123;String&#125;</span> </span>url [请求的url地址]</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param <span class="hljs-type">&#123;Object&#125;</span> </span>params [请求时携带的参数]</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">export</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">post</span>(<span class="hljs-params">url, params</span>) </span>&#123;<br>  <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-built_in">Promise</span>(<span class="hljs-function">(<span class="hljs-params">resolve, reject</span>) =&gt;</span> &#123;<br>    axios<br>      .post(url, QS.stringify(params))<br>      .then(<span class="hljs-function">(<span class="hljs-params">res</span>) =&gt;</span> &#123;<br>        resolve(res.data);<br>      &#125;)<br>      .catch(<span class="hljs-function">(<span class="hljs-params">err</span>) =&gt;</span> &#123;<br>        reject(err.data);<br>      &#125;);<br>  &#125;);<br>&#125;<br></code></pre></td></tr></table></figure></details><h3 id="6、axios-完整封装代码"><a href="#6、axios-完整封装代码" class="headerlink" title="6、axios 完整封装代码:"></a>6、axios 完整封装代码:</h3><details><summary>点击展示代码</summary><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * axios封装</span><br><span class="hljs-comment"> * 请求拦截、响应拦截、错误统一处理</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">import</span> axios <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;axios&quot;</span>;<br><span class="hljs-keyword">import</span> router <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;../router&quot;</span>;<br><span class="hljs-keyword">import</span> store <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;../store/index&quot;</span>;<br><span class="hljs-keyword">import</span> &#123; Toast &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;vant&quot;</span>;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 提示函数</span><br><span class="hljs-comment"> * 禁止点击蒙层、显示一秒后关闭</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">const</span> tip = <span class="hljs-function">(<span class="hljs-params">msg</span>) =&gt;</span> &#123;<br>  Toast(&#123;<br>    <span class="hljs-attr">message</span>: msg,<br>    <span class="hljs-attr">duration</span>: <span class="hljs-number">1000</span>,<br>    <span class="hljs-attr">forbidClick</span>: <span class="hljs-literal">true</span>,<br>  &#125;);<br>&#125;;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 跳转登录页</span><br><span class="hljs-comment"> * 携带当前页面路由，以期在登录页面完成登录后返回当前页面</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">const</span> toLogin = <span class="hljs-function">() =&gt;</span> &#123;<br>  router.replace(&#123;<br>    <span class="hljs-attr">path</span>: <span class="hljs-string">&quot;/login&quot;</span>,<br>    <span class="hljs-attr">query</span>: &#123;<br>      <span class="hljs-attr">redirect</span>: router.currentRoute.fullPath,<br>    &#125;,<br>  &#125;);<br>&#125;;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 请求失败后的错误统一处理</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param <span class="hljs-type">&#123;Number&#125;</span> </span>status 请求失败的状态码</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">const</span> errorHandle = <span class="hljs-function">(<span class="hljs-params">status, other</span>) =&gt;</span> &#123;<br>  <span class="hljs-comment">// 状态码判断</span><br>  <span class="hljs-keyword">switch</span> (status) &#123;<br>    <span class="hljs-comment">// 401: 未登录状态，跳转登录页</span><br>    <span class="hljs-keyword">case</span> <span class="hljs-number">401</span>:<br>      toLogin();<br>      <span class="hljs-keyword">break</span>;<br>    <span class="hljs-comment">// 403 token过期</span><br>    <span class="hljs-comment">// 清除token并跳转登录页</span><br>    <span class="hljs-keyword">case</span> <span class="hljs-number">403</span>:<br>      tip(<span class="hljs-string">&quot;登录过期，请重新登录&quot;</span>);<br>      <span class="hljs-built_in">localStorage</span>.removeItem(<span class="hljs-string">&quot;token&quot;</span>);<br>      store.commit(<span class="hljs-string">&quot;loginSuccess&quot;</span>, <span class="hljs-literal">null</span>);<br>      <span class="hljs-built_in">setTimeout</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>        toLogin();<br>      &#125;, <span class="hljs-number">1000</span>);<br>      <span class="hljs-keyword">break</span>;<br>    <span class="hljs-comment">// 404请求不存在</span><br>    <span class="hljs-keyword">case</span> <span class="hljs-number">404</span>:<br>      tip(<span class="hljs-string">&quot;请求的资源不存在&quot;</span>);<br>      <span class="hljs-keyword">break</span>;<br>    <span class="hljs-keyword">default</span>:<br>      <span class="hljs-built_in">console</span>.log(other);<br>  &#125;<br>&#125;;<br><br><span class="hljs-comment">// 创建axios实例</span><br><span class="hljs-keyword">var</span> instance = axios.create(&#123; <span class="hljs-attr">timeout</span>: <span class="hljs-number">1000</span> * <span class="hljs-number">12</span> &#125;);<br><span class="hljs-comment">// 设置post请求头</span><br>instance.defaults.headers.post[<span class="hljs-string">&quot;Content-Type&quot;</span>] =<br>  <span class="hljs-string">&quot;application/x-www-form-urlencoded&quot;</span>;<br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 请求拦截器</span><br><span class="hljs-comment"> * 每次请求前，如果存在token则在请求头中携带token</span><br><span class="hljs-comment"> */</span><br>instance.interceptors.request.use(<br>  <span class="hljs-function">(<span class="hljs-params">config</span>) =&gt;</span> &#123;<br>    <span class="hljs-comment">// 登录流程控制中，根据本地是否存在token判断用户的登录情况</span><br>    <span class="hljs-comment">// 但是即使token存在，也有可能token是过期的，所以在每次的请求头中携带token</span><br>    <span class="hljs-comment">// 后台根据携带的token判断用户的登录情况，并返回给我们对应的状态码</span><br>    <span class="hljs-comment">// 而后我们可以在响应拦截器中，根据状态码进行一些统一的操作。</span><br>    <span class="hljs-keyword">const</span> token = store.state.token;<br>    token &amp;&amp; (config.headers.Authorization = token);<br>    <span class="hljs-keyword">return</span> config;<br>  &#125;,<br>  <span class="hljs-function">(<span class="hljs-params">error</span>) =&gt;</span> <span class="hljs-built_in">Promise</span>.error(error)<br>);<br><br><span class="hljs-comment">// 响应拦截器</span><br>instance.interceptors.response.use(<br>  <span class="hljs-comment">// 请求成功</span><br>  <span class="hljs-function">(<span class="hljs-params">res</span>) =&gt;</span> (res.status === <span class="hljs-number">200</span> ? <span class="hljs-built_in">Promise</span>.resolve(res) : <span class="hljs-built_in">Promise</span>.reject(res)),<br>  <span class="hljs-comment">// 请求失败</span><br>  <span class="hljs-function">(<span class="hljs-params">error</span>) =&gt;</span> &#123;<br>    <span class="hljs-keyword">const</span> &#123; response &#125; = error;<br>    <span class="hljs-keyword">if</span> (response) &#123;<br>      <span class="hljs-comment">// 请求已发出，但是不在2xx的范围</span><br>      errorHandle(response.status, response.data.message);<br>      <span class="hljs-keyword">return</span> <span class="hljs-built_in">Promise</span>.reject(response);<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>      <span class="hljs-comment">// 处理断网的情况</span><br>      <span class="hljs-comment">// eg:请求超时或断网时，更新state的network状态</span><br>      <span class="hljs-comment">// network状态在app.vue中控制着一个全局的断网提示组件的显示隐藏</span><br>      <span class="hljs-comment">// 关于断网组件中的刷新重新获取数据，会在断网组件中说明</span><br>      <span class="hljs-keyword">if</span> (!<span class="hljs-built_in">window</span>.navigator.onLine) &#123;<br>        store.commit(<span class="hljs-string">&quot;changeNetwork&quot;</span>, <span class="hljs-literal">false</span>);<br>      &#125; <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">Promise</span>.reject(error);<br>      &#125;<br>    &#125;<br>  &#125;<br>);<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> instance;<br></code></pre></td></tr></table></figure></details><h3 id="7、token-失效及接口国际化"><a href="#7、token-失效及接口国际化" class="headerlink" title="7、token 失效及接口国际化"></a>7、token 失效及接口国际化</h3><details><summary>点击展示代码</summary><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 是否超时</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">export</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">isCheckTimeout</span>(<span class="hljs-params"></span>) </span>&#123;<br>  <span class="hljs-comment">// 当前时间戳</span><br>  <span class="hljs-keyword">var</span> currentTime = <span class="hljs-built_in">Date</span>.now();<br>  <span class="hljs-comment">// 缓存时间戳</span><br>  <span class="hljs-keyword">var</span> timeStamp = getTimeStamp();<br>  <span class="hljs-keyword">return</span> currentTime - timeStamp &gt; TOKEN_TIMEOUT_VALUE;<br>&#125;<br><br><span class="hljs-keyword">import</span> axios <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;axios&quot;</span>;<br><span class="hljs-keyword">import</span> store <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;@/store&quot;</span>;<br><span class="hljs-keyword">import</span> &#123; ElMessage &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;element-plus&quot;</span>;<br><span class="hljs-keyword">import</span> &#123; isCheckTimeout &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;@/utils/auth&quot;</span>;<br><br><span class="hljs-keyword">const</span> service = axios.create(&#123;<br>  <span class="hljs-attr">baseURL</span>: process.env.VUE_APP_BASE_API,<br>  <span class="hljs-attr">timeout</span>: <span class="hljs-number">5000</span>,<br>&#125;);<br><br><span class="hljs-comment">// 请求拦截器</span><br>service.interceptors.request.use(<br>  <span class="hljs-function">(<span class="hljs-params">config</span>) =&gt;</span> &#123;<br>    <span class="hljs-comment">// 在这个位置需要统一的去注入token</span><br>    <span class="hljs-keyword">if</span> (store.getters.token) &#123;<br>      <span class="hljs-keyword">if</span> (isCheckTimeout()) &#123;<br>        <span class="hljs-comment">// 登出操作</span><br>        store.dispatch(<span class="hljs-string">&quot;user/logout&quot;</span>);<br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">Promise</span>.reject(<span class="hljs-keyword">new</span> <span class="hljs-built_in">Error</span>(<span class="hljs-string">&quot;token 失效&quot;</span>));<br>      &#125;<br>      <span class="hljs-comment">// 如果token存在 注入token</span><br>      config.headers.Authorization = <span class="hljs-string">`Bearer <span class="hljs-subst">$&#123;store.getters.token&#125;</span>`</span>;<br>    &#125;<br>    <span class="hljs-comment">// 配置接口国际化</span><br>    config.headers[<span class="hljs-string">&quot;Accept-Language&quot;</span>] = store.getters.language;<br>    <span class="hljs-keyword">return</span> config; <span class="hljs-comment">// 必须返回配置</span><br>  &#125;,<br>  <span class="hljs-function">(<span class="hljs-params">error</span>) =&gt;</span> &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-built_in">Promise</span>.reject(error);<br>  &#125;<br>);<br><br><span class="hljs-comment">// 响应拦截器</span><br>service.interceptors.response.use(<br>  <span class="hljs-function">(<span class="hljs-params">response</span>) =&gt;</span> &#123;<br>    <span class="hljs-keyword">const</span> &#123; success, message, data &#125; = response.data;<br>    <span class="hljs-comment">//   要根据success的成功与否决定下面的操作</span><br>    <span class="hljs-keyword">if</span> (success) &#123;<br>      <span class="hljs-keyword">return</span> data;<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>      <span class="hljs-comment">// 业务错误</span><br>      ElMessage.error(message); <span class="hljs-comment">// 提示错误消息</span><br>      <span class="hljs-keyword">return</span> <span class="hljs-built_in">Promise</span>.reject(<span class="hljs-keyword">new</span> <span class="hljs-built_in">Error</span>(message));<br>    &#125;<br>  &#125;,<br>  <span class="hljs-function">(<span class="hljs-params">error</span>) =&gt;</span> &#123;<br>    <span class="hljs-comment">// 处理 token 超时问题</span><br>    <span class="hljs-keyword">if</span> (<br>      error.response &amp;&amp;<br>      error.response.data &amp;&amp;<br>      error.response.data.code === <span class="hljs-number">401</span><br>    ) &#123;<br>      <span class="hljs-comment">// token超时</span><br>      store.dispatch(<span class="hljs-string">&quot;user/logout&quot;</span>);<br>    &#125;<br>    ElMessage.error(error.message); <span class="hljs-comment">// 提示错误信息</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-built_in">Promise</span>.reject(error);<br>  &#125;<br>);<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> service;<br></code></pre></td></tr></table></figure></details>]]></content>
      
      
      
        <tags>
            
            <tag> axios </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>19、关于echarts官方的一个bug -- sublink跳转问题</title>
      <link href="/2020/04/20/19-echarts/"/>
      <url>/2020/04/20/19-echarts/</url>
      
        <content type="html"><![CDATA[<p>echarts 官方的一个 bug – sublink 跳转的问题。echarts版本号为4.8.0</p><span id="more"></span><p>开发百度地图 scatter 散点图时，副标题链接跳转出错（版本号为 4.8.0），在 GitHub 找到<a href="https://github.com/apache/incubator-echarts/issues/12841">issues</a>。<br>bug 介绍，点击副标题无法跳转到指定连接</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-built_in">this</span>.options = &#123;<br>  <span class="hljs-attr">title</span>: &#123;<br>    <span class="hljs-attr">text</span>: <span class="hljs-string">&quot;我是主标题&quot;</span>,<br>    <span class="hljs-attr">subtext</span>: <span class="hljs-string">&quot;我是副标题，我可以跳转&quot;</span>,<br>    <span class="hljs-attr">sublink</span>: <span class="hljs-string">&quot;https://www.baidu.com&quot;</span>,<br>    <span class="hljs-attr">left</span>: <span class="hljs-string">&quot;center&quot;</span>,<br>  &#125;,<br>&#125;;<br></code></pre></td></tr></table></figure><p>1、在 main.js 引入 echarts 和 vue-echarts，将 echarts 绑定到 Vue 原型，引入 vue-echarts 通过 vue.component()进行组件注册</p><blockquote><p>将 echarts 绑定到 Vue 原型上，可以减少代码量，开发过程中需要使用 echarts 里面提供的方法，如果没有全局引入的话，需要在每个使用 echarts 的页面都需要手动引入。将 vue-echarts 使用组件注册后，提供了属性绑定的方式渲染图表就不需要通过调用 echart 的方法了。</p></blockquote><h2 id="echarts"><a href="#echarts" class="headerlink" title="echarts"></a>echarts</h2><p>1、echarts 的绘图流程</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 1、引入echarts js库</span><br>&lt;script src=<span class="hljs-string">&quot;https://cdn.bootcdn.net/ajax/libs/echarts/4.8.0/echarts.min.js&quot;</span>&gt;&lt;/script&gt;<br></code></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-comment">&lt;!-- 2、DOM容器 设置宽高（注意）  --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;charts&quot;</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;width:800px;height:600px&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 3、获取渲染DOM对象</span><br><span class="hljs-keyword">const</span> chartDom = <span class="hljs-built_in">document</span>.getElementById(<span class="hljs-string">&quot;charts&quot;</span>);<br><span class="hljs-comment">// 4、初始化echarts对象</span><br><span class="hljs-keyword">const</span> chart = echarts.init(chartDom);<br><span class="hljs-comment">// 5、配置option参数  调用setOption完成渲染</span><br>chart.setOption(&#123;<br>  <span class="hljs-attr">title</span>: &#123;<br>    <span class="hljs-attr">text</span>: <span class="hljs-string">&quot;Echarts 示例&quot;</span>,<br>  &#125;,<br>  <span class="hljs-attr">xAxis</span>: &#123;<br>    <span class="hljs-attr">data</span>: [<span class="hljs-string">&quot;食品&quot;</span>, <span class="hljs-string">&quot;数码&quot;</span>, <span class="hljs-string">&quot;服饰&quot;</span>, <span class="hljs-string">&quot;箱包&quot;</span>],<br>  &#125;,<br>  <span class="hljs-attr">yAxis</span>: &#123;&#125;,<br>  <span class="hljs-comment">// 系列： 包括图表的类型 包括：line bar pie等</span><br>  <span class="hljs-attr">series</span>: &#123;<br>    <span class="hljs-attr">type</span>: <span class="hljs-string">&quot;bar&quot;</span>,<br>    <span class="hljs-attr">data</span>: [<span class="hljs-string">&quot;100&quot;</span>, <span class="hljs-string">&quot;120&quot;</span>, <span class="hljs-string">&quot;40&quot;</span>, <span class="hljs-string">&quot;160&quot;</span>],<br>  &#125;,<br>&#125;);<br></code></pre></td></tr></table></figure><p>2、dataset: 数据集</p><blockquote><p>ECharts 4 开始支持了 数据集（dataset）组件用于单独的数据集声明，从而数据可以单独管理，被多个组件复用，并且可以自由指定数据到视觉的映射</p></blockquote><details><summary>点击展示代码</summary><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> chartDom = <span class="hljs-built_in">document</span>.getElementById(<span class="hljs-string">&quot;chart&quot;</span>);<br><span class="hljs-keyword">const</span> chart = echarts.init(chartDom);<br><span class="hljs-keyword">const</span> option = &#123;<br>  <span class="hljs-attr">xAxis</span>: &#123;<br>    <span class="hljs-attr">type</span>: <span class="hljs-string">&quot;category&quot;</span>,<br>  &#125;,<br>  <span class="hljs-attr">yAxis</span>: &#123;&#125;,<br>  <span class="hljs-attr">dataset</span>: &#123;<br>    <span class="hljs-attr">source</span>: [<br>      [<span class="hljs-string">&quot;1季度&quot;</span>, <span class="hljs-number">80</span>, <span class="hljs-number">100</span>, <span class="hljs-string">&quot;分类1&quot;</span>, <span class="hljs-number">50</span>],<br>      [<span class="hljs-string">&quot;2季度&quot;</span>, <span class="hljs-number">81</span>, <span class="hljs-number">122</span>, <span class="hljs-string">&quot;分类1&quot;</span>, <span class="hljs-number">60</span>],<br>      [<span class="hljs-string">&quot;3季度&quot;</span>, <span class="hljs-number">76</span>, <span class="hljs-number">90</span>, <span class="hljs-string">&quot;分类1&quot;</span>, <span class="hljs-number">55</span>],<br>      [<span class="hljs-string">&quot;4季度&quot;</span>, <span class="hljs-number">65</span>, <span class="hljs-number">123</span>, <span class="hljs-string">&quot;分类1&quot;</span>, <span class="hljs-number">70</span>],<br>    ],<br>  &#125;,<br>  <span class="hljs-comment">// 系列</span><br>  <span class="hljs-attr">series</span>: [<br>    <span class="hljs-comment">// 系列 0</span><br>    &#123;<br>      <span class="hljs-attr">type</span>: <span class="hljs-string">&quot;pie&quot;</span>,<br>      <span class="hljs-attr">center</span>: [<span class="hljs-string">&quot;65%&quot;</span>, <span class="hljs-number">60</span>],<br>      <span class="hljs-attr">radius</span>: <span class="hljs-number">35</span>,<br>      <span class="hljs-attr">encode</span>: &#123;<br>        <span class="hljs-attr">itemName</span>: <span class="hljs-number">3</span>,<br>        <span class="hljs-attr">value</span>: <span class="hljs-number">4</span>,<br>      &#125;,<br>    &#125;,<br>    <span class="hljs-comment">// 系列 1</span><br>    &#123;<br>      <span class="hljs-attr">type</span>: <span class="hljs-string">&quot;line&quot;</span>,<br>      <span class="hljs-attr">encode</span>: &#123;<br>        <span class="hljs-attr">x</span>: <span class="hljs-number">0</span>,<br>        <span class="hljs-attr">y</span>: <span class="hljs-number">2</span>,<br>      &#125;,<br>    &#125;,<br>    <span class="hljs-comment">// 系列 2</span><br>    &#123;<br>      <span class="hljs-attr">type</span>: <span class="hljs-string">&quot;bar&quot;</span>,<br>      <span class="hljs-attr">encode</span>: &#123;<br>        <span class="hljs-attr">x</span>: <span class="hljs-number">0</span>,<br>        <span class="hljs-attr">y</span>: <span class="hljs-number">1</span>,<br>      &#125;,<br>    &#125;,<br>  ],<br>&#125;;<br>chart.setOption(option);<br></code></pre></td></tr></table></figure></details><p>3、基本组件</p><blockquote><p>echarts 基本组件：title、坐标系的 X（xAxis）轴 Y(yAxis）轴、tooltip 提示框、toolbox 工具栏等</p></blockquote><p>4、定位</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 大多数组件都提供了定位属性，我们可以采用类似 CSS absolute 的定位属性来控制组件的位置 left right height bottom的值可以是数值或者百分比</span><br><span class="hljs-keyword">var</span> option = &#123;<br>  <span class="hljs-attr">grid</span>: &#123;<br>    <span class="hljs-attr">left</span>: <span class="hljs-number">120</span>,<br>    <span class="hljs-attr">right</span>: <span class="hljs-string">&quot;30%&quot;</span>,<br>    <span class="hljs-attr">height</span>: <span class="hljs-string">&quot;40%&quot;</span>,<br>    <span class="hljs-attr">bottom</span>: <span class="hljs-number">100</span>,<br>  &#125;,<br>&#125;;<br></code></pre></td></tr></table></figure><h2 id="echarts-常用属性"><a href="#echarts-常用属性" class="headerlink" title="echarts 常用属性"></a>echarts 常用属性</h2><p>（1）使用 ECharts 绘图后没有图像（这个问题会经常出现，一定要设置宽度高度！！！）</p><blockquote><p>ECharts 绘图后没有任何报错，但是没有图像。可以检查容器是否设置了宽高。因为 ECharts 不会设置默认宽高，如果容器没有设置宽高，则不会展示;如果使用的是 v-chart 则没有这个问题，因为 v-chart 默认了 600*400 的宽高。</p></blockquote><p>（2）使用 element-ui 的按需引入</p><blockquote><p>安装<code>vue add element</code>，后续会提示是全部引入或者按需引入，选择按需引入，在 App.vue 中会增加一些 element-ui 的示例代码，后续删除。项目目录会增加一个 plugin 文件夹</p></blockquote><blockquote><p>注意：按需引入组件后，再删除 App.vue 以及 view 文件夹内、component 文件夹内的不需要的内容。</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// main.js</span><br><span class="hljs-keyword">import</span> <span class="hljs-string">&quot;./plugins/element.js&quot;</span>;<br></code></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// element.js</span><br><span class="hljs-keyword">import</span> Vue <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;vue&quot;</span>;<br><span class="hljs-keyword">import</span> &#123; Card, Col, Row &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;element-ui&quot;</span>;<br><br>Vue.use(Card);<br>Vue.use(Col);<br>Vue.use(Row);<br></code></pre></td></tr></table></figure><p>（3）vue 使用 echarts</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// main.js 引入echarts 挂载到Vue实例</span><br><span class="hljs-keyword">import</span> ECharts <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;echarts&quot;</span>;<br>Vue.prototype.$echarts = ECharts;<br></code></pre></td></tr></table></figure><p>（4）echarts 的常用属性</p><blockquote><p>1、隐藏线条 - listStyle</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs js">listStyle: &#123;<br>  <span class="hljs-attr">width</span>: <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>2、隐藏数据点 - itemStyle</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs js">itemStyle: &#123;<br>  <span class="hljs-attr">opacity</span>: <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>3、折线图填充面积区域颜色 - areaStyle</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs js">areaStyle: &#123;<br>  <span class="hljs-attr">color</span>: <span class="hljs-string">&quot;purple&quot;</span>;<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>4、折线图平滑显示 - smooth</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js">smooth: <span class="hljs-literal">true</span>;<br></code></pre></td></tr></table></figure><blockquote><p>5、柱状图聚合 - stack</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs js">series: [<br>  &#123;<br>    <span class="hljs-attr">type</span>: <span class="hljs-string">&quot;bar&quot;</span>,<br>    <span class="hljs-attr">stack</span>: <span class="hljs-string">&quot;总量&quot;</span>,<br>    <span class="hljs-attr">data</span>: [<span class="hljs-number">100</span>],<br>  &#125;,<br>  &#123;<br>    <span class="hljs-attr">type</span>: <span class="hljs-string">&quot;bar&quot;</span>,<br>    <span class="hljs-attr">stack</span>: <span class="hljs-string">&quot;总量&quot;</span>,<br>    <span class="hljs-attr">data</span>: [<span class="hljs-number">250</span>],<br>  &#125;,<br>];<br></code></pre></td></tr></table></figure><blockquote><p>6、自定义绘图(重点)</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><code class="hljs js">&#123;<br>  <span class="hljs-attr">type</span>: <span class="hljs-string">&#x27;custom&#x27;</span>,<br>  <span class="hljs-attr">stack</span>: <span class="hljs-string">&#x27;总量&#x27;</span>,<br>  <span class="hljs-attr">data</span>: [<span class="hljs-number">100</span>],<br>  <span class="hljs-attr">renderItem</span>: <span class="hljs-function">(<span class="hljs-params">params, api</span>) =&gt;</span> &#123;<br>    <span class="hljs-comment">//  console.log(params,api);</span><br>    <span class="hljs-keyword">const</span> value = api.value(<span class="hljs-number">0</span>)<br>    <span class="hljs-keyword">const</span> endPoint = api.coord([value, <span class="hljs-number">0</span>])<br>    <span class="hljs-keyword">return</span> &#123;<br>      <span class="hljs-attr">type</span>: <span class="hljs-string">&#x27;group&#x27;</span>,<br>      <span class="hljs-attr">position</span>: endPoint,<br>      <span class="hljs-attr">children</span>: [&#123;<br>        <span class="hljs-attr">type</span>: <span class="hljs-string">&#x27;path&#x27;</span>,<br>        <span class="hljs-attr">shape</span>: &#123;<br>          <span class="hljs-attr">d</span>: <span class="hljs-string">&#x27;M1024 255.996 511.971 767.909 0 255.996 1024 255.996z&#x27;</span>,<span class="hljs-comment">// 这里是svg里面的d</span><br>          <span class="hljs-attr">x</span>: -<span class="hljs-number">5</span>,<br>          <span class="hljs-attr">y</span>: -<span class="hljs-number">20</span>,<br>          <span class="hljs-attr">width</span>: <span class="hljs-number">10</span>,<br>          <span class="hljs-attr">height</span>: <span class="hljs-number">10</span>,<br>          <span class="hljs-attr">layout</span>: <span class="hljs-string">&#x27;cover&#x27;</span><br>        &#125;,<br>        <span class="hljs-attr">style</span>: &#123;<br>          <span class="hljs-attr">fill</span>: <span class="hljs-string">&#x27;#45c946&#x27;</span><br>        &#125;<br>      &#125;, &#123;<br>        <span class="hljs-attr">type</span>: <span class="hljs-string">&#x27;path&#x27;</span>,<br>        <span class="hljs-attr">shape</span>: &#123;<br>          <span class="hljs-attr">d</span>: <span class="hljs-string">&#x27;M0 767.909l512.029-511.913L1024 767.909 0 767.909z&#x27;</span>,<br>          <span class="hljs-attr">x</span>: -<span class="hljs-number">5</span>,<br>          <span class="hljs-attr">y</span>: <span class="hljs-number">10</span>,<br>          <span class="hljs-attr">width</span>: <span class="hljs-number">10</span>,<br>          <span class="hljs-attr">height</span>: <span class="hljs-number">10</span>,<br>          <span class="hljs-attr">layout</span>: <span class="hljs-string">&#x27;cover&#x27;</span><br>        &#125;,<br>        <span class="hljs-attr">style</span>: &#123;<br>          <span class="hljs-attr">fill</span>: <span class="hljs-string">&#x27;#45c946&#x27;</span><br>        &#125;<br>      &#125;]<br>    &#125;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>7、xAxis x 轴</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 消除x轴两侧边距</span><br><span class="hljs-attr">boundaryGap</span>: <span class="hljs-literal">false</span><br><span class="hljs-comment">// 柱状图宽度</span><br><span class="hljs-attr">barWidth</span>: <span class="hljs-string">&#x27;60%&#x27;</span><br><span class="hljs-attr">barWidth</span>: <span class="hljs-number">10</span><br><span class="hljs-comment">// 条形图 type设置方法</span><br><span class="hljs-attr">xAxis</span>: &#123;<br>  <span class="hljs-attr">type</span>: <span class="hljs-string">&#x27;value&#x27;</span><br>&#125;,<br><span class="hljs-attr">yAxis</span>: &#123;<br>  <span class="hljs-attr">type</span>: <span class="hljs-string">&#x27;category&#x27;</span><br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>8、echarts 类目轴和非类目轴</p></blockquote><blockquote><p>类目轴的意思就是坐标轴上的展示信息是否是数据连贯，非类目轴就是除了标签类型为类目的其他坐标轴，有 时间（time），数值（value），对数（log）3 种。标签类型为类目是指 type:category</p></blockquote><p>坐标轴两边留白策略，类目轴和非类目轴的设置和表现不一样。类目轴中  boundaryGap  可以配置为  true  和  false。默认为  true，这时候刻度只是作为分隔线，标签和数据点都会在两个刻度之间的带(band)中间。非类目轴，包括时间，数值，对数轴，boundaryGap 是一个两个值的数组，分别表示数据最小值和最大值的延伸范围，可以直接设置数值或者相对的百分比，在设置  min  和  max  后无效。</p>]]></content>
      
      
      
        <tags>
            
            <tag> ECharts </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>18、如何使用canvas压缩图片？</title>
      <link href="/2020/04/10/18-canvas/"/>
      <url>/2020/04/10/18-canvas/</url>
      
        <content type="html"><![CDATA[<blockquote><p>canvas 是 HTML5 的新特性，它允许我们使用 canvas 元素在网页上通过 JavaScript 绘制图像 （可以在 HTML 页面使用多个 canvas 元素）</p></blockquote><span id="more"></span><p><strong>1、绘图流程:</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 1、编写canvas标签，指定宽高（注意）；</span><br>&lt;canvas id=<span class="hljs-string">&quot;canvas&quot;</span> width=<span class="hljs-string">&quot;800&quot;</span> height=<span class="hljs-string">&quot;800&quot;</span>&gt;&lt;/canvas&gt;;<br><span class="hljs-comment">// 2、获取canvas DOM对象；</span><br><span class="hljs-keyword">const</span> canvas = <span class="hljs-built_in">document</span>.getElementById(<span class="hljs-string">&quot;canvas&quot;</span>);<br><span class="hljs-comment">// 3、获取Canvas对象；</span><br><span class="hljs-keyword">const</span> ctx = canvas.getContext(<span class="hljs-string">&quot;2d&quot;</span>); <span class="hljs-comment">// 拥有多种绘制路径、矩形、圆形、字符以及添加图像的方法</span><br><span class="hljs-comment">// 4、设置绘图属性；</span><br>ctx.fillStyle = <span class="hljs-string">&quot;red&quot;</span>; <span class="hljs-comment">//设置填充色</span><br><span class="hljs-comment">// 5、调用绘图API。</span><br>ctx.fillRect(<span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">50</span>, <span class="hljs-number">50</span>); <span class="hljs-comment">// 绘制矩形</span><br></code></pre></td></tr></table></figure><p><strong>2、canvas 路径</strong></p><p>常用的方法：</p><p>（1）moveTo(x,y)–定义线条开始坐标</p><p>（2）lineTo(x,y)–定义线条结束坐标</p><p>示例 1、绘制线段</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs js">&lt;canvas id=<span class="hljs-string">&quot;canvas&quot;</span> width=<span class="hljs-string">&quot;800&quot;</span> height=<span class="hljs-string">&quot;800&quot;</span>&gt;&lt;/canvas&gt;;<br><span class="hljs-keyword">var</span> canvas = <span class="hljs-built_in">document</span>.getElementById(<span class="hljs-string">&quot;canvas&quot;</span>);<br><span class="hljs-keyword">var</span> ctx = canvas.getContext(<span class="hljs-string">&quot;2d&quot;</span>);<br>ctx.beginPath(); <span class="hljs-comment">// 开始绘制路径</span><br>ctx.lineWidth = <span class="hljs-number">1</span>; <span class="hljs-comment">// 线条宽度</span><br>ctx.strokeStyle = <span class="hljs-string">&quot;green&quot;</span>; <span class="hljs-comment">// 线条填充色</span><br>ctx.moveTo(<span class="hljs-number">0</span>, <span class="hljs-number">0</span>);<br>ctx.lineTo(<span class="hljs-number">200</span>, <span class="hljs-number">100</span>);<br>ctx.stroke(); <span class="hljs-comment">// 绘制线段</span><br></code></pre></td></tr></table></figure><p>示例 2、绘制圆形</p><p>arc(x,y,r,start,stop) x 轴 y 轴 r 半径</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs js">&lt;canvas id=<span class="hljs-string">&quot;canvas&quot;</span> width=<span class="hljs-string">&quot;800&quot;</span> height=<span class="hljs-string">&quot;800&quot;</span>&gt;&lt;/canvas&gt;;<br><span class="hljs-keyword">var</span> canvas = <span class="hljs-built_in">document</span>.getElementById(<span class="hljs-string">&quot;canvas&quot;</span>);<br><span class="hljs-keyword">var</span> ctx = canvas.getContext(<span class="hljs-string">&quot;2d&quot;</span>);<br>ctx.beginPath();<br>ctx.lineWidth = <span class="hljs-number">2</span>;<br>ctx.strokeStyle = <span class="hljs-string">&quot;green&quot;</span>; <span class="hljs-comment">// 圆形边框色</span><br>ctx.fillStyle = <span class="hljs-string">&quot;red&quot;</span>; <span class="hljs-comment">// 圆形填充色</span><br>ctx.arc(<span class="hljs-number">95</span>, <span class="hljs-number">50</span>, <span class="hljs-number">40</span>, <span class="hljs-number">0</span>, <span class="hljs-number">2</span> * <span class="hljs-built_in">Math</span>.PI);<br>ctx.stroke();<br></code></pre></td></tr></table></figure><p>示例 3、绘制矩形 （代码见绘图流程）</p><p><strong>3、使用 canvas 压缩图片</strong></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-comment">&lt;!--编写input标签 指定type类型为file--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;file&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;upload&quot;</span> /&gt;</span><br></code></pre></td></tr></table></figure><details><summary>压缩图片js代码(点击展开)</summary><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 设置上传图片类型  上传图片的容量大小</span><br><span class="hljs-keyword">const</span> ACCEPT = [<span class="hljs-string">&quot;image/jpg&quot;</span>, <span class="hljs-string">&quot;image/png&quot;</span>, <span class="hljs-string">&quot;image/jpeg&quot;</span>]; <span class="hljs-comment">// 限定图片文件类型</span><br><span class="hljs-keyword">const</span> MAXSIZE = <span class="hljs-number">1024</span> * <span class="hljs-number">1024</span> * <span class="hljs-number">3</span>; <span class="hljs-comment">// 限定图片最大容量</span><br><span class="hljs-keyword">const</span> MAXSIZE_STR = <span class="hljs-string">&quot;3MB&quot;</span>;<br><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">convertImageToBase64</span>(<span class="hljs-params">file, cb</span>) </span>&#123;<br>  <span class="hljs-keyword">let</span> reader = <span class="hljs-keyword">new</span> FileReader();<br>  reader.addEventListener(<span class="hljs-string">&quot;load&quot;</span>, <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">e</span>) </span>&#123;<br>    <span class="hljs-keyword">const</span> base64Image = e.target.result; <span class="hljs-comment">// 获取文件内容，等同于 reader.result</span><br>    cb(base64Image);<br>    reader = <span class="hljs-literal">null</span>;<br>  &#125;);<br>  reader.readAsDataURL(file); <span class="hljs-comment">// 读取 file 对象中的内容</span><br>&#125;<br><span class="hljs-comment">// 图片是否压缩的判断</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">compress</span>(<span class="hljs-params">base64Image, cb</span>) </span>&#123;<br>  <span class="hljs-keyword">let</span> maxW = <span class="hljs-number">1024</span>;<br>  <span class="hljs-keyword">let</span> maxH = <span class="hljs-number">1024</span>;<br>  <span class="hljs-keyword">const</span> image = <span class="hljs-keyword">new</span> Image();<br>  image.addEventListener(<span class="hljs-string">&quot;load&quot;</span>, <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<br>    <span class="hljs-keyword">let</span> ratio; <span class="hljs-comment">// 压缩比</span><br>    <span class="hljs-keyword">let</span> needCompress = <span class="hljs-literal">false</span>; <span class="hljs-comment">// 是否需要压缩</span><br>    <span class="hljs-keyword">if</span> (maxW &lt; image.naturalWidth) &#123;<br>      needCompress = <span class="hljs-literal">true</span>;<br>      ratio = image.naturalWidth / maxW;<br>      maxH = image.naturalHeight / ratio;<br>    &#125;<br>    <span class="hljs-keyword">if</span> (maxH &lt; image.naturalHeight) &#123;<br>      needCompress = <span class="hljs-literal">true</span>;<br>      ratio = image.naturalHeight / maxH;<br>      maxW = image.naturalWidth / ratio;<br>    &#125;<br>    <span class="hljs-keyword">if</span> (!needCompress) &#123;<br>      maxW = image.naturalWidth;<br>      maxH = image.naturalHeight;<br>    &#125;<br>    <span class="hljs-keyword">const</span> canvas = <span class="hljs-built_in">document</span>.createElement(<span class="hljs-string">&quot;canvas&quot;</span>);<br>    canvas.setAttribute(<span class="hljs-string">&quot;id&quot;</span>, <span class="hljs-string">&quot;__compress__&quot;</span>);<br>    canvas.width = maxW;<br>    canvas.height = maxH;<br>    canvas.style.visibility = <span class="hljs-string">&quot;hidden&quot;</span>;<br>    <span class="hljs-built_in">document</span>.body.append(canvas);<br>    <span class="hljs-comment">// canvas画布</span><br>    <span class="hljs-keyword">const</span> ctx = canvas.getContext(<span class="hljs-string">&quot;2d&quot;</span>);<br>    ctx.clearRect(<span class="hljs-number">0</span>, <span class="hljs-number">0</span>, maxW, maxH);<br>    ctx.drawImage(image, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, maxW, maxH); <span class="hljs-comment">// 渲染图片</span><br>    <span class="hljs-keyword">const</span> compressImage = canvas.toDataURL(<span class="hljs-string">&quot;image/jpeg&quot;</span>, <span class="hljs-number">0.9</span>); <span class="hljs-comment">// 压缩图片</span><br>    cb(compressImage);<br>    <span class="hljs-keyword">const</span> _image = <span class="hljs-keyword">new</span> Image();<br>    _image.src = compressImage;<br>    <span class="hljs-built_in">document</span>.body.appendChild(_image);<br>    canvas.remove(); <span class="hljs-comment">// 移除 canvas</span><br>  &#125;);<br>  image.src = base64Image; <span class="hljs-comment">// 将图片设置到 image 的 src 属性中</span><br>  <span class="hljs-built_in">document</span>.body.appendChild(image);<br>&#125;<br><span class="hljs-comment">// 上传给服务端</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">uploadImage</span>(<span class="hljs-params">compressImage</span>) </span>&#123;<br>  <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;upload image to server...&quot;</span>, compressImage);<br>&#125;<br><br><span class="hljs-keyword">const</span> upload = <span class="hljs-built_in">document</span>.getElementById(<span class="hljs-string">&quot;upload&quot;</span>);<br>upload.addEventListener(<span class="hljs-string">&quot;change&quot;</span>, <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">e</span>) </span>&#123;<br>  <span class="hljs-keyword">const</span> file = e.target.files[<span class="hljs-number">0</span>];<br>  <span class="hljs-built_in">console</span>.log(file);<br>  <span class="hljs-keyword">if</span> (!file) &#123;<br>    <span class="hljs-keyword">return</span>;<br>  &#125;<br>  <span class="hljs-keyword">const</span> &#123; <span class="hljs-attr">type</span>: fileType, <span class="hljs-attr">size</span>: fileSize &#125; = file;<br>  <span class="hljs-comment">// 图片类型检查</span><br>  <span class="hljs-keyword">if</span> (!ACCEPT.includes(fileType)) &#123;<br>    alert(<span class="hljs-string">&quot;不支持上传该格式文件！&quot;</span>);<br>    upload.value = <span class="hljs-string">&quot;&quot;</span>;<br>    <span class="hljs-keyword">return</span>;<br>  &#125;<br>  <span class="hljs-comment">// 图片大小检查</span><br>  <span class="hljs-keyword">if</span> (fileSize &gt; MAXSIZE) &#123;<br>    alert(<span class="hljs-string">&quot;文件超出&quot;</span> + MAXSIZE_STR + <span class="hljs-string">&quot;！&quot;</span>);<br>    upload.value = <span class="hljs-string">&quot;&quot;</span>;<br>    <span class="hljs-keyword">return</span>;<br>  &#125;<br>  <span class="hljs-comment">// 压缩文件</span><br>  convertImageToBase64(file, <span class="hljs-function">(<span class="hljs-params">base64Image</span>) =&gt;</span><br>    compress(base64Image, uploadImage)<br>  );<br>&#125;);<br></code></pre></td></tr></table></figure></details>]]></content>
      
      
      
        <tags>
            
            <tag> canvas </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>17、移动端300ms延迟在IOS11中的bug</title>
      <link href="/2020/02/20/17-mobile/"/>
      <url>/2020/02/20/17-mobile/</url>
      
        <content type="html"><![CDATA[<p>在移动端点击一个元素触发事件的顺序为：touchstart –&gt; touchmove –&gt; touchend –&gt; click</p><span id="more"></span><h2 id="移动端300ms延迟在IOS11中的bug"><a href="#移动端300ms延迟在IOS11中的bug" class="headerlink" title="移动端300ms延迟在IOS11中的bug"></a>移动端300ms延迟在IOS11中的bug</h2><blockquote><p>解决方案</p></blockquote><p>1、禁用缩放 更改默认视口宽度</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js">&lt;meta name=<span class="hljs-string">&quot;viewport&quot;</span> content=<span class="hljs-string">&quot;width=device-width,user-scalable=no,initial-scale=1,maximum-scale=1&quot;</span>&gt;<br></code></pre></td></tr></table></figure><p>2、fastclick解决300ms延迟问题<br>        首先，需要安装fastclick插件</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js">npm install fastclick<br></code></pre></td></tr></table></figure><p>3、在main.js文件中引入fastclick，绑定到body上</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">import</span> FastClick <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;fastclick&quot;</span><br>FastClick.attach(<span class="hljs-built_in">document</span>.body);<br></code></pre></td></tr></table></figure><p>这就是常用来解决移动端300ms延迟的方法。但是这种方法在iOS11的系统中存在bug。</p><p>4、iOS11系统中出现的bug<br>    在iOS11系统下，点击input输入框的时候会出现不灵敏的现象。</p><blockquote><p>解决方案:</p></blockquote><details><summary>点我展示代码</summary><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs js">&lt;script&gt;<br>FastClick.prototype.focus = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">targetElement</span>) </span>&#123;<br>  <span class="hljs-keyword">var</span> length;<br>  <span class="hljs-keyword">var</span> deviceIsWindowsPhone = navigator.userAgent.indexOf(<span class="hljs-string">&quot;Windows Phone&quot;</span>) &gt;= <span class="hljs-number">0</span>;<br>  <span class="hljs-keyword">var</span> deviceIsIos = <span class="hljs-regexp">/iP(ad|hone|od)/</span>.test(navigator.userAgent) &amp;&amp; !deviceIsWindowsPhone;<br>  <span class="hljs-comment">//兼容处理:在iOS7中，有一些元素（如date、datetime、month等）在setSelectionRange会出现TypeError</span><br>  <span class="hljs-comment">//这是因为这些元素并没有selectionStart和selectionEnd的整型数字属性，所以一旦引用就会报错，因此排除这些属性才使用setSelectionRange方法</span><br>  <span class="hljs-keyword">if</span> (deviceIsIOS &amp;&amp; targetElement.setSelectionRange &amp;&amp; targetElement.type.indexOf(<span class="hljs-string">&#x27;date&#x27;</span>) !== <span class="hljs-number">0</span> &amp;&amp; targetElement.type !== <span class="hljs-string">&#x27;time&#x27;</span> &amp;&amp; targetElement.type !== <span class="hljs-string">&#x27;month&#x27;</span>) &#123;<br>    length = targetElement.value.length;<br>    <span class="hljs-comment">// 修复bug ios 11.3不弹出键盘，这里加上聚焦代码，让其强制聚焦弹出键盘</span><br>    targetElement.setSelectionRange(length, length);<br>  &#125; <span class="hljs-keyword">else</span> &#123;<br>    targetElement.focus();<br>  &#125;<br>&#125;<br>&lt;/script&gt;<br></code></pre></td></tr></table></figure></details><blockquote><p>注意：<br>setSelectionRange是HTMLInputElement的一个方法,用来设定input textare的当前文本的起始位置和结束位置。<br>(<a href="https://developer.mozilla.org/zh-CN/docs/Web/API/HTMLInputElement/setSelectionRange">MDN文档</a>）<br>对setSelectionRange方法只能用于类型为文本、搜索、连接、电话号码、密码的输入，以及在Chrome33开始访问其余类型的属性和方法抛出异常。<br>输入类型为数字时会抛出：“不能从’HTMLInputElement’中读取’selectionStart’属性：输入元素的类型(‘number’)不支持选择（Failed to read the ‘selectionStart’ property from ‘HTMLInputElement’: The input element’s type (‘number’) does not support selection）”。</p></blockquote>]]></content>
      
      
      
        <tags>
            
            <tag> dev </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>16、v-cloak解决页面闪烁问题</title>
      <link href="/2020/02/12/16-v-cloak/"/>
      <url>/2020/02/12/16-v-cloak/</url>
      
        <content type="html"><![CDATA[<p>这个指令保持在元素上直到关联实例结束编译。和CSS规则如[v-cloak]{ display: none }一起用时，这个指令可以隐藏未编译的 Mustache 标签直到实例准备完毕。</p><span id="more"></span><p>很多时候，我们页面模板中的数据是异步获取的，在网络不好的情况下，渲染页面的时候会出现页面闪烁的效果，影响用户体验，v-cloak 指令保持在元素上直到关联实例结束编译，利用它的特性，结合 CSS 的规则 [v-cloak] { display: none } 一起使用就可以隐藏掉未编译好的 Mustache 标签，直到实例准备完毕。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;#app&quot;</span> <span class="hljs-attr">v-cloak</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>&#123;&#123;value.name&#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-attr">[v-cloak]</span> &#123;<br>    <span class="hljs-attribute">display</span>: none;<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>需要注意，虽然解决了闪烁的问题，但这段时间内如果什么都不处理的话，会直接白屏，这并不是我们想要的效果，我们应该加一个loading动画或者骨架屏的效果，提升用户体验。</p></blockquote>]]></content>
      
      
      
        <tags>
            
            <tag> dev </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>15、解决oh-my-zsh启动时出现多行提示</title>
      <link href="/2020/02/09/15-oh-my-zsh/"/>
      <url>/2020/02/09/15-oh-my-zsh/</url>
      
        <content type="html"><![CDATA[<p>oh-my-zsh在启动时，出现很多行提示，仔细阅读发现是2个文件夹权限的问题，修改文件夹权限，添加命令即可解决。</p><span id="more"></span><h3 id="一、修改文件夹权限"><a href="#一、修改文件夹权限" class="headerlink" title="一、修改文件夹权限"></a>一、修改文件夹权限</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs js">cd /usr/local/share<br>sudo chmod <span class="hljs-number">755</span> zsh<br>cd /usr/local/share/zsh<br>sudo chmod <span class="hljs-number">755</span> site-functions<br></code></pre></td></tr></table></figure><h3 id="二、-zshrc添加命令"><a href="#二、-zshrc添加命令" class="headerlink" title="二、.zshrc添加命令"></a>二、.zshrc添加命令</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 根目录下添加下面的命令</span><br>cd ~<br>sudo vi .zshrc<br>#写在  # User configuration  之后<br>ZSH_DISABLE_COMPFIX=<span class="hljs-string">&quot;true&quot;</span> <br>#保存并退出<br>esc -&gt; :wq <br></code></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> tool </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>14、整理javascript知识(二)</title>
      <link href="/2020/01/15/14-javascript-simple2/"/>
      <url>/2020/01/15/14-javascript-simple2/</url>
      
        <content type="html"><![CDATA[<p>JavaScript的闭包、作用域、原型链</p><span id="more"></span><h4 id="一、闭包"><a href="#一、闭包" class="headerlink" title="一、闭包"></a>一、闭包</h4><h5 id="1、什么是闭包？"><a href="#1、什么是闭包？" class="headerlink" title="1、什么是闭包？"></a>1、什么是闭包？</h5><blockquote><p>一个函数和对其周围状态（lexical environment，词法环境）的引用捆绑在一起（或者说函数被引用包围），这样的组合就是闭包（closure）。也就是说，<u>闭包让你可以在一个内层函数中访问到其外层函数的作用域</u>。在 JavaScript 中，每当创建一个函数，闭包就会在函数创建的同时被创建出来。— from MDN</p></blockquote><p>javascript闭包的本质源自2点：词法作用域和函数当做值传递。</p><h5 id="2、词法作用域"><a href="#2、词法作用域" class="headerlink" title="2、词法作用域"></a>2、词法作用域</h5><blockquote><p>按照代码的书写时的样子，内部函数可以访问函数外面的变量。引擎通过数据结构和算法表示一个函数，使得在代码解释执行时按照词法作用域的规则，可以访问外围的变量，这个变量就登记在相应的数据结构中。</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">init</span>(<span class="hljs-params"></span>)</span>&#123;<br>    <span class="hljs-comment">// 局部变量</span><br>    <span class="hljs-keyword">var</span> name = <span class="hljs-string">&#x27;jude&#x27;</span>  <br>    <span class="hljs-comment">// 内部函数，一个闭包</span><br>    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">displayName</span>(<span class="hljs-params"></span>)</span>&#123;<br>        <span class="hljs-comment">// 父函数中声明的变量</span><br>        <span class="hljs-built_in">console</span>.log(name)<br>    &#125;<br>    displayName()<br>&#125;<br>init()<br></code></pre></td></tr></table></figure><p>name、displayName()是init()函数的一个局部变量和一个内部函数，displayName()函数没有自己的局部变量，但是它可以访问到外部函数的变量，所以displayName()可以使用父函数init()中声明的变量name。</p><h5 id="3、函数当做值传递"><a href="#3、函数当做值传递" class="headerlink" title="3、函数当做值传递"></a>3、函数当做值传递</h5><blockquote><p>即所谓的first class对象。就是可以把函数当作一个值来赋值，当作参数传给别的函数，也可以把函数当作一个值 return。一个函数被当作值返回时，也就相当于返回了一个通道，这个通道可以访问这个函数词法作用域中的变量，即函数所需要的数据结构保存了下来，数据结构中的值在外层函数执行时创建，外层函数执行完毕时理因销毁，但由于内部函数作为值返回出去，这些值得以保存下来。而且无法直接访问，必须通过返回的函数。这也就是私有性。</p></blockquote><p>闭包的形成很简单，在执行过程完毕后，返回函数，或者将函数得以保留下来，即形成闭包。</p><h3 id="4、闭包的缺点：造成内存泄漏"><a href="#4、闭包的缺点：造成内存泄漏" class="headerlink" title="4、闭包的缺点：造成内存泄漏"></a>4、闭包的缺点：造成内存泄漏</h3><blockquote><p>如果一个很大的对象被函数引用，本来函数调用结束就能销毁，但是现在引用却被通过闭包保存到了堆里，而且还一直用不到，那这块堆内存就一直没法使用，严重到一定程度就算是内存泄漏了。所以闭包不要乱用，少打包一点东西到堆内存。</p></blockquote><h4 id="二、作用域"><a href="#二、作用域" class="headerlink" title="二、作用域"></a>二、作用域</h4><h4 id="1、作用域"><a href="#1、作用域" class="headerlink" title="1、作用域"></a>1、作用域</h4><blockquote><p>作用域是指程序中定义变量的区域，该位置决定了变量的生命周期，也就是变量和函数的可访问范围。</p></blockquote><p>作用域分为函数作用域、全局作用域</p><blockquote><p>全局作用域：代码在程序任何地方都能访问，例如window对象<br>函数作用域： 固定代码片段中才能被访问</p></blockquote><p>JavaScript 引擎会把内存分为函数调用栈、全局作用域和堆，其中堆用于放一些动态的对象，调用栈每一个栈帧放一个函数的执行上下文，里面有一个 local 变量环境用于放内部声明的一些变量，如果是对象，会在堆上分配空间，然后把引用保存在栈帧的 local 环境中。全局作用域也是一样，只不过一般用于放静态的一些东西，有时候也叫静态域。</p><p>每个栈帧的执行上下文包含函数执行需要访问的所有环境，包括 local 环境、作用域链、this等。</p><p>作用域最大的用处：隔离变量，不同作用域下同名变量不会有冲突。</p><h4 id="2、作用域链"><a href="#2、作用域链" class="headerlink" title="2、作用域链"></a>2、作用域链</h4><blockquote><p>在 JavaScript 里面，函数、块、模块都可以形成作用域（一个存放变量的独立空间），他们之间可以相互嵌套，作用域之间会形成引用关系，这条链叫做作用域链。</p></blockquote><p>⼀般情况下，变量取值到创建这个变量的函数的作⽤域中取值，但是如果在当前作⽤域中没有查到值，就会向上级作⽤域去查，直到查到全局作⽤域，这么⼀个查找过程形成的链条就叫做作⽤域链。</p><h4 id="三、原型链"><a href="#三、原型链" class="headerlink" title="三、原型链"></a>三、原型链</h4><blockquote><p>当访问一个对象的某个属性时，会先在这个对象本身属性上查找， 如果没有找到，则会去它的__proto__隐式原型上查找，即它的构造函数的prototype， 如果还没有找到就会再在构造函数的prototype的__proto__中查找， 这样一层一层向上查找就会形成一个链式结构，我们称为原型链。</p></blockquote>]]></content>
      
      
      
        <tags>
            
            <tag> js </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>13、整理javascript知识(一)</title>
      <link href="/2020/01/12/13-javascript-simple/"/>
      <url>/2020/01/12/13-javascript-simple/</url>
      
        <content type="html"><![CDATA[<p>javascript 数据类型、类型检测、类型检测函数的封装（包括纯粹对象、空对象、window 对象）。</p><span id="more"></span><h3 id="一、基础类型及类型检测"><a href="#一、基础类型及类型检测" class="headerlink" title="一、基础类型及类型检测"></a>一、基础类型及类型检测</h3><h4 id="1、基础类型"><a href="#1、基础类型" class="headerlink" title="1、基础类型"></a>1、基础类型</h4><blockquote><p>JavaScript 数据类型包括：Null、Undefined、Boolean、Number、String、Symbol、Bigint(7 种原始类型)、Object(引用类型，包括 Object/Array/Date/Function/RegExp 等)</p></blockquote><p>原始类型保存在栈内存。</p><p>引用类型保存在堆内存，不可以直接访问堆内存空间中的位置和操作堆内存空间。只能操作对象在栈内存中的引用地址。</p><p>引用类型数据在栈内存中保存的实际上是对象在堆内存中的引用地址。通过这个引用地址可以快速查找到保存中堆内存中的对象。</p><h4 id="2、类型检测"><a href="#2、类型检测" class="headerlink" title="2、类型检测"></a>2、类型检测</h4><h5 id="1-、typeof"><a href="#1-、typeof" class="headerlink" title="(1)、typeof"></a>(1)、typeof</h5><blockquote><p>7 种原始类型可以使用 typeof 操作符检查数据类型（其中，typeof null === ‘object’）</p></blockquote><p>检查 Object 派生出来的结构类型，使用 typeof 是不行的， 会一直 === ‘object’,通常使用 instanceof 检查 Object 种类（这样还是存在误差）。</p><h5 id="（2-、instanceof"><a href="#（2-、instanceof" class="headerlink" title="（2)、instanceof"></a>（2)、instanceof</h5><blockquote><p>instanceof 运算符是用于检测构造函数的 prototype 属性是否出现在某个实例对象的原型链上。</p></blockquote><p>Tips: 检测对象不是某个构造函数的实例</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">if</span> (!(mycar <span class="hljs-keyword">instanceof</span> Car)) &#123;<br>  <span class="hljs-comment">// do something</span><br>&#125;<br><span class="hljs-comment">// 上面代码和下面代码完全不同，下面的代码!mycar会在instanceof之前被验证</span><br><span class="hljs-keyword">if</span> (!mycar <span class="hljs-keyword">instanceof</span> Car) &#123;<br>&#125;<br></code></pre></td></tr></table></figure><h5 id="（3-、Object-prototype-toString-call"><a href="#（3-、Object-prototype-toString-call" class="headerlink" title="（3)、Object.prototype.toString().call()"></a>（3)、Object.prototype.toString().call()</h5><blockquote><p>每个对象都有一个 toString()方法，可以通过 toString() 来获取每个对象的类型。为了每个对象都能通过 Object.prototype.toString() 来检测，需要以 Function.prototype.call() 或者 Function.prototype.apply() 的形式来调用，传递要检查的对象作为第一个参数，称为 thisArg。</p></blockquote><p>调用 Object.prototype.toString 会返回一个由 “[object “ 和 class 和 “]” 组成的字符串，而 class 是要判断的对象的内部属性。</p><p>(看了别人翻译的es5规范，讲解这个toString（）函数，如下：)<br>当toString方法被调用的时候，执行步骤为：</p><blockquote><p>1、如果 this 值是 undefined，就返回 [object Undefined]<br>2、如果 this 的值是 null，就返回 [object Null]<br>3、让 O 成为 ToObject(this) 的结果<br>4、让 class 成为 O 的内部属性 [[Class]] 的值<br>5、最后返回由 “[object “ 和 class 和 “]” 三个部分组成的字符串</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 以下是11种：</span><br><span class="hljs-keyword">var</span> number = <span class="hljs-number">1</span>; <span class="hljs-comment">// [object Number]</span><br><span class="hljs-keyword">var</span> string = <span class="hljs-string">&quot;123&quot;</span>; <span class="hljs-comment">// [object String]</span><br><span class="hljs-keyword">var</span> boolean = <span class="hljs-literal">true</span>; <span class="hljs-comment">// [object Boolean]</span><br><span class="hljs-keyword">var</span> und = <span class="hljs-literal">undefined</span>; <span class="hljs-comment">// [object Undefined]</span><br><span class="hljs-keyword">var</span> nul = <span class="hljs-literal">null</span>; <span class="hljs-comment">// [object Null]</span><br><span class="hljs-keyword">var</span> obj = &#123; <span class="hljs-attr">a</span>: <span class="hljs-number">1</span> &#125;; <span class="hljs-comment">// [object Object]</span><br><span class="hljs-keyword">var</span> array = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>]; <span class="hljs-comment">// [object Array]</span><br><span class="hljs-keyword">var</span> date = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Date</span>(); <span class="hljs-comment">// [object Date]</span><br><span class="hljs-keyword">var</span> error = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Error</span>(); <span class="hljs-comment">// [object Error]</span><br><span class="hljs-keyword">var</span> reg = <span class="hljs-regexp">/a/g</span>; <span class="hljs-comment">// [object RegExp]</span><br><span class="hljs-keyword">var</span> func = <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">a</span>(<span class="hljs-params"></span>) </span>&#123;&#125;; <span class="hljs-comment">// [object Function]</span><br><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">checkType</span>(<span class="hljs-params"></span>) </span>&#123;<br>  <span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-built_in">arguments</span>.length; i++) &#123;<br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">Object</span>.prototype.toString.call(<span class="hljs-built_in">arguments</span>[i]));<br>  &#125;<br>&#125;<br><br>checkType(<br>  number,<br>  string,<br>  boolean,<br>  und,<br>  nul,<br>  obj,<br>  array,<br>  date,<br>  error,<br>  reg,<br>  func<br>);<br><br><span class="hljs-comment">// 除了以上11种，还包括</span><br><span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">Object</span>.prototype.toString.call(<span class="hljs-built_in">Math</span>)); <span class="hljs-comment">// [object Math]</span><br><span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">Object</span>.prototype.toString.call(<span class="hljs-built_in">JSON</span>)); <span class="hljs-comment">// [object JSON]</span><br><br><span class="hljs-comment">// 还可以这样</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">a</span>(<span class="hljs-params"></span>) </span>&#123;<br>  <span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">Object</span>.prototype.toString.call(<span class="hljs-built_in">arguments</span>)); <span class="hljs-comment">// [object Arguments]</span><br>&#125;<br>a();<br></code></pre></td></tr></table></figure><h5 id="（4-、封装一个-type-函数"><a href="#（4-、封装一个-type-函数" class="headerlink" title="（4)、封装一个 type 函数"></a>（4)、封装一个 type 函数</h5><p>写一个 type 函数检测各种类型的值,考虑到兼容性（IE6，null 和 undefined 会被 Obejct.prototype.toString 识别为[object Obejct]）</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> class2type = &#123;&#125;;<br><br><span class="hljs-comment">// 生成class2type映射</span><br><span class="hljs-string">&quot;Boolean Number String Function Array Date RegExp Object Error&quot;</span><br>  .split(<span class="hljs-string">&quot; &quot;</span>)<br>  .map(<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">item, index</span>) </span>&#123;<br>    class2type[<span class="hljs-string">&quot;[object &quot;</span> + item + <span class="hljs-string">&quot;]&quot;</span>] = item.toLowerCase();<br>  &#125;);<br><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">type</span>(<span class="hljs-params">obj</span>) </span>&#123;<br>  <span class="hljs-comment">// 一箭双雕</span><br>  <span class="hljs-keyword">if</span> (obj == <span class="hljs-literal">null</span>) &#123;<br>    <span class="hljs-keyword">return</span> obj + <span class="hljs-string">&quot;&quot;</span>;<br>  &#125;<br>  <span class="hljs-keyword">return</span> <span class="hljs-keyword">typeof</span> obj === <span class="hljs-string">&quot;object&quot;</span> || <span class="hljs-keyword">typeof</span> obj === <span class="hljs-string">&quot;function&quot;</span><br>    ? class2type[<span class="hljs-built_in">Object</span>.prototype.toString.call(obj)] || <span class="hljs-string">&quot;object&quot;</span><br>    : <span class="hljs-keyword">typeof</span> obj;<br>&#125;<br></code></pre></td></tr></table></figure><h5 id="（5-、函数类型的检测"><a href="#（5-、函数类型的检测" class="headerlink" title="（5)、函数类型的检测"></a>（5)、函数类型的检测</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// type函数</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">isFunction</span>(<span class="hljs-params">obj</span>) </span>&#123;<br>  <span class="hljs-keyword">return</span> type(obj) === <span class="hljs-string">&quot;function&quot;</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h5 id="（6-、纯粹对象的检测"><a href="#（6-、纯粹对象的检测" class="headerlink" title="（6)、纯粹对象的检测"></a>（6)、纯粹对象的检测</h5><p>什么是纯粹对象？</p><blockquote><p>该对象是通过 “{}” 或 “new Object” 创建的，该对象含有零个或者多个键值对。</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 上面写 type 函数时，用来存放 toString 映射结果的对象</span><br><span class="hljs-keyword">var</span> class2type = &#123;&#125;;<br><br><span class="hljs-comment">// 相当于 Object.prototype.toString</span><br><span class="hljs-keyword">var</span> toString = class2type.toString;<br><br><span class="hljs-comment">// 相当于 Object.prototype.hasOwnProperty</span><br><span class="hljs-keyword">var</span> hasOwn = class2type.hasOwnProperty;<br><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">isPlainObject</span>(<span class="hljs-params">obj</span>) </span>&#123;<br>  <span class="hljs-keyword">var</span> proto, Ctor;<br><br>  <span class="hljs-comment">// 排除掉明显不是obj的以及一些宿主对象如Window</span><br>  <span class="hljs-keyword">if</span> (!obj || toString.call(obj) !== <span class="hljs-string">&quot;[object Object]&quot;</span>) &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>  &#125;<br><br>  <span class="hljs-comment">/**</span><br><span class="hljs-comment">   * getPrototypeOf es5 方法，获取 obj 的原型</span><br><span class="hljs-comment">   * 以 new Object 创建的对象为例的话</span><br><span class="hljs-comment">   * obj.__proto__ === Object.prototype</span><br><span class="hljs-comment">   */</span><br>  proto = <span class="hljs-built_in">Object</span>.getPrototypeOf(obj);<br><br>  <span class="hljs-comment">// 没有原型的对象是纯粹的，Object.create(null) 就在这里返回 true</span><br>  <span class="hljs-keyword">if</span> (!proto) &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>  &#125;<br><br>  <span class="hljs-comment">/**</span><br><span class="hljs-comment">   * 以下判断通过 new Object 方式创建的对象</span><br><span class="hljs-comment">   * 判断 proto 是否有 constructor 属性，如果有就让 Ctor 的值为 proto.constructor</span><br><span class="hljs-comment">   * 如果是 Object 函数创建的对象，Ctor 在这里就等于 Object 构造函数</span><br><span class="hljs-comment">   */</span><br>  Ctor = hasOwn.call(proto, <span class="hljs-string">&quot;constructor&quot;</span>) &amp;&amp; proto.constructor;<br><br>  <span class="hljs-comment">// 在这里判断 Ctor 构造函数是不是 Object 构造函数，用于区分自定义构造函数和 Object 构造函数</span><br>  <span class="hljs-keyword">return</span> (<br>    <span class="hljs-keyword">typeof</span> Ctor === <span class="hljs-string">&quot;function&quot;</span> &amp;&amp;<br>    hasOwn.toString.call(Ctor) === hasOwn.toString.call(<span class="hljs-built_in">Object</span>)<br>  );<br>&#125;<br></code></pre></td></tr></table></figure><h5 id="（7-、空对象的判断"><a href="#（7-、空对象的判断" class="headerlink" title="（7)、空对象的判断"></a>（7)、空对象的判断</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">isEmptyObject</span>(<span class="hljs-params">obj</span>) </span>&#123;<br>  <span class="hljs-keyword">var</span> name;<br>  <span class="hljs-keyword">for</span> (name <span class="hljs-keyword">in</span> obj) &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>  &#125;<br>  <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h5 id="（8-、window-对象的判断"><a href="#（8-、window-对象的判断" class="headerlink" title="（8)、window 对象的判断"></a>（8)、window 对象的判断</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">isWindow</span>(<span class="hljs-params">obj</span>) </span>&#123;<br>  <span class="hljs-keyword">return</span> obj != <span class="hljs-literal">null</span> &amp;&amp; obj === obj.window;<br>&#125;<br></code></pre></td></tr></table></figure><h5 id="（9-、数组类型的检测"><a href="#（9-、数组类型的检测" class="headerlink" title="（9)、数组类型的检测"></a>（9)、数组类型的检测</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 判断Array.isArray()方法是否存在，如果存在就使用该方法，不存在就使用type函数</span><br><span class="hljs-keyword">var</span> isArray =<br>  <span class="hljs-built_in">Array</span>.isArray ||<br>  <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">obj</span>) </span>&#123;<br>    <span class="hljs-keyword">return</span> type(obj) === <span class="hljs-string">&quot;array&quot;</span>;<br>  &#125;;<br></code></pre></td></tr></table></figure><h5 id="（10-、类数组的判断"><a href="#（10-、类数组的判断" class="headerlink" title="（10)、类数组的判断"></a>（10)、类数组的判断</h5><p>满足的三个条件：</p><blockquote><p>1、是数组<br>2、长度为 0<br>3、lengths 属性是大于 0 的数字类型，并且 obj[length - 1]必须存在</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">isArrayLike</span>(<span class="hljs-params">obj</span>) </span>&#123;<br>  <span class="hljs-comment">// obj 必须有 length属性</span><br>  <span class="hljs-keyword">var</span> length = !!obj &amp;&amp; <span class="hljs-string">&quot;length&quot;</span> <span class="hljs-keyword">in</span> obj &amp;&amp; obj.length;<br>  <span class="hljs-keyword">var</span> typeRes = type(obj);<br><br>  <span class="hljs-comment">// 排除掉函数和 Window 对象</span><br>  <span class="hljs-keyword">if</span> (typeRes === <span class="hljs-string">&quot;function&quot;</span> || isWindow(obj)) &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>  &#125;<br><br>  <span class="hljs-keyword">return</span> (<br>    typeRes === <span class="hljs-string">&quot;array&quot;</span> ||<br>    length === <span class="hljs-number">0</span> ||<br>    (<span class="hljs-keyword">typeof</span> length === <span class="hljs-string">&quot;number&quot;</span> &amp;&amp; length &gt; <span class="hljs-number">0</span> &amp;&amp; length - <span class="hljs-number">1</span> <span class="hljs-keyword">in</span> obj)<br>  );<br>&#125;<br></code></pre></td></tr></table></figure><p>函数库的实现，如：underscore</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> MAX_ARRAY_INDEX = <span class="hljs-built_in">Math</span>.pow(<span class="hljs-number">2</span>, <span class="hljs-number">53</span>) - <span class="hljs-number">1</span>;<br><br><span class="hljs-keyword">var</span> isArrayLike = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">collection</span>) </span>&#123;<br>  <span class="hljs-keyword">var</span> length = getLength(collection);<br>  <span class="hljs-keyword">return</span> <span class="hljs-keyword">typeof</span> length == <span class="hljs-string">&quot;number&quot;</span> &amp;&amp; length &gt;= <span class="hljs-number">0</span> &amp;&amp; length &lt;= MAX_ARRAY_INDEX;<br>&#125;;<br></code></pre></td></tr></table></figure><h5 id="11-、判断是不是-DOM-元素"><a href="#11-、判断是不是-DOM-元素" class="headerlink" title="(11)、判断是不是 DOM 元素"></a>(11)、判断是不是 DOM 元素</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> isElement = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">obj</span>) </span>&#123;<br>  <span class="hljs-keyword">return</span> !!(obj &amp;&amp; obj.nodeType === <span class="hljs-number">1</span>);<br>&#125;;<br></code></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> js </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>12、下拉框select银行卡号格式处理</title>
      <link href="/2019/12/29/12-select/"/>
      <url>/2019/12/29/12-select/</url>
      
        <content type="html"><![CDATA[<p>银行卡号显示为 6217 **** 0000 的格式</p><span id="more"></span><p>以选择银行卡为例：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs js">&lt;select v-model=<span class="hljs-string">&quot;selected&quot;</span> <span class="hljs-class"><span class="hljs-keyword">class</span></span>=<span class="hljs-string">&quot;selected&quot;</span>&gt;<br>    <span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">option</span> <span class="hljs-attr">disabled</span> <span class="hljs-attr">value</span> <span class="hljs-attr">v-show</span>=<span class="hljs-string">&quot;showBankCard&quot;</span>&gt;</span>请选择提现到账的银行卡<span class="hljs-tag">&lt;/<span class="hljs-name">option</span>&gt;</span></span><br>    <span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">option</span></span></span><br><span class="hljs-tag"><span class="xml">        <span class="hljs-attr">v-for</span>=<span class="hljs-string">&quot;item in BankCardList&quot;</span></span></span><br><span class="hljs-tag"><span class="xml">        <span class="hljs-attr">:key</span>=<span class="hljs-string">&quot;item.id&quot;</span></span></span><br><span class="hljs-tag"><span class="xml">        <span class="hljs-attr">v-bind:value</span>=<span class="hljs-string">&quot;item.id&quot;</span></span></span><br><span class="hljs-tag"><span class="xml">    &gt;</span></span><br><span class="xml">        &#123;&#123; item.card_no &#125;&#125;</span><br><span class="xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">option</span>&gt;</span></span><br>&lt;/select&gt;<br></code></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs js">item.card_no ? item.card_no.replace(<span class="hljs-regexp">/^(\d&#123;4&#125;)\d+(\d&#123;4&#125;)$/</span>,<span class="hljs-string">&quot;$1****$2&quot;</span>):<span class="hljs-string">&quot;&quot;</span><br><span class="hljs-comment">// 银行卡号显示为 6217 **** 0000 的格式。</span><br></code></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> dev </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>11、二维码的生成</title>
      <link href="/2019/12/28/11-qrcode/"/>
      <url>/2019/12/28/11-qrcode/</url>
      
        <content type="html"><![CDATA[<p>使用 qrcode 生成二维码</p><span id="more"></span><p>一、下载插件 qrcode 插件</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js">npm install qrcode --save<br></code></pre></td></tr></table></figure><p>二、在 main.js 中引用</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">import</span> QRCode <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;qrcode&quot;</span>;<br>Vue.use(QRCode);<br></code></pre></td></tr></table></figure><p>三、组件中引入 QRCode</p> <details> <summary>点我展示代码</summary> <figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">template</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;qrcode&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs js">    &lt;script&gt;<br>      <span class="hljs-keyword">import</span> QRCode <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;qrcode&#x27;</span>;<br>      <span class="hljs-function"><span class="hljs-title">mounted</span>(<span class="hljs-params"></span>)</span>&#123;<br>          <span class="hljs-built_in">this</span>.CreateQrcode();<br>      &#125;,<br>      <span class="hljs-attr">method</span>:&#123;<br>          <span class="hljs-built_in">setTimeout</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>              <span class="hljs-comment">// 获取DOM节点</span><br>              <span class="hljs-keyword">let</span> dom = <span class="hljs-built_in">document</span>.getElementById(<span class="hljs-string">&#x27;qrcode);</span><br><span class="hljs-string">              // 路由传参</span><br><span class="hljs-string">              const res = this.$route.params;</span><br><span class="hljs-string">              const lbsid = res.id;</span><br><span class="hljs-string">              // 二维码包含的URL 需要将URL和id做一下字符串的拼接</span><br><span class="hljs-string">              let url = &#x27;</span>http:<span class="hljs-comment">//*********&#x27;;</span><br>              <span class="hljs-keyword">let</span> URL = url.concat(lbsid);<br>              <span class="hljs-keyword">let</span> qrCode = <span class="hljs-keyword">new</span> QRCode(dom,&#123;<br>                  <span class="hljs-attr">width</span>:<span class="hljs-number">260</span>, <span class="hljs-comment">// 图像宽度</span><br>                  <span class="hljs-attr">height</span>:<span class="hljs-number">260</span>,  <span class="hljs-comment">// 图像高度</span><br>                  <span class="hljs-attr">colorDark</span>:<span class="hljs-string">&quot;#000000&quot;</span>,  <span class="hljs-comment">// 前景色</span><br>                  <span class="hljs-attr">colorLight</span>:<span class="hljs-string">&quot;#ffffff&quot;</span>, <span class="hljs-comment">// 背景色</span><br>                  <span class="hljs-attr">correctLevel</span>: QRCode.CorrectLevel.H  <span class="hljs-comment">// 容错等级</span><br>              &#125;);<br>              qrCode.clear();<br>              qrCode.makeCode(URL);<br>          &#125;,<span class="hljs-number">100</span>)<br>      &#125;<br>    &lt;/script&gt;<br>    <span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">style</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;less&quot;</span> <span class="hljs-attr">scoped</span>&gt;</span><span class="css"></span></span><br><span class="css"><span class="xml">        <span class="hljs-selector-id">#qrcode</span> &#123;</span></span><br><span class="css"><span class="xml">            <span class="hljs-attribute">display</span>: inline-block;</span></span><br><span class="css"><span class="xml">            <span class="hljs-attribute">margin-top</span>: <span class="hljs-number">6rem</span>;</span></span><br><span class="css"><span class="xml">            <span class="hljs-selector-tag">img</span> &#123;</span></span><br><span class="css"><span class="xml">                <span class="hljs-attribute">width</span>: <span class="hljs-number">60%</span>;</span></span><br><span class="css"><span class="xml">                <span class="hljs-attribute">height</span>: <span class="hljs-number">60%</span>;</span></span><br><span class="css"><span class="xml">                <span class="hljs-attribute">background-color</span>: <span class="hljs-number">#fff</span>; //设置白色背景色</span></span><br><span class="css"><span class="xml">                <span class="hljs-attribute">padding</span>: <span class="hljs-number">6px</span>; // 利用<span class="hljs-attribute">padding</span>的特性，挤出白边</span></span><br><span class="css"><span class="xml">  &#125;</span></span><br><span class="css"><span class="xml">&#125;</span></span><br><span class="css"><span class="xml">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span></span><br></code></pre></td></tr></table></figure></details>]]></content>
      
      
      
        <tags>
            
            <tag> dev </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>10、微信公众号网页使用popstate事件</title>
      <link href="/2019/12/23/10-popstate/"/>
      <url>/2019/12/23/10-popstate/</url>
      
        <content type="html"><![CDATA[<p>如何在h5移动端禁止某一些页面使用虚拟返回键。</p><span id="more"></span><h3 id="1、popstate事件"><a href="#1、popstate事件" class="headerlink" title="1、popstate事件"></a>1、popstate事件</h3><p>MDN上是这样介绍popstate的：<br>    当活动历史记录条目更改时，将触发popstate事件。如果被激活的历史记录条目是通过对history.pushState（）的调用创建的，或者受到对history.replaceState（）的调用的影响，popstate事件的state属性包含历史条目的状态对象的副本。<br>    需要注意的是调用history.pushState()或history.replaceState()不会触发popstate事件。只有在做出浏览器动作时，才会触发该事件，如用户点击浏览器的回退按钮（或者在Javascript代码中调用history.back()或者history.forward()方法）<br>    不同的浏览器在加载页面时处理popstate事件的形式存在差异。页面加载时Chrome和Safari通常会触发(emit )popstate事件，但Firefox则不会。<br>    我负责的一个项目中，在微信公众号网页的某一个页面需要禁止使用微信浏览器的返回键。</p><h3 id="2、解决方式："><a href="#2、解决方式：" class="headerlink" title="2、解决方式："></a>2、解决方式：</h3><details><summary>点我展示代码</summary><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 在禁止返回的组件的methods中写一个方法forbidBack</span><br><span class="hljs-function"><span class="hljs-title">forbidBack</span>(<span class="hljs-params"></span>)</span>&#123;<br>    <span class="hljs-built_in">window</span>.history.pushState(<span class="hljs-string">&quot;forward&quot;</span>,<span class="hljs-literal">null</span>,<span class="hljs-string">&quot;#&quot;</span>);<br>    <span class="hljs-built_in">window</span>.history.forward(<span class="hljs-number">1</span>);<br>&#125;<br><br><span class="hljs-comment">// 监听返回键，禁止返回之前的路由</span><br><span class="hljs-keyword">if</span>(<span class="hljs-built_in">window</span>.history &amp;&amp; <span class="hljs-built_in">window</span>.history.pushState)&#123;<br>    <span class="hljs-built_in">window</span>.addEventListener(<span class="hljs-string">&quot;popstate&quot;</span>,<span class="hljs-built_in">this</span>.forbidBack,<span class="hljs-literal">false</span>);<br>    <span class="hljs-built_in">this</span>.forbidBack();<br>&#125;<br><br><span class="hljs-comment">//离开页面需要销毁监听</span><br><span class="hljs-built_in">window</span>.removeEventListener(<span class="hljs-string">&quot;popstate&quot;</span>,<span class="hljs-built_in">this</span>.forbidBack,fasle);<br></code></pre></td></tr></table></figure></details>]]></content>
      
      
      
        <tags>
            
            <tag> dev </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>9、h5扫码功能的实现</title>
      <link href="/2019/12/20/9-h5-scan/"/>
      <url>/2019/12/20/9-h5-scan/</url>
      
        <content type="html"><![CDATA[<p>使用H5 API barcode实现扫码。</p><span id="more"></span><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">template</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">&quot;handleCloseScan&quot;</span>&gt;</span>X<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;scan&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;bcid&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">button</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">&quot;handleStartScan&quot;</span>&gt;</span>扫 码<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span><br></code></pre></td></tr></table></figure><details><summary>点击展示js代码</summary><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><code class="hljs js">    &lt;script&gt;<br>        <span class="hljs-comment">// 扫描对象</span><br>        <span class="hljs-keyword">var</span> scan = <span class="hljs-literal">null</span>;<br>        methods:&#123;<br>            <span class="hljs-comment">// 开始扫描</span><br>            <span class="hljs-function"><span class="hljs-title">handleStartScan</span>(<span class="hljs-params"></span>)</span>&#123;<br>                <span class="hljs-keyword">const</span> that = <span class="hljs-built_in">this</span>;<br>                <span class="hljs-keyword">if</span>(!<span class="hljs-built_in">window</span>.plus) <span class="hljs-keyword">return</span>;<br>                scan = <span class="hljs-keyword">new</span> plus.barcode.Barcode(<span class="hljs-string">&#x27;bcid&#x27;</span>);<br>                <span class="hljs-comment">// 开始扫描</span><br>                scan.start();<br>                <span class="hljs-comment">// 扫码成功之后的回调函数 type是类型 result 结果</span><br>                scan.onmarked = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">type,result</span>)</span>&#123;<br>                    <span class="hljs-keyword">const</span> text = <span class="hljs-string">&#x27;&#x27;</span>;<br>                    <span class="hljs-keyword">switch</span>(type)&#123;<br>                        <span class="hljs-keyword">case</span> plus.barcode.QR:<br>                            type = <span class="hljs-string">&#x27;QR&#x27;</span>;<br>                            <span class="hljs-keyword">break</span>;<br>                        <span class="hljs-keyword">case</span> plus.barcode.EAN13:<br>                            type = <span class="hljs-string">&quot;EAN13&quot;</span>;<br>                            <span class="hljs-keyword">break</span>;<br>                        <span class="hljs-keyword">case</span> plus.barcode.EAN8:<br>                            type = <span class="hljs-string">&quot;EAN8&quot;</span>;<br>                            <span class="hljs-keyword">break</span>;<br>                        <span class="hljs-keyword">default</span>:<br>                            type = <span class="hljs-string">&quot;其它&quot;</span> + type;<br>                            <span class="hljs-keyword">break</span>;<br>                    &#125;<br>                    result = result.replace(<span class="hljs-regexp">/\n/g</span>,<span class="hljs-string">&quot;&quot;</span>);<br>                    <span class="hljs-keyword">const</span> id = result.match(<span class="hljs-regexp">/\d+/</span>)[<span class="hljs-number">0</span>];<br>                    that.$router.push(&#123;<br>                        <span class="hljs-attr">name</span>:<span class="hljs-string">&#x27;ComponentName&#x27;</span>,<br>                        <span class="hljs-attr">params</span>: &#123;<br>                            <span class="hljs-attr">id</span>:id<br>                        &#125;<br>                    &#125;);<br>                    scan.close();<br>                &#125;<br>            &#125;,<br>            <span class="hljs-comment">// 关闭扫描控件</span><br>            <span class="hljs-function"><span class="hljs-title">handleCloseScan</span>(<span class="hljs-params"></span>)</span>&#123;<br>                 <span class="hljs-keyword">if</span>(!<span class="hljs-built_in">window</span>.plus) <span class="hljs-keyword">return</span>;<br>                 scan.close();<br>                 <span class="hljs-built_in">this</span>.$router.push(<span class="hljs-string">&#x27;/&#x27;</span>);<br>            &#125;<br>        &#125;<br>&#125;<br>    &lt;/script&gt;<br></code></pre></td></tr></table></figure></details>]]></content>
      
      
      
        <tags>
            
            <tag> h5 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>8、解决Vue项目热更新打包时间过长</title>
      <link href="/2019/12/11/8-hot/"/>
      <url>/2019/12/11/8-hot/</url>
      
        <content type="html"><![CDATA[<p>维护公司一个项目的时候，发现在项目启动、热更新和打包项目的时候，时间长的“感人”。</p><span id="more"></span><p>当你改动项目的一些地方想要立即看到效果的时候，却发现热更新的编译过程却花了你很长时间，“心态崩了。。。”。</p><h3 id="1、解决Vue项目热更新打包时间过长"><a href="#1、解决Vue项目热更新打包时间过长" class="headerlink" title="1、解决Vue项目热更新打包时间过长"></a>1、解决Vue项目热更新打包时间过长</h3><p>解决方法：</p><p>1、使用html-webpack-plugin-for-multihtml插件</p><p>2、在build-webpack.dev.conf.js文件中</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> HtmlWebpackPlugin = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;html-webpack-plugin&#x27;</span>);<br><span class="hljs-comment">// 替换成</span><br><span class="hljs-keyword">const</span> HtmlWebpackPlugin = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;html-webpack-plugin-for-multihtml&#x27;</span>);<br></code></pre></td></tr></table></figure><p>3、multihtmlCache:true  解决多页热部署的关键</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> pathname <span class="hljs-keyword">in</span> pages) &#123;<br>  <span class="hljs-comment">// 配置生成的html文件，定义路径等</span><br>  <span class="hljs-keyword">var</span> conf = &#123;<br>    <span class="hljs-attr">filename</span>: pathname + <span class="hljs-string">&#x27;.html&#x27;</span>,<br>    <span class="hljs-attr">template</span>: pages[pathname],   <span class="hljs-comment">// 模板路径</span><br>    <span class="hljs-attr">inject</span>: <span class="hljs-literal">true</span>,              <span class="hljs-comment">// js插入位置</span><br>    <span class="hljs-attr">multihtmlCache</span>: <span class="hljs-literal">true</span>,    <span class="hljs-comment">// 解决多页热部署的关键 这里这里这里这里这里很重要！！！</span><br>    <span class="hljs-comment">// necessary to consistently work with multiple chunks via CommonsChunkPlugin</span><br>    <span class="hljs-attr">chunksSortMode</span>: <span class="hljs-string">&#x27;dependency&#x27;</span><br>  &#125;;<br><br>  <span class="hljs-keyword">if</span> (pathname <span class="hljs-keyword">in</span> devWebpackConfig.entry) &#123;<br>    conf.chunks = [<span class="hljs-string">&#x27;manifest&#x27;</span>,<span class="hljs-string">&#x27;vendor&#x27;</span>, pathname];<br>    conf.hash = <span class="hljs-literal">false</span>;<br>  &#125;<br>  devWebpackConfig.plugins.push(<span class="hljs-keyword">new</span> HtmlWebpackPlugin(conf));<br>&#125;<br></code></pre></td></tr></table></figure><p>4、router.js中使用路由懒加载</p><p>这时候再启动项目，热更新、编译和打包的速度会大大提升。</p><h3 id="2、项目打包由4M变为1M"><a href="#2、项目打包由4M变为1M" class="headerlink" title="2、项目打包由4M变为1M"></a>2、项目打包由4M变为1M</h3><p>公司有一个H5微信公众号网页的项目，项目打包之后文件有4M；</p><p>修改webpack.prod.conf.js里的UglifyJsPlugin，这里的意思是打包后不产生后缀名为.map的文件。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs javascript">webpack.prod.conf.js<br>    <span class="hljs-keyword">new</span> UglifyJsPlugin(&#123;<br>      <span class="hljs-attr">uglifyOptions</span>: &#123;<br>        <span class="hljs-attr">compress</span>: &#123;<br>          <span class="hljs-attr">warnings</span>: <span class="hljs-literal">false</span><br>        &#125;<br>      &#125;,<br>      <span class="hljs-comment">// sourceMap: config.build.productionSourceMap, 将这行代码注释掉。</span><br>      <span class="hljs-attr">parallel</span>: <span class="hljs-literal">true</span><br>    &#125;)<br></code></pre></td></tr></table></figure><p>处理后打包的文件的大小为1M</p>]]></content>
      
      
      
        <tags>
            
            <tag> dev </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>7、markdown语法</title>
      <link href="/2019/12/05/7-markdown/"/>
      <url>/2019/12/05/7-markdown/</url>
      
        <content type="html"><![CDATA[<p>markdown语法整理</p><span id="more"></span><p>Markdown标题</p><p>使用#号标记，使用 # 号可表示 1-6 级标题，一级标题对应一个 # 号，二级标题对应两个 # 号，以此类推。</p><p>1、Markdown段落</p><p>段落的换行是使用两个以上空格加上回车。</p><blockquote><p>字体:</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">*斜体文本*<br></code></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">_斜体文本_<br></code></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">**粗体文本**<br></code></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">__粗体文本__<br></code></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">***粗斜体文本***<br></code></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">___粗斜体文本___<br></code></pre></td></tr></table></figure><blockquote><p>分割线</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">***<br><br>* * *<br><br>*****<br><br>- - -<br><br>----------<br></code></pre></td></tr></table></figure><blockquote><p>删除线、下划线、脚注</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">~~删除线~~<br>&lt;u&gt;下划线&lt;/u&gt;<br>[^Vue]:Vuejs是目前最流行的web开发框架之一。<br></code></pre></td></tr></table></figure><p>2、Markdown列表</p><p>Markdown 支持有序列表和无序列表。</p><p>（1）、无序列表使用星号(*)、加号(+)或是减号(-)作为列表标记，这些标记后面要添加一个空格，然后再填写内容：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">* 第一项<br>* 第二项<br>* 第三项<br><br>+ 第一项<br>+ 第二项<br>+ 第三项<br><br><br>- 第一项<br>- 第二项<br>- 第三项<br></code></pre></td></tr></table></figure><p>（2）、有序列表：有序列表使用数字并加上 . 号来表示。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">1. 第一项<br>2. 第二项<br>3. 第三项<br></code></pre></td></tr></table></figure><p>（3）、列表嵌套：列表嵌套只需在子列表中的选项前面添加四个空格即可</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">1. 第一项：<br>    - 第一项嵌套的第一个元素<br>    - 第一项嵌套的第二个元素<br>2. 第二项：<br>    - 第二项嵌套的第一个元素<br>    - 第二项嵌套的第二个元素<br></code></pre></td></tr></table></figure><p>4、Markdown区块</p><p>Markdown 区块引用是在段落开头使用 &gt; 符号 ，然后后面紧跟一个空格符号</p><blockquote><p>区块的嵌套</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">&gt; 最外层<br>&gt; &gt; 第一层嵌套<br>&gt; &gt; &gt; 第二层嵌套<br></code></pre></td></tr></table></figure><blockquote><p>区块中使用列表</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">&gt; 区块中使用列表<br>&gt; 1. 第一项<br>&gt; 2. 第二项<br>&gt; + 第一项<br>&gt; + 第二项<br>&gt; + 第三项<br></code></pre></td></tr></table></figure><blockquote><p>列表中使用区块</p></blockquote><p>如果要在列表项目内放进区块，那么就需要在 &gt; 前添加四个空格的缩进</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">* 第一项<br>    &gt; vuejs<br>    &gt; JavaScript框架<br>* 第二项<br></code></pre></td></tr></table></figure><p>5、Markdown链接和图片</p><blockquote><p>链接</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">[链接名称](链接地址)<br><br>或者<br><br>&lt;链接地址&gt;<br></code></pre></td></tr></table></figure><blockquote><p>图片</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">![alt 属性文本](图片地址)<br><br>![alt 属性文本](图片地址 &quot;可选标题&quot;)<br><br>![RUNOOB 图标](http://static.runoob.com/images/runoob-logo.png)<br><br>![RUNOOB 图标](http://static.runoob.com/images/runoob-logo.png &quot;RUNOOB&quot;)<br></code></pre></td></tr></table></figure><p>6、Markdown表格</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">|  表头   | 表头  |<br>|  ----  | ----  |<br>| 单元格  | 单元格 |<br>| 单元格  | 单元格 |<br></code></pre></td></tr></table></figure><p>我们可以设置表格的对齐方式：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">-: 设置内容和标题栏居右对齐。<br><br>:- 设置内容和标题栏居左对齐。<br><br>:-: 设置内容和标题栏居中对齐。<br></code></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> markdown </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>6、Vue实现模糊搜索</title>
      <link href="/2019/11/13/6-mohu-search/"/>
      <url>/2019/11/13/6-mohu-search/</url>
      
        <content type="html"><![CDATA[<p>利用computed计算属性实现模糊搜索</p><span id="more"></span><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;app&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">placeholder</span>=<span class="hljs-string">&quot;搜索&quot;</span> <span class="hljs-attr">v-model</span>=<span class="hljs-string">&quot;sousuo&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">table</span> <span class="hljs-attr">border</span>=<span class="hljs-string">&quot;1&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">th</span>&gt;</span>编号<span class="hljs-tag">&lt;/<span class="hljs-name">th</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">th</span>&gt;</span>英雄<span class="hljs-tag">&lt;/<span class="hljs-name">th</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">th</span>&gt;</span>技能<span class="hljs-tag">&lt;/<span class="hljs-name">th</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">tr</span> <span class="hljs-attr">v-for</span>=<span class="hljs-string">&quot;(item,index) in sousuo1()&quot;</span> <span class="hljs-attr">:key</span>=<span class="hljs-string">&quot;item.id&quot;</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>&#123;&#123;item.id&#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>&#123;&#123;item.name&#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>&#123;&#123;item.jn&#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">table</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></td></tr></table></figure><p>利用computed计算属性</p><details><summary>点我展示代码</summary><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> app = <span class="hljs-keyword">new</span> Vue(&#123;<br>  <span class="hljs-attr">el</span>: <span class="hljs-string">&#x27;#app&#x27;</span>,<br>  <span class="hljs-attr">data</span>: &#123;<br>    <span class="hljs-attr">sousuo</span>: <span class="hljs-string">&#x27;&#x27;</span>,<br>    <span class="hljs-attr">list</span>: [&#123;<br>        <span class="hljs-string">&quot;id&quot;</span>: <span class="hljs-number">1</span>,<br>        <span class="hljs-string">&quot;name&quot;</span>: <span class="hljs-string">&quot;艾希&quot;</span>,<br>        <span class="hljs-string">&quot;jn&quot;</span>: <span class="hljs-string">&quot;射箭&quot;</span><br>      &#125;, &#123;<br>        <span class="hljs-string">&quot;id&quot;</span>: <span class="hljs-number">2</span>,<br>        <span class="hljs-string">&quot;name&quot;</span>: <span class="hljs-string">&quot;狐狸&quot;</span>,<br>        <span class="hljs-string">&quot;jn&quot;</span>: <span class="hljs-string">&quot;魅惑&quot;</span><br>      &#125;, &#123;<br>        <span class="hljs-string">&quot;id&quot;</span>: <span class="hljs-number">3</span>,<br>        <span class="hljs-string">&quot;name&quot;</span>: <span class="hljs-string">&quot;猴子&quot;</span>,<br>        <span class="hljs-string">&quot;jn&quot;</span>: <span class="hljs-string">&quot;棍子&quot;</span><br>      &#125;, &#123;<br>        <span class="hljs-string">&quot;id&quot;</span>: <span class="hljs-number">4</span>,<br>        <span class="hljs-string">&quot;name&quot;</span>: <span class="hljs-string">&quot;盖伦&quot;</span>,<br>        <span class="hljs-string">&quot;jn&quot;</span>: <span class="hljs-string">&quot;大宝剑&quot;</span><br>      &#125;, &#123;<br>        <span class="hljs-string">&quot;id&quot;</span>: <span class="hljs-number">5</span>,<br>        <span class="hljs-string">&quot;name&quot;</span>: <span class="hljs-string">&quot;德邦&quot;</span>,<br>        <span class="hljs-string">&quot;jn&quot;</span>: <span class="hljs-string">&quot;尖枪&quot;</span><br>      &#125;, &#123;<br>        <span class="hljs-string">&quot;id&quot;</span>: <span class="hljs-number">6</span>,<br>        <span class="hljs-string">&quot;name&quot;</span>: <span class="hljs-string">&quot;皇子&quot;</span>,<br>        <span class="hljs-string">&quot;jn&quot;</span>: <span class="hljs-string">&quot;旗子&quot;</span><br>      &#125;,<br><br>    ]<br>  &#125;,<br>  <span class="hljs-attr">computed</span>: &#123; <span class="hljs-comment">//设置计算属性</span><br>    <span class="hljs-function"><span class="hljs-title">Search</span>(<span class="hljs-params"></span>)</span> &#123;<br>      <span class="hljs-keyword">if</span> (<span class="hljs-built_in">this</span>.sousuo) &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>.list.filter(<span class="hljs-function">(<span class="hljs-params">value</span>) =&gt;</span> &#123; <span class="hljs-comment">//过滤数组元素  this.list就是上面的那个死数据</span><br>          <span class="hljs-keyword">return</span> value.name.includes(<span class="hljs-built_in">this</span>.sousuo); <span class="hljs-comment">// 查看value.name里面包含不包含输入的字体  </span><br>        &#125;); <span class="hljs-comment">//this.sousuo跟上面的输入框是双重绑定</span><br>      &#125;<br>    &#125;<br>  &#125;,<br>  <span class="hljs-attr">methods</span>: &#123;<br>    <span class="hljs-function"><span class="hljs-title">sousuo1</span>(<span class="hljs-params"></span>)</span> &#123;<br>      <span class="hljs-keyword">if</span> (!<span class="hljs-built_in">this</span>.sousuo) &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>.list;<br>      &#125;<br>      <span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>.Search<br>    &#125;<br>  &#125;,<br>&#125;)<br></code></pre></td></tr></table></figure></details>]]></content>
      
      
      
        <tags>
            
            <tag> dev </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>5、Vue2基础知识</title>
      <link href="/2019/09/26/5-vue-simple/"/>
      <url>/2019/09/26/5-vue-simple/</url>
      
        <content type="html"><![CDATA[<p>Vue基础知识点，包括常用指令、计算属性、侦听属性等。</p><span id="more"></span><h2 id="Vuejs响应式原理"><a href="#Vuejs响应式原理" class="headerlink" title="Vuejs响应式原理"></a>Vuejs响应式原理</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">编译组件：对特殊标记的部分（比如双大括号部分）进行替换为相应的数据值。<br>收集依赖：对于编译阶段依赖的数据进行监听（这个都是通过 watcher 对象实现的）<br>通知更新：当步骤2中监听的数据发生变化时，会通知 watcher 进行重新计算，触发关联视图更新。<br></code></pre></td></tr></table></figure><h2 id="vue优点"><a href="#vue优点" class="headerlink" title="vue优点"></a>vue优点</h2><p>轻量级框架：只关注视图层，是一个构建数据的视图集合，大小只有几十kb；</p><p>简单易学：国人开发，中文文档，不存在语言障碍 ，易于理解和学习；</p><p>双向数据绑定：保留了angular的特点，在数据操作方面更为简单；</p><p>组件化：保留了react的优点，实现了html的封装和重用，在构建单页面应用方面有着独特的优势；</p><p>视图，数据，结构分离：使数据的更改更为简单，不需要进行逻辑代码的修改，只需要操作数据就能完成相关操作；</p><p>虚拟DOM：dom操作是非常耗费性能的，不再使用原生的dom操作节点，极大解放dom操作，但具体操作的还是dom不过是换了另一种方式；</p><p>运行速度更快: 相比较与react而言，同样是操作虚拟dom，就性能而言，vue存在很大的优势。</p><h2 id="vue生命周期"><a href="#vue生命周期" class="headerlink" title="vue生命周期"></a>vue生命周期</h2><p>在beforeCreate阶段，vue实例的挂载元素el和数据对象data都为undefined，还未初始化。在created阶段，vue实例的数据对象data有了，el和数据对象data都为undefined，还未初始化。</p><p>载入前/后：在beforeMount阶段，vue实例的$el和data都初始化了，但还是挂载之前为虚拟的dom节点，data.message还未替换。在mounted阶段，vue实例挂载完成，data.message成功渲染。</p><p>更新前/后：当data变化时，会触发beforeUpdate和updated方法</p><p>销毁前/后：在执行destroy方法后，对data的改变不会再触发周期函数，说明此时vue实例已经解除了事件监听以及和dom的绑定，但是dom结构依然存在</p><h2 id="vue组件中data必须是一个函数？"><a href="#vue组件中data必须是一个函数？" class="headerlink" title="vue组件中data必须是一个函数？"></a>vue组件中data必须是一个函数？</h2><p>官网上是这样写的：</p><blockquote><p>一个组件的 data 选项必须是一个函数，因此每个实例可以维护一份被返回对象的独立的拷贝，如果 Vue 没有这条规则，可能会影响到其它所有实例。</p></blockquote><p>当创建Vue实例时，data必须声明为返回一个初始数据对象的函数，因为组件可能被用来创建多个实例。如果 data 仍然是一个纯粹的对象，则所有的实例将共享引用同一个数据对象！通过提供 data 函数，每次创建一个新实例后，我们能够调用 data 函数，从而返回初始数据的一个全新副本数据对象。</p><h2 id="v-if和v-show有什么区别？"><a href="#v-if和v-show有什么区别？" class="headerlink" title="v-if和v-show有什么区别？"></a>v-if和v-show有什么区别？</h2><p>v-if和v-show看起来似乎差不多，当条件不成立时，其所对应的标签元素都不可见，但是这两个选项是有区别的:</p><p>1、v-if在条件切换时，会对标签进行适当的创建和销毁，而v-show则仅在初始化时加载一次，因此v-if的开销相对来说会比v-show大。</p><p>2、v-if是惰性的，只有当条件为真时才会真正渲染标签；如果初始条件不为真，则v-if不会去渲染标签。v-show则无论初始条件是否成立，都会渲染标签，它仅仅做的只是简单的CSS切换。</p><h2 id="computed和watch的区别"><a href="#computed和watch的区别" class="headerlink" title="computed和watch的区别"></a>computed和watch的区别</h2><p>计算属性computed：</p><p>支持缓存，只有依赖数据发生改变，才会重新进行计算不支持异步，当computed内有异步操作时无效，无法监听数据的变化computed 属性值会默认走缓存，计算属性是基于它们的响应式依赖进行缓存的，也就是基于data中声明过或者父组件传递的props中的数据通过计算得到的值如果一个属性是由其他属性计算而来的，这个属性依赖其他属性，是一个多对一或者一对一，一般用computed如果computed属性属性值是函数，那么默认会走get方法；函数的返回值就是属性的属性值；在computed中的，属性都有一个get和一个set方法，当数据变化时，调用set方法。</p><p>侦听属性watch：</p><p>不支持缓存，数据变，直接会触发相应的操作；watch支持异步；监听的函数接收两个参数，第一个参数是最新的值；第二个参数是输入之前的值；当一个属性发生变化时，需要执行对应的操作；一对多；监听数据必须是data中声明过或者父组件传递过来的props中的数据，当数据变化时，触发其他操作，函数有两个参数：<br>immediate：组件加载立即触发回调函数执行</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs js">watch: &#123;<br>  <span class="hljs-attr">firstName</span>: &#123;<br>    <span class="hljs-function"><span class="hljs-title">handler</span>(<span class="hljs-params">newName, oldName</span>)</span> &#123;<br>      <span class="hljs-built_in">this</span>.fullName = newName + <span class="hljs-string">&#x27; &#x27;</span> + <span class="hljs-built_in">this</span>.lastName;<br>    &#125;,<br>    <span class="hljs-comment">// 代表在wacth里声明了firstName这个方法之后立即执行handler方法</span><br>    <span class="hljs-attr">immediate</span>: <span class="hljs-literal">true</span><br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>deep: deep的意思就是深入观察，监听器会一层层的往下遍历，给对象的所有属性都加上这个监听器，但是这样性能开销就会非常大了，任何修改obj里面任何一个属性都会触发这个监听器里的 handler</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs js">watch: &#123;<br>  <span class="hljs-attr">obj</span>: &#123;<br>    <span class="hljs-function"><span class="hljs-title">handler</span>(<span class="hljs-params">newName, oldName</span>)</span> &#123;<br>      <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;obj.a changed&#x27;</span>);<br>    &#125;,<br>    <span class="hljs-attr">immediate</span>: <span class="hljs-literal">true</span>,<br>    <span class="hljs-attr">deep</span>: <span class="hljs-literal">true</span><br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>优化：我们可以使用字符串的形式监听</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs js">watch: &#123;<br>  <span class="hljs-string">&#x27;obj.a&#x27;</span>: &#123;<br>    <span class="hljs-function"><span class="hljs-title">handler</span>(<span class="hljs-params">newName, oldName</span>)</span> &#123;<br>      <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;obj.a changed&#x27;</span>);<br>    &#125;,<br>    <span class="hljs-attr">immediate</span>: <span class="hljs-literal">true</span>,<br>    <span class="hljs-comment">// deep: true</span><br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>这样Vue.js才会一层一层解析下去，直到遇到属性a，然后才给a设置监听函数。</p><h2 id="nextTick是什么？"><a href="#nextTick是什么？" class="headerlink" title="$nextTick是什么？"></a>$nextTick是什么？</h2><p>vue实现响应式并不是数据发生变化后dom立即变化，而是按照一定的策略来进行dom更新。<br>nextTick 是在下次 DOM 更新循环结束之后执行延迟回调，在修改数据之后使用nextTick，则可以在回调中获取更新后的 DOM</p><h2 id="v-for-key的作用"><a href="#v-for-key的作用" class="headerlink" title="v-for key的作用"></a>v-for key的作用</h2><p>当Vue用 v-for 正在更新已渲染过的元素列表是，它默认用“就地复用”策略。如果数据项的顺序被改变，Vue将不是移动DOM元素来匹配数据项的改变，而是简单复用此处每个元素，并且确保它在特定索引下显示已被渲染过的每个元素。<br>为了给Vue一个提示，以便它能跟踪每个节点的身份，从而重用和重新排序现有元素，你需要为每项提供一个唯一 key 属性。key属性的类型只能为 string或者number类型。</p><blockquote><p>key 的特殊属性主要用在Vue的虚拟DOM算法，在新旧nodes对比时辨识VNodes。如果不使用 key，Vue会使用一种最大限度减少动态元素并且尽可能的尝试修复/再利用相同类型元素的算法。使用key，它会基于key的变化重新排列元素顺序，并且会移除 key 不存在的元素。</p></blockquote><p>v-for提升性能的原因:</p><p>key相同时，两个VNode会相同，可以避免不必要的DOM更新；而且在diff内部，也会根据key来跟踪VNode。</p><h2 id="双向数据绑定原理是什么？"><a href="#双向数据绑定原理是什么？" class="headerlink" title="双向数据绑定原理是什么？"></a>双向数据绑定原理是什么？</h2><blockquote><p>vue.js 是采用数据劫持结合发布者-订阅者模式的方式，通过Object.defineProperty()来劫持各个属性的setter，getter，在数据变动时发布消息给订阅者，触发相应的监听回调。</p></blockquote><p>主要分为以下几个步骤：</p><p>1、需要observe的数据对象进行递归遍历，包括子属性对象的属性，都加上setter和getter这样的话，给这个对象的某个值赋值，就会触发setter，那么就能监听到了数据变化</p><p>2、compile解析模板指令，将模板中的变量替换成数据，然后初始化渲染页面视图，并将每个指令对应的节点绑定更新函数，添加监听数据的订阅者，一旦数据有变动，收到通知，更新视图</p><p>3、Watcher订阅者是Observer和Compile之间通信的桥梁，主要做的事情是:<br>①在自身实例化时往属性订阅器(dep)里面添加自己<br>②自身必须有一个update()方法<br>③待属性变动dep.notice()通知时，能调用自身的update()方法，并触发Compile中绑定的回调，则功成身退。</p><p>4、MVVM作为数据绑定的入口，整合Observer、Compile和Watcher三者，通过Observer来监听自己的model数据变化，通过Compile来解析编译模板指令，最终利用Watcher搭起Observer和Compile之间的通信桥梁，达到数据变化 -&gt; 视图更新；视图交互变化(input) -&gt; 数据model变更的双向绑定效果。</p><h2 id="vue-router路由页面管理"><a href="#vue-router路由页面管理" class="headerlink" title="vue-router路由页面管理"></a>vue-router路由页面管理</h2><blockquote><p>Vue Router 是 Vue.js 官方的路由管理器。它和 Vue.js 的核心深度集成，让构建单页面应用变得易如反掌。</p></blockquote><p>包含的功能有：</p><p>1、嵌套的路由/视图表</p><p>2、模块化的、基于组件的路由配置</p><p>3、路由参数、查询、通配符</p><p>4、基于 Vue.js 过渡系统的视图过渡效果</p><p>5、细粒度的导航控制</p><p>6、带有自动激活的 CSS class 的链接</p><p>7、HTML5 历史模式或 hash 模式，在 IE9 中自动降级</p><p>8、自定义的滚动条行为</p><blockquote><p>1、动态路由匹配</p></blockquote><p>例如：对不同ID的用户，使用同一个组件来渲染。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> User = &#123;<br>  <span class="hljs-attr">template</span>: <span class="hljs-string">&quot;&lt;div&gt;User&lt;/div&gt;&quot;</span><br>&#125;<br><span class="hljs-keyword">const</span> router = <span class="hljs-keyword">new</span> VueRouter(&#123;<br>  <span class="hljs-attr">routes</span>: [<br>    <span class="hljs-comment">// 动态路径参数 以冒号开头</span><br>    &#123; <span class="hljs-attr">path</span>: <span class="hljs-string">&#x27;/user/:id&#x27;</span>, <span class="hljs-attr">component</span>: User &#125;<br>  ]<br>&#125;)<br></code></pre></td></tr></table></figure><p>这样/user/foo 和 /user/bar 都将映射到相同的路由User。</p><p>一个“路径参数”使用冒号 : 标记。当匹配到一个路由时，参数值会被设置到 this.$route.params，可以在每个组件内使用。于是，我们可以更新 User 的模板，输出当前用户的 ID：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> User = &#123;<br>  <span class="hljs-attr">template</span>: <span class="hljs-string">&#x27;&lt;div&gt;User &#123;&#123; $route.params.id &#125;&#125;&lt;/div&gt;&#x27;</span><br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>2、编程式的导航<br>router.push({name:””,params:{}})</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs js">（<span class="hljs-number">1</span>）<span class="hljs-built_in">this</span>.$router.push<br><span class="hljs-comment">// 带参数</span><br><span class="hljs-built_in">this</span>.$router.push(&#123;<br>  <span class="hljs-attr">name</span>:<span class="hljs-string">&quot;User&quot;</span>,<br>  <span class="hljs-attr">params</span>:&#123;<br>    <span class="hljs-attr">userId</span>:<span class="hljs-string">&quot;123&quot;</span><br>  &#125;<br>&#125;)<br></code></pre></td></tr></table></figure><p>router.push({path:””,query:””})</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs js">(<span class="hljs-number">2</span>) <span class="hljs-built_in">this</span>.$router.push(&#123;<br>  <span class="hljs-attr">path</span>:<span class="hljs-string">&quot;/user&quot;</span>,<br>  <span class="hljs-attr">query</span>:&#123;<br>    <span class="hljs-attr">plan</span>:<span class="hljs-string">&quot;private&quot;</span><br>  &#125;<br>&#125;)<br></code></pre></td></tr></table></figure><p>router.replace()使用方法跟router.push()很像，不会向history添加新纪录，替换掉当前的history记录。<br>router.go()在history记录中向前或者向后多少步。正数为向前多少步，负数为向后多少步</p><blockquote><p>3、滚动行为</p></blockquote><p>使用前端路由，当切换到新路由时，想要页面滚到顶部，或者是保持原先的滚动位置，就像重新加载页面那样。 vue-router 能做到，而且更好，它让你可以自定义路由切换时页面如何滚动。</p><blockquote><p>注意：这个功能只在支持 history.pushState 的浏览器中可用。</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs js">scrollBehavior (to, <span class="hljs-keyword">from</span>, savedPosition) &#123;<br>  <span class="hljs-keyword">if</span> (savedPosition) &#123;<br>    <span class="hljs-keyword">return</span> savedPosition<br>  &#125; <span class="hljs-keyword">else</span> &#123;<br>    <span class="hljs-keyword">return</span> &#123; <span class="hljs-attr">x</span>: <span class="hljs-number">0</span>, <span class="hljs-attr">y</span>: <span class="hljs-number">0</span> &#125;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>4、路由懒加载</p></blockquote><p>有时候我们想把某个路由下的所有组件都打包在同个异步块 (chunk) 中。只需要使用命名chunk，一个特殊的注释语法来提供chunk name(需要 Webpack &gt; 2.4)。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> Foo = <span class="hljs-function">() =&gt;</span> <span class="hljs-keyword">import</span>(<span class="hljs-comment">/* webpackChunkName: &quot;group-foo&quot; */</span> <span class="hljs-string">&#x27;./Foo.vue&#x27;</span>)<br><span class="hljs-keyword">const</span> Bar = <span class="hljs-function">() =&gt;</span> <span class="hljs-keyword">import</span>(<span class="hljs-comment">/* webpackChunkName: &quot;group-foo&quot; */</span> <span class="hljs-string">&#x27;./Bar.vue&#x27;</span>)<br><span class="hljs-keyword">const</span> Baz = <span class="hljs-function">() =&gt;</span> <span class="hljs-keyword">import</span>(<span class="hljs-comment">/* webpackChunkName: &quot;group-foo&quot; */</span> <span class="hljs-string">&#x27;./Baz.vue&#x27;</span>)<br></code></pre></td></tr></table></figure><h2 id="表单输入控制"><a href="#表单输入控制" class="headerlink" title="表单输入控制"></a>表单输入控制</h2><blockquote><p>表单修饰符：如果是简单的控制输入一定是数字或者去掉用户输入的收尾空白符，可以直接使用 Vue 提供的表单修饰符 .number 和 .trim</p></blockquote><p>1、如果想自动将用户的输入值转为数值类型，可以给 v-model 添加 number 修饰符：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;input v-model.number=&quot;age&quot; type=&quot;number&quot;&gt;<br></code></pre></td></tr></table></figure><p>2、如果要自动过滤用户输入的首尾空白字符，可以给 v-model 添加 trim 修饰符：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;input v-model.trim=&quot;msg&quot;&gt;<br></code></pre></td></tr></table></figure><blockquote><p>change事件:给表单绑定事件，在事件处理中进行表单输入控制</p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">v-model</span>=<span class="hljs-string">&quot;value2&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> @<span class="hljs-attr">change</span>=<span class="hljs-string">&quot;inputChange(value2)&quot;</span> /&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs js">methods: &#123;<br>  <span class="hljs-attr">inputChange</span>: <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">val</span>) </span>&#123;<br>    <span class="hljs-keyword">if</span> (!val) <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;&#x27;</span><br>    val = val.toString()<br>    <span class="hljs-built_in">this</span>.value2 = val.charAt(<span class="hljs-number">0</span>).toUpperCase() + val.slice(<span class="hljs-number">1</span>)<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>filter过滤器</p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">v-model</span>=<span class="hljs-string">&quot;value1&quot;</span>  <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> /&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs js">Vue.filter(<span class="hljs-string">&#x27;capitalize&#x27;</span>, <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">value</span>) </span>&#123;<br>  <span class="hljs-keyword">if</span> (!value) <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;&#x27;</span><br>  value = value.toString()<br>  <span class="hljs-keyword">return</span> value.charAt(<span class="hljs-number">0</span>).toUpperCase() + value.slice(<span class="hljs-number">1</span>)<br>&#125;)<br></code></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs js">watch: &#123;<br>  <span class="hljs-function"><span class="hljs-title">value1</span>(<span class="hljs-params">val</span>)</span> &#123;<br>     <span class="hljs-built_in">this</span>.value1 = <span class="hljs-built_in">this</span>.$options.filters.capitalize(val);<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>指令:声明一个全局指令</p></blockquote><details><summary>点击展示代码</summary><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 只能输入正整数,0-9的数字</span><br>Vue.directive(<span class="hljs-string">&#x27;enterIntNumber&#x27;</span>, &#123;<br>  <span class="hljs-attr">inserted</span>: <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">el</span>) </span>&#123;<br>    <span class="hljs-keyword">let</span> trigger = <span class="hljs-function">(<span class="hljs-params">el, type</span>) =&gt;</span> &#123;<br>      <span class="hljs-keyword">const</span> e = <span class="hljs-built_in">document</span>.createEvent(<span class="hljs-string">&#x27;HTMLEvents&#x27;</span>)<br>      e.initEvent(type, <span class="hljs-literal">true</span>, <span class="hljs-literal">true</span>)<br>      el.dispatchEvent(e)<br>    &#125;<br>    el.addEventListener(<span class="hljs-string">&quot;keyup&quot;</span>, <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">e</span>) </span>&#123;<br>      <span class="hljs-keyword">let</span> input = e.target;<br>      <span class="hljs-keyword">let</span> reg = <span class="hljs-keyword">new</span> <span class="hljs-built_in">RegExp</span>(<span class="hljs-string">&#x27;^\\d&#123;1&#125;\\d*$&#x27;</span>);  <span class="hljs-comment">//正则验证是否是数字</span><br>      <span class="hljs-keyword">let</span> correctReg = <span class="hljs-keyword">new</span> <span class="hljs-built_in">RegExp</span>(<span class="hljs-string">&#x27;\\d&#123;1&#125;\\d*&#x27;</span>);  <span class="hljs-comment">//正则获取是数字的部分</span><br>      <span class="hljs-keyword">let</span> matchRes = input.value.match(reg);<br>      <span class="hljs-keyword">if</span> (matchRes === <span class="hljs-literal">null</span>) &#123;<br>        <span class="hljs-comment">// 若不是纯数字 把纯数字部分用正则获取出来替换掉</span><br>        <span class="hljs-keyword">let</span> correctMatchRes = input.value.match(correctReg);<br>        <span class="hljs-keyword">if</span> (correctMatchRes) &#123;<br>          input.value = correctMatchRes[<span class="hljs-number">0</span>];<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>          input.value = <span class="hljs-string">&quot;&quot;</span>;<br>        &#125;<br>      &#125;<br>      trigger(input, <span class="hljs-string">&#x27;input&#x27;</span>)<br>    &#125;);<br>  &#125;<br>&#125;);<br></code></pre></td></tr></table></figure></details><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-comment">&lt;!--限制输入正整数--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">v-enterIntNumber</span> <span class="hljs-attr">placeholder</span>=<span class="hljs-string">&quot;0&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;number&quot;</span>&gt;</span><br></code></pre></td></tr></table></figure><h1 id="Vue渲染目标元素的6种方法"><a href="#Vue渲染目标元素的6种方法" class="headerlink" title="Vue渲染目标元素的6种方法"></a>Vue渲染目标元素的6种方法</h1><p>1、直接创建Vue实例</p><details><summary>点击展示代码</summary><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>vue<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;app&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>  <br>  <span class="hljs-comment">&lt;!-- 这里直接引入cdn源码 --&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;https://cdn.jsdelivr.net/npm/vue&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript"></span><br><span class="javascript">  <span class="hljs-keyword">var</span> app = <span class="hljs-keyword">new</span> Vue(&#123;</span><br><span class="javascript">    <span class="hljs-attr">el</span>: <span class="hljs-string">&quot;#app&quot;</span>,</span><br><span class="javascript">    <span class="hljs-attr">template</span>: <span class="hljs-string">&quot;&lt;h1&gt;&#123;&#123;message&#125;&#125;&lt;/h1&gt;&quot;</span>,</span><br><span class="javascript">    <span class="hljs-function"><span class="hljs-title">data</span>(<span class="hljs-params"></span>)</span>&#123;</span><br><span class="javascript">      <span class="hljs-keyword">return</span>&#123;</span><br><span class="javascript">        <span class="hljs-attr">message</span>:<span class="hljs-string">&#x27;Hello Vue.js!&#x27;</span></span><br><span class="javascript">      &#125;</span><br><span class="javascript">    &#125;</span><br><span class="javascript">  &#125;);</span><br><span class="javascript">  </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure></details><p>2、Vue.extend</p><blockquote><p>Vue.extend(options) 方式是使用Vue构造器的一个“子类”，其参数同Vue(options)一模一样，唯一的不同是没有 el 属性来指定挂载的DOM元素，所以这里需要通过 $mount() 方法，来手动实现挂载。</p></blockquote><details><summary>点击展示代码</summary><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;app&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript"></span><br><span class="javascript"><span class="hljs-keyword">var</span> app = Vue.extend(&#123;</span><br><span class="javascript">  <span class="hljs-attr">el</span>: <span class="hljs-string">&quot;#app&quot;</span>,</span><br><span class="javascript">  <span class="hljs-attr">template</span>: <span class="hljs-string">&#x27;&lt;h1&gt;&#123;&#123;msg&#125;&#125;&lt;/h1&gt;&#x27;</span>,</span><br><span class="javascript">  <span class="hljs-function"><span class="hljs-title">data</span>(<span class="hljs-params"></span>)</span> &#123;</span><br><span class="javascript">    <span class="hljs-keyword">return</span> &#123;</span><br><span class="javascript">      <span class="hljs-attr">msg</span>: <span class="hljs-string">&#x27;hello extend&#x27;</span></span><br><span class="javascript">    &#125;</span><br><span class="javascript">  &#125;</span><br><span class="javascript">&#125;)</span><br><span class="javascript"><span class="hljs-comment">// 注意这里 Vue.extend 方式是生成了一个 Vue 子类，所以需要 new关键字来重新创建，然后手动挂载。</span></span><br><span class="javascript"><span class="hljs-keyword">new</span> app().$mount(<span class="hljs-string">&#x27;#app&#x27;</span>);</span><br><span class="javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure></details><p>3.Vue.component</p><blockquote><p>Vue.component(id, [definition])方式是注册一个名称为id的全局组件，然后我们可以通过使用该组件来，实现目标元素渲染。其中definition 参数同 Vue.extend 中的参数一模一样，方法一样，需要使用$mount()方法手动挂载。</p></blockquote><details><summary>点击展示代码</summary><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;app&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript"></span><br><span class="javascript"><span class="hljs-comment">// var app = Vue.component(&#x27;hello&#x27;, &#123;</span></span><br><span class="javascript"><span class="hljs-comment">// template:&#x27;&lt;h1&gt;&#123;&#123;msg&#125;&#125;&lt;/h1&gt;&#x27;,</span></span><br><span class="javascript"><span class="hljs-comment">//   data() &#123;</span></span><br><span class="javascript"><span class="hljs-comment">//     return &#123;</span></span><br><span class="javascript"><span class="hljs-comment">//       msg: &#x27;hello component&#x27;</span></span><br><span class="javascript"><span class="hljs-comment">//     &#125;</span></span><br><span class="javascript"><span class="hljs-comment">//   &#125;</span></span><br><span class="javascript"><span class="hljs-comment">// &#125;)</span></span><br><span class="javascript"><span class="hljs-comment">// new app().$mount(&#x27;#app&#x27;)</span></span><br><span class="javascript"><span class="hljs-comment">//1、 注册组件</span></span><br><span class="javascript">Vue.component(<span class="hljs-string">&#x27;hello&#x27;</span>, &#123;</span><br><span class="javascript">  <span class="hljs-attr">template</span>: <span class="hljs-string">&#x27;&lt;h1&gt;&#123;&#123;msg&#125;&#125;&lt;/h1&gt;&#x27;</span>,</span><br><span class="javascript">  <span class="hljs-function"><span class="hljs-title">data</span>(<span class="hljs-params"></span>)</span> &#123;</span><br><span class="javascript">    <span class="hljs-keyword">return</span> &#123;</span><br><span class="javascript">      <span class="hljs-attr">msg</span>: <span class="hljs-string">&#x27;hello component&#x27;</span></span><br><span class="javascript">    &#125;</span><br><span class="javascript">  &#125;</span><br><span class="javascript">&#125;)</span><br><span class="javascript"><span class="hljs-comment">// 2、创建Vue实例</span></span><br><span class="javascript"><span class="hljs-keyword">new</span> Vue(&#123;</span><br><span class="javascript">  <span class="hljs-attr">el</span>: <span class="hljs-string">&quot;#app&quot;</span>,</span><br><span class="javascript">  <span class="hljs-attr">template</span>: <span class="hljs-string">&#x27;&lt;hello /&gt;&#x27;</span></span><br><span class="javascript">&#125;)</span><br><span class="javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><blockquote><p>仅仅注册组件式不够的，我们还要通过创建一个Vue实例，才能使用该组件。</p></blockquote></details><p>4、Vue.directive自定义指令</p><details><summary>点击展示代码</summary><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;app&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">v-hello</span>=<span class="hljs-string">&quot;msg&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript"></span><br><span class="javascript">Vue.directive(<span class="hljs-string">&#x27;hello&#x27;</span>, &#123;</span><br><span class="javascript">  <span class="hljs-attr">bind</span>: <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">el, binding</span>) </span>&#123;</span><br><span class="javascript">    el.innerHTML = <span class="hljs-string">&quot;&lt;h1&gt;&quot;</span> + binding.value + <span class="hljs-string">&quot;&lt;/h1&gt;&quot;</span></span><br><span class="javascript">  &#125;</span><br><span class="javascript">&#125;)</span><br><span class="javascript"><span class="hljs-keyword">new</span> Vue(&#123;</span><br><span class="javascript">  <span class="hljs-attr">el</span>: <span class="hljs-string">&quot;#app&quot;</span>,</span><br><span class="javascript">  <span class="hljs-function"><span class="hljs-title">data</span>(<span class="hljs-params"></span>)</span> &#123;</span><br><span class="javascript">    <span class="hljs-keyword">return</span> &#123;</span><br><span class="javascript">      <span class="hljs-attr">msg</span>: <span class="hljs-string">&quot;hello directive 自定义指令&quot;</span></span><br><span class="javascript">    &#125;</span><br><span class="javascript">  &#125;</span><br><span class="javascript">&#125;)</span><br><span class="javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure></details><p>5、Vue.compile</p><blockquote><p>Vue.compile(template) 参数也就是 template 模板字符串属性，然后通过替换 Vue实例的 render 函数，来实现渲染。</p></blockquote><details><summary>点击展示代码</summary><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;app&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript"></span><br><span class="javascript"><span class="hljs-comment">// 参数就是template模板字符串  然后通过替换Vue实例的render函数来实现渲染</span></span><br><span class="javascript"><span class="hljs-keyword">var</span> tpl = Vue.compile(<span class="hljs-string">&#x27;&lt;h1&gt;&#123;&#123;msg&#125;&#125;&lt;h1&gt;&#x27;</span>)</span><br><span class="javascript"><span class="hljs-keyword">new</span> Vue(&#123;</span><br><span class="javascript">  <span class="hljs-attr">el</span>: <span class="hljs-string">&quot;#app&quot;</span>,</span><br><span class="javascript">  <span class="hljs-function"><span class="hljs-title">data</span>(<span class="hljs-params"></span>)</span> &#123;</span><br><span class="javascript">    <span class="hljs-keyword">return</span> &#123;</span><br><span class="javascript">      <span class="hljs-attr">msg</span>: <span class="hljs-string">&quot;hello,compile&quot;</span></span><br><span class="javascript">    &#125;</span><br><span class="javascript">  &#125;,</span><br><span class="javascript">  <span class="hljs-attr">render</span>: tpl.render</span><br><span class="javascript">&#125;)</span><br><span class="javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure></details><p>6、render</p><blockquote><p>Vue实例在创建的过程中也会调用 render 函数，render 函数默认会传递一个参数,我们可以通过 createElement 来动态创建一个 VNode，以此来渲染目标元素</p></blockquote><details><summary>点击展示代码</summary><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;app&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript"></span><br><span class="javascript"><span class="hljs-keyword">new</span> Vue(&#123;</span><br><span class="javascript">  <span class="hljs-attr">el</span>: <span class="hljs-string">&quot;#app&quot;</span>,</span><br><span class="javascript">  <span class="hljs-function"><span class="hljs-title">data</span>(<span class="hljs-params"></span>)</span> &#123;</span><br><span class="javascript">    <span class="hljs-keyword">return</span> &#123;</span><br><span class="javascript">      <span class="hljs-attr">msg</span>: <span class="hljs-string">&#x27;hello,render&#x27;</span></span><br><span class="javascript">    &#125;</span><br><span class="javascript">  &#125;,</span><br><span class="javascript">  <span class="hljs-attr">render</span>: <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">createElement</span>) </span>&#123;</span><br><span class="javascript">    <span class="hljs-keyword">return</span> createElement(<span class="hljs-string">&#x27;h1&#x27;</span>, <span class="hljs-built_in">this</span>.msg)</span><br><span class="javascript">  &#125;</span><br><span class="javascript">&#125;)</span><br><span class="javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure></details><h1 id="data-computed-watch"><a href="#data-computed-watch" class="headerlink" title="data/computed/watch"></a>data/computed/watch</h1><p>1、data</p><details><summary>点击展示代码</summary><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;app&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">button</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">&quot;addItem&quot;</span>&gt;</span>添加<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">ul</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">li</span> <span class="hljs-attr">v-for</span>=<span class="hljs-string">&quot;(item,index) in list&quot;</span> <span class="hljs-attr">:key</span>=<span class="hljs-string">&quot;index&quot;</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">:href</span>=<span class="hljs-string">&quot;item.url&quot;</span>&gt;</span>&#123;&#123;item.name&#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript"></span><br><span class="javascript"><span class="hljs-keyword">var</span> app = <span class="hljs-keyword">new</span> Vue(&#123;</span><br><span class="javascript">  <span class="hljs-attr">el</span>: <span class="hljs-string">&quot;#app&quot;</span>,</span><br><span class="javascript">  <span class="hljs-function"><span class="hljs-title">data</span>(<span class="hljs-params"></span>)</span> &#123;</span><br><span class="javascript">    <span class="hljs-keyword">return</span> &#123;</span><br><span class="javascript">      <span class="hljs-attr">count</span>: <span class="hljs-number">1</span>,</span><br><span class="javascript">      <span class="hljs-attr">list</span>: [&#123;</span><br><span class="javascript">        <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;vue js&#x27;</span>,</span><br><span class="javascript">        <span class="hljs-attr">url</span>: <span class="hljs-string">&#x27;https://cn.vuejs.org&#x27;</span></span><br><span class="javascript">      &#125;, &#123;</span><br><span class="javascript">        <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;github&#x27;</span>,</span><br><span class="javascript">        <span class="hljs-attr">url</span>: <span class="hljs-string">&#x27;https://github.com&#x27;</span></span><br><span class="javascript">      &#125;, &#123;</span><br><span class="javascript">        <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;blog&#x27;</span>,</span><br><span class="javascript">        <span class="hljs-attr">url</span>: <span class="hljs-string">&#x27;issummer.cn&#x27;</span></span><br><span class="javascript">      &#125;]</span><br><span class="javascript">    &#125;</span><br><span class="javascript">  &#125;,</span><br><span class="javascript">  <span class="hljs-attr">methods</span>: &#123;</span><br><span class="javascript">    <span class="hljs-function"><span class="hljs-title">addItem</span>(<span class="hljs-params"></span>)</span> &#123;</span><br><span class="javascript">      <span class="hljs-built_in">this</span>.count++</span><br><span class="javascript">      <span class="hljs-built_in">this</span>.list.push(&#123;</span><br><span class="javascript">        <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;baidu&#x27;</span> + <span class="hljs-built_in">this</span>.count,</span><br><span class="javascript">        <span class="hljs-attr">url</span>: <span class="hljs-string">&#x27;https://www.baidu.com&#x27;</span></span><br><span class="javascript">      &#125;)</span><br><span class="javascript">    &#125;</span><br><span class="javascript">  &#125;</span><br><span class="javascript">&#125;)</span><br><span class="javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure></details><p>2、computed</p><blockquote><p>computed 中的属性是需要先进行计算，然后再返回想要的数据的。当我们输出某个属性，必须依赖另外一个 data 中的属性来动态计算获得的，此时使用 computed 就非常简单了。</p></blockquote><details><summary>点击展示代码</summary><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;app&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">button</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">&quot;addItem&quot;</span>&gt;</span>添加<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">ul</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">li</span> <span class="hljs-attr">v-for</span>=<span class="hljs-string">&quot;(item,index) in list&quot;</span> <span class="hljs-attr">:key</span>=<span class="hljs-string">&quot;index&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">:href</span>=<span class="hljs-string">&quot;item.url&quot;</span>&gt;</span>&#123;&#123;item.name&#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript"></span><br><span class="javascript"><span class="hljs-keyword">var</span> app = <span class="hljs-keyword">new</span> Vue(&#123;</span><br><span class="javascript">  <span class="hljs-attr">el</span>: <span class="hljs-string">&quot;#app&quot;</span>,</span><br><span class="javascript">  <span class="hljs-function"><span class="hljs-title">data</span>(<span class="hljs-params"></span>)</span> &#123;</span><br><span class="javascript">    <span class="hljs-keyword">return</span> &#123;</span><br><span class="javascript">      <span class="hljs-attr">count</span>: <span class="hljs-number">1</span>,</span><br><span class="javascript">      <span class="hljs-comment">// 这里是后台数据</span></span><br><span class="javascript">      <span class="hljs-attr">requestList</span>: [</span><br><span class="javascript">        <span class="hljs-string">&#x27;vuejs https://cn.vuejs.org&#x27;</span>,</span><br><span class="javascript">        <span class="hljs-string">&#x27;github https://github.com&#x27;</span>,</span><br><span class="javascript">        <span class="hljs-string">&#x27;blog https://issummer.cn&#x27;</span></span><br><span class="javascript">      ]</span><br><span class="javascript">    &#125;</span><br><span class="javascript">  &#125;,</span><br><span class="javascript">  <span class="hljs-attr">computed</span>: &#123;</span><br><span class="javascript">    <span class="hljs-attr">list</span>: <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>&#123;</span><br><span class="javascript">      <span class="hljs-keyword">var</span> list = []</span><br><span class="javascript">      <span class="hljs-built_in">this</span>.requestList.map(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">item, index</span>) </span>&#123;</span><br><span class="javascript">        <span class="hljs-keyword">var</span> tempArr = item.split(<span class="hljs-string">&#x27;-&#x27;</span>)</span><br><span class="javascript">        list.push(&#123;</span><br><span class="javascript">          <span class="hljs-attr">name</span>: tempArr[<span class="hljs-number">0</span>],</span><br><span class="javascript">          <span class="hljs-attr">url</span>: tempArr[<span class="hljs-number">1</span>]</span><br><span class="javascript">        &#125;)</span><br><span class="javascript">      &#125;)</span><br><span class="javascript">      <span class="hljs-keyword">return</span> list</span><br><span class="javascript">    &#125;</span><br><span class="javascript">  &#125;,</span><br><span class="javascript">  <span class="hljs-attr">methods</span>: &#123;</span><br><span class="javascript">    <span class="hljs-function"><span class="hljs-title">addItem</span>(<span class="hljs-params"></span>)</span> &#123;</span><br><span class="javascript">      <span class="hljs-built_in">this</span>.count++</span><br><span class="javascript">      <span class="hljs-built_in">this</span>.requestList.push(<span class="hljs-string">&#x27;blog&#x27;</span> + <span class="hljs-built_in">this</span>.count + <span class="hljs-string">&#x27;issummer.cn&#x27;</span>)</span><br><span class="javascript">    &#125;</span><br><span class="javascript">  &#125;</span><br><span class="javascript">&#125;)</span><br><span class="javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure></details><blockquote><p>计算是可以修改的,计算属性不仅可以定义为一个函数，也可以定义为一个含有 get/set 属性的对象。当我们定义为一个函数是，Vue 内部会默认将这个函数赋值给 get 属性，一般 set 是未定义的。当我们定义 set 属性后，就可以对它进行修改了。</p></blockquote><details><summary>点击展示代码</summary><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;app&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">button</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">&quot;changeName&quot;</span>&gt;</span>改变姓名<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">h2</span>&gt;</span>&#123;&#123; username &#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript"></span><br><span class="javascript"><span class="hljs-keyword">var</span> app = <span class="hljs-keyword">new</span> Vue(&#123;</span><br><span class="javascript">  <span class="hljs-attr">el</span>: <span class="hljs-string">&quot;#app&quot;</span>,</span><br><span class="javascript">  <span class="hljs-function"><span class="hljs-title">data</span>(<span class="hljs-params"></span>)</span> &#123;</span><br><span class="javascript">    <span class="hljs-keyword">return</span> &#123;</span><br><span class="javascript">      <span class="hljs-attr">firstName</span>: <span class="hljs-string">&#x27;Jude&#x27;</span>,</span><br><span class="javascript">      <span class="hljs-attr">lastName</span>: <span class="hljs-string">&#x27;Summer&#x27;</span></span><br><span class="javascript">    &#125;</span><br><span class="javascript">  &#125;,</span><br><span class="javascript">  <span class="hljs-attr">computed</span>: &#123;</span><br><span class="javascript">    <span class="hljs-attr">username</span>: &#123;</span><br><span class="javascript">      <span class="hljs-attr">get</span>: <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>&#123;</span><br><span class="javascript">        <span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>.firstName + <span class="hljs-string">&#x27; &#x27;</span> + <span class="hljs-built_in">this</span>.lastName</span><br><span class="javascript">      &#125;,</span><br><span class="javascript">      <span class="hljs-attr">set</span>: <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">newVal</span>) </span>&#123;</span><br><span class="javascript">        <span class="hljs-keyword">var</span> names = newVal.split(<span class="hljs-string">&#x27; &#x27;</span>);</span><br><span class="javascript">        <span class="hljs-built_in">this</span>.firstName = names[<span class="hljs-number">0</span>];</span><br><span class="javascript">        <span class="hljs-built_in">this</span>.lastName = names[<span class="hljs-number">1</span>];</span><br><span class="javascript">      &#125;</span><br><span class="javascript">    &#125;</span><br><span class="javascript">  &#125;,</span><br><span class="javascript">  <span class="hljs-attr">methods</span>:&#123;</span><br><span class="javascript">  <span class="hljs-function"><span class="hljs-title">changeName</span>(<span class="hljs-params"></span>)</span>&#123;</span><br><span class="javascript">  <span class="hljs-keyword">if</span>(<span class="hljs-built_in">this</span>.username === <span class="hljs-string">&#x27;Jude Summer&#x27;</span>)&#123;</span><br><span class="javascript">  <span class="hljs-built_in">this</span>.username = <span class="hljs-string">&quot;YQ&quot;</span></span><br><span class="javascript">  &#125;<span class="hljs-keyword">else</span>&#123;</span><br><span class="javascript">  <span class="hljs-built_in">this</span>.username = <span class="hljs-string">&#x27;Jude Summer&#x27;</span></span><br><span class="javascript">  &#125;</span><br><span class="javascript">  &#125;</span><br><span class="javascript">  &#125;</span><br><span class="javascript">&#125;)</span><br><span class="javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure></details><p>3、watch侦听器</p><blockquote><p>创建 Vue 应用时，我们还提到过 watch 这个属性，它其实是个对象，键是需要观察的表达式，值是对应的回调函数。值也可以是方法名，或者包含选项的对象。和上面的计算属性类似，他可以监听 值/表达式 的变化来执行回调函数。</p></blockquote><details><summary>点击展示代码</summary><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;app&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">button</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">&quot;changeName&quot;</span>&gt;</span>改变姓名<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">h2</span>&gt;</span>&#123;&#123; username &#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript"></span><br><span class="javascript">    <span class="hljs-keyword">var</span> app = <span class="hljs-keyword">new</span> Vue(&#123;</span><br><span class="javascript">        <span class="hljs-attr">el</span>: <span class="hljs-string">&quot;#app&quot;</span>,</span><br><span class="javascript">        <span class="hljs-function"><span class="hljs-title">data</span>(<span class="hljs-params"></span>)</span> &#123;</span><br><span class="javascript">            <span class="hljs-keyword">return</span> &#123;</span><br><span class="javascript">                <span class="hljs-attr">firstName</span>: <span class="hljs-string">&#x27;Jude&#x27;</span>,</span><br><span class="javascript">                <span class="hljs-attr">lastName</span>: <span class="hljs-string">&#x27;Summer&#x27;</span>,</span><br><span class="javascript">                <span class="hljs-attr">username</span>: <span class="hljs-string">&#x27;Jude Summer&#x27;</span></span><br><span class="javascript">            &#125;</span><br><span class="javascript">        &#125;,</span><br><span class="javascript">        <span class="hljs-attr">watch</span>: &#123;</span><br><span class="javascript">            <span class="hljs-attr">firstName</span>: <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">val, oldVal</span>) </span>&#123;</span><br><span class="javascript">                <span class="hljs-built_in">this</span>.username = val + <span class="hljs-string">&#x27; &#x27;</span> + <span class="hljs-built_in">this</span>.lastName;</span><br><span class="javascript">            &#125;,</span><br><span class="javascript">            <span class="hljs-attr">lastName</span>: <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">val, oldVal</span>) </span>&#123;</span><br><span class="javascript">                <span class="hljs-built_in">this</span>.username = <span class="hljs-built_in">this</span>.firstName + <span class="hljs-string">&#x27; &#x27;</span> + val;</span><br><span class="javascript">            &#125;</span><br><span class="javascript">        &#125;,</span><br><span class="javascript">        <span class="hljs-attr">methods</span>: &#123;</span><br><span class="javascript">            <span class="hljs-function"><span class="hljs-title">changeName</span>(<span class="hljs-params"></span>)</span> &#123;</span><br><span class="javascript">                <span class="hljs-keyword">if</span> (<span class="hljs-built_in">this</span>.username === <span class="hljs-string">&#x27;Jude Summer&#x27;</span>) &#123;</span><br><span class="javascript">                    <span class="hljs-built_in">this</span>.firstName = <span class="hljs-string">&quot;Y&quot;</span>;</span><br><span class="javascript">                    <span class="hljs-built_in">this</span>.lastName = <span class="hljs-string">&quot;Q&quot;</span>;</span><br><span class="javascript">                &#125; <span class="hljs-keyword">else</span> &#123;</span><br><span class="javascript">                    <span class="hljs-built_in">this</span>.firstName = <span class="hljs-string">&quot;Jude&quot;</span>;</span><br><span class="javascript">                    <span class="hljs-built_in">this</span>.lastName = <span class="hljs-string">&quot;Summer&quot;</span>;</span><br><span class="javascript">                &#125;</span><br><span class="javascript">            &#125;</span><br><span class="javascript">        &#125;,</span><br><span class="javascript">    &#125;)</span><br><span class="javascript"></span><br><span class="javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br>// 监听对象属性<br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript"></span><br><span class="javascript">    <span class="hljs-keyword">var</span> app = <span class="hljs-keyword">new</span> Vue(&#123;</span><br><span class="javascript">        <span class="hljs-attr">el</span>: <span class="hljs-string">&quot;#app&quot;</span>,</span><br><span class="javascript">        <span class="hljs-function"><span class="hljs-title">data</span>(<span class="hljs-params"></span>)</span> &#123;</span><br><span class="javascript">            <span class="hljs-keyword">return</span> &#123;</span><br><span class="javascript">                <span class="hljs-attr">userinfo</span>: &#123;</span><br><span class="javascript">                    <span class="hljs-attr">firstName</span>: <span class="hljs-string">&#x27;Jude&#x27;</span>,</span><br><span class="javascript">                    <span class="hljs-attr">lastName</span>: <span class="hljs-string">&#x27;Summer&#x27;</span></span><br><span class="javascript">                &#125;,</span><br><span class="javascript">                <span class="hljs-attr">username</span>: <span class="hljs-string">&quot;Jude Summer&quot;</span></span><br><span class="javascript">            &#125;</span><br><span class="javascript">        &#125;,</span><br><span class="javascript">        <span class="hljs-attr">watch</span>: &#123;</span><br><span class="javascript">            <span class="hljs-comment">// 此时无论我们如何点击按钮，都无法改变 username 的值，因为 watch 侦听器默认只是侦听该对象本身的赋值操作，也就是直接对 this.userinfo 进行赋值操作时的变化，并未对其内部属性进行侦听</span></span><br><span class="javascript">            <span class="hljs-attr">userinfo</span>: <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">val, oldVal</span>) </span>&#123;</span><br><span class="javascript">                <span class="hljs-built_in">this</span>.username = val.firstName + <span class="hljs-string">&#x27; &#x27;</span> + val.lastName;</span><br><span class="javascript">            &#125;</span><br><span class="javascript">        &#125;,</span><br><span class="javascript">        <span class="hljs-attr">methods</span>: &#123;</span><br><span class="javascript">            <span class="hljs-attr">changeName</span>: <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;</span><br><span class="javascript">                <span class="hljs-keyword">if</span> (<span class="hljs-built_in">this</span>.username === <span class="hljs-string">&#x27;Jude Summer&#x27;</span>) &#123;</span><br><span class="javascript">                    <span class="hljs-built_in">this</span>.userinfo.firstName = <span class="hljs-string">&#x27;Y&#x27;</span></span><br><span class="javascript">                    <span class="hljs-built_in">this</span>.userinfo.lastName = <span class="hljs-string">&#x27;Q&#x27;</span></span><br><span class="javascript">                &#125; <span class="hljs-keyword">else</span> &#123;</span><br><span class="javascript">                    <span class="hljs-built_in">this</span>.userinfo.firstName = <span class="hljs-string">&quot;Jude&quot;</span></span><br><span class="javascript">                    <span class="hljs-built_in">this</span>.userinfo.lastName = <span class="hljs-string">&quot;Summer&quot;</span></span><br><span class="javascript">                &#125;</span><br><span class="javascript">            &#125;</span><br><span class="javascript">        &#125;,</span><br><span class="javascript">    &#125;)</span><br><span class="javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br>// 上面的方法是无法修改username的值 因为 watch 侦听器默认只是侦听该对象本身的赋值操作，也就是直接对 this.userinfo 进行赋值操作时的变化，并未对其内部属性进行侦听。实际上对于侦听的值是可以为一个对象的，它还有个 deep 属性，用来设置是否侦听内部属性的变化，而回调函数是通过 handler 来设置的<br> <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript"></span><br><span class="javascript">    <span class="hljs-keyword">var</span> app = <span class="hljs-keyword">new</span> Vue(&#123;</span><br><span class="javascript">        <span class="hljs-attr">el</span>: <span class="hljs-string">&quot;#app&quot;</span>,</span><br><span class="javascript">        <span class="hljs-function"><span class="hljs-title">data</span>(<span class="hljs-params"></span>)</span> &#123;</span><br><span class="javascript">            <span class="hljs-keyword">return</span> &#123;</span><br><span class="javascript">                <span class="hljs-attr">userinfo</span>: &#123;</span><br><span class="javascript">                    <span class="hljs-attr">firstName</span>: <span class="hljs-string">&#x27;Jude&#x27;</span>,</span><br><span class="javascript">                    <span class="hljs-attr">lastName</span>: <span class="hljs-string">&#x27;Summer&#x27;</span></span><br><span class="javascript">                &#125;,</span><br><span class="javascript">                <span class="hljs-attr">username</span>: <span class="hljs-string">&quot;Jude Summer&quot;</span></span><br><span class="javascript">            &#125;</span><br><span class="javascript">        &#125;,</span><br><span class="javascript">        <span class="hljs-attr">watch</span>: &#123;</span><br><span class="javascript">            <span class="hljs-comment">// depp属性用来侦听内部属性变化，回调函数是通过hander来设置</span></span><br><span class="javascript">            <span class="hljs-comment">// 适用于非整体赋值  也就是适用于局部修改属性，这个时候通过设置deep属性为true，来达到侦听目的。</span></span><br><span class="javascript">            <span class="hljs-attr">userinfo</span>: &#123;</span><br><span class="javascript">                <span class="hljs-attr">deep</span>: <span class="hljs-literal">true</span>,</span><br><span class="javascript">                <span class="hljs-attr">handler</span>: <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">val, oldVal</span>) </span>&#123;</span><br><span class="javascript">                    <span class="hljs-built_in">this</span>.username = val.firstName + <span class="hljs-string">&quot; &quot;</span> + val.lastName;</span><br><span class="javascript">                &#125;</span><br><span class="javascript">            &#125;</span><br><span class="javascript">        &#125;,</span><br><span class="javascript">        <span class="hljs-attr">methods</span>: &#123;</span><br><span class="javascript">            <span class="hljs-comment">// 修改名字</span></span><br><span class="javascript">            <span class="hljs-attr">changeName</span>: <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;</span><br><span class="javascript">                <span class="hljs-keyword">if</span> (<span class="hljs-built_in">this</span>.username === <span class="hljs-string">&#x27;Jude Summer&#x27;</span>) &#123;</span><br><span class="javascript">                    <span class="hljs-built_in">this</span>.userinfo.firstName = <span class="hljs-string">&#x27;Y&#x27;</span></span><br><span class="javascript">                    <span class="hljs-built_in">this</span>.userinfo.lastName = <span class="hljs-string">&#x27;Q&#x27;</span></span><br><span class="javascript">                &#125; <span class="hljs-keyword">else</span> &#123;</span><br><span class="javascript">                    <span class="hljs-built_in">this</span>.userinfo.firstName = <span class="hljs-string">&quot;Jude&quot;</span></span><br><span class="javascript">                    <span class="hljs-built_in">this</span>.userinfo.lastName = <span class="hljs-string">&quot;Summer&quot;</span></span><br><span class="javascript">                &#125;</span><br><span class="javascript">            &#125;</span><br><span class="javascript">        &#125;,</span><br><span class="javascript">    &#125;)</span><br><span class="javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br>// 写成对象属性访问表达式的    当侦听对象包含很多属性，而我们只是需要监听其中的一个或某几个属性，这时如果我们通过这种方式侦听所有内部属性的变化，自然就会造成内存的浪费。那么我们可以只侦听单一内部属性的变化<br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript"></span><br><span class="javascript">    <span class="hljs-keyword">var</span> app = <span class="hljs-keyword">new</span> Vue(&#123;</span><br><span class="javascript">        <span class="hljs-attr">el</span>: <span class="hljs-string">&quot;#app&quot;</span>,</span><br><span class="javascript">        <span class="hljs-function"><span class="hljs-title">data</span>(<span class="hljs-params"></span>)</span> &#123;</span><br><span class="javascript">            <span class="hljs-keyword">return</span> &#123;</span><br><span class="javascript">                <span class="hljs-attr">userinfo</span>: &#123;</span><br><span class="javascript">                    <span class="hljs-attr">firstName</span>: <span class="hljs-string">&#x27;Jude&#x27;</span>,</span><br><span class="javascript">                    <span class="hljs-attr">lastName</span>: <span class="hljs-string">&#x27;Summer&#x27;</span></span><br><span class="javascript">                &#125;,</span><br><span class="javascript">                <span class="hljs-attr">username</span>: <span class="hljs-string">&quot;Jude Summer&quot;</span></span><br><span class="javascript">            &#125;</span><br><span class="javascript">        &#125;,</span><br><span class="javascript">        <span class="hljs-attr">watch</span>: &#123;</span><br><span class="javascript">            <span class="hljs-comment">// 侦听对象的某个属性</span></span><br><span class="javascript">            <span class="hljs-string">&#x27;userinfo.lastName&#x27;</span>:<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">val,oldVal</span>)</span>&#123;</span><br><span class="javascript">                <span class="hljs-built_in">this</span>.username = <span class="hljs-built_in">this</span>.userinfo.firstName + <span class="hljs-string">&#x27; &#x27;</span> + val;</span><br><span class="javascript">            &#125;</span><br><span class="javascript">        &#125;,</span><br><span class="javascript">        <span class="hljs-attr">methods</span>: &#123;</span><br><span class="javascript">            <span class="hljs-comment">// 修改名字</span></span><br><span class="javascript">            <span class="hljs-attr">changeName</span>: <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;</span><br><span class="javascript">                <span class="hljs-keyword">if</span> (<span class="hljs-built_in">this</span>.username === <span class="hljs-string">&#x27;Jude Summer&#x27;</span>) &#123;</span><br><span class="javascript">                    <span class="hljs-comment">// this.userinfo.firstName = &#x27;Y&#x27;</span></span><br><span class="javascript">                    <span class="hljs-built_in">this</span>.userinfo.lastName = <span class="hljs-string">&#x27;Q&#x27;</span></span><br><span class="javascript">                &#125; <span class="hljs-keyword">else</span> &#123;</span><br><span class="javascript">                    <span class="hljs-comment">// this.userinfo.firstName = &quot;Jude&quot;</span></span><br><span class="javascript">                    <span class="hljs-built_in">this</span>.userinfo.lastName = <span class="hljs-string">&quot;Summer&quot;</span></span><br><span class="javascript">                &#125;</span><br><span class="javascript">            &#125;</span><br><span class="javascript">        &#125;,</span><br><span class="javascript">    &#125;)</span><br><span class="javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure></details><h1 id="v-on对象语法"><a href="#v-on对象语法" class="headerlink" title="v-on对象语法"></a>v-on对象语法</h1><blockquote><p>绑定事件监听器。事件类型由参数指定。表达式可以是一个方法的名字或一个内联语句，如果没有修饰符也可以省略。</p></blockquote><p>通常的写法：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">button</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">&quot;handleClick&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br></code></pre></td></tr></table></figure><p>对象语法: </p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">v-on</span>=<span class="hljs-string">&quot;&#123; mouseenter: ShowInfo, mouseleave: HideInfo &#125;&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>我是title<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">v-show</span>=<span class="hljs-string">&quot;ShowWrapper&quot;</span>&gt;</span>我是显示的内容！<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></td></tr></table></figure><h1 id="axios的封装"><a href="#axios的封装" class="headerlink" title="axios的封装"></a>axios的封装</h1><h1 id="router-link"><a href="#router-link" class="headerlink" title="router-link"></a>router-link</h1><blockquote><p>有时候，我们需要将router-link渲染成某种标签，例如<code>&lt;li&gt;&lt;/li&gt;</code>使用 tag prop 类指定何种标签，同样它还是会监听点击，触发导航</p></blockquote><p>示例:</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">ul</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;nav-list&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">router-link</span> <span class="hljs-attr">tag</span>=<span class="hljs-string">&quot;li&quot;</span> <span class="hljs-attr">to</span>=<span class="hljs-string">&quot;home&quot;</span>&gt;</span>home<span class="hljs-tag">&lt;/<span class="hljs-name">router-link</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span><br><span class="hljs-comment">&lt;!-- 渲染的结果为 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>home<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br></code></pre></td></tr></table></figure><h1 id="v-slot"><a href="#v-slot" class="headerlink" title="v-slot"></a>v-slot</h1><blockquote><p>可放置在函数参数位置的 JavaScript 表达式 (在支持的环境下可使用解构)。可选，即只需要在为插槽传入 prop 的时候使用。提供具名插槽或需要接收 prop 的插槽。</p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-comment">&lt;!-- 父组件 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">template</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;common-card&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;title&quot;</span>&gt;</span>&#123;&#123; title &#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;value&quot;</span>&gt;</span>&#123;&#123; value &#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;chart&quot;</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">slot</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">slot</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;line&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;total&quot;</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">slot</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;footer&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">slot</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-comment">&lt;!-- 子组件 --&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">common-card</span> <span class="hljs-attr">title</span>=<span class="hljs-string">&quot;今日交易用户数&quot;</span> <span class="hljs-attr">:value</span>=<span class="hljs-string">&quot;1234567890&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">template</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">v-chart</span> <span class="hljs-attr">:options</span>=<span class="hljs-string">&quot;getOptions()&quot;</span> /&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">template</span> <span class="hljs-attr">v-slot:footer</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>退货率<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;emphasis&quot;</span>&gt;</span>12%<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">common-card</span>&gt;</span><br></code></pre></td></tr></table></figure><h1 id="props"><a href="#props" class="headerlink" title="props"></a>props</h1><blockquote><p>props 可以是数组或对象，用于接收来自父组件的数据。props 可以是简单的数组，或者使用对象作为替代，对象允许配置高级选项，如类型检测、自定义验证和设置默认值。</p></blockquote><blockquote><p>常用于父组件与子组件的通信<br>对象语法选项包括:</p></blockquote><p>1、type：原生构造函数的一种：String、Number、Boolean、Array、Object、Date、Function、Symbol、任何自定义构造函数。</p><p>2、default: any 默认值</p><p>3、required:Boolean 该prop是否是必填项</p><p>4、validator: Function 校验函数</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs js">props: &#123;<br>  <span class="hljs-comment">// 检测类型</span><br>  <span class="hljs-attr">title</span>: <span class="hljs-built_in">String</span>,<br>  <span class="hljs-comment">// 检测类型 + 其他验证</span><br>  <span class="hljs-attr">age</span>: &#123;<br>    <span class="hljs-attr">type</span>: <span class="hljs-built_in">Number</span>, <span class="hljs-comment">//类型</span><br>    <span class="hljs-attr">default</span>: <span class="hljs-number">0</span>,<span class="hljs-comment">// 默认值</span><br>    <span class="hljs-attr">required</span>: <span class="hljs-literal">true</span>,<span class="hljs-comment">// 是否是必填项</span><br>    <span class="hljs-comment">// 校验函数</span><br>    <span class="hljs-attr">validator</span>: <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">value</span>) </span>&#123;<br>      <span class="hljs-keyword">return</span> value &gt;= <span class="hljs-number">0</span><br>    &#125;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="mixin-混入"><a href="#mixin-混入" class="headerlink" title="mixin 混入"></a>mixin 混入</h1><blockquote><p>混入 (mixin) 提供了一种非常灵活的方式，来分发 Vue 组件中的可复用功能。一个混入对象可以包含任意组件选项。当组件使用混入对象时，所有混入对象的选项将被“混合”进入该组件本身的选项。</p></blockquote><p>1、实现原理</p><blockquote><p>将用户传入的对象与 Vue 自身的options属性合并，合并后的对象将会覆盖原来的Vue.options。因为 mixin 方法修改了Vue.options属性，之后创建的每个实例都会用到该属性，所以会影响创建的每个实例。</p></blockquote><p>注意：如果用户传入的对象与组件有相同的数据对象，将会发生合并，并且遵循组件数据优先的原则。对于钩子函数来说，如果相同，将会合并为一个数组，所以都会被调用，只是混入对象的钩子会被先调用。值为对象的选项，例如 methods、components 和 directives，将被合并为同一个对象。两个对象键名冲突时，取组件对象的键值对。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// vue源码 vue/src/core/global-api/mixin.js</span><br><span class="hljs-keyword">import</span> &#123; mergeOptions &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;../util/index&#x27;</span><br><br><span class="hljs-keyword">export</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">initMixin</span> (<span class="hljs-params">Vue: GlobalAPI</span>) </span>&#123;<br>  Vue.mixin = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">mixin: <span class="hljs-built_in">Object</span></span>) </span>&#123;<br>    <span class="hljs-built_in">this</span>.options = mergeOptions(<span class="hljs-built_in">this</span>.options, mixin)<br>    <span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span><br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>2、如何理解mixin?</p><p>可以将mixin理解为数组，数组中有单个或者多个mixin，mixin的本质就是js对象，拥有Vue实例的所有属性，例如：data,created,methods等，还可以在mixin中再次嵌套mixin</p><p>注意：在组件中引入的方式为 <code>mixins:[myMixin]</code></p><p>3、mixin的实现</p><blockquote><p>当Vue在实例的时候，会调用mergeOptions函数进行options的合并</p></blockquote><details><summary>点击展示代码</summary><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// vue源码 core/util/options.js</span><br><span class="hljs-keyword">export</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">mergeOptions</span>(<span class="hljs-params"></span></span><br><span class="hljs-params"><span class="hljs-function">  parent: <span class="hljs-built_in">Object</span>,</span></span><br><span class="hljs-params"><span class="hljs-function">  child: <span class="hljs-built_in">Object</span>,</span></span><br><span class="hljs-params"><span class="hljs-function">  vm?: Component</span></span><br><span class="hljs-params"><span class="hljs-function"></span>): <span class="hljs-title">Object</span> </span>&#123;<br>  ...<br>  <span class="hljs-comment">// 如果有 child.extends 递归调用 mergeOptions 实现属性拷贝</span><br>  <span class="hljs-keyword">const</span> extendsFrom = child.extends<br>  <span class="hljs-keyword">if</span> (extendsFrom) &#123;<br>    parent = mergeOptions(parent, extendsFrom, vm)<br>  &#125;<br>  <span class="hljs-comment">// 如果有 child.mixins 递归调用 mergeOptions 实现属性拷贝</span><br>  <span class="hljs-keyword">if</span> (child.mixins) &#123;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> i = <span class="hljs-number">0</span>, l = child.mixins.length; i &lt; l; i++) &#123;<br>      parent = mergeOptions(parent, child.mixins[i], vm)<br>    &#125;<br>  &#125;<br>  <span class="hljs-comment">// 申明 options 空对象，用来保存属性拷贝结果</span><br>  <span class="hljs-keyword">const</span> options = &#123;&#125;<br>  <span class="hljs-keyword">let</span> key<br>  <span class="hljs-comment">// 遍历 parent 对象，调用 mergeField 进行属性拷贝</span><br>  <span class="hljs-keyword">for</span> (key <span class="hljs-keyword">in</span> parent) &#123;<br>    mergeField(key)<br>  &#125;<br>  <span class="hljs-comment">// 遍历 child 对象，调用 mergeField 进行属性拷贝</span><br>  <span class="hljs-keyword">for</span> (key <span class="hljs-keyword">in</span> child) &#123;<br>    <span class="hljs-keyword">if</span> (!hasOwn(parent, key)) &#123;<br>      mergeField(key)<br>    &#125;<br>  &#125;<br>  <span class="hljs-comment">// 属性拷贝实现方法 mergeField 函数接收一个 key，首先会申明 strat 变量，如果 strats[key] 为真，就将 strats[key] 赋值给 strat。</span><br>  <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">mergeField</span>(<span class="hljs-params">key</span>) </span>&#123;<br>    <span class="hljs-comment">// 穿透赋值，默认为 defaultStrat</span><br>    <span class="hljs-keyword">const</span> strat = strats[key] || defaultStrat<br>    options[key] = strat(parent[key], child[key], vm, key)<br>  &#125;<br>  <span class="hljs-keyword">return</span> options<br>&#125;<br></code></pre></td></tr></table></figure></details><blockquote><p>vue 中 mixins 的优先级，component &gt; mixins &gt; extends。</p></blockquote><h1 id="边界处理：inject-provide"><a href="#边界处理：inject-provide" class="headerlink" title="边界处理：inject/provide"></a>边界处理：inject/provide</h1><p>类型：</p><blockquote><p>provide：Object | () =&gt; Object</p></blockquote><blockquote><p>inject：Array<string> | { [key: string]: string | Symbol | Object }</p></blockquote><p>provide和inject需要一起使用，可以允许一个祖先组件向其所有子孙后代注入一个依赖，不管组件的层次有多深，并在其上下游关系成立的时间里始终生效。</p><p>同react的上下文特性相似</p><details><summary>点击展示代码</summary><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 父级组件提供 &#x27;foo&#x27;</span><br><span class="hljs-keyword">var</span> Provider = &#123;<br>  <span class="hljs-attr">provide</span>: &#123;<br>    <span class="hljs-attr">foo</span>: <span class="hljs-string">&#x27;bar&#x27;</span><br>  &#125;,<br>  <span class="hljs-comment">// ...</span><br>&#125;<br><br><span class="hljs-comment">// 子组件注入 &#x27;foo&#x27;</span><br><span class="hljs-keyword">var</span> Child = &#123;<br>  <span class="hljs-attr">inject</span>: [<span class="hljs-string">&#x27;foo&#x27;</span>],<br>  created () &#123;<br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">this</span>.foo) <span class="hljs-comment">// =&gt; &quot;bar&quot;</span><br>  &#125;<br>  <span class="hljs-comment">// ...</span><br>&#125;<br><br></code></pre></td></tr></table></figure></details><h1 id="vuex"><a href="#vuex" class="headerlink" title="vuex"></a>vuex</h1><blockquote><p>Vuex 是一个专为 Vue.js 应用程序开发的状态管理模式。它采用集中式存储管理应用的所有组件的状态，并以相应的规则保证状态以一种可预测的方式发生变化。简单的说，vuex就是一个状态管理器。</p></blockquote><p>开发过程，通常会遇到多个视图依赖同一个状态，不同视图的行为需要变更为同一状态（例如：后台管理系统的侧边栏的收缩功能。）</p><p>Vuex的核心就是store，它就是一个仓库容器，包含了驱动应用的数据源（state），不同于单纯的全局对象，vuex的状态存储是响应式的，当 Vue组件从 store 中读取状态的时候，若 store 中的状态发生变化，那么相应的组件也会相应地得到高效更新。</p><p>不能直接改变 store 中的状态，改变 store 中的状态的唯一途径就是显式地提交 (commit) mutation。这样使得我们可以方便地跟踪每一个状态的变化，从而让我们能够实现一些工具帮助我们更好地了解我们的应用。</p>]]></content>
      
      
      
        <tags>
            
            <tag> vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>4、DOMContentLoaded</title>
      <link href="/2019/08/18/4-DOMContentLoaded/"/>
      <url>/2019/08/18/4-DOMContentLoaded/</url>
      
        <content type="html"><![CDATA[<p>DOMContentLoaded顾名思义就是DOM内容加载完毕。</p><span id="more"></span><p>当初始的 HTML 文档被完全加载和解析完成之后，DOMContentLoaded 事件被触发，而无需等待样式表、图像和子框架的完全加载。另一个不同的事件 load 应该仅用于检测一个完全加载的页面。 这里有一个常见的错误，就是在本应使用 DOMContentLoaded 会更加合适的情况下，却选择使用 load，所以要谨慎。<br>注意：DOMContentLoaded 事件必须等待其所属script之前的样式表加载解析完成才会触发。</p><p>在Vue项目的App.vue中，我们可以这样设置字体。</p><p>1、获取HTML元素；</p><p>2、根据屏幕宽度动态计算fontSize</p><p>3、当fontSize大于50时，设置最大值为50</p><p>4、设置HTML的fontSize属性，使rem生效，1rem = fontSize + “px”</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs js">&lt;script&gt;<br><span class="hljs-comment">// DOMContentLoaded 事件必须等待其所属script之前的样式表加载解析完成才会触发。</span><br>  <span class="hljs-built_in">document</span>.addEventListener(<span class="hljs-string">&#x27;DOMContentLoaded&#x27;</span>, <span class="hljs-function">() =&gt;</span> &#123;<br>    <span class="hljs-comment">// 获取html元素</span><br>    <span class="hljs-keyword">const</span> html = <span class="hljs-built_in">document</span>.querySelector(<span class="hljs-string">&#x27;html&#x27;</span>)<br>    <span class="hljs-comment">// 根据屏幕宽度动态计算fontSize</span><br>    <span class="hljs-keyword">let</span> fontSize = <span class="hljs-built_in">window</span>.innerWidth / <span class="hljs-number">10</span><br>    <span class="hljs-comment">// 当fontSize大于50时，设置最大值为50</span><br>    fontSize = fontSize &gt; <span class="hljs-number">50</span> ? <span class="hljs-number">50</span> : fontSize<br>    <span class="hljs-comment">// 设置html的fontSize属性，使rem生效，1rem = fontSize + &#x27;px&#x27;</span><br>    html.style.fontSize = fontSize + <span class="hljs-string">&#x27;px&#x27;</span><br>  &#125;)<br>&lt;/script&gt;<br></code></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> dev </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>3、如何使用CSS画三角形?</title>
      <link href="/2019/06/20/3-css/"/>
      <url>/2019/06/20/3-css/</url>
      
        <content type="html"><![CDATA[<p>三角形的画法,一般经常使用三角形作为提示框、下拉菜单等功能。</p><span id="more"></span><h2 id="一、CSS-画三角形实现方式"><a href="#一、CSS-画三角形实现方式" class="headerlink" title="一、CSS 画三角形实现方式"></a>一、CSS 画三角形实现方式</h2><p>1、HTML 结构</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;item0&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;item1&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;item2&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;item3&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></td></tr></table></figure><p>2、将类名为 item 的块级元素的 width、height 设置为 0</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-class">.item0</span> &#123;<br>  <span class="hljs-attribute">width</span>: <span class="hljs-number">0</span>;<br>  <span class="hljs-attribute">height</span>: <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>3、将类名为 item 的元素的 3 个 border 的颜色设置为 transparent，箭头指向的对面 border 设置颜色；</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-class">.item0</span> &#123;<br>  <span class="hljs-attribute">width</span>: <span class="hljs-number">0px</span>;<br>  <span class="hljs-attribute">height</span>: <span class="hljs-number">0px</span>;<br>  <span class="hljs-attribute">border-left</span>: <span class="hljs-number">50px</span> solid transparent;<br>  <span class="hljs-attribute">border-right</span>: <span class="hljs-number">50px</span> solid transparent;<br>  <span class="hljs-attribute">border-top</span>: <span class="hljs-number">50px</span> solid transparent;<br>  <span class="hljs-attribute">border-bottom</span>: <span class="hljs-number">80px</span> solid blue;<br>  <span class="hljs-attribute">background</span>: white;<br>&#125;<br></code></pre></td></tr></table></figure><p>上面的为方向向上的三角形<br>4、依次类推可以画出方向向左、右、下的三角形</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-class">.item1</span> &#123;<br>  <span class="hljs-attribute">width</span>: <span class="hljs-number">0px</span>;<br>  <span class="hljs-attribute">height</span>: <span class="hljs-number">0px</span>;<br>  <span class="hljs-attribute">border-left</span>: <span class="hljs-number">50px</span> solid transparent;<br>  <span class="hljs-attribute">border-right</span>: <span class="hljs-number">50px</span> solid transparent;<br>  <span class="hljs-attribute">border-top</span>: <span class="hljs-number">80px</span> solid green;<br>  <span class="hljs-attribute">border-bottom</span>: <span class="hljs-number">50px</span> solid transparent;<br>  <span class="hljs-attribute">background</span>: white;<br>&#125;<br><span class="hljs-selector-class">.item2</span> &#123;<br>  <span class="hljs-attribute">width</span>: <span class="hljs-number">0px</span>;<br>  <span class="hljs-attribute">height</span>: <span class="hljs-number">0px</span>;<br>  <span class="hljs-attribute">border-left</span>: <span class="hljs-number">50px</span> solid transparent;<br>  <span class="hljs-attribute">border-right</span>: <span class="hljs-number">80px</span> solid violet;<br>  <span class="hljs-attribute">border-top</span>: <span class="hljs-number">50px</span> solid transparent;<br>  <span class="hljs-attribute">border-bottom</span>: <span class="hljs-number">50px</span> solid transparent;<br>  <span class="hljs-attribute">background</span>: white;<br>&#125;<br><span class="hljs-selector-class">.item3</span> &#123;<br>  <span class="hljs-attribute">width</span>: <span class="hljs-number">0px</span>;<br>  <span class="hljs-attribute">height</span>: <span class="hljs-number">0px</span>;<br>  <span class="hljs-attribute">border-left</span>: <span class="hljs-number">80px</span> solid purple;<br>  <span class="hljs-attribute">border-right</span>: <span class="hljs-number">50px</span> solid transparent;<br>  <span class="hljs-attribute">border-top</span>: <span class="hljs-number">50px</span> solid transparent;<br>  <span class="hljs-attribute">border-bottom</span>: <span class="hljs-number">50px</span> solid transparent;<br>  <span class="hljs-attribute">background</span>: white;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="二、网页变成灰色的方法："><a href="#二、网页变成灰色的方法：" class="headerlink" title="二、网页变成灰色的方法："></a>二、网页变成灰色的方法：</h2><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-tag">html</span> &#123;<br>  <span class="hljs-attribute">filter</span>: <span class="hljs-built_in">grayscale</span>(<span class="hljs-number">100%</span>);<br>  -webkit-<span class="hljs-attribute">filter</span>: <span class="hljs-built_in">grayscale</span>(<span class="hljs-number">100%</span>);<br>  -moz-<span class="hljs-attribute">filter</span>: <span class="hljs-built_in">grayscale</span>(<span class="hljs-number">100%</span>);<br>  -ms-<span class="hljs-attribute">filter</span>: <span class="hljs-built_in">grayscale</span>(<span class="hljs-number">100%</span>);<br>  -o-<span class="hljs-attribute">filter</span>: <span class="hljs-built_in">grayscale</span>(<span class="hljs-number">100%</span>);<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="三、position-定位"><a href="#三、position-定位" class="headerlink" title="三、position 定位"></a>三、position 定位</h2><blockquote><p>static: 默认值<br>relative: 相对定位 相对于自身原有位置进行偏移，仍处于标准文档流中<br>absolute: 绝对定位 相对于最近的已定位的祖先元素<br>fixed: 固定定位 相对于视窗来定位</p></blockquote><h2 id="四、浮动、清楚浮动"><a href="#四、浮动、清楚浮动" class="headerlink" title="四、浮动、清楚浮动"></a>四、浮动、清楚浮动</h2><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-attribute">display</span>: table;<br><span class="hljs-attribute">content</span>: <span class="hljs-string">&quot;&quot;</span>;<br><span class="hljs-attribute">clear</span>: both;<br></code></pre></td></tr></table></figure><h2 id="一、HTML"><a href="#一、HTML" class="headerlink" title="一、HTML"></a>一、HTML</h2><ul><li><p>新增选择器 document.querySelector、document.querySelectorAll</p></li><li><p>拖拽释放(Drag and drop) API</p></li><li><p>媒体播放的 video 和 audio</p></li><li><p>本地存储 localStorage 和 sessionStorage</p></li><li><p>离线应用 manifest</p></li><li><p>桌面通知 Notifications</p></li><li><p>语意化标签 article、footer、header、nav、section</p></li><li><p>增强表单控件 calendar、date、time、email、url、search</p></li><li><p>地理位置 Geolocation</p></li><li><p>多任务 webworker</p></li><li><p>全双工通信协议 websocket</p><blockquote><p>客户端和服务端双向通信</p></blockquote></li><li><p>历史管理 history</p></li><li><p>跨域资源共享(CORS) Access-Control-Allow-Origin</p></li><li><p>页面可见性改变事件 visibilitychange</p></li><li><p>跨窗口通信 PostMessage</p></li><li><p>Form Data 对象</p></li><li><p>绘画 canvas</p></li></ul><p>HTML 的语义化：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>      <span class="hljs-comment">&lt;!--：页面主体内容。--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">hn</span>&gt;</span>         <span class="hljs-comment">&lt;!--：h1~h6，分级标题，&lt;h1&gt; 与 &lt;title&gt; 协调有利于搜索引擎优化。--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">ul</span>&gt;</span>         <span class="hljs-comment">&lt;!--：无序列表。--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>         <span class="hljs-comment">&lt;!--：有序列表。--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">header</span>&gt;</span>     <span class="hljs-comment">&lt;!--：页眉通常包括网站标志、主导航、全站链接以及搜索框。--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">nav</span>&gt;</span>         <span class="hljs-comment">&lt;!--：标记导航，仅对文档中重要的链接群使用。--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">main</span>&gt;</span>         <span class="hljs-comment">&lt;!--：页面主要内容，一个页面只能使用一次。如果是web应用，则包围其主要功能。--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">article</span>&gt;</span>    <span class="hljs-comment">&lt;!--：定义外部的内容，其中的内容独立于文档的其余部分。--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">section</span>&gt;</span>    <span class="hljs-comment">&lt;!--：定义文档中的节（section、区段）。比如章节、页眉、页脚或文档中的其他部分。--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">aside</span>&gt;</span>         <span class="hljs-comment">&lt;!--：定义其所处内容之外的内容。如侧栏、文章的一组链接、广告、友情链接、相关产品列表等。--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">footer</span>&gt;</span>     <span class="hljs-comment">&lt;!--：页脚，只有当父级是body时，才是整个页面的页脚。--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">small</span>&gt;</span>      <span class="hljs-comment">&lt;!--：呈现小号字体效果，指定细则，输入免责声明、注解、署名、版权。--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">strong</span>&gt;</span>     <span class="hljs-comment">&lt;!--：和 em 标签一样，用于强调文本，但它强调的程度更强一些。--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">em</span>&gt;</span>         <span class="hljs-comment">&lt;!--：将其中的文本表示为强调的内容，表现为斜体。--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">mark</span>&gt;</span>       <span class="hljs-comment">&lt;!--：使用黄色突出显示部分文本。--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">figure</span>&gt;</span>     <span class="hljs-comment">&lt;!--：规定独立的流内容（图像、图表、照片、代码等等）（默认有40px左右margin）。--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">figcaption</span>&gt;</span><span class="hljs-comment">&lt;!--：定义 figure 元素的标题，应该被置于 figure 元素的第一个或最后一个子元素的位置。--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">cite</span>&gt;</span>       <span class="hljs-comment">&lt;!--：表示所包含的文本对某个参考文献的引用，比如书籍或者杂志的标题。--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">blockquoto</span>&gt;</span><span class="hljs-comment">&lt;!--：定义块引用，块引用拥有它们自己的空间。--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">q</span>&gt;</span>          <span class="hljs-comment">&lt;!--：短的引述（跨浏览器问题，尽量避免使用）。--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">time</span>&gt;</span>       <span class="hljs-comment">&lt;!--：datetime属性遵循特定格式，如果忽略此属性，文本内容必须是合法的日期或者时间格式。--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">abbr</span>&gt;</span>       <span class="hljs-comment">&lt;!--：简称或缩写。--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dfn</span>&gt;</span>       <span class="hljs-comment">&lt;!--：定义术语元素，与定义必须紧挨着，可以在描述列表dl元素中使用。--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">address</span>&gt;</span>    <span class="hljs-comment">&lt;!--：作者、相关人士或组织的联系信息（电子邮件地址、指向联系信息页的链接）。--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">del</span>&gt;</span>        <span class="hljs-comment">&lt;!--：移除的内容。--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">ins</span>&gt;</span>        <span class="hljs-comment">&lt;!--：添加的内容。--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">code</span>&gt;</span>       <span class="hljs-comment">&lt;!--：标记代码。--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">meter</span>&gt;</span>      <span class="hljs-comment">&lt;!--：定义已知范围或分数值内的标量测量。（Internet Explorer 不支持 meter 标签）--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">progress</span>&gt;</span>    <span class="hljs-comment">&lt;!--：定义运行中的进度（进程）。--&gt;</span><br><br></code></pre></td></tr></table></figure><p>语义化的优点：</p><blockquote><ul><li>易于用户阅读，样式丢失的时候能让页面呈现清晰的结构。</li><li>有利于 SEO，搜索引擎根据标签来确定上下文和各个关键字的权重。</li><li>方便屏幕阅读器解析，如盲人阅读器根据语义渲染网页</li><li>有利于开发和维护，语义化更具可读性，代码更好维护，与 CSS3 关系更和谐。</li></ul></blockquote><h2 id="二、CSS"><a href="#二、CSS" class="headerlink" title="二、CSS"></a>二、CSS</h2><p>css 的继承：</p><h3 id="无继承性的属性："><a href="#无继承性的属性：" class="headerlink" title="无继承性的属性："></a>无继承性的属性：</h3><p>1、display:规定元素应该生成的框的类型</p><p>2、文本属性：</p><p>​ vertical-align:垂直文本对齐</p><p>​ text-decoration:规定添加到文本的修饰</p><p>​ text-shadow:文本阴影效果</p><p>​ white-space:空白符处理</p><p>​ unicode-bidi:设置文本方向</p><p>3、盒子模型属性：</p><blockquote><p>width、height、margin 、margin-top、margin-right、margin-bottom、margin-left、border、 border-style、border-top-style、border-right-style、border-bottom-style、border-left-style、border-width、border-top-width、border-right-right、border-bottom-width、border-left-width、border-color、border-top-color、border-right-color、border-bottom-color、border-left-color、border-top、border-right、border-bottom、border-left、padding、padding-top、padding-right、padding-bottom、padding-left</p></blockquote><p>4、背景属性：</p><blockquote><p>backgroun、background-color、background-image、background-repeat、background-position、background-attachment</p></blockquote><p>5、定位属性：</p><blockquote><p>float、clear、position、top、right、bottom、left、min-width、min-height、max-width、max-height、overflow、clip、z-index</p></blockquote><p>其他。。。</p><h3 id="有继承性属性"><a href="#有继承性属性" class="headerlink" title="有继承性属性"></a>有继承性属性</h3><p>1、字体系列：</p><blockquote><p>font：组合字体</p><p>font-family：规定元素的字体系列</p><p>font-weight：设置字体的粗细</p><p>font-size：设置字体的尺寸</p><p>font-style：定义字体的风格</p></blockquote><p>2、文本系列属性：</p><blockquote><p>text-indent：文本缩进</p><p>text-align：文本水平对齐</p><p>line-height：行高</p><p>word-spacing：增加或减少单词间的空白（即字间隔）</p><p>letter-spacing：增加或减少字符间的空白（字符间距）</p><p>text-transform：控制文本大小写</p><p>direction：规定文本的书写方向</p><p>color：文本颜色 a 元素除外</p></blockquote><p>3、元素可见性</p><blockquote><p>visibility</p></blockquote><p>其他。。。</p><p>块级元素哪些属性可以继承？</p><blockquote><p>text-indent、text-align、visibility、cursor</p></blockquote><p>盒模型：</p><blockquote><p>标准盒模型：盒子总宽度/高度 =width/height + padding + border + margin。（ 即 width/height 只是 内容高度，不包含 padding 和 border 值 ）<br>IE 盒子模型：盒子总宽度/高度 =width/height + margin = (内容区宽度/高度 + padding + border) + margin。（ 即 width/height 包含了 padding 和 border 值 ）</p></blockquote><p>BFC 是什么？(边距重叠解决方案)</p><blockquote><p>BFC 是 CSS 布局的一个概念，是一块独立的渲染区域，是一个环境，里面的元素不会影响到外部的元素 。<br>父子元素和兄弟元素边距重叠，重叠原则取最大值。空元素的边距重叠是取 margin 与 padding 的最大值。</p></blockquote><p>BFC 原理？</p><blockquote><p>（1）内部的 Box 会在垂直方向，从顶部开始一个接着一个地放置；<br>（2）Box 垂直方向的距离由 margin(外边距)决定，属于同一个 BFC 的两个相邻 Box 的 margin 会发生重叠；<br>（3）每个元素的 margin Box 的左边， 与包含块 border Box 的左边相接触，（对于从左到右的格式化，否则相反）。即使存在浮动也是如此；<br>（4）BFC 在页面上是一个隔离的独立容器，外面的元素不会影响里面的元素，反之亦然。文字环绕效果，设置 float；<br>（5）BFC 的区域不会与 float Box 重叠（清浮动）;<br>（6）计算 BFC 的高度时，浮动元素也参与计算。</p></blockquote><p>CSS 在什么情况下会创建出 BFC？</p><blockquote><p>0、根元素，即 HTML 元素（最大的一个 BFC）<br>1、浮动（float 的值不为 none）<br>2、绝对定位元素（position 的值为 absolute 或 fixed）<br>3、行内块（display 为 inline-block）<br>4、表格单元（display 为 table、table-cell、table-caption、inline-block 等 HTML 表格相关的属性)<br>5、弹性盒（display 为 flex 或 inline-flex）<br>6、默认值。内容不会被修剪，会呈现在元素框之外（overflow 不为 visible）</p></blockquote><p>样式优先级：</p><blockquote><p>!important</p><p>内联 <div style=""></div> 1000</p><p>id 选择器 #content <div id="content"></div> 100</p><p>类选择器（伪类和属性选择器） .content <div class="content"></div> 10</p><p>类型选择器和伪元素选择器 div p <div></div> 1</p><p>通配符（*）、子选择器（&gt;）、相邻选择器(+) 0</p><p>继承的样式没有权值</p></blockquote><p>盒子塌陷</p><blockquote><p>本应该在父盒子内部的元素跑到了外部。</p><p>当父元素没设置足够大小的时候，而子元素设置了浮动的属性，子元素就会跳出父元素的边界（脱离文档流），尤其是当父元素的高度为 auto 时，而父元素中又没有其它非浮动的可见元素时，父盒子的高度就会直接塌陷为零， 我们称这是<strong>CSS 高度塌陷</strong>。</p></blockquote><p>解决盒子塌陷的方法：</p><blockquote><p>1、设置盒子的宽高</p><p>2、给外部的父盒子也添加浮动，让其脱离标准文档流</p><p>3、父盒子添加 overflow 属性</p><p>4、父盒子最下方引入清除浮动块 clear:both</p><p>5、after 伪元素清除浮动</p><p>6、父盒子添加 border</p><p>7、父盒子设置 padding-top</p></blockquote><p>伪类和伪元素的区别</p><blockquote><p>伪类：</p><ul><li>其核⼼就是⽤来选择 DOM 树之外的信息,不能够被普通选择器选择的⽂档之外的元素，⽤来添加⼀些选择器的特殊效果。</li><li>⽐如:hover :active :visited :link :visited :first-child :focus :lang 等</li><li>由于状态的变化是⾮静态的，所以元素达到⼀个特定状态时，它可能得到⼀个伪类的样式；当状态改变时，它⼜会失去这个样式。</li><li>由此可以看出，它的功能和 class 有些类似，但它是基于⽂档之外的抽象，所以叫 伪类。</li></ul><p>伪元素：</p><ul><li>DOM 树没有定义的虚拟元素</li><li>核⼼就是需要创建通常不存在于⽂档中的元素，</li><li>⽐如::before ::after 它选择的是元素指定内容，表示选择元素内容的之前内容或之后内容。</li><li>伪元素控制的内容和元素是没有差别的，但是它本身只是基于元素的抽象，并不存在于⽂档中，所以称为伪元素。⽤于将特殊的效果添加到某些选择器</li></ul></blockquote><p>总结：</p><blockquote><ul><li>伪类和伪元素都是⽤来表示⽂档树以外的”元素”。</li><li>伪类和伪元素分别⽤单冒号:和双冒号::来表示。</li><li>伪类和伪元素的区别，关键点在于如果没有伪元素(或伪类)，</li><li>是否需要添加元素才能达到效果，如果是则是伪元素，反之则是伪类</li><li>伪类和伪元素都不出现在源⽂件和 DOM 树中。也就是说在 html 源⽂件中是看不到伪类和伪元素的。</li><li>伪类其实就是基于普通 DOM 元素⽽产⽣的不同状态，他是 DOM 元素的某⼀特征。</li><li>伪元素能够创建在 DOM 树中不存在的抽象对象，⽽且这些抽象对象是能够访问到的。</li></ul></blockquote><p>行内元素的 margin padding</p><blockquote><ul><li>水平方向：水平方向上，都有效；</li><li>垂直方向：垂直方向上，都无效；（padding-top 和 padding-bottom 会显示出效果，但是高度不会撑开，不会对周围元素有影响）</li></ul></blockquote><p>min-height 和 max-height min-width 和 max-width</p><blockquote><ol><li> max-width 会覆盖 width，即使 width 是行内样式或者设置了 !important。</li><li> min-width 会覆盖 max-width，此规则发生在 min-width 和 max-width 冲突的时候；</li></ol></blockquote><p>布局：</p><h4 id="未知高度元素垂直居中、垂直居中的实现方式有哪些？"><a href="#未知高度元素垂直居中、垂直居中的实现方式有哪些？" class="headerlink" title="未知高度元素垂直居中、垂直居中的实现方式有哪些？"></a>未知高度元素垂直居中、垂直居中的实现方式有哪些？</h4><p>1、绝对定位+css3 transform:translate(-50%,50%)</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-class">.wrap</span> &#123;<br>  <span class="hljs-attribute">position</span>: relative;<br>&#125;<br><span class="hljs-selector-class">.child</span> &#123;<br>  <span class="hljs-attribute">position</span>: absolute;<br>  <span class="hljs-attribute">top</span>: <span class="hljs-number">50%</span>;<br>  <span class="hljs-attribute">left</span>: <span class="hljs-number">50%</span>;<br>  -webkit-<span class="hljs-attribute">transform</span>: <span class="hljs-built_in">translate</span>(-<span class="hljs-number">50%</span>, -<span class="hljs-number">50%</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p>2、css 的 flex 布局</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-class">.wrap</span> &#123;<br>  <span class="hljs-attribute">display</span>: flex;<br>  <span class="hljs-attribute">justify-content</span>: center;<br>&#125;<br><span class="hljs-selector-class">.child</span> &#123;<br>  <span class="hljs-attribute">align-self</span>: center;<br>&#125;<br></code></pre></td></tr></table></figure><p>3、table 布局</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs css">&lt;<span class="hljs-selector-tag">div</span><br>  class=&quot;wrap&quot;<br>  &gt; &lt;<span class="hljs-selector-tag">div</span><br>  class=&quot;child&quot;<br>  &gt; &lt;<span class="hljs-selector-tag">div</span><br>  &gt; sadgsdgasgd&lt;/<span class="hljs-selector-tag">div</span><br>  &gt; &lt;/<span class="hljs-selector-tag">div</span><br>  &gt; &lt;/<span class="hljs-selector-tag">div</span><br>  &gt; <span class="hljs-selector-class">.wrap</span> &#123;<br>  <span class="hljs-attribute">display</span>: table;<br>  <span class="hljs-attribute">text-align</span>: center;<br>&#125;<br><span class="hljs-selector-class">.child</span> &#123;<br>  <span class="hljs-attribute">background</span>: <span class="hljs-number">#ccc</span>;<br>  <span class="hljs-attribute">display</span>: table-cell;<br>  <span class="hljs-attribute">vertical-align</span>: middle;<br>&#125;<br><span class="hljs-selector-class">.child</span> <span class="hljs-selector-tag">div</span> &#123;<br>  <span class="hljs-attribute">width</span>: <span class="hljs-number">300px</span>;<br>  <span class="hljs-attribute">height</span>: <span class="hljs-number">150px</span>;<br>  <span class="hljs-attribute">background</span>: red;<br>  <span class="hljs-attribute">margin</span>: <span class="hljs-number">0</span> auto;<br>&#125;<br></code></pre></td></tr></table></figure><p>图片垂直居中的方法</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><code class="hljs html">// flex<br><span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><span class="css"></span><br><span class="css">  <span class="hljs-selector-tag">body</span> &#123;</span><br><span class="css">    <span class="hljs-attribute">background</span>: <span class="hljs-number">#999</span>;</span><br><span class="css">  &#125;</span><br><span class="css">  <span class="hljs-selector-class">.flexbox</span> &#123;</span><br><span class="css">    <span class="hljs-attribute">width</span>: <span class="hljs-number">300px</span>;</span><br><span class="css">    <span class="hljs-attribute">height</span>: <span class="hljs-number">250px</span>;</span><br><span class="css">    <span class="hljs-attribute">background</span>: <span class="hljs-number">#fff</span>;</span><br><span class="css">    <span class="hljs-attribute">display</span>: flex;</span><br><span class="css">    <span class="hljs-attribute">align-items</span>: center;</span><br><span class="css">  &#125;</span><br><span class="css">  <span class="hljs-selector-class">.flexbox</span> <span class="hljs-selector-tag">img</span> &#123;</span><br><span class="css">    <span class="hljs-attribute">width</span>: <span class="hljs-number">100px</span>;</span><br><span class="css">    <span class="hljs-attribute">height</span>: <span class="hljs-number">100px</span>;</span><br><span class="css">    <span class="hljs-attribute">align-items</span>: center;</span><br><span class="css">  &#125;</span><br><span class="css"></span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;flexbox&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;1.jpg&quot;</span> <span class="hljs-attr">alt</span>=<span class="hljs-string">&quot;&quot;</span> /&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>// 绝对定位<br><span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><span class="css"></span><br><span class="css">  <span class="hljs-selector-tag">body</span> &#123;</span><br><span class="css">    <span class="hljs-attribute">background</span>: <span class="hljs-number">#ccc</span>;</span><br><span class="css">  &#125;</span><br><span class="css">  <span class="hljs-selector-class">.posdiv</span> &#123;</span><br><span class="css">    <span class="hljs-attribute">width</span>: <span class="hljs-number">300px</span>;</span><br><span class="css">    <span class="hljs-attribute">height</span>: <span class="hljs-number">250px</span>;</span><br><span class="css">    <span class="hljs-attribute">background</span>: <span class="hljs-number">#fff</span>;</span><br><span class="css">    <span class="hljs-attribute">position</span>: relative;</span><br><span class="css">    <span class="hljs-attribute">margin</span>: <span class="hljs-number">0</span> auto;</span><br><span class="css">  &#125;</span><br><span class="css">  <span class="hljs-selector-class">.posdiv</span> <span class="hljs-selector-tag">img</span> &#123;</span><br><span class="css">    <span class="hljs-attribute">width</span>: <span class="hljs-number">100px</span>;</span><br><span class="css">    <span class="hljs-attribute">position</span>: absolute;</span><br><span class="css">    <span class="hljs-attribute">top</span>: <span class="hljs-number">50%</span>;</span><br><span class="css">    <span class="hljs-attribute">margin-top</span>: -<span class="hljs-number">50px</span>;</span><br><span class="css">  &#125;</span><br><span class="css"></span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br></code></pre></td></tr></table></figure><p>rem 适配</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs js">&lt;head&gt;<br>  <span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;viewport&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;width=device-width, initial-scale=1, maximum-scale=1, minimum-scale=1&quot;</span>&gt;</span></span><br><span class="xml">  <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="javascript"><span class="xml">    <span class="hljs-keyword">const</span> WIDTH = <span class="hljs-number">750</span> <span class="hljs-comment">//设计稿尺寸</span></span></span><br><span class="javascript"><span class="xml">    <span class="hljs-keyword">const</span> setView = <span class="hljs-function">() =&gt;</span> &#123;</span></span><br><span class="javascript"><span class="xml">      <span class="hljs-built_in">document</span>.documentElement.style.fontSize = (<span class="hljs-number">100</span> * screen.width / WIDTH) + <span class="hljs-string">&#x27;px&#x27;</span></span></span><br><span class="javascript"><span class="xml">    &#125;</span></span><br><span class="javascript"><span class="xml">    <span class="hljs-built_in">window</span>.onorientationchange = setView</span></span><br><span class="javascript"><span class="xml">    setView()</span></span><br><span class="javascript"><span class="xml">  </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span></span><br></code></pre></td></tr></table></figure><p>清除浮动的方法：</p><p>1、clear：both 添加了无意义的标 签，结构化比较差</p><p>2、overflow:hidden 内容增多的时候不会自动换行导致内容被隐藏掉，无法显示出要溢出的元素。</p><p>3、伪元素：after 伪元素清除浮动</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-class">.clearfix</span>:after &#123;<br>  content: <span class="hljs-string">&quot;.&quot;</span>; <span class="hljs-comment">/*尽量不要为空，一般写一个点*/</span><br>  <span class="hljs-attribute">height</span>: <span class="hljs-number">0</span>; <span class="hljs-comment">/*盒子高度为0，看不见*/</span><br>  <span class="hljs-attribute">display</span>: block; <span class="hljs-comment">/*插入伪元素是行内元素，要转化为块级元素*/</span><br>  <span class="hljs-attribute">visibility</span>: hidden; <span class="hljs-comment">/*content有内容，将元素隐藏*/</span><br>  <span class="hljs-attribute">clear</span>: both;<br>&#125;<br><br><span class="hljs-selector-class">.clearfix</span> &#123;<br>  *zoom: <span class="hljs-number">1</span>; <span class="hljs-comment">/*  *只有IE6,7识别 */</span><br>&#125;<br></code></pre></td></tr></table></figure><p>4、after 伪元素空余字符法</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-class">.clearfix</span><span class="hljs-selector-pseudo">::after</span> &#123;<br>  <span class="hljs-attribute">content</span>: <span class="hljs-string">&quot;\200B&quot;</span>; <span class="hljs-comment">/* content:&#x27;\0200&#x27;; 也可以 */</span><br>  <span class="hljs-attribute">display</span>: block;<br>  <span class="hljs-attribute">height</span>: <span class="hljs-number">0</span>;<br>  <span class="hljs-attribute">clear</span>: both;<br>&#125;<br><br><span class="hljs-selector-class">.clearfix</span> &#123;<br>  *zoom: <span class="hljs-number">1</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>5、使用 before 和 after 双伪元素清除浮动</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-class">.clearfix</span>:before,<br>.clearfix:after &#123;<br>  content: <span class="hljs-string">&quot;&quot;</span>;<br>  <span class="hljs-attribute">display</span>: table;<br>&#125;<br><span class="hljs-selector-class">.clearfix</span>:after &#123;<br>  clear: both;<br>&#125;<br><span class="hljs-selector-class">.clearfix</span> &#123;<br>  *zoom: <span class="hljs-number">1</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>px:绝对长度单位</p><p>em:相对长度单位 值不固定，继承父元素的字体大小 相对父元素的大小</p><p>rem：相对长度单位 相对于根元素换算</p>]]></content>
      
      
      
        <tags>
            
            <tag> dev </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2、微信小程序checkbox-group</title>
      <link href="/2019/01/20/2-check-group/"/>
      <url>/2019/01/20/2-check-group/</url>
      
        <content type="html"><![CDATA[<p>checkbox-group多项选择器，内部由多个checkbox组成；<br>属性bindchange   说明checkbox-group中选中项发生改变时触发 change 事件，detail = {value:[选中的checkbox的value的数组]};</p><span id="more"></span><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">checkbox-group</span>  <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;checkbox_group&quot;</span> <span class="hljs-attr">bindchange</span>=<span class="hljs-string">&quot;checkboxChange&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">label</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;checkbox&quot;</span> <span class="hljs-attr">wx:for</span>=<span class="hljs-string">&quot;&#123;&#123;items&#125;&#125;&quot;</span> <span class="hljs-attr">wx:key</span>=<span class="hljs-string">&quot;item&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">checkbox</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;&#123;&#123;item.value&#125;&#125;&quot;</span>  <span class="hljs-attr">checked</span>=<span class="hljs-string">&quot;&#123;&#123;item.checked&#125;&#125;&quot;</span> /&gt;</span><br>&#123;&#123;item.value&#125;&#125;<br><span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">checkbox-group</span>&gt;</span><br></code></pre></td></tr></table></figure><p>每一次修改选中项，都需要一个空数组去存放选中项。</p><details><summary>点我展示代码</summary><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-function"><span class="hljs-title">checkboxChange</span>(<span class="hljs-params">e</span>)</span> &#123;<br>  <span class="hljs-keyword">const</span> items = <span class="hljs-built_in">this</span>.data.items; <br>  <span class="hljs-keyword">const</span> values = e.detail.value;<br>  <span class="hljs-comment">// 设置选中的数组为空  选中的id push到数组里面</span><br>  <span class="hljs-built_in">this</span>.data.vehicle_arr = [];<br>  <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> i = <span class="hljs-number">0</span>, lenI = items.length; i &lt; lenI; ++i) &#123;<br>    items[i].checked = <span class="hljs-literal">false</span> <span class="hljs-comment">// 遍历items，让所有的选中状态都为false</span><br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> j = <span class="hljs-number">0</span>, lenJ = values.length; j &lt; lenJ; ++j) &#123;<br>      <span class="hljs-keyword">if</span> (items[i].value === values[j]) &#123;<br>        items[i].checked = <span class="hljs-literal">true</span>;<br>        <span class="hljs-keyword">const</span> List = items[i].name.toString().split();<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> k <span class="hljs-keyword">in</span> List) &#123;<br>          <span class="hljs-built_in">this</span>.data.vehicle_arr.push(List[k]);<br>        &#125;<br>      &#125;<br>    &#125;<br>  &#125;<br>  <span class="hljs-comment">// 选中的id</span><br>  <span class="hljs-built_in">this</span>.data.unique = [...new <span class="hljs-built_in">Set</span>(<span class="hljs-built_in">this</span>.data.vehicle_arr)];<br>  <span class="hljs-built_in">this</span>.setData(&#123;<br>    <span class="hljs-attr">driverarr</span>: e.detail.value.join(<span class="hljs-string">&quot;,&quot;</span>), <span class="hljs-comment">// 多选的数组</span><br>    items,<br>  &#125;);<br>&#125;,<br></code></pre></td></tr></table></figure></details>]]></content>
      
      
      
        <tags>
            
            <tag> dev </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>1、Hexo常用命令</title>
      <link href="/2019/01/02/1-hello-world/"/>
      <url>/2019/01/02/1-hello-world/</url>
      
        <content type="html"><![CDATA[<p>hexo常用命令</p><span id="more"></span><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="新建文件"><a href="#新建文件" class="headerlink" title="新建文件"></a>新建文件</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js">$ hexo <span class="hljs-keyword">new</span> <span class="hljs-string">&quot;My New Post&quot;</span><br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="启动本地服务"><a href="#启动本地服务" class="headerlink" title="启动本地服务"></a>启动本地服务</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js">$ hexo server<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="生成本地静态文件"><a href="#生成本地静态文件" class="headerlink" title="生成本地静态文件"></a>生成本地静态文件</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js">$ hexo generate<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="发布"><a href="#发布" class="headerlink" title="发布"></a>发布</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo deploy<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p><!-- 打包上传发布命令 --><p>打包发布的命令行可以直接这样写：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">hexo g &amp;&amp; hexo d<br></code></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
